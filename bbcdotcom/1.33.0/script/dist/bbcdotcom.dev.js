/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(1);
	
	var bootstrap = __webpack_require__(140);
	var streamsense = __webpack_require__(146);
	var init = __webpack_require__(147);
	var config = __webpack_require__(148);
	var adverts = __webpack_require__(217);
	var analytics = __webpack_require__(165);
	var analyticsHelper = __webpack_require__(215);
	var Utils = __webpack_require__(141);
	var sections = __webpack_require__(150);
	var locale = __webpack_require__(151);
	var currencyProviders = __webpack_require__(273);
	var addLoadEvent = __webpack_require__(272);
	var api = __webpack_require__(274);
	var objects = __webpack_require__(159);
	var classes = __webpack_require__(153);
	var pubsub = __webpack_require__(161);
	var Krux = __webpack_require__(154);
	var Predicate = __webpack_require__(155);
	var Stats = __webpack_require__(271);
	var Survey = __webpack_require__(152);
	var logger = __webpack_require__(142);
	
	var log = logger('index');
	log.info('Using Webpack');
	
	Object.assign(window.bbcdotcom, {
	    objects: objects,
	    domLoaded: false,
	    addLoadEvent: addLoadEvent,
	    classes: classes,
	    config: config,
	    currencyProviders: currencyProviders,
	    utils: Utils,
	    adverts: adverts,
	    analytics: analytics,
	    analyticsHelper: analyticsHelper,
	    sections: sections,
	    locale: locale,
	    Krux: Krux,
	    pubsub: pubsub,
	    Predicate: Predicate,
	    stats: Stats,
	    survey: Survey,
	    Logger: logger
	});
	
	bootstrap();
	
	window.bbcdotcom.init = init.bind(window.bbcdotcom);
	
	Object.assign(window.bbcdotcom, api);
	
	module.exports = window.bbcdotcom;
	window.ns_ = streamsense;
	window.google_ad_request_done = window.bbcdotcom.adverts.adsenseRenderer.google_ad_request_done;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(2);
	__webpack_require__(98);
	__webpack_require__(51);
	__webpack_require__(101);
	__webpack_require__(105);
	__webpack_require__(106);
	__webpack_require__(126);
	__webpack_require__(128);
	__webpack_require__(135);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(38);
	__webpack_require__(39);
	__webpack_require__(40);
	__webpack_require__(44);
	__webpack_require__(47);
	__webpack_require__(48);
	__webpack_require__(51);
	__webpack_require__(53);
	__webpack_require__(54);
	__webpack_require__(55);
	__webpack_require__(56);
	__webpack_require__(57);
	__webpack_require__(58);
	__webpack_require__(61);
	__webpack_require__(63);
	__webpack_require__(65);
	__webpack_require__(66);
	__webpack_require__(67);
	__webpack_require__(72);
	__webpack_require__(73);
	__webpack_require__(74);
	__webpack_require__(75);
	__webpack_require__(76);
	__webpack_require__(78);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(84);
	__webpack_require__(85);
	__webpack_require__(86);
	__webpack_require__(87);
	__webpack_require__(88);
	__webpack_require__(92);
	__webpack_require__(94);
	__webpack_require__(95);
	module.exports = __webpack_require__(6);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(22)});

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(5)
	  , core      = __webpack_require__(6)
	  , hide      = __webpack_require__(7)
	  , redefine  = __webpack_require__(17)
	  , ctx       = __webpack_require__(20)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 5 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 6 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(8)
	  , createDesc = __webpack_require__(16);
	module.exports = __webpack_require__(12) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(9)
	  , IE8_DOM_DEFINE = __webpack_require__(11)
	  , toPrimitive    = __webpack_require__(15)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(12) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(10);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(12) && !__webpack_require__(13)(function(){
	  return Object.defineProperty(__webpack_require__(14)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(13)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(10)
	  , document = __webpack_require__(5).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(10);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(5)
	  , hide      = __webpack_require__(7)
	  , has       = __webpack_require__(18)
	  , SRC       = __webpack_require__(19)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(6).inspectSource = function(it){
	  return $toString.call(it);
	};
	
	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ },
/* 18 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 19 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(21);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(9)
	  , dPs         = __webpack_require__(23)
	  , enumBugKeys = __webpack_require__(36)
	  , IE_PROTO    = __webpack_require__(34)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(14)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(37).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(8)
	  , anObject = __webpack_require__(9)
	  , getKeys  = __webpack_require__(24);
	
	module.exports = __webpack_require__(12) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(25)
	  , enumBugKeys = __webpack_require__(36);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(18)
	  , toIObject    = __webpack_require__(26)
	  , arrayIndexOf = __webpack_require__(30)(false)
	  , IE_PROTO     = __webpack_require__(34)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(27)
	  , defined = __webpack_require__(29);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(28);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 29 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(26)
	  , toLength  = __webpack_require__(31)
	  , toIndex   = __webpack_require__(33);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(32)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 32 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(32)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(35)('keys')
	  , uid    = __webpack_require__(19);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(5)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 36 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(5).document && document.documentElement;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(12), 'Object', {defineProperty: __webpack_require__(8).f});

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(12), 'Object', {defineProperties: __webpack_require__(23)});

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(26)
	  , $getOwnPropertyDescriptor = __webpack_require__(41).f;
	
	__webpack_require__(43)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(42)
	  , createDesc     = __webpack_require__(16)
	  , toIObject      = __webpack_require__(26)
	  , toPrimitive    = __webpack_require__(15)
	  , has            = __webpack_require__(18)
	  , IE8_DOM_DEFINE = __webpack_require__(11)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(12) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 42 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(4)
	  , core    = __webpack_require__(6)
	  , fails   = __webpack_require__(13);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(45)
	  , $getPrototypeOf = __webpack_require__(46);
	
	__webpack_require__(43)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(29);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(18)
	  , toObject    = __webpack_require__(45)
	  , IE_PROTO    = __webpack_require__(34)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(45)
	  , $keys    = __webpack_require__(24);
	
	__webpack_require__(43)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(43)('getOwnPropertyNames', function(){
	  return __webpack_require__(49).f;
	});

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(26)
	  , gOPN      = __webpack_require__(50).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(25)
	  , hiddenKeys = __webpack_require__(36).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(10)
	  , meta     = __webpack_require__(52).onFreeze;
	
	__webpack_require__(43)('freeze', function($freeze){
	  return function freeze(it){
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(19)('meta')
	  , isObject = __webpack_require__(10)
	  , has      = __webpack_require__(18)
	  , setDesc  = __webpack_require__(8).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(13)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(10)
	  , meta     = __webpack_require__(52).onFreeze;
	
	__webpack_require__(43)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(10)
	  , meta     = __webpack_require__(52).onFreeze;
	
	__webpack_require__(43)('preventExtensions', function($preventExtensions){
	  return function preventExtensions(it){
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(10);
	
	__webpack_require__(43)('isFrozen', function($isFrozen){
	  return function isFrozen(it){
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(10);
	
	__webpack_require__(43)('isSealed', function($isSealed){
	  return function isSealed(it){
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(10);
	
	__webpack_require__(43)('isExtensible', function($isExtensible){
	  return function isExtensible(it){
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(4);
	
	$export($export.P, 'Function', {bind: __webpack_require__(59)});

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction  = __webpack_require__(21)
	  , isObject   = __webpack_require__(10)
	  , invoke     = __webpack_require__(60)
	  , arraySlice = [].slice
	  , factories  = {};
	
	var construct = function(F, len, args){
	  if(!(len in factories)){
	    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};
	
	module.exports = Function.bind || function bind(that /*, args... */){
	  var fn       = aFunction(this)
	    , partArgs = arraySlice.call(arguments, 1);
	  var bound = function(/* args... */){
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if(isObject(fn.prototype))bound.prototype = fn.prototype;
	  return bound;
	};

/***/ },
/* 60 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(4);
	
	$export($export.S, 'Array', {isArray: __webpack_require__(62)});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(28);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export   = __webpack_require__(4)
	  , toIObject = __webpack_require__(26)
	  , arrayJoin = [].join;
	
	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(27) != Object || !__webpack_require__(64)(arrayJoin)), 'Array', {
	  join: function join(separator){
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var fails = __webpack_require__(13);
	
	module.exports = function(method, arg){
	  return !!method && fails(function(){
	    arg ? method.call(null, function(){}, 1) : method.call(null);
	  });
	};

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export    = __webpack_require__(4)
	  , html       = __webpack_require__(37)
	  , cof        = __webpack_require__(28)
	  , toIndex    = __webpack_require__(33)
	  , toLength   = __webpack_require__(31)
	  , arraySlice = [].slice;
	
	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(13)(function(){
	  if(html)arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return arraySlice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export   = __webpack_require__(4)
	  , aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(45)
	  , fails     = __webpack_require__(13)
	  , $sort     = [].sort
	  , test      = [1, 2, 3];
	
	$export($export.P + $export.F * (fails(function(){
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function(){
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(64)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn){
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export  = __webpack_require__(4)
	  , $forEach = __webpack_require__(68)(0)
	  , STRICT   = __webpack_require__(64)([].forEach, true);
	
	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */){
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(20)
	  , IObject  = __webpack_require__(27)
	  , toObject = __webpack_require__(45)
	  , toLength = __webpack_require__(31)
	  , asc      = __webpack_require__(69);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(70);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(10)
	  , isArray  = __webpack_require__(62)
	  , SPECIES  = __webpack_require__(71)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(35)('wks')
	  , uid        = __webpack_require__(19)
	  , Symbol     = __webpack_require__(5).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4)
	  , $map    = __webpack_require__(68)(1);
	
	$export($export.P + $export.F * !__webpack_require__(64)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */){
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4)
	  , $filter = __webpack_require__(68)(2);
	
	$export($export.P + $export.F * !__webpack_require__(64)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */){
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4)
	  , $some   = __webpack_require__(68)(3);
	
	$export($export.P + $export.F * !__webpack_require__(64)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */){
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4)
	  , $every  = __webpack_require__(68)(4);
	
	$export($export.P + $export.F * !__webpack_require__(64)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */){
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4)
	  , $reduce = __webpack_require__(77);
	
	$export($export.P + $export.F * !__webpack_require__(64)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(21)
	  , toObject  = __webpack_require__(45)
	  , IObject   = __webpack_require__(27)
	  , toLength  = __webpack_require__(31);
	
	module.exports = function(that, callbackfn, aLen, memo, isRight){
	  aFunction(callbackfn);
	  var O      = toObject(that)
	    , self   = IObject(O)
	    , length = toLength(O.length)
	    , index  = isRight ? length - 1 : 0
	    , i      = isRight ? -1 : 1;
	  if(aLen < 2)for(;;){
	    if(index in self){
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if(isRight ? index < 0 : length <= index){
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4)
	  , $reduce = __webpack_require__(77);
	
	$export($export.P + $export.F * !__webpack_require__(64)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */){
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(4)
	  , $indexOf      = __webpack_require__(30)(false)
	  , $native       = [].indexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(64)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export       = __webpack_require__(4)
	  , toIObject     = __webpack_require__(26)
	  , toInteger     = __webpack_require__(32)
	  , toLength      = __webpack_require__(31)
	  , $native       = [].lastIndexOf
	  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(64)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
	    // convert -0 to +0
	    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
	    var O      = toIObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
	    if(index < 0)index = length + index;
	    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
	    return -1;
	  }
	});

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(4)
	  , toInteger    = __webpack_require__(32)
	  , aNumberValue = __webpack_require__(82)
	  , repeat       = __webpack_require__(83)
	  , $toFixed     = 1..toFixed
	  , floor        = Math.floor
	  , data         = [0, 0, 0, 0, 0, 0]
	  , ERROR        = 'Number.toFixed: incorrect invocation!'
	  , ZERO         = '0';
	
	var multiply = function(n, c){
	  var i  = -1
	    , c2 = c;
	  while(++i < 6){
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function(n){
	  var i = 6
	    , c = 0;
	  while(--i >= 0){
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function(){
	  var i = 6
	    , s = '';
	  while(--i >= 0){
	    if(s !== '' || i === 0 || data[i] !== 0){
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function(x, n, acc){
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function(x){
	  var n  = 0
	    , x2 = x;
	  while(x2 >= 4096){
	    n += 12;
	    x2 /= 4096;
	  }
	  while(x2 >= 2){
	    n  += 1;
	    x2 /= 2;
	  } return n;
	};
	
	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128..toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(13)(function(){
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits){
	    var x = aNumberValue(this, ERROR)
	      , f = toInteger(fractionDigits)
	      , s = ''
	      , m = ZERO
	      , e, z, j, k;
	    if(f < 0 || f > 20)throw RangeError(ERROR);
	    if(x != x)return 'NaN';
	    if(x <= -1e21 || x >= 1e21)return String(x);
	    if(x < 0){
	      s = '-';
	      x = -x;
	    }
	    if(x > 1e-21){
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if(e > 0){
	        multiply(0, z);
	        j = f;
	        while(j >= 7){
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while(j >= 23){
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if(f > 0){
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(28);
	module.exports = function(it, msg){
	  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
	  return +it;
	};

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(32)
	  , defined   = __webpack_require__(29);
	
	module.exports = function repeat(count){
	  var str = String(defined(this))
	    , res = ''
	    , n   = toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export      = __webpack_require__(4)
	  , $fails       = __webpack_require__(13)
	  , aNumberValue = __webpack_require__(82)
	  , $toPrecision = 1..toPrecision;
	
	$export($export.P + $export.F * ($fails(function(){
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function(){
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision){
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
	  }
	});

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(4);
	
	$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(4)
	  , fails   = __webpack_require__(13)
	  , getTime = Date.prototype.getTime;
	
	var lz = function(num){
	  return num > 9 ? num : '0' + num;
	};
	
	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (fails(function(){
	  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
	}) || !fails(function(){
	  new Date(NaN).toISOString();
	})), 'Date', {
	  toISOString: function toISOString(){
	    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
	    var d = this
	      , y = d.getUTCFullYear()
	      , m = d.getUTCMilliseconds()
	      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	  }
	});

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $export     = __webpack_require__(4)
	  , toObject    = __webpack_require__(45)
	  , toPrimitive = __webpack_require__(15);
	
	$export($export.P + $export.F * __webpack_require__(13)(function(){
	  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
	}), 'Date', {
	  toJSON: function toJSON(key){
	    var O  = toObject(this)
	      , pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var $export   = __webpack_require__(4)
	  , $parseInt = __webpack_require__(89);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(5).parseInt
	  , $trim     = __webpack_require__(90).trim
	  , ws        = __webpack_require__(91)
	  , hex       = /^[\-+]?0[xX]/;
	
	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4)
	  , defined = __webpack_require__(29)
	  , fails   = __webpack_require__(13)
	  , spaces  = __webpack_require__(91)
	  , space   = '[' + spaces + ']'
	  , non     = '\u200b\u0085'
	  , ltrim   = RegExp('^' + space + space + '*')
	  , rtrim   = RegExp(space + space + '*$');
	
	var exporter = function(KEY, exec, ALIAS){
	  var exp   = {};
	  var FORCE = fails(function(){
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if(ALIAS)exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};
	
	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function(string, TYPE){
	  string = String(defined(string));
	  if(TYPE & 1)string = string.replace(ltrim, '');
	  if(TYPE & 2)string = string.replace(rtrim, '');
	  return string;
	};
	
	module.exports = exporter;

/***/ },
/* 91 */
/***/ function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var $export     = __webpack_require__(4)
	  , $parseFloat = __webpack_require__(93);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(5).parseFloat
	  , $trim       = __webpack_require__(90).trim;
	
	module.exports = 1 / $parseFloat(__webpack_require__(91) + '-0') !== -Infinity ? function parseFloat(str){
	  var string = $trim(String(str), 3)
	    , result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(90)('trim', function($trim){
	  return function trim(){
	    return $trim(this, 3);
	  };
	});

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(96);
	var anObject    = __webpack_require__(9)
	  , $flags      = __webpack_require__(97)
	  , DESCRIPTORS = __webpack_require__(12)
	  , TO_STRING   = 'toString'
	  , $toString   = /./[TO_STRING];
	
	var define = function(fn){
	  __webpack_require__(17)(RegExp.prototype, TO_STRING, fn, true);
	};
	
	// 21.2.5.14 RegExp.prototype.toString()
	if(__webpack_require__(13)(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
	  define(function toString(){
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if($toString.name != TO_STRING){
	  define(function toString(){
	    return $toString.call(this);
	  });
	}

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if(__webpack_require__(12) && /./g.flags != 'g')__webpack_require__(8).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(97)
	});

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(9);
	module.exports = function(){
	  var that   = anObject(this)
	    , result = '';
	  if(that.global)     result += 'g';
	  if(that.ignoreCase) result += 'i';
	  if(that.multiline)  result += 'm';
	  if(that.unicode)    result += 'u';
	  if(that.sticky)     result += 'y';
	  return result;
	};

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(4);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(99)});

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(24)
	  , gOPS     = __webpack_require__(100)
	  , pIE      = __webpack_require__(42)
	  , toObject = __webpack_require__(45)
	  , IObject  = __webpack_require__(27)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(13)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 100 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export   = __webpack_require__(4)
	  , toLength  = __webpack_require__(31)
	  , context   = __webpack_require__(102)
	  , ENDS_WITH = 'endsWith'
	  , $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(104)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    var that = context(this, searchString, ENDS_WITH)
	      , endPosition = arguments.length > 1 ? arguments[1] : undefined
	      , len    = toLength(that.length)
	      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
	      , search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(103)
	  , defined  = __webpack_require__(29);
	
	module.exports = function(that, searchString, NAME){
	  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(10)
	  , cof      = __webpack_require__(28)
	  , MATCH    = __webpack_require__(71)('match');
	module.exports = function(it){
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(71)('match');
	module.exports = function(KEY){
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch(e){
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch(f){ /* empty */ }
	  } return true;
	};

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export  = __webpack_require__(4)
	  , context  = __webpack_require__(102)
	  , INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(104)(INCLUDES), 'String', {
	  includes: function includes(searchString /*, position = 0 */){
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(107);
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(122)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(8).f
	  , create      = __webpack_require__(22)
	  , redefineAll = __webpack_require__(108)
	  , ctx         = __webpack_require__(20)
	  , anInstance  = __webpack_require__(109)
	  , defined     = __webpack_require__(29)
	  , forOf       = __webpack_require__(110)
	  , $iterDefine = __webpack_require__(116)
	  , step        = __webpack_require__(120)
	  , setSpecies  = __webpack_require__(121)
	  , DESCRIPTORS = __webpack_require__(12)
	  , fastKey     = __webpack_require__(52).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(17);
	module.exports = function(target, src, safe){
	  for(var key in src)redefine(target, key, src[key], safe);
	  return target;
	};

/***/ },
/* 109 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(20)
	  , call        = __webpack_require__(111)
	  , isArrayIter = __webpack_require__(112)
	  , anObject    = __webpack_require__(9)
	  , toLength    = __webpack_require__(31)
	  , getIterFn   = __webpack_require__(114)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(9);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(113)
	  , ITERATOR   = __webpack_require__(71)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 113 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(115)
	  , ITERATOR  = __webpack_require__(71)('iterator')
	  , Iterators = __webpack_require__(113);
	module.exports = __webpack_require__(6).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(28)
	  , TAG = __webpack_require__(71)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(117)
	  , $export        = __webpack_require__(4)
	  , redefine       = __webpack_require__(17)
	  , hide           = __webpack_require__(7)
	  , has            = __webpack_require__(18)
	  , Iterators      = __webpack_require__(113)
	  , $iterCreate    = __webpack_require__(118)
	  , setToStringTag = __webpack_require__(119)
	  , getPrototypeOf = __webpack_require__(46)
	  , ITERATOR       = __webpack_require__(71)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 117 */
/***/ function(module, exports) {

	module.exports = false;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(22)
	  , descriptor     = __webpack_require__(16)
	  , setToStringTag = __webpack_require__(119)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(7)(IteratorPrototype, __webpack_require__(71)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(8).f
	  , has = __webpack_require__(18)
	  , TAG = __webpack_require__(71)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 120 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(5)
	  , dP          = __webpack_require__(8)
	  , DESCRIPTORS = __webpack_require__(12)
	  , SPECIES     = __webpack_require__(71)('species');
	
	module.exports = function(KEY){
	  var C = global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(5)
	  , $export           = __webpack_require__(4)
	  , redefine          = __webpack_require__(17)
	  , redefineAll       = __webpack_require__(108)
	  , meta              = __webpack_require__(52)
	  , forOf             = __webpack_require__(110)
	  , anInstance        = __webpack_require__(109)
	  , isObject          = __webpack_require__(10)
	  , fails             = __webpack_require__(13)
	  , $iterDetect       = __webpack_require__(123)
	  , setToStringTag    = __webpack_require__(119)
	  , inheritIfRequired = __webpack_require__(124);
	
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  var fixMethod = function(KEY){
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a){
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance             = new C
	      // early implementations not supports chaining
	      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
	      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
	      // most early implementations doesn't supports iterables, most modern - not close it correctly
	      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
	      // for early implementations -0 and +0 not the same
	      , BUGGY_ZERO = !IS_WEAK && fails(function(){
	        // V8 ~ Chromium 42- fails only with 5+ elements
	        var $instance = new C()
	          , index     = 5;
	        while(index--)$instance[ADDER](index, index);
	        return !$instance.has(-0);
	      });
	    if(!ACCEPT_ITERABLES){ 
	      C = wrapper(function(target, iterable){
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base, target, C);
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if(IS_WEAK && proto.clear)delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(71)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var isObject       = __webpack_require__(10)
	  , setPrototypeOf = __webpack_require__(125).set;
	module.exports = function(that, target, C){
	  var P, S = target.constructor;
	  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
	    setPrototypeOf(that, P);
	  } return that;
	};

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(10)
	  , anObject = __webpack_require__(9);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(20)(Function.call, __webpack_require__(41).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	var $export   = __webpack_require__(4)
	  , $includes = __webpack_require__(30)(true);
	
	$export($export.P, 'Array', {
	  includes: function includes(el /*, fromIndex = 0 */){
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	__webpack_require__(127)('includes');

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(71)('unscopables')
	  , ArrayProto  = Array.prototype;
	if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(7)(ArrayProto, UNSCOPABLES, {});
	module.exports = function(key){
	  ArrayProto[UNSCOPABLES][key] = true;
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(129);
	__webpack_require__(134);
	module.exports = __webpack_require__(6).Symbol;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(5)
	  , has            = __webpack_require__(18)
	  , DESCRIPTORS    = __webpack_require__(12)
	  , $export        = __webpack_require__(4)
	  , redefine       = __webpack_require__(17)
	  , META           = __webpack_require__(52).KEY
	  , $fails         = __webpack_require__(13)
	  , shared         = __webpack_require__(35)
	  , setToStringTag = __webpack_require__(119)
	  , uid            = __webpack_require__(19)
	  , wks            = __webpack_require__(71)
	  , wksExt         = __webpack_require__(130)
	  , wksDefine      = __webpack_require__(131)
	  , keyOf          = __webpack_require__(132)
	  , enumKeys       = __webpack_require__(133)
	  , isArray        = __webpack_require__(62)
	  , anObject       = __webpack_require__(9)
	  , toIObject      = __webpack_require__(26)
	  , toPrimitive    = __webpack_require__(15)
	  , createDesc     = __webpack_require__(16)
	  , _create        = __webpack_require__(22)
	  , gOPNExt        = __webpack_require__(49)
	  , $GOPD          = __webpack_require__(41)
	  , $DP            = __webpack_require__(8)
	  , $keys          = __webpack_require__(24)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(50).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(42).f  = $propertyIsEnumerable;
	  __webpack_require__(100).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(117)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(7)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(71);

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(5)
	  , core           = __webpack_require__(6)
	  , LIBRARY        = __webpack_require__(117)
	  , wksExt         = __webpack_require__(130)
	  , defineProperty = __webpack_require__(8).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(24)
	  , toIObject = __webpack_require__(26);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(24)
	  , gOPS    = __webpack_require__(100)
	  , pIE     = __webpack_require__(42);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(115)
	  , test    = {};
	test[__webpack_require__(71)('toStringTag')] = 'z';
	if(test + '' != '[object z]'){
	  __webpack_require__(17)(Object.prototype, 'toString', function toString(){
	    return '[object ' + classof(this) + ']';
	  }, true);
	}

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(136);
	__webpack_require__(138);
	module.exports = __webpack_require__(130).f('iterator');

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(137)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(116)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(32)
	  , defined   = __webpack_require__(29);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var $iterators    = __webpack_require__(139)
	  , redefine      = __webpack_require__(17)
	  , global        = __webpack_require__(5)
	  , hide          = __webpack_require__(7)
	  , Iterators     = __webpack_require__(113)
	  , wks           = __webpack_require__(71)
	  , ITERATOR      = wks('iterator')
	  , TO_STRING_TAG = wks('toStringTag')
	  , ArrayValues   = Iterators.Array;
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype
	    , key;
	  if(proto){
	    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
	    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
	  }
	}

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(127)
	  , step             = __webpack_require__(120)
	  , Iterators        = __webpack_require__(113)
	  , toIObject        = __webpack_require__(26);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(116)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Utils = __webpack_require__(141);
	
	var Bootstrap = function Bootstrap() {
	    Utils.addHtmlTagClass('bbcdotcom');
	};
	
	module.exports = Bootstrap;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*jslint bitwise: true */
	/*
	 * ALWAYS REQUIRED INTERNATIONAL for analytics.js, irrespective of ads being enabled
	 */
	
	var _log = __webpack_require__(142)('utils');
	
	var trackCookie = []; // hack to make unit testing easier as no easy way to DI in other objects yet :(
	
	
	/**
	 * Standard methods to check the classes on an element
	 * @param DOMElement element
	 * @param string className
	 * @return bool;
	 */
	var hasAtrribute = function hasAtrribute(element, attributeKey, attributeValue) {
	    if (typeof element !== 'undefined' && element !== '' && element !== null) {
	        var regex = new RegExp('(\\s|^)' + attributeValue + '(\\s|$)');
	        return element[attributeKey].match(regex);
	    }
	};
	
	var hasTagId = function hasTagId(tagName, idName) {
	    var attributeMatch,
	        tag = document.getElementsByTagName(tagName)[0];
	    if (typeof tag !== 'undefined' && tag !== '' && tag !== null && typeof idName === 'string') {
	        attributeMatch = hasAtrribute(tag, 'id', idName);
	        return attributeMatch !== null;
	    }
	    return false;
	};
	
	/**
	 * Given a DOM node, search up the tree and find the nearest ancestor
	 * node which passes the matcher function. The matcher function should
	 * return zero, a negative value or a positive value.
	 *  - zero: match failed, keep searching
	 *  - negative: match failed, stop searching
	 *  - positive: match succeeded, return current node
	 *
	 * @param node The starting DOM node
	 * @param matcher The matcher function, see above for return values
	 * @param [includeSelf] Whether or not to include current node in search
	 * @param [limit] The search limit (defaults to 10)
	 * @returns {boolean}
	 */
	var searchTreeUpwards = function searchTreeUpwards(node, matcher, includeSelf, limit) {
	    var current,
	        result = false,
	        iteration = 0;
	
	    if (!node) {
	        return false;
	    }
	
	    limit = typeof limit === 'number' ? limit : 10;
	    includeSelf = includeSelf === true ? true : false;
	    current = includeSelf ? node : node.parentNode;
	
	    while (current && iteration < limit) {
	        var matcherResult = matcher(current);
	        if (matcherResult > 0) {
	            result = current;
	            break;
	        } else if (matcherResult < 0) {
	            break;
	        }
	        current = current.parentNode;
	        iteration++;
	    }
	    return result;
	};
	
	var getCookieDomain = function getCookieDomain() {
	    return window.location.hostname.indexOf('.bbc.com') !== -1 ? 'bbc.com' : window.location.hostname.indexOf('.bbc.co.uk') !== -1 ? 'bbc.co.uk' : window.location.hostname;
	};
	
	module.exports = {
	    debounce: function debounce(func, wait, immediate) {
	        var timeout;
	        return function () {
	            var context = this,
	                args = arguments;
	            var later = function later() {
	                timeout = null;
	                if (!immediate) {
	                    func.apply(context, args);
	                }
	            };
	            var callNow = immediate && !timeout;
	            clearTimeout(timeout);
	            timeout = setTimeout(later, wait);
	            if (callNow) {
	                func.apply(context, args);
	            }
	        };
	    },
	    appendLinkToHead: function appendLinkToHead(url) {
	        var head = document.head || document.getElementsByTagName('head')[0],
	            link = document.createElement('link');
	
	        link.type = 'text/css';
	        link.rel = 'stylesheet';
	        link.href = url;
	
	        head.appendChild(link);
	    },
	    capitalize: function capitalize(string) {
	        if (typeof string !== 'undefined') {
	            var i,
	                n,
	                pieces = string.split(" ");
	            for (i = 0; i < pieces.length; i++) {
	                if (pieces[i].length > 2) {
	                    n = pieces[i].charAt(0).toUpperCase();
	                    pieces[i] = n + pieces[i].substr(1);
	                }
	            }
	            return pieces.join(" ");
	        }
	    },
	    /**
	     * @deprecated Please use require('logger')
	     */
	    log: function log() {
	        _log.warn('utils.log is deprecated', arguments);
	    },
	    addTagClass: function addTagClass(tag, className) {
	        if (typeof tag !== 'undefined' && tag !== '' && tag !== null && typeof className === 'string' && className !== '') {
	            if (!hasAtrribute(tag, 'className', className)) {
	                tag.className = tag.className + ' ' + className;
	            }
	            return tag.className;
	        }
	    },
	    removeTagClass: function removeTagClass(tag, className) {
	        if (typeof tag !== 'undefined' && tag !== '' && tag !== null && typeof className === 'string' && className !== '') {
	            if (hasAtrribute(tag, 'className', className)) {
	                tag.className = tag.className.replace(' ' + className, '');
	                tag.className = tag.className.replace(className, '');
	            }
	            return tag.className;
	        }
	    },
	    addBodyTagClass: function addBodyTagClass(className) {
	        var tag = document.getElementsByTagName('body')[0];
	        return this.addTagClass(tag, className);
	    },
	    removeBodyTagClass: function removeBodyTagClass(className) {
	        var tag = document.getElementsByTagName('body')[0];
	        return this.removeTagClass(tag, className);
	    },
	    addHtmlTagClass: function addHtmlTagClass(className) {
	        var tag = document.getElementsByTagName('html')[0];
	        return this.addTagClass(tag, className);
	    },
	    removeHtmlTagClass: function removeHtmlTagClass(className) {
	        var tag = document.getElementsByTagName('html')[0];
	        return this.removeTagClass(tag, className);
	    },
	    hasBodyTagId: function hasBodyTagId(idName) {
	        return hasTagId('body', idName);
	    },
	
	    getUriParamByName: function getUriParamByName(name, sanitizeResult) {
	        sanitizeResult = sanitizeResult !== false;
	
	        if (typeof name === 'undefined') {
	            return '';
	        }
	
	        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
	        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
	            results = regex.exec(bbcdotcom.config.getWindowLocation().search);
	
	        if (results === null) {
	            return '';
	        }
	
	        return decodeURIComponent(sanitizeResult ? results[1].replace(/[^a-zA-Z0-9\-_]/g, '') : results[1]);
	    },
	    isDebug: function isDebug() {
	        return (/[?|&]ads-debug/.test(window.location.href) || document.cookie.indexOf('ads-debug=') !== -1
	        );
	    },
	    isDebugTrace: function isDebugTrace() {
	        return (/[?|&]ads-debug-trace/.test(window.location.href) || document.cookie.indexOf('ads-debug-trace=') !== -1
	        );
	    },
	    getEnv: function getEnv() {
	        var location = bbcdotcom.config.getWindowLocation();
	        if (/[a-z]+\-test[0-9]+\.bbc.*\.com/.test(location.href)) {
	            return 'test';
	        }
	        var matches = location.href.match(/(sandbox|int|test|stage)(.dev)*.bbc.co*/);
	        return matches === null ? 'live' : matches[1];
	    },
	    isLiveEnv: function isLiveEnv() {
	        return this.getEnv() === 'live';
	    },
	    isTestEnv: function isTestEnv() {
	        return this.getEnv() !== 'live' && this.getEnv() !== 'stage';
	    },
	    stackTrace: function stackTrace() {
	        var err = new Error();
	        window.console.log(err.stack);
	    },
	    /**
	     * eg getParentElementByClass(document.getElementById('foo'), 'navigation');
	     * eg getParentElementByClass(document.getElementById('foo'), 'navigation', 10);
	     * eg getParentElementByClass(document.getElementById('foo'), 'navigation', 10, true);
	     *
	     * @param object node Element object
	     * @param string className Class name looking for in parent elements
	     * @param integer depth How far up the DOM tree should we search.  Smaller number is more performant.
	     * @param boolean ignoreBody Whether this utility should crawl up to <body> and <html> or stop below <body>
	     * @return boolean Returns element
	     */
	    getParentElementByClass: function getParentElementByClass(node, className, depth, ignoreBody) {
	        ignoreBody = typeof ignoreBody !== 'undefined' && ignoreBody === true ? true : false;
	
	        var limit = typeof depth === 'undefined' || depth === 0 ? 5 : depth,
	            matcher = function matcher(node) {
	            if (!node || typeof node.className === 'undefined' || typeof node.tagName === 'undefined' || ignoreBody && node.tagName.toLowerCase() === 'body') {
	                return -1;
	            } else if (node.className.indexOf(className) !== -1) {
	                return 1;
	            }
	        };
	
	        return searchTreeUpwards(node, matcher, false, limit);
	    },
	
	    /**
	     * Given an element and a tag name, traverses up the DOM tree looking
	     * for the nearest ancestor element with that tag name
	     *
	     * @param node The starting node
	     * @param tagName The tag name to search for
	     * @param [includeSelf] Include self in search
	     * @param [limit] How far up the tree to search
	     * @returns {}
	     */
	    getClosestElementByTagName: function getClosestElementByTagName(node, tagName, includeSelf, limit) {
	        return searchTreeUpwards(node, function (node) {
	            return node && node.tagName && node.tagName.toLowerCase() === tagName ? 1 : 0;
	        }, includeSelf, limit);
	    },
	
	    /**
	     * eg parentHasClass(document.getElementById('foo'), 'navigation');
	     * eg parentHasClass(document.getElementById('foo'), 'navigation', 10);
	     * eg parentHasClass(document.getElementById('foo'), 'navigation', 10, true);
	     *
	     * @param object node Element object
	     * @param string className Class name looking for in parent elements
	     * @param integer depth How far up the DOM tree should we search.  Smaller number is more performant.
	     * @param boolean ignoreBody Whether this utility should crawl up to <body> and <html> or stop below <body>
	     * @return boolean Returns true if class was found in the nested parent tags
	     */
	    parentHasClass: function parentHasClass(node, className, depth, ignoreBody) {
	        return this.getParentElementByClass(node, className, depth, ignoreBody) === false ? false : true;
	    },
	
	    /**
	     * Used to work out where a link is within a module so editorial knwo whether the link was the first link,
	     * second link etc
	     * eg getAnchorPositionWithinElement(document.getElementById('business-module'), '/news/business-12345678');
	     *
	     * @param object parent Element object
	     * @param string href eg /news/business-1234567
	     * @returns number 0-20
	     */
	    getAnchorPositionWithinElement: function getAnchorPositionWithinElement(parent, href) {
	        var i, tags, hrefRegex;
	        if (parent && href) {
	            tags = parent.getElementsByTagName('a');
	            hrefRegex = new RegExp(href + '$');
	            for (i = 0; i < tags.length; i++) {
	                if (typeof tags[i].href !== 'undefined' && href !== '' && tags[i].href.match(hrefRegex) !== null) {
	                    return i + 1;
	                }
	            }
	        }
	        return 0;
	    },
	
	    /**
	     * eg addEvent(document.getElementById('foo'), 'click', function(){});
	     * source: http://ejohn.org/projects/flexible-javascript-events
	     */
	    addEvent: function addEvent(obj, type, fn) {
	        if (obj.attachEvent) {
	            obj['e' + type + fn] = fn;
	            obj[type + fn] = function () {
	                obj['e' + type + fn](window.event);
	            };
	            obj.attachEvent('on' + type, obj[type + fn]);
	        } else {
	            obj.addEventListener(type, fn, false);
	        }
	    },
	    /**
	     * eg removeEvent(document.getElementById('foo'), 'click', function(){});
	     * source: http://ejohn.org/projects/flexible-javascript-events
	     */
	    removeEvent: function removeEvent(obj, type, fn) {
	        if (typeof obj === 'undefined' || obj === null) {
	            return;
	        }
	        if (obj.detachEvent) {
	            obj.detachEvent('on' + type, obj[type + fn]);
	            obj[type + fn] = null;
	        } else {
	            obj.removeEventListener(type, fn, false);
	        }
	    },
	    /**
	     * Trigger event listener
	     * eg triggerEvent(document.getElementById('foo'), 'click');
	     * source: https://developer.mozilla.org/samples/domref/dispatchEvent.html
	     */
	    triggerEvent: function triggerEvent(obj, type, preventDefault) {
	        preventDefault = preventDefault === undefined ? true : preventDefault;
	        var event = document.createEvent("MouseEvents");
	        event.initMouseEvent(type, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	        if (preventDefault) {
	            event.preventDefault();
	        }
	        obj.dispatchEvent(event);
	        return event;
	    },
	
	    cancelEvent: function cancelEvent(event) {
	        if (!event) {
	            return false;
	        }
	
	        if (typeof event.preventDefault === 'function') {
	            event.preventDefault();
	        } else {
	            event.returnValue = false;
	        }
	    },
	
	    isEventDefaultPrevented: function isEventDefaultPrevented(event) {
	        if (!event) {
	            return false;
	        }
	
	        return event.defaultPrevented || event.returnValue === false;
	    },
	
	    trim: function trim(str) {
	        if (typeof str === 'string') {
	            return str.replace(/^[\s\xA0]+/, '').replace(/[\s\xA0]+$/, '');
	        }
	        return str;
	    },
	
	    navigateTo: function navigateTo(uri) {
	        window.location.href = uri;
	    },
	
	    /**
	     * Get <meta> tag name value, for example:
	     * Html:   <meta name="DCTERMS.created" content="2015-01-06T12:00:00" />
	     * Method: bbcdotcom.utils.getMetaNameContent('DCTERMS.created');
	     */
	    getMetaNameContent: function getMetaNameContent(name) {
	        var metas = document.getElementsByTagName('meta'),
	            i;
	        for (i = 0; i < metas.length; i++) {
	            if (metas[i].getAttribute("name") === name) {
	                return metas[i].getAttribute("content");
	            }
	        }
	        return '';
	    },
	    /**
	     * Get <meta> tag property value, for example:
	     * Html:   <meta property="wwhp-edition" content="international" />
	     * Method: bbcdotcom.utils.getMetaPropertyContent('wwhp-edition');
	     */
	    getMetaPropertyContent: function getMetaPropertyContent(property) {
	        var metas = document.getElementsByTagName('meta'),
	            i;
	        for (i = 0; i < metas.length; i++) {
	            if (metas[i].getAttribute("property") === property) {
	                return metas[i].getAttribute("content");
	            }
	        }
	        return '';
	    },
	    setCookie: function setCookie(name, value, seconds) {
	        var date;
	        if (typeof name !== 'undefined' && name !== '' && typeof value !== 'undefined' && value !== '') {
	            if (typeof seconds === 'undefined' || seconds === null || seconds === 0) {
	                // Default to 365 days (60 * 60 * 24 = 1 day)
	                seconds = 60 * 60 * 24 * 365;
	            }
	            date = new Date();
	            date.setTime(date.getTime() + seconds * 1000); // eg 120s * 1000 = 120,000ms
	            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) + '; expires=' + date.toGMTString() + '; domain=.' + getCookieDomain() + '; path=/';
	            trackCookie.push(['set', name, value, seconds]);
	        }
	    },
	    getCookie: function getCookie(name) {
	        var cookie = '; ' + document.cookie,
	            parts = cookie.split('; ' + encodeURIComponent(name) + '='),
	            value;
	        if (parts.length === 2) {
	            value = decodeURIComponent(parts.pop().split(';').shift());
	        }
	        trackCookie.push(['get', name, value]);
	        return value;
	    },
	    deleteCookie: function deleteCookie(name) {
	        document.cookie = encodeURIComponent(name) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT; domain=.' + getCookieDomain() + '; path=/';
	        trackCookie.push(['delete', name]);
	    },
	    generateUuidV4: function generateUuidV4() {
	        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	            var r = Math.floor(Math.random() * 16),
	                v = c === 'x' ? r : r & 0x3 | 0x8;
	            return v.toString(16);
	        });
	    },
	    /**
	     * @param string Uri eg http://www.test.bbc.com/news/world?hello=world#help
	     */
	    createWindowLocation: function createWindowLocation(uri) {
	        var windowLocation,
	            withoutProtocol,
	            withoutQueryParam = uri;
	        if (typeof uri === 'undefined' || uri === null || uri === '') {
	            windowLocation = {
	                href: '',
	                protocol: '',
	                host: '',
	                hostname: '',
	                port: '',
	                pathname: '',
	                search: '',
	                hash: ''
	            };
	        } else {
	            if (uri.indexOf('?') !== -1) {
	                withoutQueryParam = uri.substr(0, uri.indexOf('?'));
	            }
	            withoutProtocol = withoutQueryParam.substr(withoutQueryParam.indexOf(':') + 3);
	            windowLocation = {
	                href: uri, // http://www.test.bbc.com/news/world?hello=world#help
	                protocol: uri.substr(0, uri.indexOf(':') + 1), // http:
	                host: withoutProtocol.substr(0, withoutProtocol.indexOf('/')), // www.test.bbc.com:8888
	                hostname: withoutProtocol.substr(0, withoutProtocol.indexOf('/')), // www.test.bbc.com
	                port: '',
	                pathname: withoutProtocol.substr(withoutProtocol.indexOf('/')),
	                search: uri.substr(uri.indexOf('?')),
	                hash: ''
	            };
	        }
	        return windowLocation;
	    },
	    secondsToMilliSeconds: function secondsToMilliSeconds(seconds) {
	        return Math.floor(parseFloat(seconds, 10) * 1000);
	    },
	    /**
	     * For testing only
	     */
	    r: function r() {
	        trackCookie = [];
	    },
	    getTrackCookieValues: function getTrackCookieValues(cookiesArr) {
	        if (typeof cookiesArr === 'undefined') {
	            return trackCookie;
	        }
	        var out = [],
	            t;
	        for (t = 0; t < trackCookie.length; t++) {
	            if (cookiesArr.indexOf(trackCookie[t][1]) !== -1) {
	                out.push(trackCookie[t]);
	            }
	        }
	        return out;
	    },
	
	    isString: function isString(val) {
	        return typeof val === 'string' || val instanceof String;
	    },
	
	    cleanArray: function cleanArray(actual) {
	        var newArray = [];
	        var i;
	        for (i = 0; i < actual.length; i++) {
	            if (actual[i] || actual[i] === 0) {
	                newArray.push(actual[i]);
	            }
	        }
	        return newArray;
	    },
	
	    outerHTML: function outerHTML(node) {
	        if (node === undefined) {
	            return;
	        }
	        // if IE, Chrome take the internal method otherwise build one
	        return node.outerHTML || function (n) {
	            var div = document.createElement('div'),
	                h;
	            div.appendChild(n.cloneNode(true));
	            h = div.innerHTML;
	            div = null;
	            return h;
	        }(node);
	    }
	};

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/**
	 * @module LogFactory
	 *
	 * Use:
	 *
	 * var log = bbcdotcom.Logger('my:namespace');
	 *
	 * log('same as log.log')
	 * log.log('same as log()');
	 * log.info('info')
	 * log.debug('debug', object);
	 * log.warn('warning');
	 * log.error('error', Error);
	 *
	 * Enabling:
	 *
	 * window.bbcdotcom.Logger.enable('*'); // First argument is the namespace to enable
	 *
	 * Disabling:
	 *
	 * window.bbcdotcom.Logger.disable(); // Disables all namespaces
	 */
	
	var debug = __webpack_require__(143);
	
	function LogFactory(namespace) {
	
	    var prefixedNamespace = 'bbcdotcom:' + namespace;
	
	    var logLevels = ['log', 'info', 'warn', 'error', 'debug'];
	
	    var defaultLogger = debug(prefixedNamespace);
	
	    function Logger() {
	        return defaultLogger.apply(undefined, arguments);
	    }
	
	    function createLogLevel(level) {
	        Logger[level] = debug(prefixedNamespace);
	        Logger[level].log = function log() {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }
	
	            return _typeof(window.console) === 'object' && window.console[level] && Function.prototype.apply.call(window.console[level], window.console, args);
	        };
	    }
	
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;
	
	    try {
	        for (var _iterator = logLevels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var logLevel = _step.value;
	
	            createLogLevel(logLevel);
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator['return']) {
	                _iterator['return']();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }
	
	    return Logger;
	}
	
	LogFactory.enable = function enable() {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	    }
	
	    debug.enable.apply(debug, args);
	    debug('bbcdotcom')('Debugging enabled', args);
	};
	LogFactory.disable = function disable() {
	    debug('bbcdotcom')('Debugging disabled');
	    debug.disable.apply(debug, arguments);
	};
	
	if (/[?|&]ads-debug/.test(window.location.href) || document.cookie.indexOf('ads-debug=') !== -1) {
	    LogFactory.enable('bbcdotcom*');
	} else if (debug.enabled('bbcdotcom*')) {
	    debug('bbcdotcom')('To disable debugging: `bbcdotcom.Logger.disable()`');
	}
	
	module.exports = LogFactory;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(144);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(145);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 145 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 146 */
/***/ function(module, exports) {

	"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	// Copyright (c) 2014 comScore, Inc.
	var ns_ = ns_ || {};ns_.StreamSense = ns_.StreamSense || function () {
	  function h(t, n) {
	    var r = t || "",
	        i = "undefined",
	        s = l.comScore || l.sitestat || function (t) {
	      var n = "comScore=",
	          r = c.cookie,
	          s = "",
	          o = "indexOf",
	          a = "substring",
	          f = "length",
	          h = e.browserAcceptsLargeURLs() ? g.URL_LENGTH_LIMIT : g.RESTRICTED_URL_LENGTH_LIMIT,
	          p,
	          d = "&ns_",
	          v = "&",
	          m,
	          y,
	          b,
	          w,
	          E = l.encodeURIComponent || escape;if (r[o](n) + 1) for (b = 0, y = r.split(";"), w = y[f]; b < w; b++) {
	        m = y[b][o](n), m + 1 && (s = v + unescape(y[b][a](m + n[f])));
	      }t += d + "_t=" + +new Date() + d + "c=" + (c.characterSet || c.defaultCharset || "") + s, t.length > h && t.indexOf(v) > 0 && (p = t.substr(0, h - 8).lastIndexOf(v), t = (t.substring(0, p) + d + "cut=" + E(t.substring(p + 1))).substr(0, h)), u.httpGet(t), (typeof ns_p === "undefined" ? "undefined" : _typeof(ns_p)) === i && (ns_p = { src: t }), ns_p.lastMeasurement = t;
	    };if ((typeof n === "undefined" ? "undefined" : _typeof(n)) !== i) {
	      var o = [],
	          a = l.encodeURIComponent || escape;for (var f in n) {
	        n.hasOwnProperty(f) && o.push(a(f) + "=" + a(n[f]));
	      }/[\?\&]$/.test(r) || (r += "&"), r += o.join("&");
	    }return s(r);
	  }function p(t, n) {
	    var r,
	        i = l.encodeURIComponent || escape,
	        s = [],
	        o = g.LABELS_ORDER,
	        u = t.split("?"),
	        a = u[0],
	        f = u[1],
	        h = f.split("&");for (var p = 0, d = h.length; p < d; p++) {
	      var v = h[p].split("="),
	          m = unescape(v[0]),
	          y = unescape(v[1]);m && (n[m] = y);
	    }var b = {};for (var p = 0, d = o.length; p < d; p++) {
	      var w = o[p];if (n.hasOwnProperty(w)) {
	        var E = n[w];typeof E != "undefined" && E != null && (b[w] = !0, s.push(i(w) + "=" + i(n[w])));
	      }
	    }for (var w in n) {
	      if (b[w]) continue;if (n.hasOwnProperty(w)) {
	        var E = n[w];typeof E != "undefined" && E != null && s.push(i(w) + "=" + i(n[w]));
	      }
	    }r = a + "?" + s.join("&"), r = r + (r.indexOf("&c8=") < 0 ? "&c8=" + i(c.title) : "") + (r.indexOf("&c7=") < 0 ? "&c7=" + i(c.URL) : "") + (r.indexOf("&c9=") < 0 ? "&c9=" + i(c.referrer) : "");var S = e.browserAcceptsLargeURLs() ? g.URL_LENGTH_LIMIT : g.RESTRICTED_URL_LENGTH_LIMIT;if (r.length > S && r.indexOf("&") > 0) {
	      var x = r.substr(0, S - 8).lastIndexOf("&");r = (r.substring(0, x) + "&ns_cut=" + i(r.substring(x + 1))).substr(0, S);
	    }return r;
	  }var e = function () {
	    var e = { uid: function () {
	        var e = 1;return function () {
	          return +new Date() + "_" + e++;
	        };
	      }(), filter: function filter(e, t) {
	        var n = {};for (var r in t) {
	          t.hasOwnProperty(r) && e(t[r]) && (n[r] = t[r]);
	        }return n;
	      }, extend: function extend(e) {
	        var t = arguments.length,
	            n;e = e || {};for (var r = 1; r < t; r++) {
	          n = arguments[r];if (!n) continue;for (var i in n) {
	            n.hasOwnProperty(i) && (e[i] = n[i]);
	          }
	        }return e;
	      }, getString: function getString(e, t) {
	        var n = String(e);return e == null ? t || "na" : n;
	      }, getLong: function getLong(e, t) {
	        var n = Number(e);return e == null || isNaN(n) ? t || 0 : n;
	      }, getInteger: function getInteger(e, t) {
	        var n = Number(e);return e == null || isNaN(n) ? t || 0 : n;
	      }, getBoolean: function getBoolean(e, t) {
	        var n = String(e).toLowerCase() == "true";return e == null ? t || !1 : n;
	      }, isNotEmpty: function isNotEmpty(e) {
	        return typeof e != "undefined" && e != null && typeof e.length != "undefined" && e.length > 0;
	      }, indexOf: function indexOf(t, n) {
	        var r = -1;return e.forEach(n, function (e, n) {
	          e == t && (r = n);
	        }), r;
	      }, forEach: function forEach(e, t, n) {
	        try {
	          if (typeof t == "function") {
	            n = typeof n != "undefined" ? n : null;if (typeof e["length"] != "number" || typeof e[0] == "undefined") {
	              var r = typeof e.__proto__ != "undefined";for (var i in e) {
	                (!r || r && typeof e.__proto__[i] == "undefined") && typeof e[i] != "function" && t.call(n, e[i], i);
	              }
	            } else for (var i = 0, s = e.length; i < s; i++) {
	              t.call(n, e[i], i);
	            }
	          }
	        } catch (o) {}
	      }, regionMatches: function regionMatches(e, t, n, r, i) {
	        if (t < 0 || r < 0 || t + i > e.length || r + i > n.length) return !1;while (--i >= 0) {
	          var s = e.charAt(t++),
	              o = n.charAt(r++);if (s != o) return !1;
	        }return !0;
	      }, size: function size(e) {
	        var t = 0,
	            n;for (var n in e) {
	          e.hasOwnProperty(n) && t++;
	        }return t;
	      }, log: function log(e, t) {
	        if (typeof t != "undefined" && t) {
	          var n = new Date(),
	              r = n.getHours() + ":" + n.getMinutes() + ":" + n.getSeconds();console.log(r, e);
	        }
	      }, isTrue: function isTrue(e) {
	        return typeof e == "undefined" ? !1 : typeof e == "string" ? (e = e.toLowerCase(), e === "true" || e === "1" || e === "on") : e ? !0 : !1;
	      }, toString: function toString(t) {
	        if (typeof t == "undefined") return "undefined";if (typeof t == "string") return t;if (Object.prototype.toString.call(t) === "[object Array]") return t.join(",");if (e.size(t) > 0) {
	          var n = "";for (var r in t) {
	            t.hasOwnProperty(r) && (n += r + ":" + t[r] + ";");
	          }return n;
	        }return t.toString();
	      }, exists: function exists(e) {
	        return typeof e != "undefined" && e != null;
	      }, firstGreaterThan0: function firstGreaterThan0() {
	        for (var e = 0, t = arguments.length; e < t; e++) {
	          var n = arguments[e];if (n > 0) return n;
	        }return 0;
	      }, cloneObject: function cloneObject(e) {
	        if (null == e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e))) return e;var t = e.constructor();for (var n in e) {
	          e.hasOwnProperty(n) && (t[n] = e[n]);
	        }return t;
	      }, safeGet: function safeGet(t, n) {
	        return n = e.exists(n) ? n : "", e.exists(t) ? t : n;
	      }, getBrowserName: function getBrowserName() {
	        var e = navigator.userAgent,
	            t = navigator.appName,
	            n,
	            r;return (r = e.indexOf("Opera")) != -1 || (r = e.indexOf("OPR/")) != -1 ? t = "Opera" : (r = e.indexOf("Android")) != -1 ? t = "Android" : (r = e.indexOf("Chrome")) != -1 ? t = "Chrome" : (r = e.indexOf("Safari")) != -1 ? t = "Safari" : (r = e.indexOf("Firefox")) != -1 ? t = "Firefox" : (r = e.indexOf("IEMobile")) != -1 ? t = "Internet Explorer Mobile" : t == "Microsoft Internet Explorer" || t == "Netscape" ? t = "Internet Explorer" : (n = e.lastIndexOf(" ") + 1) < (r = e.lastIndexOf("/")) && (t = e.substring(n, r), t.toLowerCase() == t.toUpperCase() && (t = navigator.appName)), t;
	      }, getBrowserFullVersion: function getBrowserFullVersion() {
	        var e = navigator.userAgent,
	            t = navigator.appName,
	            n = "" + parseFloat(navigator.appVersion),
	            r,
	            i,
	            s,
	            o,
	            u;return (s = e.indexOf("Opera")) != -1 ? (n = e.substring(s + 6), (s = e.indexOf("Version")) != -1 && (n = e.substring(s + 8))) : (s = e.indexOf("OPR/")) != -1 ? n = e.substring(s + 4) : (s = e.indexOf("Android")) != -1 ? n = e.substring(s + 11) : (s = e.indexOf("Chrome")) != -1 ? n = e.substring(s + 7) : (s = e.indexOf("Safari")) != -1 ? (n = e.substring(s + 7), (s = e.indexOf("Version")) != -1 && (n = e.substring(s + 8))) : (s = e.indexOf("Firefox")) != -1 ? n = e.substring(s + 8) : t == "Microsoft Internet Explorer" ? (u = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"), u.exec(e) != null && (n = parseFloat(RegExp.$1))) : t == "Netscape" ? (u = new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})"), u.exec(e) != null && (n = parseFloat(RegExp.$1))) : (i = e.lastIndexOf(" ") + 1) < (s = e.lastIndexOf("/")) && (n = e.substring(s + 1)), n = n.toString(), (o = n.indexOf(";")) != -1 && (n = n.substring(0, o)), (o = n.indexOf(" ")) != -1 && (n = n.substring(0, o)), (o = n.indexOf(")")) != -1 && (n = n.substring(0, o)), r = parseInt("" + n, 10), isNaN(r) && (n = "" + parseFloat(navigator.appVersion)), n;
	      }, browserAcceptsLargeURLs: function browserAcceptsLargeURLs() {
	        return window.ActiveXObject === null || !0;
	      } };return e;
	  }(),
	      t = function () {
	    var t = "cs_",
	        n = function n() {
	      var n = this,
	          r = typeof localStorage != "undefined" ? localStorage : {};e.extend(this, { get: function get(e) {
	          return r[t + e];
	        }, set: function set(e, n) {
	          r[t + e] = n;
	        }, has: function has(e) {
	          return t + e in r;
	        }, remove: function remove(e) {
	          delete r[t + e];
	        }, clear: function clear() {
	          for (var e in r) {
	            r.hasOwnProperty(e) && delete r[e];
	          }
	        } });
	    };return n;
	  }(),
	      n = function n(e, t) {
	    var n = new Image();n.onload = function () {
	      t && t(200);
	    }, n.onerror = function () {
	      t && t();
	    }, n.src = e;
	  },
	      r = function r(e, t) {
	    t && setTimeout(t, 0);
	  },
	      i = function i(e, t, n) {
	    n && setTimeout(n, 0);
	  },
	      s = function () {
	    return { dir: function dir(e) {
	        return null;
	      }, append: function append(e, t, n) {}, write: function write(e, t, n) {}, deleteFile: function deleteFile(e, t) {
	        return !1;
	      }, read: function read(e, t) {
	        return null;
	      } };
	  }(),
	      o = function o(e, t) {
	    typeof engine != "undefined" && t && setTimeout(t, 0);var n = engine.createHttpClient(),
	        r = n.createRequest("GET", e, null);r.start(), t && setTimeout(t, 0);
	  },
	      u = function () {
	    var e = { PLATFORM: "generic", httpGet: n, httpPost: i, Storage: t, IO: s, getCrossPublisherId: function getCrossPublisherId() {
	        return null;
	      }, getAppName: function getAppName() {
	        return Constants.UNKNOWN_VALUE;
	      }, getAppVersion: function getAppVersion(e) {
	        return Constants.UNKNOWN_VALUE;
	      }, getVisitorId: function getVisitorId() {
	        return this.getDeviceName() + +new Date() + ~~(Math.random() * 1e3);
	      }, getVisitorIdSuffix: function getVisitorIdSuffix() {
	        return "72";
	      }, getDeviceName: function getDeviceName() {
	        return "";
	      }, getPlatformVersion: function getPlatformVersion() {
	        return "";
	      }, getPlatformName: function getPlatformName() {
	        return "js";
	      }, getRuntimeName: function getRuntimeName() {
	        return "";
	      }, getRuntimeVersion: function getRuntimeVersion() {
	        return "";
	      }, getResolution: function getResolution() {
	        return "";
	      }, getLanguage: function getLanguage() {
	        return "";
	      }, getPackageName: function getPackageName() {
	        return "";
	      }, isConnectionAvailable: function isConnectionAvailable() {
	        return !0;
	      }, isCompatible: function isCompatible() {
	        return !0;
	      }, autoSelect: function autoSelect() {}, isCrossPublisherIdChanged: function isCrossPublisherIdChanged() {
	        return !1;
	      } };return e;
	  }(),
	      a = function () {
	    function f() {
	      return typeof engine != "undefined" && typeof engine.stats != "undefined";
	    }function l() {
	      return e.isNotEmpty(engine.stats.device.id) ? engine.stats.device.id : e.isNotEmpty(engine.stats.network.mac) ? engine.stats.network.mac : null;
	    }function c() {
	      if (r == null) {
	        var e = l();e != null ? (r = e, u = "31", a = e) : (r = +new Date() + ~~(Math.random() * 1e3), u = "72", a = null);
	      }
	    }var n = this,
	        r = null,
	        u = null,
	        a = null;return { PLATFORM: "trilithium", httpGet: o, httpPost: i, Storage: t, IO: s, getCrossPublisherId: function getCrossPublisherId() {
	        return c(), a;
	      }, getAppName: function getAppName() {
	        return e.isNotEmpty(engine.stats.application.name) ? engine.stats.application.name : Constants.UNKNOWN_VALUE;
	      }, getAppVersion: function getAppVersion(t) {
	        return e.isNotEmpty(engine.stats.application.version) ? engine.stats.application.version : Constants.UNKNOWN_VALUE;
	      }, getVisitorId: function getVisitorId() {
	        return c(), r;
	      }, getVisitorIdSuffix: function getVisitorIdSuffix() {
	        return u;
	      }, getDeviceName: function getDeviceName() {
	        return e.safeGet(engine.stats.device.platform, "");
	      }, getPlatformVersion: function getPlatformVersion() {
	        return e.safeGet(engine.stats.device.version, "");
	      }, getPlatformName: function getPlatformName() {
	        return "js";
	      }, getRuntimeName: function getRuntimeName() {
	        return "trilithium";
	      }, getRuntimeVersion: function getRuntimeVersion() {
	        return "";
	      }, getResolution: function getResolution() {
	        return typeof screen != "undefined" && typeof screen.height != "undefined" && typeof screen.width != "undefined" ? screen.height + "x" + screen.width : "";
	      }, getLanguage: function getLanguage() {
	        return "";
	      }, getPackageName: function getPackageName() {
	        return "";
	      }, isConnectionAvailable: function isConnectionAvailable() {
	        return !0;
	      }, isCompatible: f };
	  }();u.autoSelect = function () {
	    a.isCompatible() && e.extend(u, a);
	  };var f = typeof window != "undefined" && typeof document != "undefined",
	      l,
	      c;f ? (l = window, c = document) : (l = {}, c = { location: { href: "" }, title: "", URL: "", referrer: "", cookie: "" });var e = e || {};e.filterMap = function (t, n) {
	    for (var r in t) {
	      e.indexOf(r, n) == -1 && delete t[r];
	    }
	  }, e.getKeys = function (e, t) {
	    var n,
	        r = [];for (n in e) {
	      (!t || t.test(n)) && e.hasOwnProperty(n) && (r[r.length] = n);
	    }return r;
	  };var d = function () {
	    var e = ["play", "pause", "end", "buffer", "keep-alive", "hb", "custom", "ad_play", "ad_pause", "ad_end", "ad_click"];return { PLAY: 0, PAUSE: 1, END: 2, BUFFER: 3, KEEP_ALIVE: 4, HEART_BEAT: 5, CUSTOM: 6, AD_PLAY: 7, AD_PAUSE: 8, AD_END: 9, AD_CLICK: 10, toString: function toString(t) {
	        return e[t];
	      } };
	  }(),
	      v = function () {
	    var e = [d.END, d.PLAY, d.PAUSE, d.BUFFER];return { IDLE: 0, PLAYING: 1, PAUSED: 2, BUFFERING: 3, toEventType: function toEventType(t) {
	        return e[t];
	      } };
	  }(),
	      m = { ADPLAY: d.AD_PLAY, ADPAUSE: d.AD_PAUSE, ADEND: d.AD_END, ADCLICK: d.AD_CLICK },
	      g = { STREAMSENSE_VERSION: "4.1412.05", DEFAULT_PLAYERNAME: "streamsense", DEFAULT_HEARTBEAT_INTERVAL: [{ playingtime: 6e4, interval: 1e4 }, { playingtime: null, interval: 6e4 }], DEFAULT_KEEP_ALIVE_INTERVAL: 12e5, DEFAULT_PAUSED_ON_BUFFERING_INTERVAL: 500, C1_VALUE: "19", C10_VALUE: "js", NS_AP_C12M_VALUE: "1", NS_NC_VALUE: "1", PAGE_NAME_LABEL: "name", RESTRICTED_URL_LENGTH_LIMIT: 2048, URL_LENGTH_LIMIT: 4096, LABELS_ORDER: ["c1", "c2", "ca2", "cb2", "cc2", "cd2", "ns_site", "ca_ns_site", "cb_ns_site", "cc_ns_site", "cd_ns_site", "ns_vsite", "ca_ns_vsite", "cb_ns_vsite", "cc_ns_vsite", "cd_ns_vsite", "ns_ap_an", "ca_ns_ap_an", "cb_ns_ap_an", "cc_ns_ap_an", "cd_ns_ap_an", "ns_ap_pn", "ns_ap_pv", "c12", "ca12", "cb12", "cc12", "cd12", "ns_ak", "ns_ns_ap_hw", "name", "ns_ap_ni", "ns_ap_ec", "ns_ap_ev", "ns_ap_device", "ns_ap_id", "ns_ap_csf", "ns_ap_bi", "ns_ap_pfm", "ns_ap_pfv", "ns_ap_ver", "ca_ns_ap_ver", "cb_ns_ap_ver", "cc_ns_ap_ver", "cd_ns_ap_ver", "ns_ap_sv", "ns_ap_cv", "ns_type", "ca_ns_type", "cb_ns_type", "cc_ns_type", "cd_ns_type", "ns_radio", "ns_nc", "ns_ap_ui", "ca_ns_ap_ui", "cb_ns_ap_ui", "cc_ns_ap_ui", "cd_ns_ap_ui", "ns_ap_gs", "ns_st_sv", "ns_st_pv", "ns_st_it", "ns_st_id", "ns_st_ec", "ns_st_sp", "ns_st_sq", "ns_st_cn", "ns_st_ev", "ns_st_po", "ns_st_cl", "ns_st_el", "ns_st_pb", "ns_st_hc", "ns_st_mp", "ca_ns_st_mp", "cb_ns_st_mp", "cc_ns_st_mp", "cd_ns_st_mp", "ns_st_mv", "ca_ns_st_mv", "cb_ns_st_mv", "cc_ns_st_mv", "cd_ns_st_mv", "ns_st_pn", "ns_st_tp", "ns_st_pt", "ns_st_pa", "ns_st_ad", "ns_st_li", "ns_st_ci", "ns_ap_jb", "ns_ap_res", "ns_ap_c12m", "ns_ap_install", "ns_ap_updated", "ns_ap_lastrun", "ns_ap_cs", "ns_ap_runs", "ns_ap_usage", "ns_ap_fg", "ns_ap_ft", "ns_ap_dft", "ns_ap_bt", "ns_ap_dbt", "ns_ap_dit", "ns_ap_as", "ns_ap_das", "ns_ap_it", "ns_ap_uc", "ns_ap_aus", "ns_ap_daus", "ns_ap_us", "ns_ap_dus", "ns_ap_ut", "ns_ap_oc", "ns_ap_uxc", "ns_ap_uxs", "ns_ap_lang", "ns_ap_ar", "ns_ap_miss", "ns_ts", "ns_st_ca", "ns_st_cp", "ns_st_er", "ca_ns_st_er", "cb_ns_st_er", "cc_ns_st_er", "cd_ns_st_er", "ns_st_pe", "ns_st_ui", "ca_ns_st_ui", "cb_ns_st_ui", "cc_ns_st_ui", "cd_ns_st_ui", "ns_st_bc", "ns_st_bt", "ns_st_bp", "ns_st_pc", "ns_st_pp", "ns_st_br", "ns_st_ub", "ns_st_vo", "ns_st_ws", "ns_st_pl", "ns_st_pr", "ns_st_ep", "ns_st_ty", "ns_st_ct", "ns_st_cs", "ns_st_ge", "ns_st_st", "ns_st_dt", "ns_st_de", "ns_st_pu", "ns_st_cu", "ns_st_fee", "ns_ap_i1", "ns_ap_i2", "ns_ap_i3", "ns_ap_i4", "ns_ap_i5", "ns_ap_i6", "c3", "ca3", "cb3", "cc3", "cd3", "c4", "ca4", "cb4", "cc4", "cd4", "c5", "ca5", "cb5", "cc5", "cd5", "c6", "ca6", "cb6", "cc6", "cd6", "c10", "c11", "c13", "c14", "c15", "c16", "c7", "c8", "c9"] },
	      y = function () {
	    var t = function t() {
	      function l(e, t) {
	        var n = t[e];n != null && (f[e] = n);
	      }var t = this,
	          n = 0,
	          r = 0,
	          i = 0,
	          s = 0,
	          o = 0,
	          u = 0,
	          a,
	          f;e.extend(this, { reset: function reset(n) {
	          n != null && n.length > 0 ? e.filterMap(f, n) : f = {}, f.hasOwnProperty("ns_st_cl") || (f.ns_st_cl = "0"), f.hasOwnProperty("ns_st_pn") || (f.ns_st_pn = "1"), f.hasOwnProperty("ns_st_tp") || (f.ns_st_tp = "1"), t.setPauses(0), t.setStarts(0), t.setBufferingTime(0), t.setBufferingTimestamp(-1), t.setPlaybackTime(0), t.setPlaybackTimestamp(-1);
	        }, setLabels: function setLabels(n, r) {
	          n != null && e.extend(f, n), t.setRegisters(f, r);
	        }, getLabels: function getLabels() {
	          return f;
	        }, setLabel: function setLabel(e, n) {
	          var r = {};r[e] = n, t.setLabels(r, null);
	        }, getLabel: function getLabel(e) {
	          return f[e];
	        }, getClipId: function getClipId() {
	          return (typeof a == "undefined" || a == null) && t.setClipId("1"), a;
	        }, setClipId: function setClipId(e) {
	          a = e;
	        }, setRegisters: function setRegisters(e, s) {
	          var u = e.ns_st_cn;u != null && (t.setClipId(u), delete e.ns_st_cn), u = e.ns_st_bt, u != null && (i = Number(u), delete e.ns_st_bt), l("ns_st_cl", e), l("ns_st_pn", e), l("ns_st_tp", e), l("ns_st_ub", e), l("ns_st_br", e);if (s == v.PLAYING || s == null) u = e.ns_st_sq, u != null && (r = Number(u), delete e.ns_st_sq);s != v.BUFFERING && (u = e.ns_st_pt, u != null && (o = Number(u), delete e.ns_st_pt));if (s == v.PAUSED || s == v.IDLE || s == null) u = e.ns_st_pc, u != null && (n = Number(u), delete e.ns_st_pc);
	        }, createLabels: function createLabels(i, s) {
	          var o = s || {};o.ns_st_cn = t.getClipId(), o.ns_st_bt = String(t.getBufferingTime());if (i == d.PLAY || i == null) o.ns_st_sq = String(r);if (i == d.PAUSE || i == d.END || i == d.KEEP_ALIVE || i == d.HEART_BEAT || i == null) o.ns_st_pt = String(t.getPlaybackTime()), o.ns_st_pc = String(n);return e.extend(o, t.getLabels()), o;
	        }, incrementPauses: function incrementPauses() {
	          n++;
	        }, incrementStarts: function incrementStarts() {
	          r++;
	        }, getBufferingTime: function getBufferingTime() {
	          var e = i;return s >= 0 && (e += +new Date() - s), e;
	        }, setBufferingTime: function setBufferingTime(e) {
	          i = e;
	        }, getPlaybackTime: function getPlaybackTime() {
	          var e = o;return u >= 0 && (e += +new Date() - u), e;
	        }, setPlaybackTime: function setPlaybackTime(e) {
	          o = e;
	        }, getPlaybackTimestamp: function getPlaybackTimestamp() {
	          return u;
	        }, setPlaybackTimestamp: function setPlaybackTimestamp(e) {
	          u = e;
	        }, getBufferingTimestamp: function getBufferingTimestamp() {
	          return s;
	        }, setBufferingTimestamp: function setBufferingTimestamp(e) {
	          s = e;
	        }, getPauses: function getPauses() {
	          return n;
	        }, setPauses: function setPauses(e) {
	          n = e;
	        }, getStarts: function getStarts() {
	          return r;
	        }, setStarts: function setStarts(e) {
	          r = e;
	        } }), f = {}, t.reset();
	    };return t;
	  }(),
	      b = function () {
	    var t = function t() {
	      var t = this,
	          n = null,
	          r,
	          i = 0,
	          s = 0,
	          o = 0,
	          u = 0,
	          a = 0,
	          f,
	          l = 0,
	          c = !1;e.extend(this, { reset: function reset(n) {
	          n != null && n.length > 0 ? e.filterMap(f, n) : f = {}, t.setPlaylistId(+new Date() + "_" + l), t.setBufferingTime(0), t.setPlaybackTime(0), t.setPauses(0), t.setStarts(0), t.setRebufferCount(0), c = !1;
	        }, setLabels: function setLabels(n, r) {
	          n != null && e.extend(f, n), t.setRegisters(f, r);
	        }, getLabels: function getLabels() {
	          return f;
	        }, setLabel: function setLabel(e, n) {
	          var r = {};r[e] = n, t.setLabels(r, null);
	        }, getLabel: function getLabel(e) {
	          return f[e];
	        }, getClip: function getClip() {
	          return n;
	        }, getPlaylistId: function getPlaylistId() {
	          return r;
	        }, setPlaylistId: function setPlaylistId(e) {
	          r = e;
	        }, setRegisters: function setRegisters(e, t) {
	          var n = e.ns_st_sp;n != null && (i = Number(n), delete e.ns_st_sp), n = e.ns_st_bc, n != null && (o = Number(n), delete e.ns_st_bc), n = e.ns_st_bp, n != null && (u = Number(n), delete e.ns_st_bp), n = e.ns_st_id, n != null && (r = n, delete e.ns_st_id), t != v.BUFFERING && (n = e.ns_st_pa, n != null && (a = Number(n), delete e.ns_st_pa));if (t == v.PAUSED || t == v.IDLE || t == null) n = e.ns_st_pp, n != null && (s = Number(n), delete e.ns_st_pp);
	        }, createLabels: function createLabels(n, u) {
	          var a = u || {};a.ns_st_bp = String(t.getBufferingTime()), a.ns_st_sp = String(i), a.ns_st_id = String(r), o > 0 && (a.ns_st_bc = String(o));if (n == d.PAUSE || n == d.END || n == d.KEEP_ALIVE || n == d.HEART_BEAT || n == null) a.ns_st_pa = String(t.getPlaybackTime()), a.ns_st_pp = String(s);if (n == d.PLAY || n == null) t.didFirstPlayOccurred() || (a.ns_st_pb = "1", t.setFirstPlayOccurred(!0));return e.extend(a, t.getLabels()), a;
	        }, incrementStarts: function incrementStarts() {
	          i++;
	        }, incrementPauses: function incrementPauses() {
	          s++, n.incrementPauses();
	        }, setPlaylistCounter: function setPlaylistCounter(e) {
	          l = e;
	        }, incrementPlaylistCounter: function incrementPlaylistCounter() {
	          l++;
	        }, addPlaybackTime: function addPlaybackTime(e) {
	          if (n.getPlaybackTimestamp() >= 0) {
	            var r = e - n.getPlaybackTimestamp();n.setPlaybackTimestamp(-1), n.setPlaybackTime(n.getPlaybackTime() + r), t.setPlaybackTime(t.getPlaybackTime() + r);
	          }
	        }, addBufferingTime: function addBufferingTime(e) {
	          if (n.getBufferingTimestamp() >= 0) {
	            var r = e - n.getBufferingTimestamp();n.setBufferingTimestamp(-1), n.setBufferingTime(n.getBufferingTime() + r), t.setBufferingTime(t.getBufferingTime() + r);
	          }
	        }, getBufferingTime: function getBufferingTime() {
	          var e = u;return n.getBufferingTimestamp() >= 0 && (e += +new Date() - n.getBufferingTimestamp()), e;
	        }, setBufferingTime: function setBufferingTime(e) {
	          u = e;
	        }, getPlaybackTime: function getPlaybackTime() {
	          var e = a;return n.getPlaybackTimestamp() >= 0 && (e += +new Date() - n.getPlaybackTimestamp()), e;
	        }, setPlaybackTime: function setPlaybackTime(e) {
	          a = e;
	        }, getStarts: function getStarts() {
	          return i;
	        }, setStarts: function setStarts(e) {
	          i = e;
	        }, getPauses: function getPauses() {
	          return s;
	        }, setPauses: function setPauses(e) {
	          s = e;
	        }, getRebufferCount: function getRebufferCount() {
	          return o;
	        }, incrementRebufferCount: function incrementRebufferCount() {
	          o++;
	        }, setRebufferCount: function setRebufferCount(e) {
	          o = e;
	        }, didFirstPlayOccurred: function didFirstPlayOccurred() {
	          return c;
	        }, setFirstPlayOccurred: function setFirstPlayOccurred(e) {
	          c = e;
	        } }), n = new y(), f = {}, t.reset();
	    };return t;
	  }(),
	      w = function () {
	    var t = function t(_t, n) {
	      function q(e) {
	        var t = 0;if (k != null) for (var n = 0; n < k.length; n++) {
	          var r = k[n],
	              i = r.playingtime;if (!i || e < i) {
	            t = r.interval;break;
	          }
	        }return t;
	      }function R() {
	        X();var e = q(w.getClip().getPlaybackTime());if (e > 0) {
	          var t = O > 0 ? O : e;C = setTimeout(W, t);
	        }O = 0;
	      }function U() {
	        X();var e = q(w.getClip().getPlaybackTime());O = e - w.getClip().getPlaybackTime() % e, C != null && X();
	      }function z() {
	        O = 0, _ = 0, M = 0;
	      }function W() {
	        M++;var e = mt(d.HEART_BEAT, null);rt(e), O = 0, R();
	      }function X() {
	        C != null && (clearTimeout(C), C = null);
	      }function V() {
	        J(), N = setTimeout($, L);
	      }function $() {
	        var e = mt(d.KEEP_ALIVE, null);rt(e), y++, V();
	      }function J() {
	        N != null && (clearTimeout(N), N = null);
	      }function K() {
	        G(), r.isPauseOnBufferingEnabled() && at(v.PAUSED) && (x = setTimeout(Q, A));
	      }function Q() {
	        if (P == v.PLAYING) {
	          w.incrementRebufferCount(), w.incrementPauses();var e = mt(d.PAUSE, null);rt(e), y++, P = v.PAUSED;
	        }
	      }function G() {
	        x != null && (clearTimeout(x), x = null);
	      }function Y(e) {
	        return e == v.PLAYING || e == v.PAUSED;
	      }function Z() {
	        l && (clearTimeout(l), l = null);
	      }function et(e) {
	        return e == d.PLAY ? v.PLAYING : e == d.PAUSE ? v.PAUSED : e == d.BUFFER ? v.BUFFERING : e == d.END ? v.IDLE : null;
	      }function tt(t, n, r) {
	        Z();if (r) l = setTimeout(function (e, t) {
	          return function () {
	            tt(e, t);
	          };
	        }(t, n), r);else if (ct(t)) {
	          var i = pt(),
	              s = a,
	              o = lt(n),
	              u = s >= 0 ? o - s : 0;ot(pt(), n), ut(t, n), dt(pt()), ht(t);for (var f = 0, c = F.length; f < c; f++) {
	            F[f](i, t, n, u);
	          }nt(n), w.setRegisters(n, t), w.getClip().setRegisters(n, t);var h = mt(v.toEventType(t), n);e.extend(h, n), at(m) && (rt(h), P = m, y++);
	        }
	      }function nt(e) {
	        var t = e.ns_st_mp;t != null && (H = t, delete e.ns_st_mp), t = e.ns_st_mv, t != null && (B = t, delete e.ns_st_mv), t = e.ns_st_ec, t != null && (y = Number(t), delete e.ns_st_ec);
	      }function rt(e, t) {
	        t === undefined && (t = !0), t && st(e);var n = r.getPixelURL();if (E) {
	          if (!it()) {
	            var i = I.am,
	                s = I.et,
	                o = i.newApplicationMeasurement(E, s.HIDDEN, e, n);E.getQueue().offer(o);
	          }
	        } else n && u.httpGet(p(n, e));
	      }function it() {
	        var e = E.getAppContext(),
	            t = E.getSalt(),
	            n = E.getPixelURL();return e == null || t == null || t.length == 0 || n == null || n.length == 0;
	      }function st(t) {
	        j = mt(null), e.extend(j, t);
	      }function ot(t, n) {
	        var r = lt(n);if (t == v.PLAYING) w.addPlaybackTime(r), U(), J();else if (t == v.BUFFERING) w.addBufferingTime(r), G();else if (t == v.IDLE) {
	          var i = e.getKeys(w.getClip().getLabels());w.getClip().reset(i);
	        }
	      }function ut(e, t) {
	        var n = lt(t),
	            r = ft(t);f = r, e == v.PLAYING ? (R(), V(), w.getClip().setPlaybackTimestamp(n), at(e) && (w.getClip().incrementStarts(), w.getStarts() < 1 && w.setStarts(1))) : e == v.PAUSED ? at(e) && w.incrementPauses() : e == v.BUFFERING ? (w.getClip().setBufferingTimestamp(n), T && K()) : e == v.IDLE && z();
	      }function at(e) {
	        return e != v.PAUSED && e != v.IDLE || P != v.IDLE && P != null ? e != v.BUFFERING && P != e : !1;
	      }function ft(t) {
	        var n = -1;return t.hasOwnProperty("ns_st_po") && (n = e.getInteger(t.ns_st_po)), n;
	      }function lt(e) {
	        var t = -1;return e.hasOwnProperty("ns_ts") && (t = Number(e.ns_ts)), t;
	      }function ct(e) {
	        return e != null && pt() != e;
	      }function ht(e) {
	        m = e, a = +new Date();
	      }function pt() {
	        return m;
	      }function dt(e) {
	        c = e;
	      }function vt() {
	        return c;
	      }function mt() {
	        var t, n;arguments.length == 1 ? (t = v.toEventType(m), n = arguments[0]) : (t = arguments[0], n = arguments[1]);var i = {};if (typeof document != "undefined") {
	          var s = document;i.c7 = s.URL, i.c8 = s.title, i.c9 = s.referrer;
	        }return n != null && e.extend(i, n), i.hasOwnProperty("ns_ts") || (i.ns_ts = String(+new Date())), t != null && !i.hasOwnProperty("ns_st_ev") && (i.ns_st_ev = d.toString(t)), r.isPersistentLabelsShared() && E && e.extend(i, E.getLabels()), e.extend(i, r.getLabels()), gt(t, i), w.createLabels(t, i), w.getClip().createLabels(t, i), i.hasOwnProperty("ns_st_mp") || (i.ns_st_mp = H), i.hasOwnProperty("ns_st_mv") || (i.ns_st_mv = B), i.hasOwnProperty("ns_st_ub") || (i.ns_st_ub = "0"), i.hasOwnProperty("ns_st_br") || (i.ns_st_br = "0"), i.hasOwnProperty("ns_st_pn") || (i.ns_st_pn = "1"), i.hasOwnProperty("ns_st_tp") || (i.ns_st_tp = "1"), i.hasOwnProperty("ns_st_it") || (i.ns_st_it = "c"), i.ns_st_sv = g.STREAMSENSE_VERSION, i.ns_type = "hidden", i;
	      }function gt(t, n) {
	        var r = n || {};r.ns_st_ec = String(y);if (!r.hasOwnProperty("ns_st_po")) {
	          var i = f,
	              s = lt(r);if (t == d.PLAY || t == d.KEEP_ALIVE || t == d.HEART_BEAT || t == null && m == v.PLAYING) i += s - w.getClip().getPlaybackTimestamp();r.ns_st_po = e.getInteger(i);
	        }return t == d.HEART_BEAT && (r.ns_st_hc = String(M)), r;
	      }function yt(e) {
	        var t = lt(e);t < 0 && (e.ns_ts = String(+new Date()));
	      }function bt(e, t, n) {
	        t = t || {}, t.ns_st_ad = 1, e >= d.AD_PLAY && e <= d.AD_CLICK && r.notify(e, t, n);
	      }function wt(e, t) {
	        r.notify(d.CUSTOM, e, t);
	      }var r = this,
	          i = 500,
	          s,
	          o = null,
	          a = 0,
	          f = 0,
	          l,
	          c,
	          m,
	          y = 0,
	          w = null,
	          E,
	          S = !0,
	          x,
	          T = !0,
	          N,
	          C,
	          k = g.DEFAULT_HEARTBEAT_INTERVAL,
	          L = g.DEFAULT_KEEP_ALIVE_INTERVAL,
	          A = g.DEFAULT_PAUSED_ON_BUFFERING_INTERVAL,
	          O = 0,
	          M = 0,
	          _ = 0,
	          D = !1,
	          P,
	          H,
	          B,
	          j,
	          F,
	          I = {};u.autoSelect(), e.extend(this, { reset: function reset(t) {
	          w.reset(t), w.setPlaylistCounter(0), w.setPlaylistId(+new Date() + "_1"), w.getClip().reset(t), t != null && !t.isEmpty() ? e.filterMap(s, t) : s = {}, y = 1, M = 0, U(), z(), J(), G(), Z(), m = v.IDLE, c = null, a = -1, P = null, H = g.DEFAULT_PLAYERNAME, B = g.STREAMSENSE_VERSION, j = null;
	        }, setPauseOnBufferingInterval: function setPauseOnBufferingInterval(e) {
	          A = e;
	        }, getPauseOnBufferingInterval: function getPauseOnBufferingInterval() {
	          return A;
	        }, setKeepAliveInterval: function setKeepAliveInterval(e) {
	          L = e;
	        }, getKeepAliveInterval: function getKeepAliveInterval() {
	          return L;
	        }, setHeartbeatIntervals: function setHeartbeatIntervals(e) {
	          k = e;
	        }, notify: function notify() {
	          var t, n, s, o;n = arguments[0], arguments.length == 3 ? (s = arguments[1], o = arguments[2]) : (s = {}, o = arguments[1]), t = et(n);var u = e.extend({}, s);yt(u), u.hasOwnProperty("ns_st_po") || (u.ns_st_po = e.getInteger(o).toString());if (n == d.PLAY || n == d.PAUSE || n == d.BUFFER || n == d.END) r.isPausePlaySwitchDelayEnabled() && Y(m) && Y(t) && (m != v.PLAYING || t != v.PAUSED || !!l) ? tt(t, u, i) : tt(t, u);else {
	            var a = mt(n, u);e.extend(a, u), rt(a, !1), y++;
	          }
	        }, getLabels: function getLabels() {
	          return s;
	        }, getState: function getState() {
	          return m;
	        }, setLabels: function setLabels(t) {
	          t != null && (s == null ? s = t : e.extend(s, t));
	        }, getLabel: function getLabel(e) {
	          return s[e];
	        }, setLabel: function setLabel(e, t) {
	          t == null ? delete s[e] : s[e] = t;
	        }, setPixelURL: function setPixelURL(e) {
	          if (e == null || e.length == 0) return null;var t = decodeURIComponent || unescape,
	              n = e.indexOf("?");if (n >= 0) {
	            if (n < e.length - 1) {
	              var i = e.substring(n + 1).split("&");for (var s = 0, u = i.length; s < u; s++) {
	                var a = i[s],
	                    f = a.split("=");f.length == 2 ? r.setLabel(f[0], t(f[1])) : f.length == 1 && r.setLabel(g.PAGE_NAME_LABEL, t(f[0]));
	              }e = e.substring(0, n + 1);
	            }
	          } else e += "?";return o = e, o;
	        }, getPixelURL: function getPixelURL() {
	          return o ? o : typeof ns_p != "undefined" && typeof ns_p.src == "string" ? o = ns_p.src.replace(/&amp;/, "&").replace(/&ns__t=\d+/, "") : typeof ns_pixelUrl == "string" ? o = ns_pixelUrl.replace(/&amp;/, "&").replace(/&ns__t=\d+/, "") : null;
	        }, isPersistentLabelsShared: function isPersistentLabelsShared() {
	          return S;
	        }, setPersistentLabelsShared: function setPersistentLabelsShared(e) {
	          S = e;
	        }, isPauseOnBufferingEnabled: function isPauseOnBufferingEnabled() {
	          return T;
	        }, setPauseOnBufferingEnabled: function setPauseOnBufferingEnabled(e) {
	          T = e;
	        }, isPausePlaySwitchDelayEnabled: function isPausePlaySwitchDelayEnabled() {
	          return D;
	        }, setPausePlaySwitchDelayEnabled: function setPausePlaySwitchDelayEnabled(e) {
	          D = e;
	        }, setPausePlaySwitchDelay: function setPausePlaySwitchDelay(e) {
	          e && e > 0 && (i = e);
	        }, getPausePlaySwitchDelay: function getPausePlaySwitchDelay() {
	          return i;
	        }, setClip: function setClip(e, t) {
	          var n = !1;return m == v.IDLE && (w.getClip().reset(), w.getClip().setLabels(e, null), t && w.incrementStarts(), n = !0), n;
	        }, setPlaylist: function setPlaylist(e) {
	          var t = !1;return m == v.IDLE && (w.incrementPlaylistCounter(), w.reset(), w.getClip().reset(), w.setLabels(e, null), t = !0), t;
	        }, importState: function importState(t) {
	          reset();var n = e.extend({}, t);w.setRegisters(n, null), w.getClip().setRegisters(n, null), nt(n), y++;
	        }, exportState: function exportState() {
	          return j;
	        }, getVersion: function getVersion() {
	          return g.STREAMSENSE_VERSION;
	        }, addListener: function addListener(e) {
	          F.push(e);
	        }, removeListener: function removeListener(t) {
	          F.splice(e.indexOf(t, F), 1);
	        }, getClip: function getClip() {
	          return w.getClip();
	        }, getPlaylist: function getPlaylist() {
	          return w;
	        } }), e.extend(this, { adNotify: bt, customNotify: wt, viewNotify: function viewNotify(e, t) {
	          e = e || r.getPixelURL(), e && h(e, t);
	        } }), ns_.comScore && (I = ns_.comScore.exports, E = I.c()), s = {}, y = 1, m = v.IDLE, w = new b(), x = null, T = !0, C = null, M = 0, z(), N = null, l = null, D = !1, P = null, f = 0, F = [], r.reset(), _t && r.setLabels(_t), n && r.setPixelURL(n);
	    };return function (t) {
	      function s(e, t) {
	        return n[i] || u(e, t);
	      }function o() {
	        i = -1;for (var e = 0; e <= r; e++) {
	          if (n.hasOwnProperty(e)) {
	            i = e;break;
	          }
	        }return ns_.StreamSense.activeIndex = i, i;
	      }function u(e, t) {
	        return e = e || null, t = t || null, e && (typeof e === "undefined" ? "undefined" : _typeof(e)) == "object" && (t = e, e = null), n[++r] = new ns_.StreamSense(t, e), o(), n[r];
	      }function a() {
	        var e = !1,
	            t = i;if (typeof arguments[0] == "number" && isFinite(arguments[0])) t = arguments[0];else if (arguments[0] instanceof ns_.StreamSense) for (var r in n) {
	          if (n[r] === arguments[0]) {
	            t = r;break;
	          }
	        }return n.hasOwnProperty(t) && (e = n[t], delete n[t], e.reset(), o()), e;
	      }function f(e) {
	        return e = e || {}, s().setPlaylist(e), s().getPlaylist();
	      }function l(e, t, n) {
	        return e = e || {}, typeof t == "number" && (e.ns_st_cn = t), s().setClip(e, n), s().getClip();
	      }function c(e, t, n) {
	        return typeof e == "undefined" ? !1 : (n = n || null, t = t || {}, s().notify(e, t, n));
	      }function h(e) {
	        typeof e != "undefined" && s().setLabels(e);
	      }function p() {
	        return s().getLabels();
	      }function d(e) {
	        typeof e != "undefined" && s().getPlaylist().setLabels(e);
	      }function v() {
	        return s().getPlaylist().getLabels();
	      }function m(e) {
	        typeof e != "undefined" && s().getClip().setLabels(e);
	      }function g() {
	        return s().getClip().getLabels();
	      }function y(e) {
	        return s().reset(e || {});
	      }function b(e) {
	        return s().getPlaylist().reset(e || {});
	      }function w(e) {
	        return s().getClip().reset(e || {});
	      }function E(e) {
	        return e = e || {}, s().viewNotify(null, e);
	      }function S(e, t) {
	        return arguments.length > 2 && (e = arguments[1], t = arguments[2]), e = e || {}, typeof t == "number" && (e.ns_st_po = t), s().customNotify(e, t);
	      }function x() {
	        return s().exportState();
	      }function T(e) {
	        s().importState(e);
	      }var n = {},
	          r = -1,
	          i = -1;e.extend(t, { activeIndex: i, newInstance: u, "new": u, destroyInstance: a, destroy: a, newPlaylist: f, newClip: l, notify: c, setLabels: h, getLabels: p, setPlaylistLabels: d, getPlaylistLabels: v, setClipLabels: m, getClipLabels: g, resetInstance: y, resetPlaylist: b, resetClip: w, viewEvent: E, customEvent: S, exportState: x, importState: T });
	    }(t), t;
	  }();return w.AdEvents = m, w.PlayerEvents = d, ns_.StreamingTag = ns_.StreamingTag || function () {
	    var t = function () {
	      var t = function t(_t2) {
	        function h() {
	          if (!ns_.comScore && e.exists(_t2)) {
	            f = e.isTrue(_t2.debug);if (e.exists(_t2.customerC2)) {
	              var n = _t2.secure ? "https://sb" : "http" + (document.location.href.charAt(4) == "s" ? "s://sb" : "://b");a.setPixelURL(n + ".scorecardresearch.com/p?c1=2"), a.setLabel("c2", _t2.customerC2);
	            } else a.setPixelURL(""), f && console.log("Warning: customerC2 is not provided (or incorrect) in the StreamingTag configuration.");
	          }a.setLabel("ns_st_it", "r");
	        }function p(t) {
	          return e.exists(t) || (t = {}), e.exists(t.ns_st_ci) || (t.ns_st_ci = "0"), e.exists(t.c3) || (t.c3 = "*null"), e.exists(t.c4) || (t.c4 = "*null"), e.exists(t.c6) || (t.c6 = "*null"), t;
	        }function m(e) {
	          return i > 0 && e >= i ? s += e - i : s = 0, s;
	        }function g(e) {
	          a.getState() != v.IDLE && a.getState() != v.PAUSED ? a.notify(d.END, m(e)) : a.getState() == v.PAUSED && a.notify(d.END, s);
	        }function y(e) {
	          return b("ns_st_ci", o, e) && b("c3", o, e) && b("c4", o, e) && b("c6", o, e);
	        }function b(t, n, r) {
	          if (e.exists(t) && e.exists(n) && e.exists(r)) {
	            var i = n[t],
	                s = r[t];return e.exists(i) && e.exists(s) && i === s;
	          }return !1;
	        }function E(t, n) {
	          g(t), r++;var u = { ns_st_cn: r, ns_st_pn: "1", ns_st_tp: "0" };e.extend(u, n), a.setClip(u), o = n, i = t, s = 0, a.notify(d.PLAY, s);
	        }function S(t) {
	          var n = +new Date();g(n), r++, t = p(t);var o = { ns_st_cn: r, ns_st_pn: "1", ns_st_tp: "1", ns_st_ad: "1" };e.extend(o, t), a.setClip(o), s = 0, a.notify(d.PLAY, s), i = n, u = !1;
	        }function x(e, t) {
	          var n = +new Date();e = p(e), c == l.None && (c = t), u && c == t ? y(e) ? (a.getClip().setLabels(e), a.getState() != v.PLAYING && (i = n, a.notify(d.PLAY, s))) : E(n, e) : E(n, e), u = !0, c = t;
	        }var n = this,
	            r = 0,
	            i = 0,
	            s = 0,
	            o = null,
	            u = !1,
	            a = new w(),
	            f = !1,
	            l = { None: 0, AudioContent: 1, VideoContent: 2 },
	            c = l.None;e.extend(this, { playAdvertisement: function playAdvertisement() {
	            f && console && console.warn("Calling deprecated function 'playAdvertisement'. Please call 'playVideoAdvertisement' or 'playAudioAdvertisement' functions instead.");var e = { ns_st_ct: "va" };S(e);
	          }, playVideoAdvertisement: function playVideoAdvertisement(t) {
	            var n = { ns_st_ct: "va" };t && e.extend(n, t), S(n);
	          }, playAudioAdvertisement: function playAudioAdvertisement(t) {
	            var n = { ns_st_ct: "aa" };t && e.extend(n, t), S(n);
	          }, playContentPart: function playContentPart(t) {
	            f && console && console.warn("Calling deprecated function 'playContentPart'. Please call 'playVideoContentPart' or 'playAudioContentPart' functions instead.");var n = { ns_st_ct: "vc" };t && e.extend(n, t), x(n, l.VideoContent);
	          }, playVideoContentPart: function playVideoContentPart(t) {
	            var n = { ns_st_ct: "vc" };t && e.extend(n, t), x(n, l.VideoContent);
	          }, playAudioContentPart: function playAudioContentPart(t) {
	            var n = { ns_st_ct: "ac" };t && e.extend(n, t), x(n, l.AudioContent);
	          }, stop: function stop() {
	            var e = +new Date();a.notify(d.PAUSE, m(e));
	          } }), h();
	      };return function (e) {}(t), t;
	    }();return t;
	  }(), w;
	}();
	
	/*** EXPORTS FROM exports-loader ***/
	module.exports = ns_;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var config = __webpack_require__(148);
	var utils = __webpack_require__(141);
	var sections = __webpack_require__(150);
	var locale = __webpack_require__(151);
	var survey = __webpack_require__(152);
	var classes = __webpack_require__(153);
	
	var Krux = __webpack_require__(154);
	var Predicate = __webpack_require__(155);
	
	var analytics = __webpack_require__(165);
	
	var layout = __webpack_require__(158);
	var breakpoints = __webpack_require__(226);
	var adRegister = __webpack_require__(160);
	var adUnit = __webpack_require__(162);
	var keyValues = __webpack_require__(156);
	var adSuites = __webpack_require__(225);
	var dfppRequest = __webpack_require__(157);
	var pubsub = __webpack_require__(161);
	var Stats = __webpack_require__(271);
	var AnalyticsHelper = __webpack_require__(215);
	
	var addLoadEvent = __webpack_require__(272);
	var log = __webpack_require__(142)('init');
	
	/**
	 * Initialise bbcdotcom. Called in the scope of the main bbcdotcom object
	 *
	 * @param params
	 */
	module.exports = function init(params) {
	    'use strict';
	
	    try {
	        var x,
	            i,
	            len,
	            windowLocation = config.getWindowLocation(),
	            windowDocument = config.getWindowDocument();
	
	        log.info('bbcdotcom.init() with params: ', params);
	
	        /**
	         * BBCCOM-8012: This page uses live stream, shouldn't include 'mpu' in adsToDisplay
	         */
	        if (/^\/news\/world\/us_and_canada\/states/.test(windowLocation.pathname) && params.adsToDisplay) {
	            log.info('bbcdotcom filter ads ', params.adsToDisplay);
	            params.adsToDisplay = params.adsToDisplay.filter(function (element) {
	                return !element.includes('mpu');
	            });
	        }
	
	        utils.addHtmlTagClass(classes.classNames('init', 'responsive'));
	        Stats.init();
	
	        if (config.isActive('ads') && !config.isSportApp()) {
	
	            config.init(params);
	
	            utils.addHtmlTagClass(classes.fromConfig(config, window));
	
	            /**
	             * Load stylesheets
	             */
	            if (config.isAsync()) {
	                if (/(sandbox|int)(.dev)*.bbc.co*/.test(window.location.href) || /[?|&]ads-debug/.test(window.location.href) || document.cookie.indexOf('ads-debug=') !== -1) {
	                    utils.appendLinkToHead(config.getAssetPrefix() + 'style/dist/bbcdotcom-async.dev.css');
	                } else {
	                    utils.appendLinkToHead(config.getAssetPrefix() + 'style/dist/bbcdotcom-async.css');
	                }
	            }
	            if (!config.isAsync() && config.isIE7()) {
	                if (/(sandbox|int)(.dev)*.bbc.co*/.test(window.location.href) || /[?|&]ads-debug/.test(window.location.href) || document.cookie.indexOf('ads-debug=') !== -1) {
	                    utils.appendLinkToHead(config.getAssetPrefix() + 'style/dist/bbcdotcom.dev.css');
	                } else {
	                    utils.appendLinkToHead(config.getAssetPrefix() + 'style/dist/bbcdotcom.css');
	                }
	                layout.disableReset();
	            }
	
	            /**
	             * Disable resize in older IE browsers
	             */
	            if (config.isIE8()) {
	                layout.disableReset();
	            }
	
	            /**
	             * Sections
	             */
	            sections.build(true);
	            if (sections.getSection(0) === 'sport') {
	                breakpoints.setGroupStart(4, 900);
	            }
	
	            if (params.layout === 'group5') {
	                var copy = Object.assign({}, breakpoints.getGroup(4));
	                breakpoints.setGroup(5, copy);
	                breakpoints.setGroupFinish(4, 1279);
	            }
	
	            /**
	             * Layout
	             */
	            layout.init(breakpoints.getGroups());
	            if (params.clientWidth) {
	                // A hack to allow us to specify the clientWidth in unit testing
	                layout.setClientWidth(params.clientWidth);
	            }
	
	            /**
	             * Breakpoint overrides
	             */
	            if (params.customBreakpoints) {
	                breakpoints.setGroups(params.customBreakpoints);
	            }
	
	            /**
	             * DFPP Register ads
	             */
	            if (params.adsToDisplay) {
	                for (i = 0, len = params.adsToDisplay.length; i < len; i++) {
	                    adRegister.registerAd(params.adsToDisplay[i]);
	                }
	            }
	
	            /**
	             * Locale
	             */
	            if (params.localeData) {
	                for (x in params.localeData) {
	                    if (params.localeData.hasOwnProperty(x)) {
	                        locale.set(x, params.localeData[x]);
	                    }
	                }
	            }
	
	            /**
	             * Krux
	             */
	            // Krux behavioural advert targetting
	            if (config.isKruxEnabled()) {
	                new Krux().writeKrux();
	            }
	
	            /**
	             * Ad Exclusions
	             */
	            new Predicate().set(windowDocument.title + ' ' + utils.getMetaNameContent('description'));
	
	            /**
	             * Ad Unit
	             */
	            adUnit.init(layout.getClientWidth(), this.serversideAdUnits2to9, sections.getSections('advert'), sections.getSections());
	
	            /**
	             * Key Values
	             */
	            keyValues.init(windowLocation, windowDocument, config.getType());
	
	            /**
	             * Ad Suites - used to display a certain set of ads all the time using ?ads=big
	             */
	            adSuites.init(windowLocation.href);
	
	            /**
	             * DFPP Requests
	             */
	            dfppRequest.init();
	            if (typeof params.adsToDisplay !== 'undefined' && params.adsToDisplay.length > 0) {
	                dfppRequest.requestAds();
	            }
	
	            /**+
	             * Survey
	             */
	            survey.init();
	
	            if (window.addEventListener) {
	                window.addEventListener("message", this.receiveMessage, false);
	            } else {
	                // IE8 or earlier
	                window.attachEvent('onmessage', this.receiveMessage);
	            }
	        }
	
	        analytics.init();
	
	        // Trigger an init event with useful information
	        pubsub.trigger('bbcdotcom:init:complete', {
	            params: params,
	            // Stats is used to update bbcdotcom.stats.data for JS variable collection by mPulse
	            stats: {
	                pageType: AnalyticsHelper.getPageType(),
	                primaryAdUnit: adUnit.getAdUnit1(),
	                secondaryAdUnit: adUnit.getAdUnits2to9(),
	                adsEnabled: config.isAdsEnabled(),
	                isAsync: config.isAsync()
	            }
	        });
	    } catch (e) {
	        if (log && log.error) {
	            log.error(e);
	        } else {
	            window.console.log(e);
	        }
	    }
	
	    addLoadEvent(function () {
	        try {
	            var x,
	                ads = adRegister.getAds();
	            this.domLoaded = true;
	            if (!config.isAsync()) {
	                for (x in ads) {
	                    if (ads.hasOwnProperty(x)) {
	                        ads[x].disableScreenReaderForAdContent();
	                    }
	                }
	            } else {
	                this.reset();
	            }
	        } catch (e) {
	            utils.log(e);
	        }
	    }.bind(this));
	};

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
	for analytics.js, irrespective of ads being enabled
	
	
	
	var _consts = __webpack_require__(149);
	
	var _utils = __webpack_require__(141);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ADS_ENABLED_HTML_CLASS = 'ads-enabled';
	var ANALYTICS = {
	    COMSCORE: {
	        HTTP: 'http://b.scorecardresearch.com/b',
	        HTTPS: 'https://sb.scorecardresearch.com/b',
	        WEBSITE_SUITE_LIVE: 'bbc',
	        WEBSITE_SUITE_TEST: 'bbc-global-test',
	        APP_SUITE_LIVE: 'bbc',
	        APP_SUITE_TEST: 'bbc-global-test',
	        CUSTOMER_ID_LIVE: 19293874,
	        CUSTOMER_ID_TEST: 18897612
	    },
	    SSC: {
	        HTTP: 'http://ssc.api.bbc.com',
	        HTTPS: 'https://ssc.api.bbc.com'
	    }
	};
	
	/**
	 * Initial Default Config
	 * @private
	 */
	var _config = {
	    referrer: '',
	    windowLocation: getWinLoc(),
	    windowDocument: getWinDoc(),
	    settings: {
	        ads: true,
	        analytics: true, // Global Currency Providers
	        comScore: true // ComScore only
	    },
	    sections: [],
	    pageType: '',
	    headline: '',
	    async: false,
	    disableAdsInitialLoad: false,
	    daxEnvironments: ['bbc-global'],
	    outbrainEnabled: true,
	    kruxEnabled: true,
	    continuousPlayPage: false,
	    stickyPlayerPage: false,
	    ieVersion: {
	        ie7: false,
	        ie8: false,
	        ie9: false
	    },
	    version: '',
	    prefixes: {
	        assetPrefix: '',
	        jsPrefix: '',
	        swfPrefix: '',
	        cssPrefix: ''
	    },
	    features: {},
	    palEnv: _consts.PAL_ENV_LIVE,
	    appName: null
	};
	
	var Config = function () {
	    function Config() {
	        _classCallCheck(this, Config);
	    }
	
	    _createClass(Config, [{
	        key: 'init',
	        value: function init(serverConf, data, location, document) {
	            // A/B Testing - Cookie
	            if (_utils2['default'].getCookie('test_group') === undefined) {
	                if (Math.random() <= 0.1) {
	                    _utils2['default'].setCookie('test_group', 'a');
	                } else {
	                    _utils2['default'].setCookie('test_group', 'b');
	                }
	            }
	            // BBCCOM-7623: adding beta as early as bbcdotcom is initialised
	            if (_utils2['default'].getCookie('test_group') === 'a' && bbcdotcom.sections.getSections()[0] === 'worldservice' || /[?|&]ads-beta/.test(_config.windowLocation)) {
	                bbcdotcom.utils.addHtmlTagClass(bbcdotcom.classes.classNames('beta'));
	            }
	            if (/^\/news\/election\/us2016/.test(_config.windowLocation.pathname)) {
	                bbcdotcom.utils.addHtmlTagClass(bbcdotcom.classes.classNames('news-election-us2016'));
	            }
	            if (typeof serverConf !== 'undefined') {
	                this.rehydrate(serverConf);
	            }
	            this.setData(data);
	            if (typeof location !== 'undefined') {
	                this.setWindowLocation(location);
	            }
	            if (typeof document !== 'undefined') {
	                this.setWindowDocument(document);
	            }
	            if (this.isAdsEnabled()) {
	                bbcdotcom.utils.addHtmlTagClass(ADS_ENABLED_HTML_CLASS);
	            }
	
	            var referrer = typeof window.orb !== 'undefined' && typeof window.orb.referrer !== 'undefined' ? window.orb.referrer : _config.windowDocument.referrer;
	            this.setReferrer(referrer);
	        }
	
	        /**
	         * Populates the client-side config with config provided by the server.
	         * Called from bbcdotcom.api.setConfig
	         *
	         * @param {Object} conf - Server-side provided config
	         */
	
	    }, {
	        key: 'rehydrate',
	        value: function rehydrate(conf) {
	            if (typeof conf === 'undefined') {
	                return;
	            }
	            // Sections
	            if (typeof conf.sections !== 'undefined') {
	                this.setSections(conf.sections);
	            }
	            // Page Type
	            if (typeof conf.type !== 'undefined') {
	                this.setType(conf.type);
	            }
	            // Story Headline
	            if (typeof conf.headline !== 'undefined') {
	                this.setHeadline(conf.headline);
	            }
	            // Ads Enabled
	            if (typeof conf.adsEnabled !== 'undefined') {
	                this.setAdsEnabled(conf.adsEnabled);
	            }
	            // Allow Advertising - variable name used in Candy is allowAdvertising
	            if (typeof conf.allowAdvertising !== 'undefined') {
	                this.setAdsEnabled(conf.allowAdvertising);
	            }
	            // Outbrain Enabled
	            if (typeof conf.outbrainEnabled !== 'undefined') {
	                this.setOutbrainEnabled(conf.outbrainEnabled);
	            }
	            // Krux Enabled
	            if (typeof conf.kruxEnabled !== 'undefined') {
	                this.setKruxEnabled(conf.kruxEnabled);
	            }
	            // Analytics Enabled
	            if (typeof conf.analyticsEnabled !== 'undefined') {
	                this.setAnalyticsEnabled(conf.analyticsEnabled);
	            }
	            // comScore Enabled
	            if (typeof conf.comScoreEnabled !== 'undefined') {
	                this.setComScoreEnabled(conf.comScoreEnabled);
	            }
	            // Async Enabled
	            if (typeof conf.asyncEnabled !== 'undefined') {
	                this.setAsync(conf.asyncEnabled);
	            }
	            if (/^\/news\/topics/.test(_config.windowLocation.pathname)) {
	                this.setAsync(true);
	            }
	            // Load ads initially disabled, used only in async mode
	            if (typeof conf.disableInitialLoad !== 'undefined') {
	                this.setDisableInitialLoad(conf.disableInitialLoad);
	            }
	            // Ad Keyword - variable name used in Candy is adCampaignKeyword
	            var keyword = typeof conf.adKeyword !== 'undefined' ? conf.adKeyword : conf.adCampaignKeyword;
	            if (typeof keyword !== 'undefined') {
	                bbcdotcom.adverts.keyValues.set('keyword', keyword);
	            }
	            // Window Location
	            if (typeof conf.url !== 'undefined') {
	                this.setWindowLocation(bbcdotcom.utils.createWindowLocation(conf.url));
	            }
	            // Features
	            if (typeof conf.features !== 'undefined') {
	                this.setFeatures(conf.features);
	            }
	            // PAL ENV
	            if (typeof conf.palEnv !== 'undefined') {
	                this.setPalEnv(conf.palEnv);
	            }
	            // Locale
	            if (bbcdotcom.locale) {
	                if (typeof conf.advertisementText !== 'undefined') {
	                    bbcdotcom.locale.set('advertisementText', conf.advertisementText);
	                }
	                if (typeof conf.advertInfoPageUrl !== 'undefined') {
	                    bbcdotcom.locale.set('advertInfoPageUrl', conf.advertInfoPageUrl);
	                }
	                if (typeof conf.inAssociationWithText !== 'undefined') {
	                    bbcdotcom.locale.set('inAssociationWithText', conf.inAssociationWithText);
	                }
	                if (typeof conf.sponsoredByText !== 'undefined') {
	                    bbcdotcom.locale.set('sponsoredByText', conf.sponsoredByText);
	                }
	                if (typeof conf.adsByGoogleText !== 'undefined') {
	                    bbcdotcom.locale.set('adsByGoogleText', conf.adsByGoogleText);
	                }
	            }
	            // Is Continuous Play Page (webapp/product provides)
	            if (typeof conf.isContinuousPlayPage !== 'undefined') {
	                this.setContinuousPlayPage(conf.isContinuousPlayPage);
	            }
	            // Is Sticky Player Page (webapp/product provides)
	            if (typeof conf.isStickyPlayerPage !== 'undefined') {
	                this.setStickyPlayerPage(conf.isStickyPlayerPage);
	            }
	        }
	    }, {
	        key: 'getConfig',
	        value: function getConfig() {
	            return _config;
	        }
	    }, {
	        key: 'setData',
	        value: function setData(data) {
	            if (typeof data !== 'undefined' && typeof data.ads !== 'undefined' && typeof data.stats !== 'undefined' && typeof data.statsProvider !== 'undefined') {
	                var numProviders = 5,
	                    providers = parseInt(data.statsProvider, 10).toString(2);
	                if (providers.length !== numProviders) {
	                    // Pad binary list of providers
	                    // eg decimal = 3, therefore in binary = 11, not 00011 which we need below for substring
	                    while (providers.length < numProviders) {
	                        providers = '0' + providers;
	                    }
	                }
	
	                /**
	                 * Stats Provider Values:
	                 * - 1  AGOF
	                 * - 2  Sitestat    Removed (BBCCOM-5674)
	                 * - 4  Nielsen US
	                 * - 8  Nielsen NZ
	                 * - 16 Nielsen AU
	                 */
	                _config.settings = {
	                    'ads': data.ads === 1 && _config.settings.ads !== false,
	                    'analytics': data.stats === 1 && _config.settings.analytics !== false,
	                    // Instructions: when adding new, increase numProviders above, update the "var settings" defaults at top of page and add to wwscripts.ini in the same order
	                    'nielsen-au': data.stats === 1 && parseInt(providers.substr(0, 1), 10),
	                    'nielsen-nz': data.stats === 1 && parseInt(providers.substr(1, 1), 10),
	                    'nielsen-us': data.stats === 1 && parseInt(providers.substr(2, 1), 10),
	                    'sitestat': 0, // removed (BBCCOM-5674)
	                    'agof': 0, // remove (BBCCOM-7046)
	                    // Instructions: when adding new, increase numProviders above, update the "var settings" defaults at top of page and add to wwscripts.ini in the same order
	                    'comScore': _config.settings.comScore
	                };
	            }
	        }
	
	        /**
	         * Offers the ability for a product to specify what sections should be and for us not
	         * to derive the sections from the page Uri.  This information is used within bbcdotcom.sections object
	         */
	
	    }, {
	        key: 'setSections',
	        value: function setSections(sects) {
	            if (typeof sects !== 'undefined') {
	                if (sects instanceof Array) {
	                    _config.sections = sects;
	                } else {
	                    _config.sections = sects.split('/');
	                }
	            } else {
	                _config.sections = [];
	            }
	        }
	    }, {
	        key: 'getSections',
	        value: function getSections() {
	            return _config.sections;
	        }
	
	        /**
	         * Page Type eg STORY, INDEX, VIDEO
	         */
	
	    }, {
	        key: 'setType',
	        value: function setType(type) {
	            _config.pageType = type.toUpperCase();
	        }
	    }, {
	        key: 'getType',
	        value: function getType() {
	            return _config.pageType;
	        }
	
	        /**
	         * Feature Switch
	         */
	
	    }, {
	        key: 'setFeatures',
	        value: function setFeatures(features) {
	            _config.features = features;
	            return this;
	        }
	    }, {
	        key: 'getFeatures',
	        value: function getFeatures() {
	            return _config.features;
	        }
	
	        /**
	         * PAL ENV
	         */
	
	    }, {
	        key: 'setPalEnv',
	        value: function setPalEnv(palEnv) {
	            _config.palEnv = palEnv;
	            return this;
	        }
	    }, {
	        key: 'getPalEnv',
	        value: function getPalEnv() {
	            return _config.palEnv;
	        }
	
	        /**
	         * Story Headline
	         */
	
	    }, {
	        key: 'setHeadline',
	        value: function setHeadline(str) {
	            _config.headline = str;
	        }
	    }, {
	        key: 'getHeadline',
	        value: function getHeadline() {
	            return _config.headline;
	        }
	    }, {
	        key: 'setAsync',
	
	
	        /**
	         * Used to set the loading of ads in DFP to be done Asynchronously
	         * @param isAsync
	         */
	        value: function setAsync(isAsync) {
	            _config.async = isAsync;
	        }
	    }, {
	        key: 'isAsync',
	        value: function isAsync() {
	            return _config.async;
	        }
	
	        /**
	         * Used to disable ads loading initially in DFP until the refresh method is called (Only available in Async Mode)
	         * @param isDisableAdsInitialLoad
	         */
	
	    }, {
	        key: 'setDisableInitialLoad',
	        value: function setDisableInitialLoad(isDisableAdsInitialLoad) {
	            _config.disableAdsInitialLoad = isDisableAdsInitialLoad;
	        }
	    }, {
	        key: 'isDisableInitialLoad',
	        value: function isDisableInitialLoad() {
	            return _config.disableAdsInitialLoad;
	        }
	    }, {
	        key: 'isTopLevelSite',
	        value: function isTopLevelSite(site) {
	            var pathname = _config.windowLocation.pathname;
	            return typeof pathname !== 'undefined' && pathname.indexOf('/' + site) === 0;
	        }
	    }, {
	        key: 'isSportApp',
	        value: function isSportApp() {
	            var pathname = _config.windowLocation.pathname,
	                href = _config.windowLocation.href;
	            return typeof pathname !== 'undefined' && (pathname.indexOf('.app') !== -1 || typeof href !== 'undefined' && href.indexOf('.app') !== -1) && (pathname.indexOf('/sport') === 0 || typeof href !== 'undefined' && href.indexOf('analytics-debug') !== -1);
	        }
	    }, {
	        key: 'isActive',
	        value: function isActive(key) {
	            return typeof _config.settings[key] !== 'undefined' ? _config.settings[key] : false;
	        }
	    }, {
	        key: 'isAdsEnabled',
	        value: function isAdsEnabled() {
	            return this.isActive('ads');
	        }
	    }, {
	        key: 'setAdsEnabled',
	        value: function setAdsEnabled(enabled) {
	            _config.settings.ads = enabled;
	        }
	    }, {
	        key: 'setAnalyticsEnabled',
	        value: function setAnalyticsEnabled(enabled) {
	            /* Once it has been disable to not allow it to be enabled */
	            _config.settings.analytics = _config.settings.analytics !== 0 && _config.settings.analytics !== false ? enabled : 0;
	        }
	    }, {
	        key: 'isAnalyticsEnabled',
	        value: function isAnalyticsEnabled() {
	            return this.isActive('analytics');
	        }
	    }, {
	        key: 'setComScoreEnabled',
	        value: function setComScoreEnabled(enabled) {
	            /* Once it has been disable to not allow it to be enabled */
	            _config.settings.comScore = _config.settings.comScore !== 0 && _config.settings.comScore !== false ? enabled : 0;
	        }
	    }, {
	        key: 'isComScoreEnabled',
	        value: function isComScoreEnabled() {
	            return this.isActive('comScore') && this.isActive('analytics');
	        }
	    }, {
	        key: 'setOutbrainEnabled',
	        value: function setOutbrainEnabled(enabled) {
	            _config.outbrainEnabled = enabled;
	        }
	    }, {
	        key: 'isOutbrainEnabled',
	        value: function isOutbrainEnabled() {
	            return _config.outbrainEnabled;
	        }
	    }, {
	        key: 'setKruxEnabled',
	        value: function setKruxEnabled(enabled) {
	            _config.kruxEnabled = enabled;
	        }
	    }, {
	        key: 'isKruxEnabled',
	        value: function isKruxEnabled() {
	            return _config.kruxEnabled;
	        }
	    }, {
	        key: 'setContinuousPlayPage',
	        value: function setContinuousPlayPage(value) {
	            _config.continuousPlayPage = value === true;
	        }
	    }, {
	        key: 'isContinuousPlayPage',
	        value: function isContinuousPlayPage() {
	            return _config.continuousPlayPage;
	        }
	    }, {
	        key: 'setStickyPlayerPage',
	        value: function setStickyPlayerPage(value) {
	            _config.stickyPlayerPage = value === true;
	        }
	    }, {
	        key: 'isStickyPlayerPage',
	        value: function isStickyPlayerPage() {
	            return _config.stickyPlayerPage;
	        }
	    }, {
	        key: 'setIE7',
	        value: function setIE7(value) {
	            _config.ieVersion.ie7 = value;
	        }
	    }, {
	        key: 'isIE7',
	        value: function isIE7() {
	            return _config.ieVersion.ie7;
	        }
	    }, {
	        key: 'setIE8',
	        value: function setIE8(value) {
	            _config.ieVersion.ie8 = value;
	        }
	    }, {
	        key: 'isIE8',
	        value: function isIE8() {
	            return _config.ieVersion.ie8;
	        }
	    }, {
	        key: 'setIE9',
	        value: function setIE9(value) {
	            _config.ieVersion.ie9 = value;
	        }
	    }, {
	        key: 'isIE9',
	        value: function isIE9() {
	            return _config.ieVersion.ie9;
	        }
	
	        // TODO - KB 140225 Investigate where these prefix are set and remove when appropriate.
	
	    }, {
	        key: 'setAssetPrefix',
	        value: function setAssetPrefix(prefix) {
	            _config.prefixes.assetPrefix = prefix;
	        }
	    }, {
	        key: 'getAssetPrefix',
	        value: function getAssetPrefix() {
	            return _config.prefixes.assetPrefix;
	        }
	    }, {
	        key: 'setAppName',
	        value: function setAppName(appName) {
	            _config.appName = appName;
	            return this;
	        }
	    }, {
	        key: 'getAppName',
	        value: function getAppName() {
	            return _config.appName;
	        }
	
	        /**
	         * TODO - KB 150629 Deprecate the following and just use get/setAssetPrefix(), having one for each folder is redundant
	         * N&K uses these as files are uploaded to different directories
	         */
	
	    }, {
	        key: 'setJsPrefix',
	        value: function setJsPrefix(prefix) {
	            _config.prefixes.jsPrefix = prefix;
	        }
	    }, {
	        key: 'getJsPrefix',
	        value: function getJsPrefix() {
	            return _config.prefixes.jsPrefix !== '' ? _config.prefixes.jsPrefix : this.getAssetPrefix() + 'script';
	        }
	    }, {
	        key: 'setSwfPrefix',
	        value: function setSwfPrefix(prefix) {
	            _config.prefixes.swfPrefix = prefix;
	        }
	    }, {
	        key: 'getSwfPrefix',
	        value: function getSwfPrefix() {
	            return _config.prefixes.swfPrefix !== '' ? _config.prefixes.swfPrefix : this.getAssetPrefix() + 'swf';
	        }
	    }, {
	        key: 'setCssPrefix',
	        value: function setCssPrefix(prefix) {
	            _config.prefixes.cssPrefix = prefix;
	        }
	    }, {
	        key: 'getCssPrefix',
	        value: function getCssPrefix() {
	            return _config.prefixes.cssPrefix !== '' ? _config.prefixes.cssPrefix : this.getAssetPrefix() + 'style';
	        }
	
	        /**
	         * TODO END - Deprecate the following and just use get/setAssetPrefix(), having one for each folder is redundant
	         */
	
	    }, {
	        key: 'setVersion',
	        value: function setVersion(v) {
	            _config.version = v;
	            return this;
	        }
	    }, {
	        key: 'getVersion',
	        value: function getVersion() {
	            return _config.version;
	        }
	    }, {
	        key: 'setWindowLocation',
	        value: function setWindowLocation(location) {
	            _config.windowLocation = location;
	            return this;
	        }
	    }, {
	        key: 'getWindowLocation',
	        value: function getWindowLocation() {
	            return _config.windowLocation;
	        }
	    }, {
	        key: 'setWindowDocument',
	        value: function setWindowDocument(document) {
	            _config.windowDocument = document;
	            return this;
	        }
	    }, {
	        key: 'getWindowDocument',
	        value: function getWindowDocument() {
	            return _config.windowDocument;
	        }
	    }, {
	        key: 'setReferrer',
	        value: function setReferrer(ref) {
	            _config.referrer = ref;
	            return this;
	        }
	    }, {
	        key: 'getReferrer',
	        value: function getReferrer() {
	            return _config.referrer;
	        }
	    }, {
	        key: 'getAnalyticsConfig',
	        value: function getAnalyticsConfig() {
	            return ANALYTICS;
	        }
	    }, {
	        key: 'getAnalyticsUri',
	        value: function getAnalyticsUri(vendor) {
	            return bbcdotcom.analytics.comScore.sscHelper.getAnalyticsLocation();
	        }
	    }, {
	        key: 'setDaxEnvironments',
	        value: function setDaxEnvironments() {
	            var daxEnvironments = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	            _config.daxEnvironments = daxEnvironments;
	            return this;
	        }
	    }, {
	        key: 'getDaxEnvironments',
	        value: function getDaxEnvironments() {
	            return _config.daxEnvironments;
	        }
	    }, {
	        key: 'getAnalyticsSuite',
	        value: function getAnalyticsSuite(vendor) {
	            var testEnv = isTestEnv(_config.windowLocation.href);
	            if (this.isSportApp()) {
	                return testEnv ? ANALYTICS.COMSCORE.APP_SUITE_TEST : ANALYTICS.COMSCORE.APP_SUITE_LIVE;
	            }
	            return testEnv ? ANALYTICS.COMSCORE.WEBSITE_SUITE_TEST : ANALYTICS.COMSCORE.WEBSITE_SUITE_LIVE;
	        }
	    }, {
	        key: 'getAnalyticsAcctId',
	        value: function getAnalyticsAcctId() {
	            return isTestEnv(_config.windowLocation.href) ? ANALYTICS.COMSCORE.CUSTOMER_ID_TEST : ANALYTICS.COMSCORE.CUSTOMER_ID_LIVE;
	        }
	
	        /**
	         * Testing only
	         */
	
	    }, {
	        key: 'r',
	        value: function r() {
	            this.setWindowLocation(getWinLoc());
	            this.setWindowDocument(getWinDoc());
	            this.setReferrer('');
	            this.setSections([]);
	            _config.settings = {
	                ads: true,
	                analytics: true,
	                comScore: true
	            };
	            this.setIE7(false);
	            this.setIE8(false);
	            this.setAssetPrefix('');
	            this.setOutbrainEnabled(true);
	            this.setKruxEnabled(true);
	            this.setStickyPlayerPage(false);
	            this.setContinuousPlayPage(false);
	            this.setHeadline('');
	            this.setType('');
	        }
	    }]);
	
	    return Config;
	}();
	
	exports['default'] = new Config();
	
	
	function getWinLoc() {
	    return window.location;
	}
	
	function getWinDoc() {
	    return window.document;
	}
	
	function isTestEnv(href) {
	    return (/(sandbox|int|test|stage)(.dev)*.bbc.co*/.test(href)
	    );
	}
	module.exports = exports['default'];

/***/ },
/* 149 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var PAL_ENV_LIVE = exports.PAL_ENV_LIVE = 'live';
	var PAL_ENV_STAGE = exports.PAL_ENV_STAGE = 'stage';
	var PAL_ENV_TEST = exports.PAL_ENV_TEST = 'test';
	var PAL_ENV_INT = exports.PAL_ENV_INT = 'int';
	var PAL_ENV_SANDBOX = exports.PAL_ENV_SANDBOX = 'sandbox';

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*
	 * ALWAYS REQUIRED INTERNATIONAL for analytics.js, irrespective of ads being enabled
	 */
	
	/**
	 * There are subtle differences of section/subsection classifications between advertising and analytics
	 * based on Doubleclick targetting and Analytics tracking requirements.
	 */
	
	var config = __webpack_require__(148);
	var sections = [];
	var advertSections = [];
	var analyticsSections = [];
	
	/**
	 * Standardise Uri inconsistencies
	 */
	var cleanupPath = function cleanupPath(path) {
	    var wsLang = new RegExp('^(afrique|arabic|azeri|bengali|burmese|gahuza|hausa|hindi|indonesia|japanese|kyrgyz|mundo' + '|naidheachdan|nepali|newyddion|pashto|persian|portuguese|russian|sinhala|somali|swahili|tajik|tamil' + '|turkce|ukchina|ukrainian|urdu|uzbek|vietnamese|zhongwen)');
	    return path.replace(/\?.*$/, '') // remove everything after ? in url
	    .replace(/\#.*$/, '') // remove everything after # in url
	    .replace(/^news\/(uk|world|us|asia)\/(health)(?!-)/, "news/$2") // convert /news/uk/health to /news/health (rem edition, only on index, not on story)
	    .replace(/(_|\-|\/)?[A-Z0-9]{7,8}$/, '') // remove story Id /12345678, _12345678 or -12345678
	    .replace(/\/[a-z0-9]+\.stm/, '') // remove from old CPS pages eg /default.stm
	    .replace(/_and_/, '-') // convert entertainment_and_arts to entertainment-arts
	    .replace(/_/g, '-') // want consistency between desktop and responsive
	    .replace(/^news\/(england|northern-ireland|scotland|wales)($|-|\/)/, "news/uk/$1$2") // add '/uk/'
	    .replace(/^news\/uk-([a-z]+)(-([a-z]+))?/, "news/uk/$1/$3") // convert /news/uk-wales-south-east-wales to /news/uk/wales/south-east-wales
	    .replace(/^news\/(world)-(africa|asia|europe)(-([a-z]+))?/, "news/$1/$2/$4") // convert /news/world-asia to /news/world/asia  (no hyphen in name)
	    .replace(/^news\/(world)-([a-z\-]+)/, "news/$1/$2/") // convert /news/world-latin-america to /news/world/latin-america (hyphen in name)
	    .replace(/^(newsbeat)($|-|\/)/, "news/$1$2") // convert /newsbeat/12345 to /news/newsbeat/12345
	    .replace(/^sport\/0/, 'sport') // remove /0/
	    .replace(/^sport\/beta/, 'sport') // remove /beta/
	    .replace(/^sport\/(.*)\/sports($|\/)/, "sport/$1$2") // replace /sport/___/sports/ with /sport/___/
	    .replace(/market-data\/overview/, 'market-data') // market data front-page is '/overview'
	    .replace(/^(programmes)/, "news/$1") // convert /programmes/click to /news/programmes/click
	    .replace(wsLang, "worldservice/$1") // convert /arabic to /worldservice/arabic
	    .replace(/^wwhp/, '') // convert /wwhp to /
	    .replace(/\.app$/, '') // remove '.app' eg /sport/football.app for PhoneGap
	    .replace(/\/+$/, ''); // remove trailing slash
	};
	
	/**
	 * Section exceptions for advert
	 */
	var buildAdvertSections = function buildAdvertSections(path) {
	    path = path.replace(/^news\/world\/([a-z]+)(-([a-z]+))?/, "news/world$1$3") // /news/world/us-canada/ -> /news/worlduscanada/
	    .replace(/programmes\/asiabusinessreport/, 'asiabusiness') // /programmes/asiabusinessreport -> /asiabusiness
	    .replace(/programmes\/click$/, "clickonline") // /programmes/click -> /clickonline
	    .replace(/worldservice\//, ""); // /worldservice/arabic -> /arabic
	    return path.split('/');
	};
	
	/**
	 * Section exceptions for analytics
	 */
	var buildAnalyticsSections = function buildAnalyticsSections(path) {
	    path = path.replace(/^specialfeatures/, "news/specialfeatures") // /specialfeatures/ -> /news/specialfeatures/
	    .replace(/^sport\/(.*)\/(20[0-9]{2})($|\/)/, "sport/$1-$2$3"); // replace /sport/blah/2014/ with /sport/blah-2014/
	    return path.split('/');
	};
	
	/**
	 * Build up an array of sections
	 */
	var build = function build(isCurrentUri, href) {
	    var path = '',
	        _sections = [],
	        _advertSections = [],
	        _analyticsSections = [],
	        UNKNOWN = 'unknown',
	        result;
	    if (typeof href !== 'undefined') {
	        result = href.match(/http(|s):\/\/[a-z0-9\-.]+(.com|.co.uk|.net)(\/)?(.*)?/);
	        if (result) {
	            // eg http://www.bbc.com/hello/world => hello/world
	            path = result[result.length - 1];
	        } else {
	            result = href.match(/^\/(.*)?/);
	            if (result) {
	                // eg / => ''
	                // eg /hello/world => hello/world
	                path = result[result.length - 1];
	            } else {
	                path = UNKNOWN;
	            }
	        }
	    } else if (config.getSections().length === 0) {
	        // Determine sections from Uri
	        var uri = bbcdotcom.analyticsHelper.getUriForSections();
	        if (typeof uri === 'undefined' || uri === '' || uri === null || uri.indexOf('http') !== 0) {
	            // Unknown window.location
	            path = UNKNOWN;
	        } else {
	            result = uri.match(/http(|s):\/\/[a-z0-9\-.]+(.com|.co.uk|.net)(\/)?(.*)?/);
	            if (result) {
	                path = result[result.length - 1];
	            } else {
	                path = UNKNOWN;
	            }
	        }
	    } else {
	        // Use sections defined in the Html page (likely injected with server-side values)
	        // Convert array eg ["news", "world", "asia", "india"] to uri path eg "/news/world/asia/india"
	        path = config.getSections().join('/');
	    }
	    path = path || '';
	    path = cleanupPath(path);
	    if (path === '') {
	        // Homepage
	        _sections = _advertSections = _analyticsSections = ['homepage'];
	    } else {
	        _sections = path.split('/');
	        _advertSections = buildAdvertSections(path);
	        _analyticsSections = buildAnalyticsSections(path);
	    }
	    if (isCurrentUri) {
	        // Persist current page's sections as globals
	        sections = _sections;
	        advertSections = _advertSections;
	        analyticsSections = _analyticsSections;
	    }
	    return [_sections, _advertSections, _analyticsSections];
	};
	
	/**
	 * Load correct array eg 'sections', 'advertSections', 'analyticsSections'
	 */
	var getArray = function getArray(type) {
	    type = typeof type === 'undefined' ? '' : type;
	    return type === 'advert' ? advertSections : type === 'analytics' ? analyticsSections : sections;
	};
	
	module.exports = {
	    build: build,
	    /**
	     * Returns a section of the hierarchy
	     *
	     * With a heirarchy of "news>world>asia":
	     * eg getSection(0)                  => 'news'
	     * eg getSection(1, 'analytics');    => 'worldasia'
	     * eg getSection(1, 'advert', true); => 'world'
	     *
	     * @param integer offset Which section
	     * @param string type (optional) Whether to grab section for 'advert' or 'analytics'
	     * @param boolean reloadData (optional) Rebuild sections data based on new/current window.location
	     * @return mixed string|boolean Returns false if offset does not exist
	     */
	    getSection: function getSection(offset, type, reloadData) {
	        if (typeof offset !== 'undefined') {
	            if (typeof reloadData !== 'undefined' && reloadData === true) {
	                build(true);
	            }
	            offset = parseInt(offset, 10);
	            if (typeof getArray(type) !== 'undefined' && typeof getArray(type)[offset] !== 'undefined' && getArray(type)[offset] !== '') {
	                return getArray(type)[offset];
	            }
	        }
	        return false;
	    },
	    /**
	     * Returns the hierarchy in a sections array
	     *
	     * With a hierarchy of "news>world>asia":
	     * eg getSections()                  => array('news', 'world', 'asia')
	     * eg getSections('analytics');      => array('news', 'worldasia')
	     * eg getSections('advert', true);   => array('news', 'world', 'asia')
	     * eg getSections()[2]               => 'asia'
	     *
	     * @param string type (optional) Whether to grab section for 'advert' or 'analytics'
	     * @param boolean reloadData (optional) Rebuild sections data based on new/current window.location
	     * @return array Section(s) for given link
	     */
	    getSections: function getSections(type, reloadData) {
	        if (typeof reloadData !== 'undefined' && reloadData === true) {
	            build(true);
	        }
	        return getArray(type);
	    },
	    /**
	     * Return the hierarchy in a sections array for a given Uri.  Sometimes used for translating a link's href
	     * into sections.
	     *
	     * @param string uri eg http://www.bbc.com/hello/world or /hello/world
	     * @param string type (optional) Whether to grab section for 'advert' or 'analytics'
	     * @return array Section(s) for given link
	     */
	    getSectionsForUri: function getSectionsForUri(uri, type) {
	        uri = typeof uri === 'undefined' || uri === null ? '' : uri;
	        type = typeof type === 'undefined' ? '' : type;
	        var data = build(false, uri);
	        return type === 'advert' ? data[1] : type === 'analytics' ? data[2] : data[0];
	    },
	    /**
	     * For testing only.
	     */
	    r: function r() {
	        sections = [];
	        advertSections = [];
	        analyticsSections = [];
	    }
	};

/***/ },
/* 151 */
/***/ function(module, exports) {

	"use strict";
	
	var data = {
	    advertisementText: "Advertisement",
	    inAssociationWithText: "in association with",
	    sponsoredByText: "is sponsored by",
	    advertisingPartnersText: "Advertising Partners",
	    adsByGoogleText: "Ads by Google",
	    advertInfoPageUrl: "http://www.bbc.com/privacy/cookies/international/",
	    associationInfoPageUrl: "https://advertising.bbcworldwide.com/bbc-storyworks-content-definitions/",
	    googleAdsPageUrl: "http://www.bbc.co.uk/bbc.com/faq/ads_by_google.shtml"
	};
	
	module.exports = {
	    get: function get(field) {
	        return data[field];
	    },
	    set: function set(field, text) {
	        data[field] = text;
	    },
	    getData: function getData() {
	        return data;
	    }
	};

/***/ },
/* 152 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	    providers: {
	        eDigitalResearch: {
	            key: 'INS-vt29-666188954',
	            url: bbcdotcom.assetPrefix + 'script/vendor/edr/edr.min.js'
	        }
	    },
	    adsEnabled: function adsEnabled() {
	        return bbcdotcom.data !== undefined && (bbcdotcom.data.a !== undefined && bbcdotcom.data.a === 1 || bbcdotcom.data.ads !== undefined && bbcdotcom.data.ads === 1);
	    },
	    surveyEnabled: function surveyEnabled() {
	        return bbcdotcom.flag !== undefined && bbcdotcom.flag.s === 1;
	    },
	    init: function init() {
	        if (bbcdotcom.survey.adsEnabled() && bbcdotcom.survey.surveyEnabled()) {
	            if (typeof window.EDRSurvey === 'undefined') {
	                bbcdotcom.survey.loadScript(document, bbcdotcom.survey.providers.eDigitalResearch.url);
	            }
	        }
	    },
	    loadScript: function loadScript(doc, path, callback) {
	        var s = doc.createElement('script'),
	            a = 'async',
	            b = 'defer';
	        s.setAttribute(a, a);
	        s.setAttribute(b, b);
	        s.type = 'text/javascript';
	        s.src = path;
	        if (typeof callback === 'function') {
	            s.onload = callback;
	        }
	        doc.getElementsByTagName('head')[0].appendChild(s);
	    }
	};

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module Classes
	 *
	 */
	
	var CLASS_BASE = 'bbcdotcom';
	var CLASS_SEP = '-';
	
	var utils = __webpack_require__(141);
	
	/**
	 * Given an arbitrary number of string arguments, return a class name containing all of the arguments
	 * prefixed with CLASS_BASE and concatenated using CLASS_SEP
	 *
	 * @returns {string}
	 */
	function className() {
	    return [CLASS_BASE].concat(Array.prototype.slice.call(arguments)).join(CLASS_SEP);
	}
	
	/**
	 * Given an arbitrary number of string or array arguments, return a space-concatenated list of classes
	 * created by passing each argument through className()
	 *
	 * @returns {string}
	 */
	function classNames() {
	    var i,
	        classes = [],
	        arr = Array.prototype.slice.call(arguments);
	    for (i = 0; i < arr.length; i++) {
	        classes.push(className.apply(null, utils.isString(arr[i]) ? [arr[i]] : arr[i]));
	    }
	    return classes.join(' ');
	}
	
	module.exports = {
	    className: className,
	
	    classNames: classNames,
	
	    /**
	     * Given the bbcdotcom.config object and optionally the current root context (window)
	     * return a space-concatenated list of classes which should be added to some top level DOM element
	     *
	     * @param config
	     * @param rootOverride
	     * @returns {string}
	     */
	    fromConfig: function fromConfig(config, rootOverride) {
	        var finalRoot = rootOverride || window;
	        var classes = [];
	
	        if (config.isAsync()) {
	            classes.push('async');
	        }
	
	        if (config.isAdsEnabled()) {
	            classes.push('ads-enabled');
	        }
	
	        if (finalRoot.config && finalRoot.config.service) {
	            classes.push(['service', finalRoot.config.service]);
	        }
	
	        return classNames.apply(null, classes);
	    }
	};

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var sections = __webpack_require__(150);
	var config = __webpack_require__(148);
	
	var Krux = function Krux() {
	    'use strict';
	
	    /**
	     * Keep list up to date with https://confluence.dev.bbc.co.uk/display/bbccom/Krux+Control+Tag+reference
	     */
	
	    this.configMap = {
	        'wwscripts': 'JcDpn11M',
	        'autos': 'JcDpn11M',
	        'homepage': 'JA8mItOH',
	        'news': 'JZTWpGsM',
	        'sport': 'JZh7-1tL',
	        'weather': 'JcLqldWl',
	        'capital': 'JcDpVXES',
	        'culture': 'JcDpQm9c',
	        'earth': 'JcDpgdBJ',
	        'future': 'JcDpDurQ',
	        'travel': 'JcDo-g1I',
	        'worldservice': {
	            'bengali': 'KLcrNXRD',
	            'nepali': 'KLcrZyYv',
	            'pashto': 'KLcruUF0',
	            'sinhala': 'KLcrzauv',
	            'tamil': 'KLcr494w',
	            'burmese': 'KLcr-EZd',
	            'japanese': 'KLcsE61k',
	            'kyrgyz': 'KLcsLz9t',
	            'uzbek': 'KLcsR3Ti',
	            'azeri': 'KLcsWh0O',
	            'ukrainian': 'KLcscR_8',
	            'afrique': 'KAQ_KSay',
	            'arabic': 'JcLqyEM1',
	            'mundo': 'JcLq2g1g',
	            'russian': 'JcLqtZh8',
	            'turkce': 'JsA2GOz2',
	            'portuguese': 'JsA2N8dB',
	            'swahili': 'JsA2YTYM',
	            'hindi': 'JsA20ddK',
	            'hausa': 'JsA27Tha',
	            'gahuza': 'KAQ_Bvo_',
	            'somali': 'KAQ_QKAO',
	            'persian': 'KBRmwNmS',
	            'urdu': 'KBRmdjdD',
	            'ukchina': {
	                'simp': 'KCCNFK-F',
	                'trad': 'KCCNjqsK'
	            },
	            'vietnamese': 'KBROqtlo',
	            'zhongwen': {
	                'simp': 'KBRld81M',
	                'trad': 'KBRO3pl1'
	            }
	        }
	    };
	};
	
	Krux.prototype.getKruxId = function (sectionsArray) {
	    var configMap = this.configMap;
	    if (!sectionsArray || sectionsArray.length === 0) {
	        return false;
	    }
	
	    // Get the Krux ID based on the sections
	    try {
	        var i, n;
	        for (i = 0, n = sectionsArray.length; i < n; ++i) {
	            var k = sectionsArray[i];
	            if (configMap.hasOwnProperty(k)) {
	                configMap = configMap[k];
	            } else {
	                break;
	            }
	        }
	    } catch (e) {
	        // Try the previous method
	        return this.getKruxIdMethod2(sectionsArray);
	    }
	
	    if (configMap && (typeof configMap === "string" || configMap instanceof String)) {
	        return configMap; // Search above worked, return
	    }
	
	    // Try the previous method
	    return this.getKruxIdMethod2(sectionsArray);
	};
	
	Krux.prototype.getKruxIdMethod2 = function (sectionsArray) {
	    var kruxId;
	    if (typeof this.configMap[sectionsArray[1]] !== "undefined") {
	        kruxId = this.configMap[sectionsArray[1]];
	    } else if (typeof this.configMap[sectionsArray[0]] !== "undefined") {
	        kruxId = this.configMap[sectionsArray[0]];
	    }
	
	    if (kruxId && (typeof kruxId === "string" || kruxId instanceof String)) {
	        return kruxId; // Search above worked, return
	    }
	
	    return false;
	};
	
	Krux.prototype.writeKrux = function (providedKruxId) {
	    if (window.bbcdotcom && bbcdotcom.data.stats === 1 && !config.isSportApp()) {
	        var kruxId = providedKruxId || this.getKruxId(sections.getSections());
	
	        if (kruxId) {
	            document.write('<script class="kxct" data-id="' + kruxId + '" data-timing="async" data-version="1.9" type="text/javascript">' + 'if (window.bbcdotcom && (bbcdotcom.data.ads == 1 || bbcdotcom.data.stats == 1)) {' + '    window.Krux||((Krux=function(){Krux.q.push(arguments)}).q=[]);' + '    (function(){' + '        var k=document.createElement("script");k.type="text/javascript";k.async=true;' + '        var m,src=(m=location.href.match(/\\bkxsrc=([^&]+)/))&&decodeURIComponent(m[1]);' + '        k.src = /^https?:\\/\\/([a-z0-9_\\-\\.]+\\.)?krxd\\.net(:\\d{1,5})?\\//i.test(src) ? ' + '           src : src === "disable" ? "" :' + '        (location.protocol==="https:"?"https:":"http:")+"//cdn.krxd.net/controltag?confid=' + kruxId + '";' + '        var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(k,s);' + '    }());' + '}' + decodeURIComponent('%3C') + '/script>');
	            document.write('<script type="text/javascript">' + '    if (window.bbcdotcom && (bbcdotcom.data.ads == 1 || bbcdotcom.data.stats == 1)) {' + '        window.Krux||((Krux=function(){Krux.q.push(arguments);}).q=[]);' + '        (function(){' + '            function  retrieve(n){' + '                var  m,  k="kx"+n;' + '                if  (window.localStorage)  {' + '                    return  window.localStorage[k]  ||  "";' + '                }  else  if  (navigator.cookieEnabled)  {' + '                    m  =  document.cookie.match(k+"=([^;]*)");' + '                    return  (m  &&  unescape(m[1]))  ||  "";' + '                }  else  {' + '                    return  "";' + '                }' + '            }' + '            Krux.user  =  retrieve("user");' + '            Krux.segments  =  retrieve("segs")  &&  retrieve("segs").split(",")  ||  [];' + '        })();' + '    }' + decodeURIComponent('%3C') + '/script>');
	        }
	    }
	};
	
	module.exports = Krux;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var keyValues = __webpack_require__(156);
	var dfppRequest = __webpack_require__(157);
	
	var Predicate = function Predicate() {
	
	    'use strict';
	
	    this.exclusions = [];
	    this.inclusions = [];
	    this.predicates = {
	        airline: {
	            rules: {
	                1: { // each rule is an OR
	                    match: {
	                        1: ['air', 'plane', 'flight', 'jet', 'aviation'], // each line is an AND
	                        2: ['ash', 'bomb', 'crash', 'dead', 'detonat', 'disaster', 'disrupt', 'emergenc', 'fire', 'incident', 'injur', 'kill', 'missing', 'package', 'passenger', 'crew', 'search', 'score', 'strand', 'strike', 'volcan', 'wreck'] //each line is an AND
	                    },
	                    value: "!c"
	                },
	                2: {
	                    match: {
	                        1: ['osama', 'bin laden', 'twin towers', '9\/11,september 11', '11 september', 'al-qaeda', 'al qaeda']
	                    },
	                    value: "!c"
	                }
	            }
	        },
	        violence: {
	            rules: {
	                1: {
	                    match: {
	                        1: ['riot', 'violen', 'loot', 'unrest', 'unruly', 'attack', 'disturbance', 'shot', 'disorder', 'anarch', 'chaotic', 'chaos', 'unruliness', 'mindless', 'stealing', 'stolen', 'thiev', 'theft', 'arson', 'crisis', 'disarray', 'discord', 'lawlessness', 'criminal', 'vandal', 'thug', 'engulf', 'flame', 'burn']
	                    },
	                    value: "!c"
	                }
	            }
	        },
	        sensitive: {
	            rules: {
	                1: {
	                    match: {
	                        1: ['violence', 'firearms', 'arms', 'tobacco', 'hygiene', 'religio', 'crim', 'illegal', 'politic', 'porno', 'paedophile', 'google', 'internet']
	                    },
	                    value: "!c"
	                }
	            }
	        }
	    };
	
	    /**
	     * @param exclusions Exclusions can either be an array "['airline','violence']" or a string "airline,violence"
	     */
	    this.setAdExclusion = function (exclusions) {
	        if (typeof exclusions === 'undefined' || exclusions === '') {
	            return;
	        }
	        var e;
	        for (e in exclusions) {
	            if (exclusions.hasOwnProperty(e)) {
	                dfppRequest.setExclusion(exclusions[e]);
	                // Adding the NEW GPT way this way so that when getPrerollAdTag is called it is populated.
	                keyValues.set('excl_cat', exclusions.join(','));
	            }
	        }
	        keyValues.set('!c', exclusions.join(','));
	    };
	};
	
	Predicate.prototype.getExclusions = function () {
	    return this.exclusions;
	};
	
	Predicate.prototype.getInclusions = function () {
	    return this.inclusions;
	};
	
	Predicate.prototype.set = function (contentMetaData) {
	    var x, n, key, numberToMatch, numberMatched;
	    contentMetaData = contentMetaData.toLowerCase();
	    for (key in this.predicates) {
	        for (x in this.predicates[key].rules) {
	            numberToMatch = 0;
	            numberMatched = 0;
	            for (n in this.predicates[key].rules[x].match) {
	                numberToMatch++;
	                var exp = new RegExp(this.predicates[key].rules[x].match[n].join('|'));
	                if (exp.test(contentMetaData)) {
	                    numberMatched++;
	                } else {
	                    // Must match each list as it's an AND operator
	                    continue;
	                }
	            }
	            if (0 !== numberMatched && numberToMatch === numberMatched) {
	                if ('!c' === this.predicates[key].rules[x].value) {
	                    // Exclusions
	                    this.exclusions.push(key);
	                } else {
	                    // Inclusions
	                    this.inclusions.push(key);
	                }
	            }
	        }
	    }
	    this.setAdExclusion(this.exclusions);
	    return this;
	};
	
	module.exports = Predicate;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var sections = __webpack_require__(150);
	var utils = __webpack_require__(141);
	
	var keyValues = {},
	    keywordObj = false,
	    assetTypeMap = {
	    'AV': 'media_asset',
	    'INDEX': 'index'
	};
	
	var setStoryId = function setStoryId(windowLocationHref) {
	    if (/([0-9]{7,8})$/.test(windowLocationHref.split("?")[0].split("#")[0])) {
	        keyValues['story_id'] = RegExp.$1;
	    }
	};
	
	var setCType = function setCType(windowLocationHref) {
	    windowLocationHref = windowLocationHref.split("?")[0].split("#")[0];
	    keyValues['ctype'] = /[0-9]{7,8}$/.test(windowLocationHref) ? 'content' : 'index';
	};
	
	var setAssetType = function setAssetType(windowLocationHref, assetType) {
	    if (typeof keyValues['asset_type'] === 'undefined') {
	        // Asset type INDEX will be set for Index and Feature Indexes and should override the use of the url
	        if (assetType && typeof assetType === 'string' && assetTypeMap[assetType]) {
	            keyValues['asset_type'] = assetTypeMap[assetType];
	        } else {
	            // If an asset type of AV or INDEX has not been defined use the url to work out the type
	            windowLocationHref = windowLocationHref.split("?")[0].split("#")[0];
	            keyValues['asset_type'] = /[0-9]{7,8}$/.test(windowLocationHref) ? 'story' : 'index';
	        }
	        // All live experience pages should override the asset type
	        if (/\/(sport|news)\/live\//.test(windowLocationHref)) {
	            keyValues['asset_type'] = 'live_event';
	        }
	    }
	};
	
	var setReferrer = function setReferrer(referrer) {
	    // Referrer KeyValue
	    var matchArr = referrer.match(/^(http[s]?:\/\/[a-z0-9\.]*bbc\.(co\.uk|com))(.*)$/);
	    if (matchArr) {
	        // Within bbc website
	        var refString;
	        refString = matchArr[3].replace(/default.stm$|\-|\/|_/g, "");
	        if (refString.length > 0 && refString.length <= 64) {
	            keyValues['referrer'] = escape(refString);
	        } else {
	            keyValues['referrer'] = "";
	        }
	    } else {
	        // Catch exceptions
	        keyValues['referrer'] = "nonbbc";
	    }
	};
	
	var setReferrerDomain = function setReferrerDomain(referrer) {
	    var refDomain = referrer.match(/^(http[s]?:\/\/)([a-z0-9\.]*)((?:\/(?:\w|-|\+|\.)+)*)(\/.*)$/);
	    if (refDomain) {
	        keyValues['referrer_domain'] = refDomain[2];
	    } else {
	        keyValues['referrer_domain'] = "";
	    }
	};
	
	// Behavioral targeting adserver integration
	var setRsi = function setRsi(windowDocument) {
	    var i,
	        rsi_segs = [],
	        segs_end,
	        segs_beg;
	    if (typeof windowDocument.cookie !== 'undefined') {
	        segs_beg = windowDocument.cookie.indexOf('rsi_segs=');
	        keyValues['rsi'] = [];
	        if (segs_beg >= 0) {
	            segs_beg = windowDocument.cookie.indexOf('=', segs_beg) + 1;
	            if (segs_beg > 0) {
	                segs_end = windowDocument.cookie.indexOf(';', segs_beg);
	                if (segs_end === -1) {
	                    segs_end = windowDocument.cookie.length;
	                }
	                rsi_segs = windowDocument.cookie.substring(segs_beg, segs_end).split('|');
	            }
	        }
	        for (i = 0; i < rsi_segs.length && i < 20; i++) {
	            keyValues['rsi'].push(rsi_segs[i]);
	        }
	    }
	};
	
	var setWorldServiceTitle = function setWorldServiceTitle(windowLocationPathname) {
	    var title;
	    if (sections.getSection(0) === 'worldservice') {
	        title = windowLocationPathname.split('/').pop().split('_');
	        if (typeof title[1] !== 'undefined') {
	            keyValues['keyword'] = title[1] + (typeof title[2] !== 'undefined' ? '_' + title[2] : '');
	        }
	        title.shift();
	        keyValues['title'] = title.join('_');
	    }
	};
	
	var setKeywordParts = function setKeywordParts(keyword) {
	    var keywordParts = keyword.match(/(((?!(sponsor:)).)*)(sponsor:([^,]+),?(.*))?/);
	    if (keywordParts !== null && typeof keywordParts[5] !== 'undefined' && keywordParts[5] !== '' && typeof keywordParts[6] !== 'undefined' && keywordParts[6] !== '') {
	        keywordObj = {
	            href: keywordParts[6],
	            title: utils.capitalize(keywordParts[5])
	        };
	        keyValues['keyword'] = keywordParts[5].replace(/ /g, '');
	    } else {
	        keyValues['keyword'] = keyword;
	    }
	};
	
	module.exports = {
	    init: function init(windowLocation, windowDocument, assetType) {
	        keyValues['domain'] = windowLocation.hostname;
	        setStoryId(windowLocation.href);
	        setCType(windowLocation.href);
	        setAssetType(windowLocation.href, assetType);
	        setReferrer(windowDocument.referrer);
	        setReferrerDomain(windowDocument.referrer);
	        setRsi(windowDocument);
	        setWorldServiceTitle(windowLocation.pathname);
	    },
	    getAll: function getAll() {
	        return keyValues;
	    },
	    get: function get(key) {
	        return typeof keyValues[key] !== 'undefined' ? keyValues[key] : false;
	    },
	    set: function set(key, value) {
	        if (typeof key === 'string') {
	            if (typeof key !== 'undefined' && typeof value !== 'undefined' && value !== '') {
	                if (key === 'keyword') {
	                    setKeywordParts(value);
	                } else {
	                    keyValues[key] = value;
	                }
	            }
	        }
	    },
	    setArray: function setArray(key, value) {
	        if (typeof key === 'string') {
	            if (typeof keyValues[key] === 'undefined') {
	                keyValues[key] = [];
	            }
	            if (typeof key !== 'undefined' && typeof value !== 'undefined' && value !== '') {
	                keyValues[key].push(value);
	            }
	        }
	    },
	    getKeywordParts: function getKeywordParts() {
	        return keywordObj;
	    },
	    r: function r() {
	        keyValues = {};
	        keywordObj = false;
	    }
	};

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Log = __webpack_require__(142)('adverts:dfppRequest');
	var Layout = __webpack_require__(158);
	var Objects = __webpack_require__(159);
	var KeyValues = __webpack_require__(156);
	var AdRegister = __webpack_require__(160);
	var PubSub = __webpack_require__(161);
	var AdUnit = __webpack_require__(162);
	var Config = __webpack_require__(148);
	var Sections = __webpack_require__(150);
	var Utils = __webpack_require__(141);
	var SlotDeferred = __webpack_require__(164);
	
	var AD_ID_PREFIX = 'bbccom_';
	
	var setKruxData = function setKruxData() {
	    if (typeof Krux !== 'undefined') {
	        if (typeof Krux.segments !== 'undefined') {
	            googletag.pubads().setTargeting("ksg", Krux.segments);
	        }
	        if (typeof Krux.user !== 'undefined') {
	            googletag.pubads().setTargeting("kuid", Krux.user);
	        }
	        googletag.pubads().setTargeting("khost", encodeURIComponent(location.hostname));
	    }
	};
	
	var getAdData = function getAdData(adName) {
	    var ad = {
	        adSizes: Layout.getAdCurrentGroupSizes(adName)
	    };
	    // Reset ad slot name back to async one if required
	    ad.domId = Objects('bbcdotcom.config.isAsync') ? AD_ID_PREFIX + adName : adName;
	    return ad;
	};
	
	var setupRenderEndedCallback = function setupRenderEndedCallback() {
	    googletag.cmd.push(function () {
	        googletag.pubads().addEventListener('slotRenderEnded', function (event) {
	            var adId = event.slot.getTargeting("slot");
	            adId = adId[0].replace('bbccom_', '');
	            var ad = AdRegister.getAd(adId);
	            var slotElementId = event.slot.getSlotElementId();
	
	            Log(adId, slotElementId, 'isEmpty', event.isEmpty);
	            if (ad && ad.isRendered()) {
	                return;
	            }
	            ad.setRendered(true);
	            ad.setEventSize(event.size);
	            ad.renderIfReady();
	            PubSub.trigger('ad:render:complete', slotElementId, event.isEmpty);
	        });
	    });
	};
	
	var DFPPRequest = function DFPPRequest() {
	    this.slots = {};
	};
	
	DFPPRequest.prototype.init = function () {
	    try {
	        if (Config.isAdsEnabled() && typeof googletag !== 'undefined') {
	            googletag.cmd.push(function () {
	                var keyValues = KeyValues.getAll();
	                var key;
	
	                googletag.pubads().setTargeting("frd", '1');
	
	                if (AdUnit.getPreviewUid()) {
	                    googletag.pubads().setTargeting("uid", AdUnit.getPreviewUid());
	                }
	                for (key in keyValues) {
	                    if (keyValues.hasOwnProperty(key) && keyValues[key] !== '') {
	                        googletag.pubads().setTargeting(key, keyValues[key]);
	                    }
	                }
	                googletag.pubads().setTargeting('esi', '0');
	
	                /**
	                 * KRUX
	                 */
	                setKruxData();
	
	                // BBCCOM-7631
	                if (Sections.getSection(0) === 'weather') {
	                    googletag.pubads().addEventListener('impressionViewable', function (event) {
	                        var children, el;
	                        if (event.slot.getSlotElementId() === 'mpu') {
	                            children = document.getElementById('bbccom_mpu').children;
	                            if (children[children.length - 1].tagName === "SCRIPT") {
	                                el = children[children.length - 2];
	                            } else {
	                                el = children[children.length - 1];
	                            }
	                            Utils.addBodyTagClass('bbccom_slot_mpu' + Math.floor(el.clientHeight / 100) * 100);
	                        }
	                    });
	                }
	
	                /**
	                 *  SINGLE REQUEST MODE Ad Setup
	                 */
	                googletag.pubads().enableSingleRequest();
	
	                /**
	                 *  SYNC/ASNYC Differences
	                 */
	                if (!Objects('bbcdotcom.config.isAsync')) {
	                    googletag.pubads().enableSyncRendering();
	                } else {
	                    if (Objects('bbcdotcom.config.isDisableInitialLoad')) {
	                        googletag.pubads().disableInitialLoad();
	                    }
	                    setupRenderEndedCallback();
	                }
	            }.bind(this));
	        }
	    } catch (e) {
	        Log.error('Unable to setup ads', e);
	    }
	};
	
	DFPPRequest.prototype.requestAds = function () {
	    try {
	
	        if (Config.isAdsEnabled() && typeof googletag !== 'undefined' && Objects('adUnit.get', bbcdotcom.adverts)) {
	
	            if (AdRegister.getAdCount() === 0) {
	                // No ads in register
	                // We still want to enable services for after-initial-load ads
	                googletag.cmd.push(function () {
	                    googletag.enableServices();
	                });
	                return;
	            }
	
	            googletag.cmd.push(function () {
	                var i,
	                    adData,
	                    adUnit = Objects('adUnit.get', bbcdotcom.adverts),
	                    ads = AdRegister.getAds();
	
	                for (i in ads) {
	                    if (ads.hasOwnProperty(i)) {
	                        adData = getAdData(ads[i].getAdId().replace(AD_ID_PREFIX, ''));
	                        if (adData && adData.domId.indexOf('adsense') === -1 && adData.adSizes.length > 0) {
	                            this.slots[adData.domId] = googletag.defineSlot(adUnit, adData.adSizes, adData.domId).addService(googletag.pubads());
	                            this.slots[adData.domId].setTargeting('slot', adData.domId.replace(AD_ID_PREFIX, ''));
	                        }
	                    }
	                }
	
	                /**
	                 *  INTERSTITIAL Ad Setup
	                 */
	                AdRegister.registerAd('interstitial');
	                googletag.defineOutOfPageSlot(Objects('adUnit.get', bbcdotcom.adverts), 'bbccom_interstitial').addService(googletag.pubads()).setTargeting('slot', 'interstitial');
	
	                var keySlots = Object.keys(this.slots);
	                keySlots.push('bbccom_interstitial');
	
	                googletag.enableServices();
	
	                PubSub.trigger('ads:requested', keySlots);
	            }.bind(this));
	        }
	    } catch (e) {
	        Log.error('Unable to request ads', e);
	    }
	};
	
	/**
	 * Refresh ads in asynchronous loaded pages
	 * There is an sync version of refreshing ads in api.js for verticals as an interim
	 */
	DFPPRequest.prototype.refreshAd = function (domId) {
	    var ad = AdRegister.getAd(domId.replace('bbccom_', ''));
	    if (ad) {
	        googletag.pubads().refresh([this.slots[domId]]);
	        ad.injectAdvertisementText();
	    } else {
	        Log.warn('No ' + domId.replace('bbccom_', '') + ' ad found to refresh');
	    }
	};
	
	/**
	 * Register a new ad in AJAX or infinite loaded pages
	 */
	DFPPRequest.prototype.registerAd = function (domId, groups) {
	    var ad = AdRegister.registerAd(domId),
	        currentGroupId = Layout.getCurrentGroupId();
	
	    if (ad && !ad.hasAnyGroupAlreadyBeenRegistered([groups]) && groups.indexOf(currentGroupId) >= 0) {
	
	        Log('Registering ad: ' + domId + ' for groups ' + groups);
	        googletag.cmd.push(function () {
	            var adUnit = Objects('adUnit.get', bbcdotcom.adverts),
	                adData = getAdData(ad.getAdId().replace(AD_ID_PREFIX, ''));
	
	            this.slots[adData.domId] = googletag.defineSlot(adUnit, adData.adSizes, adData.domId).addService(googletag.pubads());
	            this.slots[adData.domId].setTargeting('slot', adData.domId.replace(AD_ID_PREFIX, ''));
	
	            SlotDeferred(domId, groups);
	            googletag.pubads().refresh([this.slots[adData.domId]]);
	            googletag.display("bbccom_" + ad.getAdId());
	            ad.injectAdvertisementText();
	
	            PubSub.trigger('ads:requested', domId);
	        }.bind(this));
	    } else {
	        Log.warn('No ' + domId.replace('bbccom_', '') + ' ad found to register (for groups ' + groups + ' )');
	    }
	};
	
	DFPPRequest.prototype.setExclusion = function (key) {
	    googletag.cmd.push(function () {
	        googletag.pubads().setCategoryExclusion(key);
	    });
	};
	
	module.exports = new DFPPRequest();

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var clientWidth,
	    adSizeLeewayAgainstSlotSize = 20,
	    adSizeLeewayAgainstSlotSizeWithNoBorder = 30,
	    initialGroup = false,
	    initialGroupId = false,
	    currentGroup,
	    currentGroupId,
	    currentGroupSizes = {},
	    layoutDisableReset = false;
	
	var log = __webpack_require__(142)('adverts:layout');
	var classes = __webpack_require__(153);
	var utils = __webpack_require__(141);
	
	/**
	 * Use page width to determine GroupID and GroupSizes
	 */
	function determineCurrentGroupAndSizes(groups) {
	    var x, slot, slotSizes;
	    for (x in groups) {
	        utils.removeHtmlTagClass(classes.className('group', x));
	        if ((typeof groups[x].f === 'undefined' || clientWidth <= groups[x].f) && clientWidth >= groups[x].s) {
	            currentGroupId = +x;
	            currentGroup = groups[x];
	
	            if (!initialGroup && !initialGroupId) {
	                initialGroup = currentGroup;
	                initialGroupId = currentGroupId;
	            }
	
	            utils.addHtmlTagClass(classes.className('group', currentGroupId));
	
	            // Strip out sizes not compatible with page width
	            for (slot in currentGroup.slots) {
	                currentGroupSizes[slot] = [];
	                for (slotSizes in currentGroup.slots[slot]) {
	                    if (clientWidth >= currentGroup.slots[slot][slotSizes][0]) {
	                        currentGroupSizes[slot].push(currentGroup.slots[slot][slotSizes]);
	                    }
	                }
	            }
	        }
	    }
	}
	
	function isAdSizeSuitableForCurrentGroup(ad) {
	    var slotIndex,
	        slotSizes = bbcdotcom.adverts.layout.getAdCurrentGroupSizes(ad.getAdName()),
	        leeway = typeof ad.adType !== 'undefined' && (ad.adType === 'promo' || ad.adType === 'feature') ? adSizeLeewayAgainstSlotSizeWithNoBorder : adSizeLeewayAgainstSlotSize;
	
	    for (slotIndex = 0; slotIndex < slotSizes.length; slotIndex++) {
	        /*
	         * THE FOLLOWING DETECTS HEIGHT INCLUDING THE ADVERTISING TEXT AS TRYING TO DETECT HEIGHT ON THE
	         * AD_CONTAINER DOES NOT WORK IN IE8. THE AD IS INJECTED OUTSIDE OF THIS AD_CONTAINER
	         */
	
	        if (Math.abs(slotSizes[slotIndex][0] - ad.getWidth()) <= leeway && Math.abs(slotSizes[slotIndex][1] - ad.getCreativeHeight()) <= leeway) {
	            return true;
	        }
	    }
	}
	
	function shouldShowAd(ad) {
	    return ad.currentSlotHasGroup(currentGroupId) && isAdSizeSuitableForCurrentGroup(ad);
	}
	
	var showOrHideAdForCurrentGroup = function showOrHideAdForCurrentGroup(ad) {
	    if (bbcdotcom.domLoaded && !ad.isResponsive) {
	        if (shouldShowAd(ad)) {
	            log.debug('=== Opening ' + ad.getAdId() + ' for current slot ===');
	            ad.open();
	        } else {
	            log.debug('=== Shutting ' + ad.getAdId() + ' for current slot ===');
	            ad.shut();
	        }
	    }
	};
	
	module.exports = {
	    init: function init(groups) {
	        clientWidth = document.documentElement.clientWidth; // TODO - A better way to detect width inline with media selectors
	        determineCurrentGroupAndSizes(groups);
	    },
	    /**
	     * Deprecated
	     */
	    moveAd: function moveAd(from, to) {
	        //var iFrame,
	        //    iFrameDocument,
	        //    iFrameBody,
	        //    iFrameInnerHTML,
	        //    domFrom = document.getElementById(from),
	        //    domTo = document.getElementById(to);
	        //if (from !== to && domFrom !== null && domTo !== null) {
	        //    iFrame = domFrom.getElementsByTagName('iframe')[0];
	        //    if (typeof iFrame !== 'undefined') {
	        //        iFrameDocument = iFrame.contentDocument || iFrame.contentWindow.document;
	        //        if (iFrameDocument) {
	        //            iFrameBody = iFrameDocument.getElementsByTagName('body')[0];
	        //            iFrameInnerHTML = domFrom.innerHTML.replace(/<iframe.*>.*<\/iframe>/, iFrameBody.innerHTML);
	        //        }
	        //    }
	        //    domTo.innerHTML = iFrameInnerHTML || domFrom.innerHTML;
	        //    domFrom.innerHTML = '';
	        //}
	        //domFrom = domTo = null;
	    },
	    setClientWidth: function setClientWidth(width) {
	        clientWidth = width;
	    },
	    getClientWidth: function getClientWidth() {
	        return clientWidth;
	    },
	    getCurrentGroup: function getCurrentGroup() {
	        return currentGroup;
	    },
	    getCurrentGroupId: function getCurrentGroupId() {
	        return currentGroupId;
	    },
	    /**
	     * For testing
	     */
	    setCurrentGroupId: function setCurrentGroupId(groupId) {
	        currentGroupId = groupId;
	    },
	    /**
	     * TODO - Deprecate in favour of using the method below
	     * @returns array of all current group ad slot sizes
	     */
	    getCurrentGroupSizes: function getCurrentGroupSizes() {
	        return currentGroupSizes;
	    },
	    /**
	     * Should use this as opposed to the method above
	     * @param adId
	     * @returns array of current slot sizes for an ad
	     */
	    getAdCurrentGroupSizes: function getAdCurrentGroupSizes(adId) {
	        if (typeof currentGroupSizes[adId] !== 'undefined') {
	            return currentGroupSizes[adId];
	        } else if (typeof currentGroupSizes[adId.slice(0, adId.indexOf('_'))] !== 'undefined') {
	            return currentGroupSizes[adId.slice(0, adId.indexOf('_'))];
	        }
	        return [];
	    },
	    overrideGroupSizes: function overrideGroupSizes(slots) {
	        var slot;
	        currentGroupSizes = [];
	        for (slot in slots) {
	            currentGroupSizes[slot] = slots[slot];
	        }
	    },
	    disableReset: function disableReset() {
	        layoutDisableReset = true;
	    },
	    reset: function reset() {
	        if (layoutDisableReset) {
	            log.debug('layoutDisableReset is set to', true);
	            return;
	        }
	
	        try {
	            var ad,
	                ads = bbcdotcom.adverts.adRegister.getAds();
	
	            bbcdotcom.adverts.layout.init(bbcdotcom.adverts.breakpoints.getGroups());
	
	            for (ad in ads) {
	                if (ads.hasOwnProperty(ad)) {
	                    // Now lets check if the ad is still suitable for displaying in its current group
	                    showOrHideAdForCurrentGroup(ads[ad]);
	                }
	            }
	        } catch (e) {
	            log.error(e);
	        }
	    },
	    /**
	     * For testing.
	     */
	    r: function r() {
	        layoutDisableReset = false;
	        currentGroup = {};
	        currentGroupId = 0;
	        currentGroupSizes = {};
	    }
	};

/***/ },
/* 159 */
/***/ function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/*
	 * ALWAYS REQUIRED INTERNATIONAL for analytics.js, irrespective of ads being enabled
	 *
	 * USAGE
	 *
	 * Creates namespace/objects:
	 *   bbcdotcom.objects('bbcdotcom.data.stats', 'create')
	 *   => var window.bbcdotcom.data = {};  var window.bbcdotcom.data.stats = {};
	 *
	 * Returns object, method result or property result depending on whether it's an object, method or property.
	 *   bbcdotcom.objects('bbcdotcom.data.stats')
	 *   => var isExists = bbcdotcom.data.stats;
	 *
	 * Return the value of a function with passed in a param:
	 *   bbcdotcom.objects('bbcdotcom.config.isActive', 'analytics')
	 *   => var isAnalyticsActive = bbcdotcom.config.isActive('analytics');
	 *
	 * Returns true if method/object exists:
	 *   bbcdotcom.objects('slot', bbcdotcom.adverts)
	 *   => var methodExists = (typeof bbcdotcom.adverts.slot !== 'undefined' ? true : false);
	 *
	 */
	module.exports = function (strName) {
	    var i,
	        len,
	        args = arguments,
	        nameParts = strName.split("."),
	        obj = args[1] !== null && _typeof(args[1]) === 'object' ? args[1] : window;
	    for (i = 0, len = nameParts.length; i < len; i++) {
	        if (obj[nameParts[i]] === undefined) {
	            if (typeof args[1] === 'string' && args[1] === 'create') {
	                obj[nameParts[i]] = {};
	            } else {
	                return false; // Checking for an objects existence
	            }
	        } else if (typeof obj[nameParts[i]] === 'function') {
	            if (typeof args[1] !== 'undefined' && args[1] !== null && obj[nameParts[i]](args[1]) !== undefined) {
	                return obj[nameParts[i]](args[1]);
	            } else if (obj[nameParts[i]]() !== undefined) {
	                return obj[nameParts[i]]();
	            }
	        }
	        obj = obj[nameParts[i]];
	    }
	    return obj;
	};

/***/ },
/* 160 */
/***/ function(module, exports) {

	"use strict";
	
	var register = {},
	    factory,
	    currentAdId,
	    sponsorAdOverride = { //BBCCOM-7608 && BBCCOM-7630
	    "news": {
	        "business": true,
	        "technology": true,
	        "*": false
	    },
	    "sport": {
	        "golf": true,
	        "tennis": true,
	        "football": true,
	        "formula1": true,
	        "equestrian": true,
	        "horse-racing": true,
	        "olympics": true,
	        "move-like-never-before": true,
	        "home-of-the-english-premier-league": true,
	        "*": false
	    },
	    "*": {
	        "*": true
	    }
	},
	
	/**
	 *
	 * TODO - Think about moving this logic into separate ad types that extend the standard ad type
	 *
	 * OPTIONS
	 * - isResponsive (Ad does not check to see if it is still suitable for the current slot as the ad will work in a responsive environment and does not shut)
	 * - allowScreenReader (Allows for tabbing through elements within an ad)
	 * - hasAdText (Displays associated ad text such as IS SPONSORED BY)
	 * - adType (Allows different slot renderers and classes to be used)
	 * - isDfppRequest (Will not be added to the dfp request as it is a different ad type)
	 *
	 */
	adConfig = {
	    "wallpaper": {
	        "isResponsive": true
	    },
	    "interstitial": {
	        "isResponsive": true
	    },
	    "native": {
	        "allowScreenReader": true,
	        "isResponsive": true,
	        "hasAdText": false
	    },
	    "adsense": {
	        "adType": "adsense",
	        "isResponsive": true,
	        "isDfppRequest": false,
	        "template": 'adsense'
	    },
	    "outbrain": {
	        "adType": "outbrain",
	        "isResponsive": true,
	        "isDfppRequest": false
	    },
	    "promo": {
	        /* catch all */
	        "adType": "promo",
	        "hasAdText": false
	    },
	    "inread": {
	        "adType": "inread",
	        "isResponsive": true,
	        "hasAdText": false
	    },
	    "sponsor": {
	        "adType": "sponsor",
	        "isResponsive": true,
	        "size": [88, 31],
	        "override": sponsorAdOverride
	    },
	    "module": {
	        "adType": "module",
	        "isResponsive": true,
	        "size": [88, 31],
	        "ovrride": sponsorAdOverride
	    },
	    "module_worldinpictures": {
	        "adType": "module_worldinpictures",
	        "isResponsive": false
	    },
	    "sponsor_section": {
	        "adType": "sponsor_section",
	        "isResponsive": false,
	        "size": [88, 31],
	        "override": sponsorAdOverride
	    },
	    "ad_feature_rc": {
	        "adType": "feature",
	        "hasAdText": false
	    },
	    "sponsor_banner": {
	        "adType": "sponsor_banner",
	        "isResponsive": false,
	        "size": [88, 31],
	        "override": sponsorAdOverride
	    }
	};
	
	module.exports = {
	    setAdFactory: function setAdFactory(adFactory) {
	        factory = adFactory;
	    },
	    /**
	     * @param adId eg mpu, leaderboard
	     */
	    registerAd: function registerAd(adId) {
	        var section = bbcdotcom.sections.getSection(0) || "*",
	            sub_section = bbcdotcom.sections.getSection(1) || "*",
	            override = adConfig[adId] && adConfig[adId]["override"] ? adConfig[adId]["override"] : false;
	        if (override && override[section] && !override[section][sub_section]) {
	            return false;
	        }
	        if (adId !== '' && typeof register[adId] === 'undefined') {
	            register[adId] = new bbcdotcom.adverts.ad(adId);
	            if (typeof adConfig[adId] !== 'undefined') {
	                register[adId].setConfig(adConfig[adId]);
	            } else if (typeof adConfig[adId.slice(0, adId.indexOf('_'))] !== 'undefined') {
	                register[adId].setConfig(adConfig[adId.slice(0, adId.indexOf('_'))]);
	            }
	        }
	        return register[adId];
	    },
	    setCurrentAdId: function setCurrentAdId(adId) {
	        currentAdId = adId;
	    },
	    getCurrentAdId: function getCurrentAdId() {
	        return currentAdId;
	    },
	    getCurrentAd: function getCurrentAd() {
	        // TODO - Remove if and else and return register[currentAdId] once apps use the correct API bbcdotcom.show()
	        if (bbcdotcom.config.isActive('ads')) {
	            if (typeof currentAdId !== 'undefined' && register[currentAdId]) {
	                return register[currentAdId];
	            }
	            return {
	                setBaseContent: function setBaseContent() {},
	                show: function show() {},
	                close: function close() {}
	            };
	        } else {
	            return {
	                show: function show() {},
	                close: function close() {}
	            };
	        }
	    },
	    getAd: function getAd(adId) {
	        if (typeof register[adId] !== 'undefined') {
	            return register[adId];
	        }
	    },
	    getAds: function getAds() {
	        return register;
	    },
	    getAdCount: function getAdCount() {
	        var k;
	        var count = 0;
	        for (k in register) {
	            if (register.hasOwnProperty(k)) {
	                count++;
	            }
	        }
	        return count;
	    },
	    // TODO - For tests only, fix later.
	    r: function r() {
	        register = {};
	        currentAdId = undefined;
	    }
	};

/***/ },
/* 161 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Internal map of event listener functions. Each property is an event with the corresponding
	 * value being an array of the listeners which are bound to that event.
	 *
	 * @type {{}}
	 */
	var listeners = {};
	
	module.exports = {
	
	    /**
	     * Bind a listener function to a particular event or list of space separated events.
	     *
	     * @param {string} event The event to which we want to listen
	     * @param {function} listener The function to call when the event is triggered
	     */
	    on: function on(event, listener) {
	        var i;
	
	        if (typeof listener !== 'function') {
	            throw new TypeError('Event handler must be a function');
	        }
	
	        var events = event.split(' ');
	        for (i = 0; i < events.length; i++) {
	            listeners[events[i]] = listeners[events[i]] || [];
	            listeners[events[i]].push(listener);
	        }
	
	        return this;
	    },
	
	    /**
	     * Trigger an event calling any listeners which are bound with the arguments given.
	     *
	     * @param {string} event The name of the event to trigger
	     * @param {...*} arguments Any arguments which should be passed to the listener functions
	     */
	    trigger: function trigger(event) {
	        var i;
	
	        if (!listeners.hasOwnProperty(event)) {
	            return this;
	        }
	
	        for (i = 0; i < listeners[event].length; i++) {
	            listeners[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
	        }
	
	        return this;
	    },
	
	    /**
	     * Unbind listener(s) from a particular event. If a listener function is given, only this listener
	     * is unbound. If no listener is given, all listeners for a particular event are unbound.
	     *
	     * @param {string} event The event whose listener(s) we want to unbind
	     * @param {function=} listener Optional listener function to unbind
	     */
	    off: function off(event, listener) {
	        if (!listeners.hasOwnProperty(event)) {
	            return this;
	        }
	
	        if (typeof listener === 'undefined') {
	            delete listeners[event];
	            return this;
	        }
	
	        while (listeners[event].indexOf(listener) >= 0) {
	            listeners[event].splice(listeners[event].indexOf(listener), 1);
	        }
	
	        if (listeners[event].length === 0) {
	            delete listeners[event];
	        }
	
	        return this;
	    },
	
	    /**
	     * Remove all event listeners for all events.
	     */
	    clear: function clear() {
	        listeners = {};
	        return this;
	    }
	};

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * bbcdotcom.adverts.adUnit is responsible for providing the correct adUnits (used to be called 'zone') to DFP.
	 *
	 * adUnits is a forward-slash delimited string for targetting the best adverts to a page.
	 *
	 * eg /4817/bbccom.qa.site.mobile.news/sport_homepage_int
	 *          [      ad unit 1         ] [    ad unit 2   ]
	 */
	var keyValues = __webpack_require__(156);
	var utils = __webpack_require__(141);
	var config = __webpack_require__(148);
	var adUnitWebService = __webpack_require__(163);
	
	var zoneData = {},
	    DFP_ID = '/4817/',
	    DFP_SUITE_DEFAULT = 'desktop',
	    DFP_SUITE_DEVICE_WIDTH_SWITCH = 900,
	    AD_UNIT_DEFAULT = 'bbccom.live.site.news/',
	    AD_UNIT_2_DEFAULT = '_default',
	    UNKNOWN = 'unknown',
	    CHANNEL_KEY = 'channel',
	    SECTION_KEY = 'sectn',
	    SUB_SECTION_KEY = 'subsect',
	    adUnit = AD_UNIT_DEFAULT,
	    customAdUnit = false,
	    dfpSuite = DFP_SUITE_DEFAULT,
	    adUnits2to9 = '',
	    previewUid = false,
	    queryStringOverride = false,
	    allowedSites = {
	    /* Desktop adUnits */
	    live: 'bbccom.live.site.news/',
	    www: 'bbccom.live.site.www/',
	    specials: 'bbccom.live.site.specialfeatures/',
	    preview: 'bbccom.preview.site.test/',
	    test: 'bbccom.test.site.flash/',
	    /* Mobile adUnits */
	    live_mobile: 'bbccom.live.site.mobile.news/',
	    www_mobile: 'bbccom.live.site.mobile.www/',
	    specials_mobile: 'bbccom.live.site.specialfeatures/',
	    preview_mobile: 'bbccom.preview.site.mobile.news/',
	    test_mobile: 'bbccom.qa.site.mobile.news/',
	    /* WorldService adUnits - used for testing only */
	    test_arabic: 'bbcws.test.site.mobile.arabic/',
	    test_russian: 'bbcws.test.site.mobile.russian/',
	    /* BBC Earth */
	    live_earth: 'bbcearth.com/',
	    test_earth: 'bbcearth.test.com/',
	    /* AMP Ad Units */
	    test_amp_news: 'bbccom.test.amp.news/',
	    live_amp_news: 'bbccom.live.amp.news/'
	},
	    WORLD_SERVICE_AD_UNIT_PREFIX = {
	    live_desktop: 'bbcworldservice.live.site.',
	    test_desktop: 'bbcworldservice.test.site.',
	    live_mobile: 'bbcws.live.site.mobile.',
	    test_mobile: 'bbcws.test.site.mobile.'
	},
	    WORLD_SERVICE_AD_UNIT_SUFFIX_MAP = {
	    japanese: 'japan'
	},
	    VERTICALS_AD_UNITS_PREFIX = {
	    live: 'bbccom.live.site.',
	    test: 'bbccom.test.site.'
	},
	    AD_UNIT2_EXCEPTIONS = {
	    '^\/sport\/football\/teams\/(liverpool|manchester-city)': 'sport_football$1_content',
	    '^\/news\/election\/us2016': 'news_uscanada_content'
	},
	    sections,
	    adSections,
	    windowLocation = '';
	
	/**
	 * Based on visitor's browser width, determine whehter to return mobile or desktop suite.
	 */
	var assignDfpSuite = function assignDfpSuite(clientWidth) {
	    if (clientWidth < DFP_SUITE_DEVICE_WIDTH_SWITCH) {
	        dfpSuite = 'mobile';
	    } else {
	        dfpSuite = 'desktop';
	    }
	};
	
	/**
	 * Get the world service suffix to add to the primary adUnit. Basically adSections[0] run through
	 * WORLD_SERVICE_AD_UNIT_SUFFIX_MAP to see if there is an override and some special rules for China
	 *
	 * eg bbcworldservice.live.site.<suffix>/
	 *
	 * @returns {string}
	 */
	var getWorldServiceAdUnitSuffix = function getWorldServiceAdUnitSuffix() {
	    var adUnitSuffix = WORLD_SERVICE_AD_UNIT_SUFFIX_MAP[adSections[0]] || adSections[0];
	    if (adSections[0] === 'zhongwen' || adSections[0] === 'ukchina') {
	        adUnitSuffix += adSections[1];
	    }
	
	    if (dfpSuite === 'desktop' && adUnitSuffix === 'russian') {
	        //BBCCOM-7713
	        adUnitSuffix = "russia";
	    }
	
	    return adUnitSuffix;
	};
	
	/**
	 * Determine AdUnit 1
	 * eg /4817/bbccom.qa.site.mobile.news/sport_homepage_int
	 *          [      ad unit 1         ] [    ad unit 2   ]
	 */
	var deriveAdUnit1 = function deriveAdUnit1() {
	    var mDotRegExp = new RegExp('(m.stage.|m.)bbc.co(m|m\/|.uk|.uk\/)'),
	        isTestEnv = utils.isTestEnv(),
	        adUnitOverride = utils.getUriParamByName('ad-unit', false),
	        siteOverride = utils.getUriParamByName('site', false),
	        uidOverride = utils.getUriParamByName('uid', false);
	
	    // User override for previewing an advert creative
	    if (uidOverride) {
	        previewUid = uidOverride;
	    }
	    if (!utils.isLiveEnv() && adUnitOverride) {
	        // Allow ad unit to be overridden un the URI
	        adUnit = adUnitOverride + '/';
	        queryStringOverride = true;
	    } else if (siteOverride === 'preview') {
	        adUnit = allowedSites.preview;
	        queryStringOverride = true;
	    } else if (siteOverride && typeof allowedSites[siteOverride] !== 'undefined') {
	        // User override of site
	        adUnit = allowedSites[siteOverride];
	        queryStringOverride = true;
	    } else if (sections[0] === 'worldservice' && typeof adSections[0] !== 'undefined') {
	        // World Service
	        // bbcworldservice.live.site.<adSections[0]>/ eg bbcworldservice.live.site.arabic/
	        adUnit = WORLD_SERVICE_AD_UNIT_PREFIX[(isTestEnv ? 'test' : 'live') + '_' + dfpSuite] + getWorldServiceAdUnitSuffix() + '/';
	    } else if (/^(earth)$/.test(adSections[0])) {
	        // Earth
	        adUnit = isTestEnv ? allowedSites.test_earth : allowedSites.live_earth;
	    } else if (isTestEnv) {
	        // Visitor is on sandbox/int/test, therefore show test adverts from test site
	        adUnit = dfpSuite === 'desktop' ? allowedSites.test : allowedSites.test_mobile;
	    } else if (sections[0] === 'homepage') {
	        // Homepage
	        adUnit = dfpSuite === 'desktop' ? allowedSites.www : allowedSites.www_mobile;
	    } else if (/^(autos|capital|culture|future|travel)$/.test(adSections[0])) {
	        // Verticals
	        var site = adSections[0].replace(/autos/, 'auto');
	        adUnit = VERTICALS_AD_UNITS_PREFIX[isTestEnv ? 'test' : 'live'] + site + '/';
	    } else if (mDotRegExp.test(windowLocation.href)) {
	        // Mobile vs Desktop
	        adUnit = dfpSuite === 'desktop' ? allowedSites.live : allowedSites.live_mobile;
	    } else if (/(.com|.co.uk|.net)\/specialfeatures\//.test(windowLocation.href)) {
	        // Special Features
	        adUnit = dfpSuite === 'desktop' ? allowedSites.specials : allowedSites.specials_mobile;
	    } else {
	        // Default site (needs to be the right default for mobile/desktop based on width)
	        adUnit = dfpSuite === 'mobile' ? allowedSites.live_mobile : AD_UNIT_DEFAULT;
	    }
	};
	
	/**
	 * Using the current page, determine what the zone should be.  Uses sections to break
	 * down the path of the Uri into logical sections.
	 */
	var deriveAdUnit2to9FromUri = function deriveAdUnit2to9FromUri() {
	    var i,
	        pattern,
	        re,
	        out = AD_UNIT_2_DEFAULT,
	        urlPath = '/' + adSections.join('/');
	
	    if (typeof adSections !== 'undefined' && adSections.length !== 0 && adSections[0] !== UNKNOWN) {
	
	        // Make sure all section parts are defined (make empty if not)
	        for (i = 0; i < 5; i++) {
	            adSections[i] = typeof adSections[i] === 'undefined' ? '' : adSections[i];
	            sections[i] = typeof sections[i] === 'undefined' ? '' : sections[i];
	        }
	        // Very Specific Exceptions
	        for (pattern in AD_UNIT2_EXCEPTIONS) {
	            re = new RegExp(pattern);
	            if (re.test(urlPath)) {
	                // Found pattern match
	                // eg {"\/sport\/football\/(hello|world)": "sport_football$1_content"} => "sport_footballhello_content"
	                out = AD_UNIT2_EXCEPTIONS[pattern].replace('$1', RegExp.$1).replace('$2', RegExp.$2);
	                break;
	            }
	        }
	        // Broad Exceptions
	        if (out === AD_UNIT_2_DEFAULT) {
	            if (adSections[0] === 'homepage') {
	                // BBC Homepage eg www.bbc.com/
	                out = 'bbc_homepage_int';
	            } else if (adSections[1] === '') {
	                // Frontpage - News/Sport/Weather/blah eg news_homepage_int
	                out = adSections[0] + '_homepage_int';
	                adSections[1] = 'homepage';
	            } else if (adSections[0] === 'news' && sections[1] === 'world' && sections[2] !== '') {
	                // /news/world complications - NOTE adSections vs sections
	                // eg sections=/news/world/asia/india and adSections=/news/worldasia/india => news_asia_content with sectn=india
	                out = adSections[0] + '_' + sections[2] + '_content';
	            } else if (adSections[0] === 'specialfeatures') {
	                // Specials eg horizonsbusiness_home, horizonsbusiness_episodes
	                // eg /specialfeatures/horizonsbusiness/
	                out = adSections[1] + '_' + (adSections[2] === '' ? 'home' : adSections[2]);
	            } else if (adSections[0] === 'zhongwen' || adSections[0] === 'ukchina') {
	                // e.g. http://www.bbc.com/zhongwen/trad/world > zhongwentrad_world_content
	                out = adSections[0] + adSections[1] + '_' + (adSections[2] === '' ? 'home' : adSections[2]) + '_content';
	            } else {
	                // Standard
	                // eg /news/business
	                out = adSections[0] + '_' + adSections[1] + '_content';
	            }
	        }
	        keyValues.set(CHANNEL_KEY, adSections[0]);
	        keyValues.set(SECTION_KEY, adSections[1]);
	        keyValues.set(SUB_SECTION_KEY, adSections[2]);
	    }
	    return out.replace(/-/, '');
	};
	
	/**
	 * Determine AdUnit 2 to 9
	 * eg /4817/bbccom.qa.site.mobile.news/sport_homepage_int
	 *          [      ad unit 1         ] [    ad unit 2   ]
	 */
	var deriveAdUnit2to9 = function deriveAdUnit2to9(serversideAdUnits2to9) {
	    if (typeof serversideAdUnits2to9 !== "undefined" && serversideAdUnits2to9 === 'frameworks_barlesque') {
	        var data = this.processZoneData(windowLocation.pathname, adUnitWebService.zones);
	        adUnits2to9 = data.zone;
	    } else if (typeof serversideAdUnits2to9 !== 'undefined') {
	        adUnits2to9 = serversideAdUnits2to9;
	    } else {
	        adUnits2to9 = deriveAdUnit2to9FromUri();
	    }
	};
	
	module.exports = {
	    init: function init(clientWidth, serversideAdUnits2to9, adSectionsArray, sectionsArray) {
	        windowLocation = config.getWindowLocation();
	        sections = sectionsArray;
	        adSections = adSectionsArray;
	        if (typeof clientWidth === "number") {
	            assignDfpSuite(clientWidth);
	        }
	        deriveAdUnit1();
	        deriveAdUnit2to9(serversideAdUnits2to9);
	    },
	    get: function get() {
	        if (customAdUnit === false) {
	            return DFP_ID + adUnit + adUnits2to9;
	        } else if (queryStringOverride === true) {
	            return DFP_ID + adUnit + (customAdUnit.indexOf('/') !== -1 ? customAdUnit.split('/')[1] : '/' + AD_UNIT_2_DEFAULT);
	        } else {
	            return DFP_ID + customAdUnit + (customAdUnit.indexOf('/') !== -1 ? '' : '/' + AD_UNIT_2_DEFAULT);
	        }
	    },
	    setUid: function setUid(overrideUid) {
	        previewUid = overrideUid;
	    },
	    setAdUnit: function setAdUnit(overrideAdUnit) {
	        if (typeof overrideAdUnit !== 'undefined') {
	            if ('undefined' !== typeof allowedSites[overrideAdUnit]) {
	                adUnit = allowedSites[overrideAdUnit];
	            }
	            if (/(bbccom\.(test|live)\.site|bbcearth\.com|bbcearth\.test\.com)/.test(overrideAdUnit)) {
	                customAdUnit = overrideAdUnit;
	            }
	        }
	    },
	    getPreviewUid: function getPreviewUid() {
	        return previewUid;
	    },
	    getAdUnit1: function getAdUnit1() {
	        return adUnit.endsWith('/') ? adUnit.substr(0, adUnit.length - 1) : adUnit;
	    },
	    getAdUnits2to9: function getAdUnits2to9() {
	        return adUnits2to9;
	    },
	    /*
	     * NOTE - This logic is only here for sites that are served of CDN
	     * TODO - Rename vars from zone to adUnit (New terminology)
	     */
	    processZoneData: function processZoneData(href, zone) {
	        var x, z;
	        if (('undefined' === typeof zone.uri || -1 !== href.indexOf(zone.uri)) && 'undefined' !== typeof zone.data) {
	            for (x in zone.data) {
	                zoneData[x] = zone.data[x];
	                if ('undefined' !== typeof zone.zones) {
	                    for (z in zone.zones) {
	                        if ('undefined' !== typeof zone.zones[z].uri) {
	                            href = href.replace(zone.uri, '');
	                        }
	                        this.processZoneData(href, zone.zones[z]);
	                    }
	                }
	            }
	        }
	        return zoneData;
	    },
	    /*
	     * For testing only, may look at newing up a new object each time.
	     */
	    r: function r() {
	        windowLocation = '';
	        adUnit = AD_UNIT_DEFAULT;
	        adUnits2to9 = AD_UNIT_2_DEFAULT;
	        dfpSuite = DFP_SUITE_DEFAULT;
	        customAdUnit = false;
	        previewUid = false;
	        queryStringOverride = false;
	    }
	};

/***/ },
/* 163 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {
	    zones: {
	        data: {
	            uri: "/",
	            site: "bbccom.live.site.mobile.news",
	            zone: ""
	        },
	        zones: [{
	            uri: "specialfeatures/",
	            data: {
	                zone: "news_specialfeatures_content"
	            },
	            zones: [{
	                uri: "horizonsbusiness",
	                data: {
	                    zone: "horizonsbusiness_home"
	                },
	                zones: [{
	                    uri: "/megatrend",
	                    data: {
	                        zone: "horizonsbusiness_other"
	                    }
	                }, {
	                    uri: "/clips-library",
	                    data: {
	                        zone: "horizonsbusiness_clips"
	                    }
	                }, {
	                    uri: "/episodes",
	                    data: {
	                        zone: "horizonsbusiness_episodes"
	                    }
	                }, {
	                    uri: "/episode",
	                    data: {
	                        zone: "horizonsbusiness_episode"
	                    }
	                }]
	            }]
	        }, {
	            uri: "wwscripts/",
	            data: {
	                zone: "wwscripts_content"
	            },
	            zones: [{
	                uri: "test/",
	                data: {
	                    zone: "wwscripts_test_content"
	                },
	                zones: [{
	                    uri: "orb-web-service",
	                    data: {
	                        zone: "wwscripts_test_orbwebservice"
	                    }
	                }]
	            }]
	        }]
	    }
	};

/***/ },
/* 164 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (adID, groups) {
	
	    var ad, slot, slotDomChildElement;
	
	    var currentGroupId = bbcdotcom.adverts.layout.getCurrentGroupId();
	
	    if (window.bbcdotcom && bbcdotcom.ad) {
	        ad = bbcdotcom.ad(adID);
	        if (typeof ad !== 'undefined' && !ad.hasAnyGroupAlreadyBeenRegistered([groups])) {
	            ad.registerSlotGroups(groups);
	            if (groups.indexOf(currentGroupId) >= 0) {
	
	                ad.setCurrentSlotGroups(groups);
	
	                slot = document.getElementById('bbccom_' + ad.getAdId() + '_' + groups.join('_'));
	                slotDomChildElement = slot.firstElementChild || slot.firstChild;
	                if (slotDomChildElement) {
	                    slotDomChildElement.id = 'bbccom_' + ad.getAdId();
	                }
	                bbcdotcom.utils.addTagClass(slot, 'bbccom_' + ad.adType + '_slot');
	            }
	        }
	    }
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _comScore = __webpack_require__(166);
	
	var _comScore2 = _interopRequireDefault(_comScore);
	
	var _streamSense = __webpack_require__(268);
	
	var _streamSense2 = _interopRequireDefault(_streamSense);
	
	var _sscHelper = __webpack_require__(270);
	
	var _sscHelper2 = _interopRequireDefault(_sscHelper);
	
	var _overrides = __webpack_require__(269);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports['default'] = Object.assign(_comScore2['default'], {
	    streamSense: _streamSense2['default'],
	    sscHelper: _sscHelper2['default'],
	    setMetricOverride: _overrides.setOverride
	});
	module.exports = exports['default'];

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _get2 = __webpack_require__(167);
	
	var _get3 = _interopRequireDefault(_get2);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _utils = __webpack_require__(141);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _helper = __webpack_require__(215);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	var _logger = __webpack_require__(142);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _comScoreHelpers = __webpack_require__(216);
	
	var _streamSense = __webpack_require__(268);
	
	var _streamSense2 = _interopRequireDefault(_streamSense);
	
	var _getUserTrackingCookie = __webpack_require__(267);
	
	var _getUserTrackingCookie2 = _interopRequireDefault(_getUserTrackingCookie);
	
	var _getSectionStrings = __webpack_require__(257);
	
	var _getSectionStrings2 = _interopRequireDefault(_getSectionStrings);
	
	var _getPageType = __webpack_require__(255);
	
	var _getPageType2 = _interopRequireDefault(_getPageType);
	
	var _getTimestamp = __webpack_require__(265);
	
	var _getTimestamp2 = _interopRequireDefault(_getTimestamp);
	
	var _sanitiseValues = __webpack_require__(247);
	
	var _metricsBuilder = __webpack_require__(235);
	
	var _metricsBuilder2 = _interopRequireDefault(_metricsBuilder);
	
	var _overrides = __webpack_require__(269);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var log = (0, _logger2['default'])('analytics:comScore');
	var DELAY_TRACKING_COOKIE = 'ckpf_gnlcs'; // ComScore specific
	
	var ComScore = function () {
	    function ComScore() {
	        _classCallCheck(this, ComScore);
	
	        this.playlistCount = 0;
	        this.videoEventCounter = 0;
	        this.allowLinkTracking = true;
	        this.isPlaylistStarted = false;
	        this.userTrackingCookieValue = false;
	        this.trackingRequests = { 'http': [], 'cookie': [] };
	        this.keyValues = {};
	        this.isScwHandlerUsed = false;
	    }
	
	    /**
	     * Executed in bbcdotcom.init
	     * Note: some pages such as /blogs do not run bbcdotcom.init() grrrr
	     */
	
	
	    _createClass(ComScore, [{
	        key: 'init',
	        value: function init() {
	            this.userTrackingCookieValue = (0, _getUserTrackingCookie2['default'])();
	            _helper2['default'].processDelayTrackingCookie(DELAY_TRACKING_COOKIE, this.trackingRequests);
	
	            setupStreamSense.call(this);
	            return this;
	        }
	    }, {
	        key: 'getScwForApp',
	        value: function getScwForApp() {
	            var _this = this;
	
	            log('getScwForApp() called to get "scw"');
	            this.isScwHandlerUsed = true;
	            return {
	                initAppPageTracking: function initAppPageTracking(pageName, uri, pageType) {
	                    _this.setApp({ pageName: pageName });
	                },
	                setAppName: function setAppName(appName) {
	                    _this.setApp({ appName: appName });
	                },
	                setAppVersionNumber: function setAppVersionNumber(appVersion) {
	                    _this.setApp({ appVersion: appVersion });
	                },
	                setAppOs: function setAppOs(appOs) {
	                    _this.setApp({ appOs: appOs });
	                },
	                appTrackPage: function appTrackPage() {
	                    _this.page();
	                }
	            };
	        }
	    }, {
	        key: 'setApp',
	        value: function setApp(keyValue) {
	            var conf;
	            for (conf in keyValue) {
	                switch (conf) {
	                    case 'appName':
	                        this.keyValues.b_app_name = keyValue[conf] + "|app";
	                        if (keyValue[conf] === "horizons") {
	                            this.keyValues.b_site_channel = 'news';
	                        }
	                        break;
	                    case 'appVersion':
	                        this.keyValues.b_app_imp_ver = keyValue[conf];
	                        break;
	                    case 'appOs':
	                        this.keyValues.b_app_os = keyValue[conf];
	                        break;
	                    case 'pageName':
	                        this.keyValues.name = keyValue[conf];
	                    default:
	                        break;
	                }
	            }
	        }
	    }, {
	        key: 'setAllowLinkTracking',
	        value: function setAllowLinkTracking(enabled) {
	            this.allowLinkTracking = enabled ? true : false;
	        }
	    }, {
	        key: 'getTrackingRequests',
	        value: function getTrackingRequests(type) {
	            if (typeof type === 'undefined' || type !== 'http' && type !== 'cookie') {
	                throw new Error('Invalid type provided to getTrackingRequests() "' + type + '"');
	            }
	            return this.trackingRequests[type];
	        }
	    }, {
	        key: 'getTrackingValue',
	        value: function getTrackingValue() {
	            return '';
	        }
	    }, {
	        key: 'setUserTrackingCookie',
	        value: function setUserTrackingCookie(val) {
	            this.userTrackingCookieValue = val;
	        }
	    }, {
	        key: 'getUserTrackingCookie',
	        value: function getUserTrackingCookie() {
	            return this.userTrackingCookieValue;
	        }
	
	        /**
	         * For testing.
	         */
	
	    }, {
	        key: 'r',
	        value: function r() {
	            this.userTrackingCookieValue = false;
	            this.allowLinkTracking = true;
	            this.trackingRequests = { 'http': [], 'cookie': [] };
	            _streamSense2['default'].videoEvents = [];
	            this.isPlaylistStarted = false;
	            _utils2['default'].deleteCookie(DELAY_TRACKING_COOKIE);
	            this.videoEventCounter = 0;
	        }
	
	        /**
	         * =================================================================================================================
	         * Page Tracking
	         * =================================================================================================================
	         */
	
	        /**
	         * Website Page Tracking
	         */
	
	    }, {
	        key: 'page',
	        value: function page() {
	            if (!_config2['default'].isComScoreEnabled()) {
	                log('did not do tracking because isComScoreEnabled=false');
	                return false;
	            }
	            try {
	                var keyValues = (0, _comScoreHelpers.getCoreKeyValues)();
	                keyValues = (0, _comScoreHelpers.appendPageCoreKeyValues)(keyValues);
	                Object.assign(keyValues, this.keyValues);
	                doTrack.call(this, keyValues, 'page');
	                if (this.allowLinkTracking) {
	                    _helper2['default'].applyLinkTrackingToPageElements(this.link.bind(this)); // NOTE: processLink() method is callback
	                }
	            } catch (exception) {
	                log.error('bbcdotcom.analytics.page() exception "' + exception.message + '"');
	            }
	        }
	
	        /**
	         * =================================================================================================================
	         * Link Tracking
	         * =================================================================================================================
	         */
	
	        /**
	         * Method used to report on the link which has been clicked
	         *
	         *No longer tracking advertising because of issues not opening in new window (cannot reliably open in new window with JS)
	         *External links will fire request to analytics immediately, then open link (not in new tab/window because not possible in JS)
	         *Internal links will drop a cookie and pick up the click tracking on the subsequent page
	         *
	         * @param object linkObj is the <a> clicked, for example:
	         *      { href:'http://www.bbc.com/travel', title:'Travel website',
	        *        rev:'hello|world', data-track:'hello|world'}
	         * @param object event Event object
	         */
	
	    }, {
	        key: 'link',
	        value: function link(linkObj, event) {
	            // Title of the page at the other end of the link (generally data is stored within 'title' attribute
	            // of anchor <a href="" title="">.
	            if (!_config2['default'].isComScoreEnabled()) {
	                return false;
	            }
	            if (typeof linkObj === 'undefined' || typeof linkObj.href === 'undefined') {
	                return false;
	            }
	            // Key-Values to send
	            var keyValues = (0, _comScoreHelpers.getCoreKeyValues)(),
	                vars = _helper2['default'].getLinkTrackingProperties(linkObj),
	                uri = linkObj.href; //helper.normalizeUri(linkObj.href);
	
	            if (!vars) {
	                return '';
	            }
	
	            var metricsBuilder = new _metricsBuilder2['default']();
	
	            var isBBCUri = _helper2['default'].isBBCUri(uri);
	            metricsBuilder['with']('pev1', { value: uri.substr(0, 255), preRequisite: function preRequisite() {
	                    return isBBCUri;
	                } });
	            metricsBuilder['with']('domainFromUrl', { mapName: 'pev1', args: [uri], preRequisite: function preRequisite() {
	                    return !isBBCUri;
	                } });
	
	            // pageType is 'index', 'story', 'map'.
	            vars.pageType = (0, _getPageType2['default'])(linkObj.href).substring(0, 3).replace('|', '');
	            keyValues = (0, _comScoreHelpers.appendNonPageCoreKeyValues)(keyValues);
	            keyValues.b_link = buildPipeDelimitedKey.call(this, vars);
	
	            keyValues = Object.assign(keyValues, metricsBuilder.build());
	            _helper2['default'].trackLink(doTrack.bind(this), DELAY_TRACKING_COOKIE, uri, event, keyValues); // NOTE: doTrack() method is callback
	        }
	    }]);
	
	    return ComScore;
	}();
	
	exports['default'] = new ComScore();
	
	/**
	 * =================================================================================================================
	 * PRIVATE METHODS
	 * =================================================================================================================
	 */
	
	function setupStreamSense() {
	    // Proxy methods
	    var i, l;
	    var methods = ['startPlaylist', 'adRequest', 'adManagerLoaded', 'startAdvert', 'endAdvert', 'startProgramme', 'startPause', 'endPause', 'startSeek', 'endSeek', 'endProgramme', 'endPlaylist', 'isPlaylistStarted'];
	    for (i = 0, l = methods.length; i < l; i++) {
	        ComScore.prototype[methods[i]] = _streamSense2['default'][methods[i]].bind(_streamSense2['default']);
	    }
	
	    _streamSense2['default'].init();
	};
	
	/**
	 * Make request to ComScore endpoint
	 *
	 * @param object customTrackingKeyValues eg {}
	 * @param string trackType eg page, link, video
	 * @param function callback will be called when the tracking request is complete
	 * @param boolean makeImageRequest whether to make request or not
	 * @return mixed boolean|string false=ComScore disabled
	 */
	function doTrack(keyValues, type, callback, makeImageRequest) {
	    var key;
	    if (!_config2['default'].isAnalyticsEnabled()) {
	        log('did not do tracking because isAnalyticsEnabled=false');
	        if (typeof callback === 'function') {
	            callback(false);
	        }
	        return false;
	    }
	
	    if (this.userTrackingCookieValue === false) {
	        // Just in case page doesn't run bbcdotcom.init();
	        this.userTrackingCookieValue = (0, _getUserTrackingCookie2['default'])();
	    }
	
	    var overrides = (0, _overrides.getOverrides)();
	    var defaultC2 = typeof keyValues.c2 !== 'undefined' ? keyValues.c2 : '';
	
	    var url = '?' + 'c1=' + (type === 'page' ? 2 : 22) + '&c2=' + (0, _get3['default'])(overrides, 'c2', defaultC2);
	
	    if (type === 'video') {
	        this.videoEventCounter++;
	        keyValues.ns_st_ec = this.videoEventCounter;
	    }
	    // Apply Overrides
	    keyValues = Object.assign(keyValues, overrides);
	
	    // Append to end of request (do not put at front!)
	    keyValues.c7 = _config2['default'].getWindowLocation().href.replace(/\.app$/, '');
	    keyValues.c8 = _config2['default'].getWindowDocument().title;
	    keyValues.c9 = document.referrer;
	    keyValues = (0, _sanitiseValues.sanitiseKeyValues)(keyValues);
	    for (key in keyValues) {
	        var _logLine = document.createElement('div');
	        _logLine.innerHTML = key + ': ' + keyValues[key];
	
	        if (key !== 'c2') {
	            // Do not include label (key-value) if empty.  Don't include 'c2' here as included above (for easily reading http requests).
	            url += '&' + key + '=' + _helper2['default'].encodeValue(keyValues[key]);
	        }
	    }
	    if (typeof makeImageRequest === 'undefined' || makeImageRequest === true) {
	        this.trackingRequests['http'].push(url);
	        _helper2['default'].loadTrackingImage(url, callback);
	    } else {
	        this.trackingRequests['cookie'].push(url);
	        if (typeof callback === 'function') {
	            callback();
	        }
	    }
	    log('comScore doTrack url:' + url);
	    var logLine = document.createElement('div');
	    logLine.innerHTML = 'DoTrack: ' + url;
	    return url;
	};
	
	/**
	 * Construct pipe delimited value
	 *
	 * Pipe delimited order:
	 * - 1.  name or channel of content being promoted  eg /news/story-1234 => 'news'
	 * - 2.  channel eg news
	 * - 3.  module name eg carousel
	 * - 4.  link type eg 'text', 'image', 'icon', 'video'
	 * - 5.  link name eg royal-babyis-born
	 * - 6.  link position eg 1
	 * - 7.  total number of links in module eg 10
	 * - 8.  extra link info eg facebook
	 * - 9.  section eg news>world
	 * - 10. page type eg idx|na, sty|na
	 * - 11. module placement (not link placement) eg topcentre
	 *
	 * @param object data Override params
	 */
	function buildPipeDelimitedKey(data) {
	    if (typeof data === 'undefined') {
	        return false;
	    }
	    var sectionStrings = (0, _getSectionStrings2['default'])();
	    var keys = {
	        // NOTE: ORDER IS IMPORTANT
	        'promoted': '',
	        'channel': sectionStrings[0],
	        'moduleName': '',
	        'linkType': 'text',
	        'linkName': '',
	        'linkPosition': '',
	        'totalLinks': '',
	        'extraLinkInfo': '',
	        'section': sectionStrings[1],
	        'pageType': '',
	        'placement': ''
	        // NOTE: ORDER IS IMPORTANT
	    };
	    var d,
	        k,
	        parts = [];
	    for (d in data) {
	        if (typeof keys[d] !== 'undefined') {
	            // Update key within keys, do not add any new keys just the values
	            keys[d] = typeof data[d] === 'undefined' || data[d] === '' || data[d] === false ? '' : _utils2['default'].trim(data[d]);
	        }
	    }
	    for (k in keys) {
	        parts.push(keys[k]);
	    }
	    return parts.join('|');
	};
	module.exports = exports['default'];

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(168);
	
	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}
	
	module.exports = get;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(169),
	    isKey = __webpack_require__(213),
	    toKey = __webpack_require__(214);
	
	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);
	
	  var index = 0,
	      length = path.length;
	
	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}
	
	module.exports = baseGet;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(170),
	    stringToPath = __webpack_require__(171);
	
	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}
	
	module.exports = castPath;


/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	module.exports = isArray;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(172),
	    toString = __webpack_require__(208);
	
	/** Used to match property names within property paths. */
	var reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	
	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;
	
	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoize(function(string) {
	  string = toString(string);
	
	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});
	
	module.exports = stringToPath;


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(173);
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;
	
	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}
	
	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache;
	
	module.exports = memoize;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(174),
	    mapCacheDelete = __webpack_require__(202),
	    mapCacheGet = __webpack_require__(205),
	    mapCacheHas = __webpack_require__(206),
	    mapCacheSet = __webpack_require__(207);
	
	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;
	
	module.exports = MapCache;


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(175),
	    ListCache = __webpack_require__(193),
	    Map = __webpack_require__(201);
	
	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}
	
	module.exports = mapCacheClear;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(176),
	    hashDelete = __webpack_require__(189),
	    hashGet = __webpack_require__(190),
	    hashHas = __webpack_require__(191),
	    hashSet = __webpack_require__(192);
	
	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;
	
	module.exports = Hash;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(177);
	
	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}
	
	module.exports = hashClear;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(178);
	
	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');
	
	module.exports = nativeCreate;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(179),
	    getValue = __webpack_require__(188);
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}
	
	module.exports = getNative;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(180),
	    isHostObject = __webpack_require__(182),
	    isMasked = __webpack_require__(183),
	    isObject = __webpack_require__(181),
	    toSource = __webpack_require__(187);
	
	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	
	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}
	
	module.exports = baseIsNative;


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(181);
	
	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}
	
	module.exports = isFunction;


/***/ },
/* 181 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;


/***/ },
/* 182 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}
	
	module.exports = isHostObject;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(184);
	
	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());
	
	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}
	
	module.exports = isMasked;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(185);
	
	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];
	
	module.exports = coreJsData;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(186);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ },
/* 186 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 187 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}
	
	module.exports = toSource;


/***/ },
/* 188 */
/***/ function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}
	
	module.exports = getValue;


/***/ },
/* 189 */
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}
	
	module.exports = hashDelete;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(177);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}
	
	module.exports = hashGet;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(177);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}
	
	module.exports = hashHas;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(177);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}
	
	module.exports = hashSet;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(194),
	    listCacheDelete = __webpack_require__(195),
	    listCacheGet = __webpack_require__(198),
	    listCacheHas = __webpack_require__(199),
	    listCacheSet = __webpack_require__(200);
	
	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;
	
	module.exports = ListCache;


/***/ },
/* 194 */
/***/ function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}
	
	module.exports = listCacheClear;


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(196);
	
	/** Used for built-in method references. */
	var arrayProto = Array.prototype;
	
	/** Built-in value references. */
	var splice = arrayProto.splice;
	
	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}
	
	module.exports = listCacheDelete;


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(197);
	
	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	
	module.exports = assocIndexOf;


/***/ },
/* 197 */
/***/ function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}
	
	module.exports = eq;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(196);
	
	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  return index < 0 ? undefined : data[index][1];
	}
	
	module.exports = listCacheGet;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(196);
	
	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}
	
	module.exports = listCacheHas;


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(196);
	
	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	
	module.exports = listCacheSet;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(178),
	    root = __webpack_require__(185);
	
	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');
	
	module.exports = Map;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(203);
	
	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}
	
	module.exports = mapCacheDelete;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(204);
	
	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}
	
	module.exports = getMapData;


/***/ },
/* 204 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}
	
	module.exports = isKeyable;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(203);
	
	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}
	
	module.exports = mapCacheGet;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(203);
	
	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}
	
	module.exports = mapCacheHas;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(203);
	
	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}
	
	module.exports = mapCacheSet;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(209);
	
	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}
	
	module.exports = toString;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(210),
	    isSymbol = __webpack_require__(211);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	module.exports = baseToString;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(185);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(212);
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}
	
	module.exports = isSymbol;


/***/ },
/* 212 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(170),
	    isSymbol = __webpack_require__(211);
	
	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;
	
	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}
	
	module.exports = isKey;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(211);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	module.exports = toKey;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* global window, document, bbcdotcom, orb, screen */
	var utils = __webpack_require__(141);
	var config = __webpack_require__(148);
	var sections = __webpack_require__(150);
	var log = __webpack_require__(142)('analytics:helper');
	var objects = __webpack_require__(159);
	
	var sectionStrings = ['', '', '', ''],
	    alreadyLinked = false,
	    clickListener,
	    // remove me, I dare you :-o
	verticalsRegexp = /^(autos|capital|culture|earth|future|travel)$/,
	    LINK_TRACKING_SECTIONS = ['homepage', 'news', 'sport', 'wwscripts'],
	    // TLDs on website permitted to have link-tracking
	TRACKING_TIMEOUT = 500,
	    NUL = 'na';
	
	var isBBCUri = function isBBCUri(uri) {
	    return (/^http(|s):\/\/[a-z0-9\-.]+.bbc.co(m|.uk)(\/)?(.*)?/.test(uri)
	    );
	};
	
	var isLiveEvent = function isLiveEvent() {
	    // This is bad, we should be getting the sites to report this instead of inspecting the URI.
	    var re = /(news|sport)\/live\//;
	    return re.exec(sections.getSections().join("/")) !== null;
	};
	
	/**
	 * Outbrain links to traffic.outbrain.com but comes back to the bbc.com (therefore use the link tracking "cookie drop"
	 * method of tracking)
	 * eg <a href="http://traffic.outbrain.com/redirect?=http://www.bbc.com/news/story-12345">
	 */
	var isExternalRedirectToBBCUri = function isExternalRedirectToBBCUri(uri) {
	    return (/^http(|s):\/\/traffic\.outbrain\.com/.test(uri)
	    );
	};
	
	/**
	 * Uses window.location or config.setSections([]) to derive v6, v7 and v8 section values
	 */
	var determineSections = function determineSections(separator) {
	    if (typeof separator === 'undefined') {
	        separator = '>';
	    }
	    var sects = sections.getSections('analytics', true);
	    sectionStrings = ['', '', '', ''];
	    // eg v6=news for http://www.bbc.com/news
	    sectionStrings[0] = sects[0];
	    if (typeof sects[1] !== 'undefined' && sects[1]) {
	        if (sects[0] === 'news' && (sects[1].indexOf('world') === 0 || sects[1] === 'specialfeatures')) {
	            // Goes up to 4 deep eg /news/world/asia/india
	            // Only /news/world/* & /news/specialfeatures/*
	            if (typeof sects[3] !== 'undefined' && sects[3] && sects[2]) {
	                // eg v7=news>world>asia       for http://www.bbc.com/news/world/asia/india
	                // eg v8=news>world>asia>india for http://www.bbc.com/news/world/asia/india
	                sectionStrings[1] = sects[0] + separator + sects[1] + separator + sects[2];
	                sectionStrings[2] = sectionStrings[1] + separator + sects[3];
	            } else if (typeof sects[2] !== 'undefined' && sects[2]) {
	                // eg v7=news>world>asia for http://www.bbc.com/news/world/asia
	                // eg v8=news>world>asia for http://www.bbc.com/news/world/asia
	                sectionStrings[1] = sects[0] + separator + sects[1] + separator + sects[2];
	            } else {
	                // eg v7=news>world for http://www.bbc.com/news/world
	                // eg v8=news>world for http://www.bbc.com/news/world
	                sectionStrings[1] = sects[0] + separator + sects[1];
	            }
	        } else if (sects[0] === 'sport') {
	            // Goes up to 5 deep - TRY TO KEEP THIS GENERIC PLEASE - NO EVENT SPECIFIC RULES!!
	            // eg /sport/commonwealth-games/2014/results/sports/boxing/mens-heavy-91kg
	
	            // eg v7=sport>football for http://www.bbc.com/sport/football/teams/XYZ
	            // eg v7=sport>commonwealth-games-2014
	            sectionStrings[1] = sects[0] + separator + sects[1];
	            if (typeof sects[2] !== 'undefined' && sects[2]) {
	                // eg v8=sport>football>teams for http://www.bbc.com/sport/football/teams/XYZ
	                // eg v8=sport>commonwealth-games-2014>results
	                sectionStrings[2] = sectionStrings[1] + separator + sects[2];
	                if (typeof sects[4] !== 'undefined' && sects[4] && sects[3] && sects[2]) {
	                    // eg v9=sport>commonwealth-games-2014>results>boxing>mens-heavy-91kg
	                    sectionStrings[3] = sectionStrings[2] + separator + sects[3] + separator + sects[4];
	                } else if (typeof sects[3] !== 'undefined' && sects[3] && sects[2]) {
	                    // eg v9=sport>football>teams>XYZ
	                    // eg v9=sport>commonwealth-games-2014>results>boxing>mens-heavy-91kg
	                    sectionStrings[3] = sectionStrings[2] + separator + sects[3];
	                }
	            }
	        } else {
	            // Standard, don't go as deep - only 3 deep
	            if (typeof sects[2] !== 'undefined' && sects[2]) {
	                // eg v7=news>business             for http://www.bbc.com/news/business/market_data/overview/
	                // eg v8=news>business>market_data for http://www.bbc.com/news/business/market_data/overview/
	                sectionStrings[1] = sects[0] + separator + sects[1];
	                sectionStrings[2] = sectionStrings[1] + separator + sects[2];
	            } else {
	                // eg v7=news>business for http://www.bbc.com/news/business/
	                // eg v8=news>business for http://www.bbc.com/news/business/
	                sectionStrings[1] = sects[0] + separator + sects[1];
	            }
	        }
	    }
	    if (sectionStrings[1] === '') {
	        sectionStrings[1] = sectionStrings[0];
	    }
	    if (sectionStrings[2] === '') {
	        sectionStrings[2] = sectionStrings[1];
	    }
	    return sectionStrings;
	};
	
	var getStoryHeadline = function getStoryHeadline() {
	    var cpsHeadline,
	        headline = config.getHeadline();
	    if (headline !== '') {
	        // Populated by webservice or via "config.setHeadline('The story headline')"
	        return headline;
	    }
	    if (typeof window.config !== 'undefined' && typeof window.config.asset !== 'undefined' && typeof window.config.asset.headline !== 'undefined' && window.config.asset.headline !== '') {
	        // Responsive News
	        return window.config.asset.headline;
	    }
	    cpsHeadline = utils.getMetaNameContent('Headline');
	    if (cpsHeadline !== '') {
	        // Desktop News & Sport (CPS stack)
	        return cpsHeadline;
	    }
	    return 'na';
	};
	
	var getPageEdition = function getPageEdition() {
	    var edition = void 0;
	
	    // Do not return edition for japanese [BBCCOM-7842]
	    if (getVertical() === 'japanese') {
	        return NUL;
	    }
	
	    if (typeof window.config !== 'undefined' && typeof window.config.asset !== 'undefined' && typeof window.config.asset.edition !== 'undefined' && window.config.asset.edition !== '') {
	        // Responsive News
	        return window.config.asset.edition;
	    }
	    edition = utils.getMetaNameContent('CPS_AUDIENCE');
	    if (edition !== '') {
	        // Desktop News & Desktop Sport (CPS stack)  ALSO Responsive News
	        return edition;
	    }
	    edition = utils.getMetaPropertyContent('wwhp-edition');
	    if (edition !== '') {
	        // International homepage edition
	        return edition;
	    }
	    return NUL;
	};
	
	/**
	 * Returns the page type
	 * @returns {String} eg story, index, video, story-video
	 */
	var getPageType = function getPageType(href) {
	    href = href || config.getWindowLocation().href;
	    var s = sections.getSectionsForUri(href, 'analytics');
	    var type = config.getType();
	
	    if (s[0] === 'homepage') {
	        type = 'INDEX';
	    } else if (isLiveEvent()) {
	        type = 'LIVE-EVENT';
	    } else if (config.isStickyPlayerPage()) {
	        type = 'VIDEO-STICKY';
	    } else if (type === '') {
	        if (window.config && window.config.asset && window.config.asset.type) {
	            // Responsive News
	            type = window.config.asset.type;
	        } else if (window.onesport && window.onesport.config && window.onesport.config.omnitureAssetType) {
	            // Responsive Sport (onesport)
	            type = window.onesport.config.omnitureAssetType; // eg STORY, INDEX, MAP
	        } else if (window.bbc && bbc.fmtj && bbc.fmtj.page && bbc.fmtj.page.assetType) {
	            // Old N&K/CPS News & Sport desktop
	            type = bbc.fmtj.page.assetType;
	        }
	    }
	
	    // If type is not a string at this point, make sure it is and convert it to upper case
	    type = utils.isString(type) ? type.toUpperCase() : '';
	
	    switch (type) {
	        case 'AV':
	        case 'MAP':
	        case 'MEDIA_ASSET':
	            type = 'VIDEO';
	            break;
	        case 'STY':
	            type = 'STORY';
	            break;
	        case 'IDX':
	            type = 'INDEX';
	            break;
	        case 'LEP':
	            type = 'LIVE-EVENT';
	            break;
	        case 'LIVE_EVENT':
	            type = 'LIVE-EVENT';
	            break;
	        default:
	            break;
	    }
	
	    if (type === 'STORY' && config.isContinuousPlayPage()) {
	        type = 'STORY-VIDEO';
	    }
	
	    return type || (/.*-(\d{7,9})$/.test(href) ? 'STORY' : 'INDEX');
	};
	
	var sanitisePageName = function sanitisePageName(pageName) {
	    pageName = pageName.replace(/"/g, "'"); // remove double quotes
	    pageName = pageName.replace(/(^bbc (news|sport) \- )/i, ''); // Remove 'bbc news - title' etc
	    pageName = pageName.replace(/( \- bbc (news|sport)$)/i, ''); // Remove 'title - bbc news' etc
	    pageName = pageName.replace(/( \- BBCニュース$)/i, ''); // Remove Japanese title
	    return pageName.toLowerCase();
	};
	
	/**
	 * Use document.title to get title of page
	 */
	var getPageName = function getPageName() {
	    if (typeof config.getWindowDocument().title === 'undefined') {
	        return '';
	    } else {
	        return sanitisePageName(config.getWindowDocument().title);
	    }
	};
	
	/**
	 * Use url to get page parameter used by comScore
	 */
	var getPageNameComScore = function getPageNameComScore() {
	    var path = config.getWindowLocation().pathname.replace(/\.app$/, ''),
	        // window.location.pathname
	    pathSlashes = path.toLowerCase().slice(1); // trim leading slash
	
	    if (pathSlashes.slice(-1) === '/') {
	        // trim trailing slash
	        pathSlashes = pathSlashes.slice(0, -1);
	    }
	
	    var pathBits = pathSlashes.split('/');
	    var response = void 0;
	
	    var vertical = getVertical();
	
	    if (pathBits.length === 1) {
	        if (vertical === '' || vertical === 'wwhp') {
	            // homepage
	            response = 'homepage.home';
	        } else if (vertical === 'news' || vertical === 'weather' || vertical === 'sport' || vertical === 'japanese') {
	            response = vertical + '.home';
	        } else {
	            response = getPageName();
	        }
	    } else {
	        if (vertical === 'sport' && pathBits.length > 1 && pathBits[1] === '0') {
	            // trim /0
	            if (pathBits.length === 2) {
	                response = pathBits[0] + '.home';
	            } else {
	                response = pathBits[0] + '.' + pathBits.slice(2).join('.');
	            }
	        } else if (vertical === 'news' || vertical === 'weather' || vertical === 'sport' || vertical === 'japanese') {
	            response = pathBits.join('.').replace(/^news\.(uk|world|us|asia)\.(health)(?!-)/, "news.$2");
	        } else {
	            // not GNL, use old value based on title
	            response = getPageName();
	        }
	    }
	
	    return response;
	};
	
	var getVertical = function getVertical() {
	    var path = config.getWindowLocation().pathname.replace(/\.app$/, ''); // window.location.pathname
	    var pathSlashes = path.toLowerCase().slice(1); // trim leading slash
	
	    if (pathSlashes.slice(-1) === '/') {
	        // trim trailing slash
	        pathSlashes = pathSlashes.slice(0, -1);
	    }
	
	    var pathBits = pathSlashes.split('/');
	    return pathBits.length > 0 ? pathBits[0] : '';
	};
	
	/**
	 * Uri encode values - All values are encoded except those which are replaceable eg "{events}"
	 */
	var encodeValue = function encodeValue(str) {
	    if (/^\{[a-zA-Z0-9\-_]+\}$/.test(str)) {
	        return str;
	    }
	    return encodeURIComponent(str);
	};
	
	/**
	 * Determining what type of link was clicked and what event and linkTrackingName should be used
	 *
	 * @param object linkObj The element clicked
	 */
	var getLinkTrackingProperties = function getLinkTrackingProperties(linkObj) {
	    var text = '',
	        linkSections = sections.getSectionsForUri(linkObj.href, 'analytics');
	    if (typeof linkObj.text !== 'undefined') {
	        text = linkObj.text;
	    } else if (typeof linkObj.innerText !== 'undefined') {
	        text = linkObj.innerText;
	    }
	    var promoted = linkSections[0]; // eg /sport/blah => 'sport'
	    promoted = promoted === 'unknown' ? 'external' : promoted;
	    // Ensures that if the name contains 4x hyphens, trim the rest of the title
	    var sanitiseLinkName = function sanitiseLinkName(str) {
	        str = utils.trim(str).toLowerCase().replace(/[^a-zA-Z0-9]/g, '-');
	        return str.indexOf('----') === -1 ? str : str.substr(0, str.indexOf('----'));
	    };
	    var getLinkNameFromUrlForVerticals = function getLinkNameFromUrlForVerticals(href) {
	        var matched = href.match(/.*\/[0-9]+\-([^\/]+)/);
	        return matched !== null ? matched[1] : linkSections.join('>');
	    };
	    // rev or data-track
	    var linkObjTrack = '';
	    if (typeof linkObj.dataset !== 'undefined' && typeof linkObj.dataset.track !== 'undefined' && linkObj.dataset.track !== '' // NOTE: Unit tests are mocking linkObj therefore linkObj.dataset['track'] not work
	    ) {
	            // Use data-track attribute
	            linkObjTrack = linkObj.dataset.track;
	        } else if (linkObj.getAttribute('data-track')) {
	        // IE10 and lower don't support dataset
	        linkObjTrack = linkObj.getAttribute('data-track');
	    } else if (typeof linkObj.rev !== 'undefined' && linkObj.rev !== '') {
	        // Use rev attribute
	        linkObjTrack = linkObj.rev;
	    }
	    // Conditionals to determine what information to collect
	    if (linkObj.className.indexOf('external-link') !== -1) {
	        // External link
	        // eg <a class="external-link" rev="">
	        // eg <a class="external-link">
	        return {
	            'events': false,
	            'promoted': 'external',
	            'linkName': sanitiseLinkName(text),
	            'moduleName': false
	        };
	    } else if ((sectionStrings[0] === 'homepage' || sectionStrings[0] === 'wwscripts') && linkObjTrack.indexOf('|') !== -1) {
	        // Homepage Link Tracking
	        // eg <a rev="spotlight|video">
	        // eg <a data-track="spotlight|video">
	        // <moduleName>|<linkAssetType>
	        var htmlRevArr = linkObjTrack.split('|');
	        var linkName = linkSections[0].match(verticalsRegexp) ? getLinkNameFromUrlForVerticals(linkObj.href) : sanitiseLinkName(text);
	        var parent = utils.getParentElementByClass(linkObj, 'module2'); // desktop <div class="module2">
	        if (parent === false) {
	            parent = utils.getClosestElementByTagName(linkObj, 'section'); // responsive <section>
	        }
	        var linkPosition = utils.getAnchorPositionWithinElement(parent, linkObj.href);
	        if (htmlRevArr.length > 0) {
	            return {
	                'events': false,
	                'promoted': promoted.toLowerCase(),
	                'linkName': linkName,
	                'moduleName': htmlRevArr[0].toLowerCase(),
	                'linkType': typeof htmlRevArr[1] === 'string' ? htmlRevArr[1].toLowerCase() : NUL,
	                'linkPosition': linkPosition !== false && linkPosition !== 0 ? linkPosition : NUL
	            };
	        }
	    } else if (utils.parentHasClass(linkObj, 'bbccom_adsense', undefined, true)) {
	        // Google Adsense
	        return {
	            'events': false,
	            'promoted': 'ads',
	            'linkName': 'adsense',
	            'moduleName': 'google-adsense'
	        };
	    } else if (utils.parentHasClass(linkObj, 'bbccom_advert', undefined, true)) {
	        // BBCCOM-6147: Don't interfere with advert links (Doubleclick display ads)
	        return false;
	    } else if (utils.parentHasClass(linkObj, 'bbc-st-buttons') || utils.parentHasClass(linkObj, 'share__tool')) {
	        // Share Tools
	        // .bbc-st-buttons - News & Sport Desktop Share top and bottom
	        // .share__tool - News Responsive Share bottom
	        return {
	            'events': 'event23',
	            'promoted': 'share-tools',
	            'linkName': sanitiseLinkName(text), // eg Facebook, Twitter
	            'moduleName': 'share-tools',
	            'v': {
	                '35': sanitiseLinkName(text) + '-share', // v35
	                '39': sectionStrings[1] + '-' + getPageName() // v39
	            }
	        };
	    } else if ((sectionStrings[0] === 'news' || sectionStrings[0] === 'wwscripts') && utils.parentHasClass(linkObj, 'hyper-promotional-content', 5)) {
	        // Elsewhere on the BBC module (News desktop)
	        return {
	            'events': false,
	            'promoted': 'elsewhere',
	            'linkName': sanitiseLinkName(text), // Story link
	            'moduleName': 'elsewhere'
	        };
	    } else if (linkObj.href.indexOf('outbrain.com') !== -1) {
	        // Outbrain tracking BBCCOM-5543, BBCCOM-6133
	        promoted = 'outbrain-module';
	        var parentEl = utils.getParentElementByClass(linkObj, 'OUTBRAIN', 5);
	        if (typeof parentEl.dataset.widgetId !== 'undefined') {
	            var widgetId = parseInt(parentEl.dataset.widgetId.substr(3, 1), 10);
	            var mapping = {
	                'videos-on-news': [1, 5, 6], // AR_1, AR_5, AR_6
	                'elsewhere-on-news': [2, 3, 7], // AR_2, AR_3, AR_7
	                'others-sites': [4, 9], // AR_4, AR_9
	                'elsewhere-on-features': [8] // AR_8
	            };
	            var m;
	            for (m in mapping) {
	                if (mapping[m].indexOf(widgetId) !== -1) {
	                    promoted = m;
	                    break;
	                }
	            }
	        }
	        return {
	            'events': false,
	            'promoted': promoted,
	            'linkName': sanitiseLinkName(text), // Story link
	            'moduleName': 'outbrain-recommends'
	        };
	    }
	
	    return false; // not a link to be tracked
	};
	
	var getAnalyticsUri = function getAnalyticsUri() {
	    return bbcdotcom.analytics.sscHelper.getAnalyticsLocation();
	};
	
	/**
	 * Load an image element to track the event
	 *
	 * @param string url
	 * @param function callback Used to delay page until image written into page (blocking)
	 */
	var loadTrackingImage = function loadTrackingImage(url, callback) {
	    url = getAnalyticsUri() + url;
	    log('Tracking URL: ', url);
	    var img = document.createElement('img');
	    if (typeof callback === 'function') {
	        img.onload = callback;
	    }
	    if (typeof window.IS_GNL_JS_UNIT_TEST === 'undefined') {
	        // Do not make comScore request when running unit tests
	        img.src = url;
	    }
	};
	
	var processDelayTrackingCookie = function processDelayTrackingCookie(delayTrackingCookieName, trackingRequests) {
	    var cookieValue = utils.getCookie(delayTrackingCookieName);
	    if (typeof cookieValue !== 'undefined' && cookieValue.length > 0) {
	        log('Delayed link tracking get ' + delayTrackingCookieName + ' cookie:' + cookieValue);
	        // eg /b/ss/bbcwglobaldev/1/H.22.1/s4757043230347?AQB=1&bw=1920&bh=705&c=24&cc=USD&cdp=2&ce=UTF-8&ndh=1...
	        loadTrackingImage(cookieValue);
	        trackingRequests['http'].push(cookieValue);
	        utils.deleteCookie(delayTrackingCookieName);
	    }
	};
	
	var trackLinkByDroppingCookie = function trackLinkByDroppingCookie(doTrackCallback, delayTrackingCookieName, customTrackingKeyValues) {
	    // doTrack() does not make request. Instead, the request is piped into a cookie
	    var cookieVal = doTrackCallback(customTrackingKeyValues, 'link', undefined, false);
	    utils.setCookie(delayTrackingCookieName, cookieVal, 60);
	    log('link tracking set ' + delayTrackingCookieName + ' cookie:' + cookieVal);
	};
	
	/**
	 * Problem with this approach: cannot CTRL-click to open link in new window
	 */
	var trackLinkAndResumeNavigation = function trackLinkAndResumeNavigation(doTrackCallback, uri, event, customTrackingKeyValues) {
	    var eventHandled = false,
	        timeoutId = null,
	        resume = !utils.isEventDefaultPrevented(event),
	        resumeNavigation = function resumeNavigation(uri, event, timeout, resume) {
	        clearTimeout(timeout);
	        if (event && !eventHandled && resume && uri) {
	            utils.navigateTo(uri);
	        }
	        eventHandled = true;
	    };
	    utils.cancelEvent(event);
	    doTrackCallback(customTrackingKeyValues, 'link', function (tracked) {
	        resumeNavigation(uri, event, timeoutId, resume);
	    });
	    timeoutId = setTimeout(function () {
	        resumeNavigation(uri, event, timeoutId, resume);
	    }, TRACKING_TIMEOUT);
	};
	
	var trackLink = function trackLink(doTrackCallback, delayTrackingCookieName, uri, event, keyValues) {
	    if (isBBCUri(uri) || isExternalRedirectToBBCUri(uri)) {
	        // Drop cookie and collect on other BBC page
	        trackLinkByDroppingCookie(doTrackCallback, delayTrackingCookieName, keyValues);
	    } else {
	        // Standard
	        trackLinkAndResumeNavigation(doTrackCallback, uri, event, keyValues);
	    }
	};
	
	/**
	 * Used to attach events to page.
	 * This must be called from within <body>, not <head>
	 */
	var applyLinkTrackingToPageElements = function applyLinkTrackingToPageElements(processLinkCallback) {
	    var rootSection = sections.getSection(0, 'analytics', true);
	    if (rootSection && LINK_TRACKING_SECTIONS.indexOf(rootSection) === -1) {
	        // Link tracking is not required on this page
	        return;
	    }
	    if (alreadyLinked === true) {
	        return;
	    }
	    clickListener = function clickListener(event) {
	        // Whatever you're thinking, don't do it.  Do not put "var clickListener"...
	        var linkObj = utils.getClosestElementByTagName(event.target || event.srcElement, 'a', true);
	        if (linkObj !== false) {
	            processLinkCallback(linkObj, event);
	        }
	    };
	    // Event for body click.  Using JavaScript Event Bubbling to identify what was clicked on
	    // within the page (besides <body>).
	    utils.addEvent(document.getElementsByTagName('body')[0], 'click', clickListener);
	    alreadyLinked = true;
	};
	
	/**
	 * Return the URI used to build the sections array
	 *
	 * @returns {string}
	 */
	var getUriForSections = function getUriForSections() {
	    var location = config.getWindowLocation(),
	        uri = location.href,
	        assetUri = objects('config.asset.asset_uri');
	
	    if (config.getType() === 'VIDEO-EMBED' && assetUri) {
	        uri = location.protocol + '//' + location.hostname + assetUri;
	    }
	
	    return uri;
	};
	
	/**
	 * Determine the av format (audio|video) for a given playlist item. For now we assume everything that isn't a
	 * radioProgramme is video. List of available kinds can be found below.
	 *
	 * @see https://confluence.dev.bbc.co.uk/display/mp/Loading+a+Playlist+with+an+object#LoadingaPlaylistwithanobject-kinds
	 * @param {string} kind
	 * @returns {string}
	 */
	var getAvFormatFromKind = function getAvFormatFromKind(kind) {
	    return kind === 'radioProgramme' ? 'audio' : 'video';
	};
	
	module.exports = {
	    isBBCUri: isBBCUri,
	    determineSections: determineSections,
	    getStoryHeadline: getStoryHeadline,
	    getPageEdition: getPageEdition,
	    getVertical: getVertical,
	    getPageType: getPageType,
	    sanitisePageName: sanitisePageName,
	    getAnalyticsUri: getAnalyticsUri,
	    getPageName: getPageName,
	    getPageNameComScore: getPageNameComScore,
	    encodeValue: encodeValue,
	    getLinkTrackingProperties: getLinkTrackingProperties,
	    loadTrackingImage: loadTrackingImage,
	    processDelayTrackingCookie: processDelayTrackingCookie,
	    trackLink: trackLink,
	    applyLinkTrackingToPageElements: applyLinkTrackingToPageElements,
	    getUriForSections: getUriForSections,
	    getAvFormatFromKind: getAvFormatFromKind,
	    r: function r() {
	        utils.removeEvent(document.getElementsByTagName('body')[0], 'click', clickListener);
	        alreadyLinked = false;
	    }
	};

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.getCoreKeyValues = getCoreKeyValues;
	exports.appendPageCoreKeyValues = appendPageCoreKeyValues;
	exports.appendNonPageCoreKeyValues = appendNonPageCoreKeyValues;
	
	var _utils = __webpack_require__(141);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _adverts = __webpack_require__(217);
	
	var _adverts2 = _interopRequireDefault(_adverts);
	
	var _metricsBuilder = __webpack_require__(235);
	
	var _metricsBuilder2 = _interopRequireDefault(_metricsBuilder);
	
	var _getUserTrackingCookie = __webpack_require__(267);
	
	var _getUserTrackingCookie2 = _interopRequireDefault(_getUserTrackingCookie);
	
	var _getSectionStrings = __webpack_require__(257);
	
	var _getSectionStrings2 = _interopRequireDefault(_getSectionStrings);
	
	var _getPageType = __webpack_require__(255);
	
	var _getPageType2 = _interopRequireDefault(_getPageType);
	
	var _getSyndicatedVideoSource = __webpack_require__(263);
	
	var _getSyndicatedVideoSource2 = _interopRequireDefault(_getSyndicatedVideoSource);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getCoreKeyValues() {
	    var keyValues = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var metricsBuilder = new _metricsBuilder2['default']();
	
	    // Statics (set values)
	    metricsBuilder['with']('b_imp_src', { value: 'gnl' })['with']('b_vs_un', { value: 'bc' })['with']('ns_c', { value: 'UTF-8' });
	
	    // Use Helpers
	    metricsBuilder['with']('daxCorp', { mapName: 'b_daxcorp' })['with']('adsEnabled', { mapName: 'b_ad_enabled' })['with']('appType', { mapName: ['b_app_type', 'app_type'] })['with']('isApp', { mapName: 'b_is_app' })['with']('referrer', { mapName: 'b_c9' })['with']('collection', { mapName: 'b_collection' })['with']('edition', { mapName: 'b_edition' })['with']('version', { mapName: 'b_imp_ver' })['with']('siteCatalystCookieValue', { mapName: 'b_s_vi' })['with']('pageName', { mapName: 'name' })['with']('analyticsAccountID', { mapName: 'c2' })['with']('analyticsSuite', { mapName: ['ns_site', 'bbc_site', 'prod_name'] })['with']('testGroup', { mapName: 'test_group' })['with']('appName', { mapName: ['ns_ap_an', 'app_name'] });
	
	    // Use Helpers & pass args
	    var sectionStrings = (0, _getSectionStrings2['default'])();
	    metricsBuilder['with']('b_app_name', { value: sectionStrings[0] + '|web' })['with']('siteChannel', { mapName: 'b_site_channel', args: [sectionStrings] })['with']('siteSection', { mapName: 'b_site_section', args: [sectionStrings] })['with']('siteSubsection1', { mapName: 'b_site_subsec1', args: [sectionStrings] })['with']('siteSubsection2', { mapName: 'b_site_subsec2', args: [sectionStrings] });
	
	    // Conditional metrics
	    var userTrackingCookie = (0, _getUserTrackingCookie2['default'])();
	    metricsBuilder['with']('ns_alias', {
	        preRequisite: function preRequisite() {
	            return userTrackingCookie !== false && cookiesEnabledIEFix();
	        },
	        value: userTrackingCookie
	    });
	
	    var syndicatedVideoSource = (0, _getSyndicatedVideoSource2['default'])();
	    metricsBuilder['with']('v37', {
	        preRequisite: function preRequisite() {
	            return syndicatedVideoSource;
	        },
	        value: syndicatedVideoSource
	    });
	
	    return Object.assign({}, keyValues, metricsBuilder.build());
	}
	
	function appendPageCoreKeyValues() {
	    var keyValues = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var metricsBuilder = new _metricsBuilder2['default']();
	    var pageType = (0, _getPageType2['default'])();
	    var isIndex = pageType.includes('idx');
	
	    metricsBuilder['with']('pageType', { mapName: 'b_page_type', value: pageType });
	
	    // Conditional
	    metricsBuilder['with']('articleID', { mapName: 'b_article_id', preRequisite: function preRequisite() {
	            return !isIndex;
	        } })['with']('articleTitle', { mapName: 'b_article_title', preRequisite: function preRequisite() {
	            return !isIndex;
	        } })['with']('articleUpdatedDate', { mapName: 'b_article_update', preRequisite: function preRequisite() {
	            return !isIndex;
	        }, args: [true] })['with']('articlePublishedDate', { mapName: 'b_article_date', preRequisite: function preRequisite() {
	            return !isIndex;
	        }, args: [true] })['with']('articleLength', { mapName: 'b_article_length', preRequisite: function preRequisite() {
	            return !isIndex;
	        } });
	
	    return Object.assign({}, keyValues, metricsBuilder.build());
	}
	
	function appendNonPageCoreKeyValues() {
	    var keyValues = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var metricsBuilder = new _metricsBuilder2['default']();
	
	    metricsBuilder['with']('timestamp', { mapName: 'ns__t' })['with']('ns_type', { value: 'hidden' });
	
	    return Object.assign({}, keyValues, metricsBuilder.build());
	};
	
	/**
	 * =================================================================================================================
	 * PRIVATE METHODS
	 * =================================================================================================================
	 */
	
	function cookiesEnabledIEFix() {
	    var nCE = navigator.cookieEnabled,
	        testCookie;
	    if (nCE === false) {
	        return nCE;
	    }
	
	    // stolen from modernizr
	    document.cookie = "cookietest=1"; // set experimental cookie
	    testCookie = document.cookie.indexOf("cookietest=") !== -1;
	    document.cookie = "cookietest=1; expires=Thu, 01-Jan-1970 00:00:01 GMT"; // ...and delete it again
	    return testCookie;
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    ad: __webpack_require__(218),
	    adAsyncRenderer: __webpack_require__(221),
	    adFactory: __webpack_require__(222),
	    adRegister: __webpack_require__(160),
	    adRenderer: __webpack_require__(223),
	    adsenseRenderer: __webpack_require__(224),
	    adSuites: __webpack_require__(225),
	    adText: __webpack_require__(220),
	    adUnit: __webpack_require__(162),
	    adUnitWebService: __webpack_require__(163),
	    branding: __webpack_require__(219),
	    breakpoints: __webpack_require__(226),
	    dfppRequest: __webpack_require__(157),
	    keyValues: __webpack_require__(156),
	    layout: __webpack_require__(158),
	    outbrainRenderer: __webpack_require__(227),
	    slot: __webpack_require__(228),
	    slotAsync: __webpack_require__(229),
	    slotDeferred: __webpack_require__(164),
	    slotInfinite: __webpack_require__(230)
	};

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Branding = __webpack_require__(219);
	
	var utils = __webpack_require__(141);
	var pubsub = __webpack_require__(161);
	var layout = __webpack_require__(158);
	
	var log = __webpack_require__(142)('adverts:ad');
	
	var AD_HEIGHT_ADJUSTMENT = 30,
	    SLOT_PREFIX = 'bbccom_',
	    AD_IS_VISIBLE = SLOT_PREFIX + 'visible',
	    AD_IS_SHUT_CLASS = SLOT_PREFIX + 'shut',
	    DISPLAY_NONE_CLASS = SLOT_PREFIX + 'display_none',
	    adTextKey = {
	    "default": 'advertisementText',
	    "sponsor_section": 'sponsoredByText',
	    "sponsor": 'inAssociationWithText',
	    "module": 'inAssociationWithText',
	    "partner": 'advertisingPartnersText',
	    "adsense": 'adsByGoogleText'
	};
	
	var getContents = function getContents(domId) {
	    var domAd = document.getElementById(domId);
	    if (typeof domAd !== 'undefined' && domAd !== null) {
	        return domAd.innerHTML.replace(/\s+/g, '');
	    }
	    return false;
	};
	
	var Ad = function Ad(adID) {
	    this.adID = adID;
	    this.domId = SLOT_PREFIX + adID;
	    this.width = null;
	    this.height = null;
	    this.branding = false;
	    this.preloaded = false;
	    this.closed = false;
	    this.rendered = false;
	    this.eventSize = null;
	    this.contents = {
	        base: false
	    };
	    this.element = null;
	
	    this.adType = 'standard';
	    this.sizeSet = false;
	    this.isResponsive = false;
	    this.allowScreenReader = false;
	    this.currentSlotGroups = [];
	    this.registeredSlotGroups = [];
	};
	
	Ad.prototype.setClosed = function (value) {
	    this.closed = value;
	    return this.closed;
	};
	
	Ad.prototype.close = function () {
	    this.setClosed(true);
	    this.shut();
	};
	
	Ad.prototype.isCloseAd = function () {
	    return this.closed;
	};
	
	Ad.prototype.setRendered = function (value) {
	    this.rendered = value;
	    return this.rendered;
	};
	
	Ad.prototype.isRendered = function () {
	    return this.rendered;
	};
	
	Ad.prototype.setConfig = function (config) {
	    var i;
	    for (i in config) {
	        if (config.hasOwnProperty(i)) {
	            this[i] = config[i];
	        }
	    }
	    return this;
	};
	
	Ad.prototype.setBaseContent = function () {
	    this.contents.base = getContents(this.domId);
	    return this.contents.base;
	};
	
	Ad.prototype.getBaseContent = function () {
	    return this.contents.base;
	};
	
	Ad.prototype.setCurrentSlotGroups = function (currentSlot) {
	    log('settings slot groups for ' + this.adID + ' to ' + currentSlot);
	    this.currentSlotGroups = currentSlot;
	    return this;
	};
	
	Ad.prototype.getCurrentSlotGroups = function () {
	    return this.currentSlotGroups;
	};
	
	Ad.prototype.registerSlotGroups = function (groups) {
	    this.registeredSlotGroups.push(groups);
	};
	
	Ad.prototype.getRegisteredSlotGroups = function () {
	    return this.registeredSlotGroups;
	};
	
	Ad.prototype.setPreloaded = function (preload) {
	    this.preloaded = preload;
	    return this;
	};
	
	Ad.prototype.isPreloaded = function () {
	    return this.preloaded;
	};
	
	/**
	 * @deprecated Use getDomElement()
	 * @returns {null|Element|*}
	 */
	Ad.prototype.domElement = function () {
	    return this.getDomElement();
	};
	
	Ad.prototype.getDomElement = function () {
	    if (!this.element) {
	        this.element = document.getElementById(this.domId);
	    }
	    return this.element;
	};
	
	Ad.prototype.getAdvertDimensions = function () {
	    // Use forced set width & height if set
	    var advert = document.getElementById(this.domId);
	    return {
	        width: this.width || (advert ? advert.clientWidth : 0),
	        height: this.height || (advert ? advert.clientHeight : 0)
	    };
	};
	
	Ad.prototype.setWidth = function (clientWidth) {
	    this.width = clientWidth;
	    return this;
	};
	
	Ad.prototype.getWidth = function () {
	    return parseInt(this.getAdvertDimensions().width, 10);
	};
	
	Ad.prototype.setHeight = function (clientHeight) {
	    this.height = clientHeight;
	    return this;
	};
	
	Ad.prototype.getHeight = function () {
	    return parseInt(this.getAdvertDimensions().height, 10);
	};
	
	Ad.prototype.getCreativeHeight = function () {
	    return bbcdotcom.objects('bbcdotcom.config.isAsync') ? this.getHeight() : this.getHeight() - AD_HEIGHT_ADJUSTMENT;
	};
	
	Ad.prototype.setAdDomHeightWidth = function (height, width, isIframeSettingSize) {
	    var element = this.getDomElement();
	    if (element !== null && (!this.sizeSet || isIframeSettingSize)) {
	        var adPadHeight = 35;
	        if (typeof width !== 'undefined') {
	            element.style.width = width + 'px';
	        }
	        element.style.height = height + adPadHeight + 'px';
	        this.sizeSet = true;
	    }
	};
	
	/**
	 * A function used by third party ads to change the size of the iFrame and it's other div's
	 * @param height
	 * @param width
	 * @returns Ad
	 */
	Ad.prototype.setIframeSize = function (height, width) {
	    var element = this.getDomElement();
	    var x,
	        adIframes = element.getElementsByTagName("iframe"),
	        insElements = element.getElementsByTagName("ins");
	    this.setAdDomHeightWidth(height, width, true);
	    if (adIframes.length >= 1 && typeof adIframes[0] !== 'undefined') {
	        if (typeof width !== 'undefined') {
	            adIframes[0].width = width;
	        }
	        adIframes[0].height = height;
	    }
	    for (x in insElements) {
	        if (typeof insElements[x].style !== "undefined") {
	            if (typeof width !== 'undefined') {
	                insElements[x].style.width = width + 'px';
	            }
	            insElements[x].style.height = height + 'px';
	        }
	    }
	
	    pubsub.trigger('ad:resize', this.adID, width, height);
	    pubsub.trigger('ad:resize:' + this.adID, this.adID, width, height);
	
	    return this;
	};
	
	Ad.prototype.setResponsive = function (responsive) {
	    this.isResponsive = responsive;
	    utils.addTagClass(this.getDomElement(), 'bbccom_responsive');
	    return this;
	};
	
	Ad.prototype.getAdTextKey = function () {
	    var x;
	    for (x in adTextKey) {
	        if (this.adID !== undefined && typeof this.adID.indexOf !== 'undefined' && this.adID.indexOf(x) !== -1) {
	            return adTextKey[x];
	        }
	    }
	    return adTextKey['default'];
	};
	
	Ad.prototype.getAdText = function () {
	    return typeof this.hasAdText !== 'undefined' && this.hasAdText === false ? false : bbcdotcom.adverts.adText.getText(this.getAdTextKey());
	};
	
	Ad.prototype.getAdInfoUrl = function () {
	    return bbcdotcom.adverts.adText.getInfoUrl(this.getAdTextKey());
	};
	
	Ad.prototype.getAdId = function () {
	    return this.adID;
	};
	
	Ad.prototype.getAdName = function () {
	    return this.getAdId();
	};
	
	/**
	 * USED in Synchronous slot requests
	 */
	Ad.prototype.show = function () {
	    var current = getContents(this.domId);
	    this.element = document.getElementById(this.domId);
	    if (current && !this.isCloseAd() && !bbcdotcom.objects('bbcdotcom.config.isAsync')) {
	        this.setClosed(this.contents.base === current && -1 === current.indexOf('iframe'));
	        this.open();
	    }
	    this.disableScreenReaderForAdContent();
	};
	
	/**
	 * We need to disable tabbing through ads as not all ads are built for screen readers
	 */
	Ad.prototype.disableScreenReaderForAdContent = function () {
	    var i, links, iframes;
	    var element = this.getDomElement();
	    if (!this.allowScreenReader && element !== null && element !== undefined) {
	        links = element.getElementsByTagName('a');
	        for (i = 0; i < links.length; i++) {
	            links[i].tabIndex = "-1";
	        }
	        iframes = element.getElementsByTagName('iframe');
	        for (i = 0; i < iframes.length; i++) {
	            iframes[i].tabIndex = "-1";
	        }
	    }
	};
	
	/**
	 * TODO - The closing of slots and resizing does not work for IE7, awaiting google to send size
	 */
	Ad.prototype.shut = function () {
	    var element = this.getDomElement();
	    if (element !== null && typeof element !== 'undefined' && element.className.indexOf(AD_IS_SHUT_CLASS) === -1 && element.className.indexOf(DISPLAY_NONE_CLASS) === -1) {
	        // TODO - As we now shut the slot as opposed to the ad, following line could be removed
	        utils.addTagClass(element, AD_IS_SHUT_CLASS);
	        utils.addTagClass(element.parentElement, AD_IS_SHUT_CLASS);
	        utils.removeTagClass(element.parentElement, AD_IS_VISIBLE);
	        utils.removeBodyTagClass(SLOT_PREFIX + this.adID);
	        pubsub.trigger('ad:close', this.adID);
	        pubsub.trigger('ad:close:' + this.adID, this.adID);
	    }
	};
	
	Ad.prototype.isShut = function () {
	    var element = this.getDomElement();
	    return element.className.indexOf(AD_IS_SHUT_CLASS) !== -1;
	};
	
	/**
	 * TODO - Move this into a separate sponsor class
	 */
	Ad.prototype.setTitleForSponsorAds = function () {
	    if (!this.branding && this.adID === 'sponsor_section') {
	        this.branding = new Branding(bbcdotcom.adverts.keyValues.get('keyword'));
	    }
	};
	
	/**
	 * USED in Synchronous slot requests
	 */
	Ad.prototype.open = function () {
	    var element = this.getDomElement();
	    this.setTitleForSponsorAds();
	    if (this.isResponsive) {
	        utils.addTagClass(element, 'bbccom_responsive');
	    }
	    if (!this.isCloseAd()) {
	        utils.removeTagClass(element, DISPLAY_NONE_CLASS);
	        // TODO - As we now shut the slot as opposed to the ad, following line could be removed
	        utils.removeTagClass(element, AD_IS_SHUT_CLASS);
	        utils.removeTagClass(element.parentElement, AD_IS_SHUT_CLASS);
	        utils.addBodyTagClass(SLOT_PREFIX + this.adID);
	        utils.addTagClass(element.parentElement, AD_IS_VISIBLE);
	    }
	};
	
	/**
	 * USED in Asynchronous slot requests
	 */
	Ad.prototype.openAsync = function (height, width) {
	    var element = this.getDomElement();
	    /**
	     * Setting ad size so we know if we need to close it on resize/rotation
	     */
	    this.setWidth(width);
	    this.setHeight(height);
	
	    /**
	     * Add body class for a responsive ad
	     */
	    if (this.isResponsive) {
	        utils.addTagClass(element, 'bbccom_responsive');
	    }
	    /**
	     * Display the element
	     */
	    var self = this;
	    setTimeout(function () {
	        var isCloseAd = self.isCloseAd();
	        log('OpenAsync Timer ad:' + self.getAdId() + ', isCloseAd: ' + isCloseAd);
	        if (!isCloseAd) {
	            utils.removeTagClass(self.element, AD_IS_SHUT_CLASS);
	            utils.removeTagClass(self.element.parentElement, AD_IS_SHUT_CLASS);
	            utils.addTagClass(self.element.parentElement, AD_IS_VISIBLE);
	        }
	    }, 300);
	    utils.removeTagClass(document.getElementById('bbccom_' + this.adID + '_text'), DISPLAY_NONE_CLASS);
	    /**
	     * Add a body class to show that the ad is in the page.
	     */
	    utils.addBodyTagClass(this.domId);
	    if (layout.getCurrentGroupId() > 2 && this.domId.indexOf('mpu') > 0) {
	        utils.addBodyTagClass(this.domId + "_" + (height > 251 ? "big" : "small"));
	    }
	    pubsub.trigger('ad:open', this.adID, width, height);
	    pubsub.trigger('ad:open:' + this.adID, this.adID, width, height);
	};
	
	/**
	 * @Todo temp fix for BBCCOM-7784 - we need to make this better.
	 * @param eventSize
	 */
	Ad.prototype.setEventSize = function (eventSize) {
	    this.eventSize = eventSize;
	};
	
	Ad.prototype.renderIfReady = function () {
	    try {
	        if (this.getDomElement() !== null && this.isRendered()) {
	            if (!this.isCloseAd() && this.eventSize !== null && typeof this.eventSize[0] !== 'undefined' && typeof this.eventSize[1] !== 'undefined') {
	                /**
	                 * BBCCOM-5589 - View notes about issues with GPT slotRenderEnded event in IE browsers
	                 * Would be lovely to use promises here
	                 */
	                setTimeout(function () {
	                    if (this.isCloseAd()) {
	                        pubsub.trigger('ad:render:close', this.domId);
	                        this.close();
	                    } else {
	                        this.openAsync(this.eventSize[1], this.eventSize[0]);
	                    }
	                }.bind(this), 200);
	            } else {
	                pubsub.trigger('ad:render:close', this.domId);
	                this.close();
	            }
	        }
	    } catch (e) {
	        log.error('Failed during renderEndedCallback', e);
	    }
	};
	
	/**
	 * This was a news requirement in order to be able to position other elements on a page around whether an
	 * ad is visible or not, the bbccom_visible class is used within the tabloid news application
	 */
	Ad.prototype.setCurrentSlotVisible = function () {
	    var slotElement,
	        slot,
	        slots = this.getRegisteredSlotGroups();
	    for (slot in slots) {
	        if (slots.hasOwnProperty(slot)) {
	            slotElement = document.getElementById(SLOT_PREFIX + this.adID + '_' + slots[slot].join('_'));
	            utils.removeTagClass(slotElement, AD_IS_VISIBLE);
	        }
	    }
	    if (this.currentSlotGroups && this.currentSlotGroups.length > 0 && !this.closed) {
	        slotElement = document.getElementById(SLOT_PREFIX + this.adID + '_' + this.currentSlotGroups.join('_'));
	        utils.addTagClass(slotElement, AD_IS_VISIBLE);
	    }
	    slotElement = null;
	};
	
	Ad.prototype.hasAnyGroupAlreadyBeenRegistered = function (groups) {
	    var i, len, groupsRegistered;
	    groupsRegistered = [].concat.apply([], this.registeredSlotGroups).join();
	    for (i = 0, len = groups.length; i < len; i += 1) {
	        if (groupsRegistered.indexOf(groups[i]) !== -1) {
	            log.warn(groups[i] + ' has already been registered for ' + this.adID);
	            return true;
	        }
	    }
	    return false;
	};
	
	Ad.prototype.injectAdvertisementText = function () {
	    var adTextInterval = void 0;
	    var adText = void 0;
	    var adInfoUrl = void 0;
	    var injectTry = 0;
	
	    function tryInjectAdText() {
	        injectTry++;
	        var element = this.getDomElement();
	        if (element) {
	            var aTag = document.createElement('a');
	            aTag.innerHTML = adText;
	            aTag.href = adInfoUrl;
	            aTag.className = 'bbccom_text';
	
	            element.insertBefore(aTag, element.firstChild);
	            clearInterval(adTextInterval);
	        } else if (injectTry >= 10) {
	            clearInterval(adTextInterval);
	        }
	    };
	
	    adText = this.getAdText();
	    if (adText) {
	        adInfoUrl = this.getAdInfoUrl();
	        adTextInterval = setInterval(tryInjectAdText.bind(this), 50);
	    }
	};
	
	Ad.prototype.hideAdContainer = function () {
	    var domAd = document.getElementById(this.domId);
	
	    if (domAd) {
	        try {
	            domAd.style.display = 'block';
	            domAd.style.height = '0px';
	            domAd.style.overflow = 'hidden';
	            domAd.style.padding = '0';
	        } catch (e) {}
	    }
	};
	
	Ad.prototype.currentSlotHasGroup = function (group) {
	    return this.getCurrentSlotGroups().indexOf(group) >= 0;
	};
	
	module.exports = Ad;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var sections = __webpack_require__(150);
	var AdText = __webpack_require__(220);
	var keyValues = __webpack_require__(156);
	
	module.exports = function Branding(keyword) {
	    var href = false,
	        title = false,
	        keywordParts,
	        keywords = {
	        'firstperson': {
	            title: 'First Person',
	            url: '/news/magazine-14633099'
	        },
	        'firstpersonbigdreams': {
	            title: 'First Person Big Dreams',
	            url: '/news/magazine-14633099'
	        },
	        'picturethis': {
	            title: 'Picture This',
	            url: '/news/magazine-14760628'
	        },
	        'livingonline': {
	            title: 'Living Online',
	            url: '/news/magazine-14760626'
	        },
	        'rab': {
	            title: 'Running a Business',
	            url: '/news/business-16611973'
	        },
	        'powerofart': {
	            title: 'Power of Art',
	            url: '/news/magazine-21459225'
	        },
	        'alteredstates': {
	            title: 'Altered States',
	            url: '/news/magazine-14760627'
	        },
	        'uselection': {
	            title: 'US Election',
	            url: '/news/world-us-canada-15949569'
	        },
	        'jubilee': {
	            title: 'The Diamond Jubilee',
	            url: '/news/uk-17500000',
	            altTitle: "Back to Queen's Diamond Jubilee"
	        },
	        'entrepreneurship': {
	            title: 'Entrepreneurship',
	            url: '/news/business-22434141'
	        },
	        'energy': {
	            title: 'Energy',
	            url: '/news/business-15521824'
	        },
	        'knowledgeeconomy': {
	            title: 'Knowledge economy',
	            url: '/news/business-12686570'
	        },
	        'ceoguru': {
	            title: 'CEO Guru',
	            url: '/news/business-20071226'
	        },
	        'theboss': {
	            title: 'The Boss',
	            url: '/news/business-22449886'
	        },
	        'makingtime': {
	            title: 'Making Time',
	            url: '/news/magazine-24117219'
	        },
	        'thinkingbusiness': {
	            title: 'Thinking Business',
	            url: '/news/business-22449887'
	        },
	        'techbiz': {
	            title: 'Technology of Business',
	            url: '/news/business-11428889'
	        },
	        'meettheteam': {
	            title: 'Meet the team',
	            url: '/news/world-radio-and-tv-23426239'
	        },
	        '100women': {
	            title: '100 Women',
	            url: '/news/world-24371433'
	        },
	        'businessoftennis': {
	            title: 'Business of Tennis',
	            url: '/news/business-25319175'
	        },
	        'nextsiliconvalleys': {
	            title: 'The Next Silicon Valleys',
	            url: '/news/technology-25852150'
	        },
	        'businessofgiving': { // BBCCOM-5669
	            title: 'The Business of Giving',
	            url: '/news/business-19182463'
	        },
	        'howtosucceedin': { // BBCCOM-5730
	            title: 'How to Succeed In',
	            url: '/news/business-29617902'
	        },
	        'komladumor': { // BBCCOM-5981
	            title: 'Komla Dumor Award',
	            url: '/news/world-radio-and-tv-30725772'
	        },
	        'lifeofluxury': { //BBCCOM-6664 START
	            title: 'Life of Luxury',
	            url: '/news/business-31157861'
	        },
	        'themakingofme': {
	            title: 'The Making of Me',
	            url: '/news/business-32660236'
	        },
	        'singaporeat50': {
	            title: 'Singapore at 50',
	            url: '/news/world-asia-31522499'
	        },
	        'madeinamerica': {
	            title: 'Made in America',
	            url: '/news/business-30533292'
	        },
	        'tomorrowscities': {
	            title: 'Tomorrow\'s Cities',
	            url: '/news/technology-23517670'
	        },
	        'mybusiness': {
	            title: 'My Business',
	            url: '/news/business-15870435'
	        },
	        'newentrepreneurs': {
	            title: 'The New Entrepreneurs',
	            url: '/news/business-27614930'
	        },
	        'africabeats': {
	            title: 'Africa Beats',
	            url: '/news/entertainment-arts-17679490'
	        },
	        'asiabeats': {
	            title: 'Asia Beats',
	            url: '/news/entertainment-arts-26040146'
	        },
	        'latambeats': {
	            title: 'LatAm Beats',
	            url: '/news/world-latin-america-19523770'
	        },
	        'middleeastbeats': { //BBCCOM-6664 LAST
	            title: 'Middle East Beats',
	            url: '/news/world-middle-east-30555154'
	        },
	        'businessbrain': { //BBCCOM-6793
	            title: 'Business Brain',
	            url: '/news/business-32339576'
	        }
	    };
	
	    (function () {
	        keywordParts = keyValues.getKeywordParts();
	        if (typeof keywords[keyword] !== 'undefined') {
	            href = keywords[keyword].url;
	            title = keywords[keyword].title;
	        } else if (keywordParts) {
	            href = keywordParts.href;
	            title = keywordParts.title;
	        }
	    })();
	
	    /**
	     * Branding is only required on the News and World Service sites
	     */
	    if ((sections.getSections()[0] === 'news' || sections.getSections()[0] === 'worldservice') && "function" !== 'undefined') {
	        requirejs(['module/bootstrap', 'module/indexTitle'], function (news, indexTitle) {
	            var indexTitleString,
	                adTextKey = 'sponsoredByText',
	                adText = AdText.getText(adTextKey),
	                adInfoLink = AdText.getInfoUrl(adTextKey);
	            if (typeof indexTitle !== 'undefined') {
	                if (typeof indexTitle.setTitleHtml !== 'undefined' && indexTitle.getIndexTitle().element.length > 0) {
	                    indexTitleString = href && indexTitle.getIndexTitle().element.find('a').length >= 1 ? '<a href="' + href + '">' + title + '</a>' : indexTitle.getIndexTitle().element[0].textContent;
	
	                    indexTitle.setTitleHtml('<span class="bbccom_index_title">' + indexTitleString + '</span>' + '<a class="bbccom_text" href="' + adInfoLink + '" ' + 'tabindex="-1" aria-hidden="true">' + adText + '</a>');
	                }
	            }
	        });
	    }
	
	    return {
	        getUrl: function getUrl() {
	            return href;
	        },
	        getTitle: function getTitle() {
	            return title;
	        }
	    };
	};

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * This module is responsible for resolving the advert text and corresponding info URL for each text value.
	 * The actual strings are retrieved from the locale which is configured on a page by page
	 * basis by consumers of bbcdotcom.
	 *
	 * If we are adding a new text string or info URL in the future, we should add an entry to the
	 * AD_TEXT_KEY_TO_URL_LOCALE_KEY_MAP to map the ad text and URL correctly
	 *
	 * We can add overrides to the ad text based on the page sections - see SECTION_OVERRIDES below
	 *
	 */
	
	var utils = __webpack_require__(141);
	var sections = __webpack_require__(150);
	var locale = __webpack_require__(151);
	
	/**
	 * Overrides for the advert text based on sections & ad text key.
	 *
	 * Eg on bbc.com/sport/ultimate-performers/23003279?ads-debug
	 * sections.getSections() = ['sport', 'ulitamate-performers'];
	 *
	 * overrides = {
	     *   'sport': {
	     *     'ultimate-performers': {
	     *       inAssociationWithText: 'foo'
	     *     }
	     *   }
	     * }
	 *
	 * Wildcards (*) can be used to mean this section or any children thereof. Using the
	 * example data below, that would also match http://www.bbc.com/sport/ultimate-performers/rugbyfacts
	 * where sections.getSections() = ['sport', 'ulitamate-performers', 'rugbyfacts'];
	 *
	 * overridesWithWildcard = {
	     *   'sport': {
	     *     'ultimate-performers': {
	     *       '*': {
	     *         inAssociationWithText: 'foo'
	     *       }
	     *     }
	     *   }
	     * }
	 *
	 */
	var SECTION_OVERRIDES = {
	    'sport': {
	        'ultimate-performers': {
	            '*': {
	                inAssociationWithText: 'Partnered Content Presented by'
	            }
	        },
	        'move-like-never-before': {
	            '*': {
	                inAssociationWithText: 'Partnered Content Presented by'
	            }
	        },
	        'home-of-the-english-premier-league': {
	            '*': {
	                inAssociationWithText: 'Partnered Content Presented by'
	            }
	        }
	    }
	};
	
	/**
	 * Map of adTextKeys to info URL locale keys. This allows us to have different
	 * info URLs for different ad texts.
	 *
	 * @type {Object}
	 */
	var AD_TEXT_KEY_TO_URL_LOCALE_KEY_MAP = {
	    advertisementText: 'advertInfoPageUrl',
	    inAssociationWithText: 'associationInfoPageUrl',
	    sponsoredByText: 'associationInfoPageUrl',
	    advertisingPartnersText: 'associationInfoPageUrl',
	    adsByGoogleText: 'googleAdsPageUrl'
	};
	
	/**
	 * When there is no match in the map above for a given ad text key, use the below
	 * key when looking up the ad info URL in the locale.
	 *
	 * @type {string}
	 */
	var DEFAULT_INFO_URL_LOCALE_KEY = 'advertInfoPageUrl';
	
	module.exports = {
	
	    /**
	     * Get the ad text for the given adTextKey. If the adTextKey is invalid it will return undefined.
	     *
	     * @param adTextKey
	     * @returns {String|undefined}
	     */
	    getText: function getText(adTextKey) {
	        var s = utils.cleanArray(sections.getSections());
	        var overrides = SECTION_OVERRIDES;
	        var override;
	
	        // Return the matching object from the data config above.
	        var i, n;
	        for (i = 0, n = s.length; i < n; ++i) {
	            var k = s[i];
	            if (overrides.hasOwnProperty(k)) {
	                overrides = overrides[k];
	            } else if (!overrides.hasOwnProperty('*')) {
	                overrides = false;
	                break;
	            }
	        }
	
	        // If we found a matching object, extract the override if present
	        if (overrides && overrides.hasOwnProperty(adTextKey)) {
	            override = overrides[adTextKey];
	        } else if (overrides && overrides.hasOwnProperty('*') && overrides['*'].hasOwnProperty(adTextKey)) {
	            override = overrides['*'][adTextKey];
	        }
	
	        return override || locale.get(adTextKey);
	    },
	
	    /**
	     * Return the info info URL for the given adTextKey. If the adTextKey is invalid it will return undefined
	     *
	     * @param adTextKey
	     * @returns {String|undefined}
	     */
	    getInfoUrl: function getInfoUrl(adTextKey) {
	        var localeKey = AD_TEXT_KEY_TO_URL_LOCALE_KEY_MAP[adTextKey] || DEFAULT_INFO_URL_LOCALE_KEY;
	        return locale.get(localeKey);
	    },
	
	    /**
	     * Set the section overrides, used for unit testing
	     * @param overrides
	     */
	    setSectionOverrides: function setSectionOverrides(overrides) {
	        SECTION_OVERRIDES = overrides;
	    }
	};

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _pubsub = __webpack_require__(161);
	
	var _pubsub2 = _interopRequireDefault(_pubsub);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports['default'] = {
	    renderAd: function renderAd(ad, advertText) {
	        var adText, adInfo;
	
	        _pubsub2['default'].trigger('ad:render', ad.getAdId());
	
	        /**
	         * This should happen here so that SafeFrame knows how much room it has to expand
	         */
	        adText = advertText || ad.getAdText();
	        if (adText) {
	            adInfo = ad.getAdInfoUrl();
	            document.write('<a class="bbccom_text" href="' + adInfo + '">' + adText + '</a>');
	        }
	        googletag.cmd.push(function () {
	            googletag.display('bbccom_' + ad.getAdId());
	            _pubsub2['default'].trigger('ad:render:complete', ad.getAdId());
	        });
	    }
	};
	module.exports = exports['default'];

/***/ },
/* 222 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {
	    /**
	     * @param adId eg mpu, leaderboard
	     */
	    createAd: function createAd(adId) {
	        return new bbcdotcom.adverts.ad(adId);
	    }
	};

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var pubsub = __webpack_require__(161);
	
	var adText = '<a class="bbccom_text" href="{adInfo}">{adText}</a>',
	    adTemplate = '<script type="text/javascript">' + 'bbcdotcom.ad("{adId}").setBaseContent();' + 'googletag.display("{adId}");' + '</script>';
	
	module.exports = {
	    renderAd: function renderAd(data) {
	        var out = '';
	
	        pubsub.trigger('ad:render', data.adId);
	
	        if (data.adText) {
	            out = this.substituteData(adText, data);
	        }
	        out += this.substituteData(adTemplate, data);
	        document.write(out);
	
	        return out;
	    },
	    substituteData: function substituteData(template, data) {
	        var adHtml = template.replace(/\{[^{}]+\}/g, function (key) {
	            return data[key.replace(/[{}]+/g, "")] || key;
	        });
	        return adHtml;
	    }
	};

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var sections = __webpack_require__(150);
	var adText = __webpack_require__(220);
	var adRegister = __webpack_require__(160);
	
	var adsenseRandom = Math.ceil(Math.random() * 3);
	
	/**
	 * Point Google Adsense at a different Url to get keywords used to determine adverts to display
	 */
	var applyPageUrlOverride = function applyPageUrlOverride() {
	    if (sections.getSection(0) === 'news' && sections.getSection(1) === false) {
	        // News Homepage override
	        window.google_page_url = adsenseRandom === 1 ? "http://www.bbc.co.uk/news/business/" : adsenseRandom === 2 ? "http://www.bbc.co.uk/news/science_and_environment/" : "http://www.bbc.co.uk/news/technology/";
	    } else if (sections.getSection(0) === 'news' && sections.getSection(1) === 'business' && sections.getSection(2) === 'market-data') {
	        // Market Data override
	        window.google_page_url = "http://www.bbc.co.uk/news/business/";
	    }
	};
	
	/**
	 * Determines who gets the revenue
	 */
	var getAdsenseChannel = function getAdsenseChannel() {
	    var section = sections.getSection(0);
	    if (section === 'worldservice') {
	        return 'worldservice';
	    } else if (/^(autos|capital|culture|future|travel)$/.test(section)) {
	        return 'worldwide';
	    } else {
	        return 'globalnews';
	    }
	};
	
	/**
	 * Google Adsense Global Callback
	 */
	function google_ad_request_done(googleAds) {
	    var log = __webpack_require__(142)('adverts:adsenseRenderer');
	    var s = '';
	    var i;
	    var adTextKey = 'adsByGoogleText',
	        adTextValue = adText.getText(adTextKey),
	        adInfoUrl = adText.getInfoUrl(adTextKey);
	
	    if (googleAds.length === 0) {
	        log('no ads returned from Google Adsense request');
	        adRegister.getCurrentAd().close();
	        return;
	    }
	
	    if (googleAds[0].type === "text") {
	
	        s += '<h3>' + '<a href="' + adInfoUrl + '" tabindex="-1">' + adTextValue + '</a>' + '</h3>' + '<ul>';
	
	        if (googleAds.length === 1) {
	
	            s += '<li>' + '<h4>' + '<a href="' + googleAds[0].url + '" ' + 'onmouseout="window.status=\'\'" ' + 'onmouseover="window.status=\'go to ' + googleAds[0].visible_url + '\';return true;" ' + 'target="_blank" tabindex="-1">' + googleAds[0].line1 + '</a>' + '<h4>' + '<p>' + googleAds[0].line2 + ' ' + '</p>' + '<p>' + '<a href="' + googleAds[0].url + '" ' + 'onmouseout="window.status=\'\'" ' + 'onmouseover="window.status=\'go to ' + googleAds[0].visible_url + '\';return true;" ' + 'target="_blank" tabindex="-1">' + googleAds[0].line3 + '</a>' + '</p>' + '<p>' + '<a href="' + googleAds[0].url + '" ' + 'onmouseout="window.status=\'\'" ' + 'onmouseover="window.status=\'go to ' + googleAds[0].visible_url + '\';return true;" ' + 'target="_blank" tabindex="-1">' + googleAds[0].visible_url + '</a>' + '</p>' + '</li>';
	        } else if (googleAds.length > 1) {
	
	            for (i = 0; i < googleAds.length; ++i) {
	                s += '<li>' + '<h4>' + '<a href="' + googleAds[i].url + '" ' + 'onmouseout="window.status=\'\'" ' + 'onmouseover="window.status=\'go to ' + googleAds[i].visible_url + '\';return true;" ' + 'target="_blank" tabindex="-1">' + googleAds[i].line1 + '</a>' + '</h4>' + '<p>' + googleAds[i].line2 + ' ' + googleAds[i].line3 + '</p>' + '<p>' + '<a href="' + googleAds[i].url + '" ' + 'onmouseout="window.status=\'\'" ' + 'onmouseover="window.status=\'go to ' + googleAds[i].visible_url + '\';return true;" ' + 'target="_blank" tabindex="-1">' + googleAds[i].visible_url + '</a>' + '</p>' + '</li>';
	            }
	        }
	        s += '</ul>';
	    }
	    document.write('<div class="bbccom_adsense_container">' + s + '</div>');
	    return;
	}
	
	module.exports = {
	    google_ad_request_done: google_ad_request_done,
	    renderAd: function renderAd() {
	        window.google_ad_client = 'ca-bbccom';
	        window.google_ad_output = 'js';
	        window.google_max_num_ads = '3';
	        window.google_ad_type = 'text';
	        window.google_ad_channel = getAdsenseChannel();
	        applyPageUrlOverride();
	
	        document.write('<script ' + 'type="text/javascript" ' + 'src="http://pagead2.googlesyndication.com/pagead/show_ads.js">' + decodeURIComponent('%3C') + '/script>');
	        return true;
	    },
	    setRandom: function setRandom(random) {
	        adsenseRandom = random;
	    }
	};

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var adUnit = __webpack_require__(162);
	var layout = __webpack_require__(158);
	
	var suites = {
	    '970x250': {
	        dfppId: 185036058,
	        adUnit: 'preview',
	        uid: '5d453f2d6551484b782064357a',
	        slots: {
	            leaderboard: [[970, 250]],
	            mpu: []
	        }
	    },
	    large: {
	        dfppId: 114180258,
	        adUnit: 'preview',
	        uid: '224f514079694b3d567a747a22',
	        slots: {
	            leaderboard: [[970, 250]]
	        }
	    },
	    big: {
	        dfppId: 185036058,
	        adUnit: 'preview',
	        uid: '5d453f2d6551484b782064357a',
	        slots: {
	            leaderboard: [[970, 250]],
	            mpu: [[300, 600]]
	        }
	    },
	    standard: {
	        dfppId: 193669458,
	        adUnit: 'preview',
	        uid: '3171676f4450464e3d5a3b4746',
	        slots: {
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    opaque: {
	        dfppId: 193669458,
	        adUnit: 'preview',
	        uid: '3171676f4450464e3d5a3b4746',
	        slots: {
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    interstitial: {
	        dfppId: 193674858,
	        adUnit: 'preview',
	        uid: '3f784566412e58404762524028',
	        slots: {
	            interstitial: [[1, 1]],
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    "int-uni-iframe": {
	        dfppId: 200145378,
	        adUnit: 'preview',
	        uid: '2b614a6426584d2e767e7a2967',
	        slots: {
	            interstitial: [[1, 1]],
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    "int-uni-image": {
	        dfppId: 200147178,
	        adUnit: 'preview',
	        uid: '2b5e292758336b7b662b346122',
	        slots: {
	            interstitial: [[1, 1]],
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    empty: {
	        dfppId: 114180258,
	        adUnit: 'preview',
	        uid: '537034287a7as704b51655e3227'
	    },
	    none: {
	        dfppId: 114180258,
	        adUnit: 'preview',
	        uid: '537034287a7as704b51655e3227'
	    },
	    noad: {
	        dfppId: 114180258,
	        adUnit: 'preview',
	        uid: '537034287a7as704b51655e3227'
	    }
	};
	
	module.exports = {
	    init: function init(windowLocationHref) {
	        var suite;
	        if (/[\\?&]ads=([^&#]*)/.test(windowLocationHref)) {
	            if ('undefined' !== typeof suites[RegExp.$1]) {
	                suite = suites[RegExp.$1];
	                if (suite.uid) {
	                    adUnit.setUid(suite.uid);
	                }
	                if (suite.adUnit) {
	                    adUnit.setAdUnit(suite.adUnit);
	                }
	                if (suite.slots) {
	                    layout.overrideGroupSizes(suite.slots);
	                }
	            }
	        }
	    }
	};

/***/ },
/* 226 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * 1. The first leaderboard slot size is directly aligned to style/orb/css/bbccom-async.css
	 * If you are changing the first size in an ads breakpoint please check it is aligned with the styles for the group
	 */
	var groups = {
	    0: {
	        s: 0,
	        f: 319,
	        slots: {
	            wallpaper: [],
	            leaderboard: [],
	            mpu: [],
	            mpu_middle: [],
	            mpu_bottom: [],
	            sponsor: [],
	            module: [],
	            module_worldinpictures: [],
	            promo: [],
	            ad_feature_rc: [],
	            "native": [[10, 10]],
	            "native_side_2": [],
	            "native_main_small": [],
	            "native_main_medium": [],
	            "native_main_large": [],
	            adsense: [],
	            adsense_mpu: [],
	            parallax: [],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]]
	        }
	    },
	    1: {
	        s: 320,
	        f: 399,
	        slots: {
	            wallpaper: [],
	            leaderboard: [[320, 50], [300, 50]],
	            mpu: [[300, 50], [320, 50], [300, 250]],
	            mpu_middle: [[300, 251]],
	            mpu_bottom: [[300, 251]],
	            sponsor: [[88, 31]],
	            module: [[88, 31]],
	            module_worldinpictures: [[320, 50], [300, 50]],
	            inread: [[6, 6]],
	            promo: [],
	            ad_feature_rc: [],
	            "native": [[10, 10]],
	            "native_side_2": [],
	            "native_main_small": [],
	            "native_main_medium": [],
	            "native_main_large": [],
	            adsense: [[3, 3]],
	            adsense_mpu: [],
	            parallax: [],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]]
	        }
	    },
	    2: {
	        s: 400,
	        f: 599,
	        slots: {
	            wallpaper: [],
	            /** NOTE - Please read point 1 above before changing */
	            leaderboard: [[516, 60], [320, 50], [300, 50]],
	            mpu: [[516, 60], [300, 50], [320, 50], [300, 250]],
	            mpu_middle: [[300, 251]],
	            mpu_bottom: [[300, 251]],
	            sponsor: [[88, 31]],
	            module: [[88, 31]],
	            module_worldinpictures: [[320, 50], [300, 50]],
	            inread: [[6, 6]],
	            promo: [],
	            ad_feature_rc: [],
	            "native": [[10, 10]],
	            "native_side_2": [],
	            "native_main_small": [],
	            "native_main_medium": [],
	            "native_main_large": [],
	            adsense: [[3, 3]],
	            adsense_mpu: [],
	            parallax: [],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]]
	        }
	    },
	    3: {
	        s: 600,
	        f: 1007,
	        slots: {
	            wallpaper: [],
	            /** NOTE - Please read point 1 above before changing */
	            leaderboard: [[516, 60], [728, 90], [970, 300], [970, 250], [970, 90], [970, 66]],
	            mpu: [[300, 250], [300, 600]],
	            mpu_middle: [[300, 251]],
	            mpu_bottom: [[300, 251]],
	            sponsor: [[88, 31]],
	            module: [[88, 31]],
	            module_worldinpictures: [[320, 50], [300, 50]],
	            inread: [[6, 6]],
	            promo: [[336, 224]],
	            ad_feature_rc: [[336, 136]],
	            "native": [[10, 10]],
	            "native_side_2": [[336, 209]],
	            "native_main_small": [[384, 258]],
	            "native_main_medium": [[464, 258]],
	            "native_main_large": [[624, 258]],
	            adsense: [[3, 3]],
	            adsense_mpu: [[3, 3]],
	            parallax: [],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]]
	        }
	    },
	    4: {
	        s: 1008,
	        f: 10000,
	        slots: {
	            wallpaper: [[1, 1]],
	            /** NOTE - Please read point 1 above before changing */
	            leaderboard: [[728, 90], [970, 300], [970, 250], [970, 90], [970, 66], [940, 230]],
	            mpu: [[300, 250], [300, 600]],
	            mpu_middle: [[300, 251]],
	            mpu_bottom: [[300, 251]],
	            sponsor: [[88, 31]], /* catch all */
	            module: [[88, 31]], /* catch all */
	            module_worldinpictures: [[320, 50], [300, 50]],
	            inread: [[6, 6]],
	            promo: [[336, 224]],
	            ad_feature_rc: [[336, 136]],
	            "native": [[10, 10]],
	            "native_side_2": [[336, 209]],
	            "native_main_small": [[384, 258]],
	            "native_main_medium": [[464, 258]],
	            "native_main_large": [[624, 258]],
	            adsense: [[3, 3]],
	            adsense_mpu: [[3, 3]],
	            parallax: [[976, 400]],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]]
	        }
	    }
	};
	
	module.exports = {
	    /**
	     * @param {JSON} customGroups The new groups to replace the current groups object.
	     **/
	    setGroups: function setGroups(customGroups) {
	        groups = customGroups;
	    },
	    /**
	     * @param {Number} group The group id to replace.
	     * @param {JSON} customGroup The new group data.
	     **/
	    setGroup: function setGroup(group, customGroup) {
	        if (customGroup.s && customGroup.f && customGroup.slots) {
	            groups[group] = customGroup;
	            this.setGroupStart(group, customGroup.s);
	            this.setGroupFinish(group, customGroup.f);
	        }
	    },
	    /**
	     * @param {Number} group The group id to replace.
	     * @param {Number} width The new start width of the group.
	     **/
	    setGroupStart: function setGroupStart(group, width) {
	        if (typeof groups[group] !== 'undefined' && typeof groups[group].s !== 'undefined') {
	            groups[group].s = width;
	        }
	        if (typeof groups[group - 1] !== 'undefined' && typeof groups[group - 1].f !== 'undefined') {
	            groups[group - 1].f = width - 1;
	        }
	    },
	    /**
	     * @param {Number} group The group id to replace.
	     * @param {Number} width The new finish width of the group.
	     **/
	    setGroupFinish: function setGroupFinish(group, width) {
	        if (typeof groups[group] !== 'undefined' && typeof groups[group].f !== 'undefined') {
	            groups[group].f = width;
	        }
	        if (typeof groups[group + 1] !== 'undefined' && typeof groups[group + 1].f !== 'undefined') {
	            groups[group + 1].s = width + 1;
	        }
	    },
	    getGroups: function getGroups() {
	        return groups;
	    },
	    getGroup: function getGroup(group) {
	        return groups[group];
	    }
	};

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 *
	 * Note: This is called in slot.js AND currencyProviders.js
	 *
	 */
	var config = __webpack_require__(148);
	var sections = __webpack_require__(150);
	
	/**
	 * Map of templates used for rendering the outbrain widget. The key is the first section
	 * from bbcdotcom.sections. If we add outbrain to a new product, we will need to add a
	 * template to this map otherwise the News template will be used as a default.
	 */
	var productTemplates = {
	    news: 'bbc.com/News',
	    sport: 'bbc.com/Sport',
	    fallback: 'bbc.com/News'
	};
	
	function sanitiseDataSrc(href) {
	    if (href.match(/^(https|http):\/\/(pal|m|www).*.bbc.(com|co.uk)/)) {
	        return encodeURIComponent(href.replace(/(\?|#).+$/, '') // Remove everything after ? or #
	        );
	    } else {
	        return encodeURIComponent('http://www.bbc.com/news');
	    }
	}
	
	function generateHtml(id, template) {
	    var windowLocation = config.getWindowLocation();
	    var url = sanitiseDataSrc(windowLocation.href.replace(/(pal|m).sandbox.dev/, 'www'));
	
	    return '<div class="bbccom_outbrain_container bbccom_' + id + '">' + '<div class="OUTBRAIN" data-src="' + url + '" data-widget-id="' + id.replace(/outbrain_/, '').toUpperCase() + '" data-ob-template="' + template + '"></div>' + '<script type="text/javascript">' + '    document.write(decodeURI(\'%3Cscript src="//widgets.outbrain.com/outbrain.js" type="text/javascript"%3E%3C/script%3E\'));' + '</script>' + '</div>';
	}
	
	module.exports = {
	    sanitiseDataSrc: sanitiseDataSrc,
	    renderAd: function renderAd(id) {
	        var product = sections.getSection(0);
	
	        var template = productTemplates[product] || productTemplates.fallback;
	
	        if (!config.isIE7() && config.isOutbrainEnabled()) {
	            // IE7 cannot document.write() within a document.write() and place contents into the <div>
	            var html = generateHtml(id, template);
	            document.write(html);
	            return html;
	        }
	        return false;
	    }
	};

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(141);
	var config = __webpack_require__(148);
	var adRegister = __webpack_require__(160);
	var layout = __webpack_require__(158);
	var adRenderer = __webpack_require__(223);
	var outbrainRenderer = __webpack_require__(227);
	var adsenseRenderer = __webpack_require__(224);
	
	module.exports = function slot(adId, groups, preload, advertText, currentScriptTag) {
	    'use strict';
	
	    var log = __webpack_require__(142)('adverts:slot');
	
	    try {
	        if (config.isActive('ads') && typeof adId === 'string' && adId.length > 0 && typeof groups !== 'undefined') {
	            var slotConfig,
	                scriptTags,
	                ad = adRegister.getAd(adId),
	                currentGroupId = layout.getCurrentGroupId(),
	                slotDomId = preload ? 'bbccom_' + adId + '_' + groups.join('_') + '_preload' : 'bbccom_' + adId + '_' + groups.join('_'),
	                slotElement = document.getElementById(slotDomId),
	                adDomId = 'bbccom_' + adId;
	            if (typeof ad !== 'undefined' && typeof ad.getAdId() !== 'undefined') {
	                slotConfig = {
	                    adInfo: ad.getAdInfoUrl(),
	                    adText: advertText || ad.getAdText(),
	                    adDomId: adDomId,
	                    adId: adId
	                };
	                if (!ad.hasAnyGroupAlreadyBeenRegistered(groups)) {
	                    ad.registerSlotGroups(groups);
	                    /** Legacy ad slots will not have the ID defined in the markup */
	                    if (slotElement === null) {
	                        scriptTags = document.getElementsByTagName("script");
	                        currentScriptTag = typeof currentScriptTag === 'undefined' ? scriptTags[scriptTags.length - 1].innerHTML.indexOf('bbcdotcom') === -1 ? scriptTags[scriptTags.length - 2] : scriptTags[scriptTags.length - 1] : currentScriptTag;
	                        slotElement = utils.getParentElementByClass(currentScriptTag, 'bbccom_slot');
	                        if (!slotElement) {
	                            log.warn('"bbccom_slot" class not found for this slot "' + slotDomId + '"');
	                            adRegister.setCurrentAdId(undefined);
	                            return false;
	                        }
	                        slotElement.id = slotDomId;
	                    }
	                    /** END Legacy ad slots will not have the ID defined in the markup */
	
	                    slotElement.className += ' bbccom_' + ad.adType + '_slot';
	
	                    if (groups.indexOf(currentGroupId) >= 0) {
	                        // Ad can be rendered because slot matches current group id (width)
	                        ad.setCurrentSlotGroups(groups);
	
	                        if (typeof preload !== 'undefined' && preload) {
	                            ad.setPreloaded(true);
	                        }
	
	                        // Tell the register that this ad is currently being processed (for .show)
	                        adRegister.setCurrentAdId(adId);
	
	                        // Assign adDomId to enable copying ad and moving
	                        slotElement.children[0].id = adDomId;
	
	                        ad.setCurrentSlotVisible();
	
	                        // Render ad in Html
	                        if (adId.indexOf('adsense') === 0) {
	                            // Google Adsense advert (eg adsense, adsense_mpu)
	                            return adsenseRenderer.renderAd();
	                        } else if (adId.indexOf('outbrain') === 0) {
	                            // Outbrain - note, TR_1 is injected in currencyProviders.js
	                            return outbrainRenderer.renderAd(adId);
	                        } else {
	                            // Standard advert
	                            return adRenderer.renderAd(slotConfig);
	                        }
	                    } else {
	                        adRegister.setCurrentAdId(false);
	                    }
	                }
	            }
	        }
	    } catch (e) {
	        log.error(e);
	    }
	};

/***/ },
/* 229 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (adId, groups, advertText) {
	    var ad,
	        slot,
	        slotDomChildElement,
	        currentGroupId = bbcdotcom.adverts.layout.getCurrentGroupId();
	
	    if (window.bbcdotcom && bbcdotcom.ad) {
	        ad = bbcdotcom.ad(adId);
	        if (typeof ad !== 'undefined' && !ad.hasAnyGroupAlreadyBeenRegistered([groups])) {
	            ad.registerSlotGroups(groups);
	            if (groups.indexOf(currentGroupId) >= 0) {
	
	                ad.setCurrentSlotGroups(groups);
	
	                slot = document.getElementById('bbccom_' + ad.getAdId() + '_' + groups.join('_'));
	                slotDomChildElement = slot.firstElementChild || slot.firstChild;
	                if (slotDomChildElement) {
	                    slotDomChildElement.id = 'bbccom_' + ad.getAdId();
	                }
	                bbcdotcom.utils.addTagClass(slot, 'bbccom_' + ad.adType + '_slot');
	
	                ad.renderIfReady();
	
	                // Render ad in Html
	                if (adId.indexOf('adsense') === 0) {
	                    // Google Adsense advert (eg adsense, adsense_mpu)
	                    return bbcdotcom.adverts.adsenseRenderer.renderAd();
	                } else if (adId.indexOf('outbrain') === 0) {
	                    // Outbrain - note, TR_1 is injected in currencyProviders.js
	                    // Not Async, we need to call open to make them visible
	                    ad.open();
	                    return bbcdotcom.adverts.outbrainRenderer.renderAd(adId);
	                } else {
	                    // Standard advert
	                    return bbcdotcom.adverts.adAsyncRenderer.renderAd(ad, advertText);
	                }
	            }
	        }
	    }
	};

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Log = __webpack_require__(142)('adverts:slotInfinite');
	var TemplateFactory = __webpack_require__(231);
	
	/**
	 * Renders an an template and optionally writes it to the dom within 'element'
	 *
	 * @param {string} adId
	 * @param {number[]} groups
	 * @param {Element} [element=]
	 * @param {bool} [register=false]
	 */
	var SlotInfinite = function SlotInfinite(adId, groups, element, register) {
	    Log('Rendering Infinite Slot: ', {
	        adId: adId,
	        groups: groups,
	        element: element,
	        register: register
	    });
	
	    // Compose the group class name
	    var groupsClass = groups.join('_'),
	        renderedTemplate;
	
	    try {
	        // Render the template
	        renderedTemplate = TemplateFactory.getTemplate('adTemplates/infinite-slot').render({
	            "adId": adId,
	            "groups": groups,
	            "groupsClass": groupsClass,
	            "register": register
	        });
	    } catch (e) {
	        Log.error('Error rendering the template!');
	        return null;
	    }
	
	    if (!element) {
	        // Return the template if not rendering into DOM
	        Log('Returned rendered template for: ' + adId);
	        return renderedTemplate;
	    }
	
	    Log('Inserting rendered template into DOM element: ', {
	        element: element,
	        renderedTemplate: renderedTemplate
	    });
	    TemplateFactory.renderIntoElement(element, renderedTemplate);
	};
	
	module.exports = SlotInfinite;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Log = __webpack_require__(142)('templates:templateFactory');
	
	/**
	 * ***************************
	 * Add you template names here
	 * @type {string[]}
	 * ***************************
	 */
	var AVAILABLE_TEMPLATES = ['adTemplates/infinite-slot'];
	
	function TemplateFactory() {
	    this.templates = AVAILABLE_TEMPLATES.reduce(function (objectMap, value) {
	        objectMap[value] = __webpack_require__(232)("./" + value + '.mustache');
	        return objectMap;
	    }, {});
	}
	
	/**
	 * Get a template
	 *
	 * @method getTemplate
	 * @param {string} templateName - The Template to retrieve
	 * @throws {Error} - When template cannot be found.
	 */
	TemplateFactory.prototype.getTemplate = function (templateName) {
	    if (!this.templates.hasOwnProperty(templateName)) {
	        Log.error('Could not find template: ' + templateName);
	        throw new Error('Could not find template: ' + templateName);
	    }
	
	    return this.templates[templateName];
	};
	
	TemplateFactory.prototype.renderIntoElement = function (element, html) {
	    if (!element || !html) {
	        Log.error('Require parameter not supplied', {
	            element: element,
	            html: html
	        });
	        throw new Error('Required param not supplied');
	    }
	
	    element.innerHTML = html;
	    try {
	        nodeScriptReplace(element);
	    } catch (e) {
	        Log.error('Error rendering template into DOM: ', e);
	    }
	};
	
	// Add script elements to DOM
	function nodeScriptReplace(node) {
	    if (nodeScriptIs(node) === true) {
	        node.parentNode.replaceChild(nodeScriptClone(node), node);
	    } else {
	        var i = 0;
	        var children = node.childNodes;
	        while (i < children.length) {
	            nodeScriptReplace(children[i++]);
	        }
	    }
	
	    return node;
	}
	
	function nodeScriptIs(node) {
	    return node.tagName === 'SCRIPT';
	}
	
	function nodeScriptClone(node) {
	    var script = document.createElement("script");
	    script.text = node.innerHTML;
	    for (var i = node.attributes.length - 1; i >= 0; i--) {
	        script.setAttribute(node.attributes[i].name, node.attributes[i].value);
	    }
	    return script;
	}
	
	module.exports = new TemplateFactory();

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./adTemplates/infinite-slot.mustache": 233
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 232;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var H = __webpack_require__(234);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div id=\"bbccom_");t.b(t.v(t.f("adId",c,p,0)));t.b("_");t.b(t.v(t.f("groupsClass",c,p,0)));t.b("\" class=\"bbccom_slot\" aria-hidden=\"true\"><div id=\"bbccom_");t.b(t.v(t.f("adId",c,p,0)));t.b("\" class=\"bbccom_advert\">");if(t.s(t.f("register",c,p,1),c,p,0,142,353,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<script type=\"text/javascript\">/*<![CDATA[*/");t.b("\n" + i);t.b("            if (window.bbcdotcom && bbcdotcom.registerAd) {");t.b("\n" + i);t.b("                bbcdotcom.registerAd('");t.b(t.v(t.f("adId",c,p,0)));t.b("', [");t.b(t.v(t.f("groups",c,p,0)));t.b("]);");t.b("\n" + i);t.b("            }");t.b("\n" + i);t.b("            /*]]>*/</script>");});c.pop();}t.b("</div></div>");return t.fl(); },partials: {}, subs: {  }}, "<div id=\"bbccom_{{adId}}_{{groupsClass}}\" class=\"bbccom_slot\" aria-hidden=\"true\"><div id=\"bbccom_{{adId}}\" class=\"bbccom_advert\">{{#register}}<script type=\"text/javascript\">/*<![CDATA[*/\n            if (window.bbcdotcom && bbcdotcom.registerAd) {\n                bbcdotcom.registerAd('{{adId}}', [{{groups}}]);\n            }\n            /*]]>*/</script>{{/register}}</div></div>", H);return T; }();

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 *  Copyright 2011 Twitter, Inc.
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *  http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */
	
	var Hogan = {};
	
	(function (Hogan) {
	  Hogan.Template = function (codeObj, text, compiler, options) {
	    codeObj = codeObj || {};
	    this.r = codeObj.code || this.r;
	    this.c = compiler;
	    this.options = options || {};
	    this.text = text || '';
	    this.partials = codeObj.partials || {};
	    this.subs = codeObj.subs || {};
	    this.buf = '';
	  }
	
	  Hogan.Template.prototype = {
	    // render: replaced by generated code.
	    r: function (context, partials, indent) { return ''; },
	
	    // variable escaping
	    v: hoganEscape,
	
	    // triple stache
	    t: coerceToString,
	
	    render: function render(context, partials, indent) {
	      return this.ri([context], partials || {}, indent);
	    },
	
	    // render internal -- a hook for overrides that catches partials too
	    ri: function (context, partials, indent) {
	      return this.r(context, partials, indent);
	    },
	
	    // ensurePartial
	    ep: function(symbol, partials) {
	      var partial = this.partials[symbol];
	
	      // check to see that if we've instantiated this partial before
	      var template = partials[partial.name];
	      if (partial.instance && partial.base == template) {
	        return partial.instance;
	      }
	
	      if (typeof template == 'string') {
	        if (!this.c) {
	          throw new Error("No compiler available.");
	        }
	        template = this.c.compile(template, this.options);
	      }
	
	      if (!template) {
	        return null;
	      }
	
	      // We use this to check whether the partials dictionary has changed
	      this.partials[symbol].base = template;
	
	      if (partial.subs) {
	        // Make sure we consider parent template now
	        if (!partials.stackText) partials.stackText = {};
	        for (key in partial.subs) {
	          if (!partials.stackText[key]) {
	            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;
	          }
	        }
	        template = createSpecializedPartial(template, partial.subs, partial.partials,
	          this.stackSubs, this.stackPartials, partials.stackText);
	      }
	      this.partials[symbol].instance = template;
	
	      return template;
	    },
	
	    // tries to find a partial in the current scope and render it
	    rp: function(symbol, context, partials, indent) {
	      var partial = this.ep(symbol, partials);
	      if (!partial) {
	        return '';
	      }
	
	      return partial.ri(context, partials, indent);
	    },
	
	    // render a section
	    rs: function(context, partials, section) {
	      var tail = context[context.length - 1];
	
	      if (!isArray(tail)) {
	        section(context, partials, this);
	        return;
	      }
	
	      for (var i = 0; i < tail.length; i++) {
	        context.push(tail[i]);
	        section(context, partials, this);
	        context.pop();
	      }
	    },
	
	    // maybe start a section
	    s: function(val, ctx, partials, inverted, start, end, tags) {
	      var pass;
	
	      if (isArray(val) && val.length === 0) {
	        return false;
	      }
	
	      if (typeof val == 'function') {
	        val = this.ms(val, ctx, partials, inverted, start, end, tags);
	      }
	
	      pass = !!val;
	
	      if (!inverted && pass && ctx) {
	        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
	      }
	
	      return pass;
	    },
	
	    // find values with dotted names
	    d: function(key, ctx, partials, returnFound) {
	      var found,
	          names = key.split('.'),
	          val = this.f(names[0], ctx, partials, returnFound),
	          doModelGet = this.options.modelGet,
	          cx = null;
	
	      if (key === '.' && isArray(ctx[ctx.length - 2])) {
	        val = ctx[ctx.length - 1];
	      } else {
	        for (var i = 1; i < names.length; i++) {
	          found = findInScope(names[i], val, doModelGet);
	          if (found !== undefined) {
	            cx = val;
	            val = found;
	          } else {
	            val = '';
	          }
	        }
	      }
	
	      if (returnFound && !val) {
	        return false;
	      }
	
	      if (!returnFound && typeof val == 'function') {
	        ctx.push(cx);
	        val = this.mv(val, ctx, partials);
	        ctx.pop();
	      }
	
	      return val;
	    },
	
	    // find values with normal names
	    f: function(key, ctx, partials, returnFound) {
	      var val = false,
	          v = null,
	          found = false,
	          doModelGet = this.options.modelGet;
	
	      for (var i = ctx.length - 1; i >= 0; i--) {
	        v = ctx[i];
	        val = findInScope(key, v, doModelGet);
	        if (val !== undefined) {
	          found = true;
	          break;
	        }
	      }
	
	      if (!found) {
	        return (returnFound) ? false : "";
	      }
	
	      if (!returnFound && typeof val == 'function') {
	        val = this.mv(val, ctx, partials);
	      }
	
	      return val;
	    },
	
	    // higher order templates
	    ls: function(func, cx, partials, text, tags) {
	      var oldTags = this.options.delimiters;
	
	      this.options.delimiters = tags;
	      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));
	      this.options.delimiters = oldTags;
	
	      return false;
	    },
	
	    // compile text
	    ct: function(text, cx, partials) {
	      if (this.options.disableLambda) {
	        throw new Error('Lambda features disabled.');
	      }
	      return this.c.compile(text, this.options).render(cx, partials);
	    },
	
	    // template result buffering
	    b: function(s) { this.buf += s; },
	
	    fl: function() { var r = this.buf; this.buf = ''; return r; },
	
	    // method replace section
	    ms: function(func, ctx, partials, inverted, start, end, tags) {
	      var textSource,
	          cx = ctx[ctx.length - 1],
	          result = func.call(cx);
	
	      if (typeof result == 'function') {
	        if (inverted) {
	          return true;
	        } else {
	          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;
	          return this.ls(result, cx, partials, textSource.substring(start, end), tags);
	        }
	      }
	
	      return result;
	    },
	
	    // method replace variable
	    mv: function(func, ctx, partials) {
	      var cx = ctx[ctx.length - 1];
	      var result = func.call(cx);
	
	      if (typeof result == 'function') {
	        return this.ct(coerceToString(result.call(cx)), cx, partials);
	      }
	
	      return result;
	    },
	
	    sub: function(name, context, partials, indent) {
	      var f = this.subs[name];
	      if (f) {
	        this.activeSub = name;
	        f(context, partials, this, indent);
	        this.activeSub = false;
	      }
	    }
	
	  };
	
	  //Find a key in an object
	  function findInScope(key, scope, doModelGet) {
	    var val;
	
	    if (scope && typeof scope == 'object') {
	
	      if (scope[key] !== undefined) {
	        val = scope[key];
	
	      // try lookup with get for backbone or similar model data
	      } else if (doModelGet && scope.get && typeof scope.get == 'function') {
	        val = scope.get(key);
	      }
	    }
	
	    return val;
	  }
	
	  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {
	    function PartialTemplate() {};
	    PartialTemplate.prototype = instance;
	    function Substitutions() {};
	    Substitutions.prototype = instance.subs;
	    var key;
	    var partial = new PartialTemplate();
	    partial.subs = new Substitutions();
	    partial.subsText = {};  //hehe. substext.
	    partial.buf = '';
	
	    stackSubs = stackSubs || {};
	    partial.stackSubs = stackSubs;
	    partial.subsText = stackText;
	    for (key in subs) {
	      if (!stackSubs[key]) stackSubs[key] = subs[key];
	    }
	    for (key in stackSubs) {
	      partial.subs[key] = stackSubs[key];
	    }
	
	    stackPartials = stackPartials || {};
	    partial.stackPartials = stackPartials;
	    for (key in partials) {
	      if (!stackPartials[key]) stackPartials[key] = partials[key];
	    }
	    for (key in stackPartials) {
	      partial.partials[key] = stackPartials[key];
	    }
	
	    return partial;
	  }
	
	  var rAmp = /&/g,
	      rLt = /</g,
	      rGt = />/g,
	      rApos = /\'/g,
	      rQuot = /\"/g,
	      hChars = /[&<>\"\']/;
	
	  function coerceToString(val) {
	    return String((val === null || val === undefined) ? '' : val);
	  }
	
	  function hoganEscape(str) {
	    str = coerceToString(str);
	    return hChars.test(str) ?
	      str
	        .replace(rAmp, '&amp;')
	        .replace(rLt, '&lt;')
	        .replace(rGt, '&gt;')
	        .replace(rApos, '&#39;')
	        .replace(rQuot, '&quot;') :
	      str;
	  }
	
	  var isArray = Array.isArray || function(a) {
	    return Object.prototype.toString.call(a) === '[object Array]';
	  };
	
	})( true ? exports : Hogan);


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _isArray2 = __webpack_require__(170);
	
	var _isArray3 = _interopRequireDefault(_isArray2);
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _index = __webpack_require__(236);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _logger = __webpack_require__(142);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var log = (0, _logger2['default'])('analytics:metrics:metricsBuilder');
	
	var MetricsBuilder = function () {
	    function MetricsBuilder() {
	        _classCallCheck(this, MetricsBuilder);
	
	        this.metrics = new Map();
	    }
	
	    _createClass(MetricsBuilder, [{
	        key: 'with',
	        value: function _with() {
	            var metric = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
	
	            var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	            var _ref$mapName = _ref.mapName;
	            var mapName = _ref$mapName === undefined ? null : _ref$mapName;
	            var _ref$postProcess = _ref.postProcess;
	            var postProcess = _ref$postProcess === undefined ? null : _ref$postProcess;
	            var _ref$preRequisite = _ref.preRequisite;
	            var preRequisite = _ref$preRequisite === undefined ? null : _ref$preRequisite;
	            var _ref$args = _ref.args;
	            var args = _ref$args === undefined ? [] : _ref$args;
	            var _ref$value = _ref.value;
	            var value = _ref$value === undefined ? undefined : _ref$value;
	
	            if (metric) {
	                this.metrics.set(metric, { mapName: mapName, postProcess: postProcess, args: args, preRequisite: preRequisite, value: value });
	            }
	            return this;
	        }
	    }, {
	        key: 'getMetric',
	        value: function getMetric(metric) {
	            var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
	
	            var getMetricHelper = 'get' + (metric.charAt(0).toUpperCase() + metric.slice(1));
	            if (_index2['default'].hasOwnProperty(getMetricHelper)) {
	                return _index2['default'][getMetricHelper].apply(_index2['default'], _toConsumableArray(args));
	            }
	            throw new Error('No metric helper for ' + metric + ' (' + getMetricHelper + ')');
	        }
	    }, {
	        key: 'build',
	        value: function build() {
	            var output = {};
	
	            this.metrics.forEach(function (options, metric) {
	                var _this = this;
	
	                try {
	                    var _ret = function () {
	                        if (options.preRequisite) {
	                            if (!options.preRequisite()) {
	                                return {
	                                    v: void 0
	                                };
	                            }
	                        }
	
	                        var result = void 0;
	                        if (typeof options.value !== 'undefined') {
	                            result = options.value;
	                        } else {
	                            result = _this.getMetric(metric, options.args);
	                        }
	
	                        if (options.postProcess) {
	                            result = options.postProcess(result);
	                        }
	
	                        if (options.mapName) {
	                            var mapNames = options.mapName;
	                            if (!(0, _isArray3['default'])(mapNames)) {
	                                mapNames = [mapNames];
	                            }
	
	                            mapNames.forEach(function (mapName) {
	                                output[mapName] = result;
	                            });
	                        } else {
	                            output[metric] = result;
	                        }
	                    }();
	
	                    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	                } catch (err) {
	                    log.warn('Unable to build metric ' + metric, err);
	                }
	            }.bind(this));
	
	            return output;
	        }
	    }]);
	
	    return MetricsBuilder;
	}();
	
	exports['default'] = MetricsBuilder;
	module.exports = exports['default'];

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _utils = __webpack_require__(237);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var getAdsEnabled = _utils2['default'].getAdsEnabled;
	var getAnalyticsAccountID = _utils2['default'].getAnalyticsAccountID;
	var getAnalyticsSuite = _utils2['default'].getAnalyticsSuite;
	var getAppName = _utils2['default'].getAppName;
	var getAppType = _utils2['default'].getAppType;
	var getArticleID = _utils2['default'].getArticleID;
	var getArticleLength = _utils2['default'].getArticleLength;
	var getArticlePublishedDate = _utils2['default'].getArticlePublishedDate;
	var getArticleTitle = _utils2['default'].getArticleTitle;
	var getArticleUpdatedDate = _utils2['default'].getArticleUpdatedDate;
	var getCollection = _utils2['default'].getCollection;
	var getDaxCorp = _utils2['default'].getDaxCorp;
	var getDomainFromUrl = _utils2['default'].getDomainFromUrl;
	var getEdition = _utils2['default'].getEdition;
	var getIsApp = _utils2['default'].getIsApp;
	var getPageName = _utils2['default'].getPageName;
	var getPageType = _utils2['default'].getPageType;
	var getReferrer = _utils2['default'].getReferrer;
	var getSiteCatalystCookieValue = _utils2['default'].getSiteCatalystCookieValue;
	var getSiteChannel = _utils2['default'].getSiteChannel;
	var getSiteSection = _utils2['default'].getSiteSection;
	var getSiteSubsection1 = _utils2['default'].getSiteSubsection1;
	var getSiteSubsection2 = _utils2['default'].getSiteSubsection2;
	var getTestGroup = _utils2['default'].getTestGroup;
	var getTimestamp = _utils2['default'].getTimestamp;
	var getVersion = _utils2['default'].getVersion;
	exports['default'] = {
	    getAdsEnabled: getAdsEnabled,
	    getAnalyticsAccountID: getAnalyticsAccountID,
	    getAnalyticsSuite: getAnalyticsSuite,
	    getAppName: getAppName,
	    getAppType: getAppType,
	    getArticleID: getArticleID,
	    getArticleLength: getArticleLength,
	    getArticlePublishedDate: getArticlePublishedDate,
	    getArticleTitle: getArticleTitle,
	    getArticleUpdatedDate: getArticleUpdatedDate,
	    getCollection: getCollection,
	    getDaxCorp: getDaxCorp,
	    getDomainFromUrl: getDomainFromUrl,
	    getEdition: getEdition,
	    getIsApp: getIsApp,
	    getPageName: getPageName,
	    getPageType: getPageType,
	    getReferrer: getReferrer,
	    getSiteCatalystCookieValue: getSiteCatalystCookieValue,
	    getSiteChannel: getSiteChannel,
	    getSiteSection: getSiteSection,
	    getSiteSubsection1: getSiteSubsection1,
	    getSiteSubsection2: getSiteSubsection2,
	    getTestGroup: getTestGroup,
	    getTimestamp: getTimestamp,
	    getVersion: getVersion
	};
	module.exports = exports['default'];

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getAdsEnabled = __webpack_require__(238);
	
	var _getAdsEnabled2 = _interopRequireDefault(_getAdsEnabled);
	
	var _getAnalyticsAccountID = __webpack_require__(239);
	
	var _getAnalyticsAccountID2 = _interopRequireDefault(_getAnalyticsAccountID);
	
	var _getAnalyticsSuite = __webpack_require__(240);
	
	var _getAnalyticsSuite2 = _interopRequireDefault(_getAnalyticsSuite);
	
	var _getAppName = __webpack_require__(241);
	
	var _getAppName2 = _interopRequireDefault(_getAppName);
	
	var _getAppType = __webpack_require__(242);
	
	var _getAppType2 = _interopRequireDefault(_getAppType);
	
	var _getArticleID = __webpack_require__(243);
	
	var _getArticleID2 = _interopRequireDefault(_getArticleID);
	
	var _getArticleLength = __webpack_require__(244);
	
	var _getArticleLength2 = _interopRequireDefault(_getArticleLength);
	
	var _getArticlePublishedDate = __webpack_require__(245);
	
	var _getArticlePublishedDate2 = _interopRequireDefault(_getArticlePublishedDate);
	
	var _getArticleTitle = __webpack_require__(246);
	
	var _getArticleTitle2 = _interopRequireDefault(_getArticleTitle);
	
	var _getArticleUpdatedDate = __webpack_require__(248);
	
	var _getArticleUpdatedDate2 = _interopRequireDefault(_getArticleUpdatedDate);
	
	var _getCollection = __webpack_require__(249);
	
	var _getCollection2 = _interopRequireDefault(_getCollection);
	
	var _getDaxCorp = __webpack_require__(250);
	
	var _getDaxCorp2 = _interopRequireDefault(_getDaxCorp);
	
	var _getDomainFromUrl = __webpack_require__(251);
	
	var _getDomainFromUrl2 = _interopRequireDefault(_getDomainFromUrl);
	
	var _getEdition = __webpack_require__(252);
	
	var _getEdition2 = _interopRequireDefault(_getEdition);
	
	var _getIsApp = __webpack_require__(253);
	
	var _getIsApp2 = _interopRequireDefault(_getIsApp);
	
	var _getPageName = __webpack_require__(254);
	
	var _getPageName2 = _interopRequireDefault(_getPageName);
	
	var _getPageType = __webpack_require__(255);
	
	var _getPageType2 = _interopRequireDefault(_getPageType);
	
	var _getReferrer = __webpack_require__(256);
	
	var _getReferrer2 = _interopRequireDefault(_getReferrer);
	
	var _getSectionStrings = __webpack_require__(257);
	
	var _getSectionStrings2 = _interopRequireDefault(_getSectionStrings);
	
	var _getSiteCatalystCookieValue = __webpack_require__(258);
	
	var _getSiteCatalystCookieValue2 = _interopRequireDefault(_getSiteCatalystCookieValue);
	
	var _getSiteChannel = __webpack_require__(259);
	
	var _getSiteChannel2 = _interopRequireDefault(_getSiteChannel);
	
	var _getSiteSection = __webpack_require__(260);
	
	var _getSiteSection2 = _interopRequireDefault(_getSiteSection);
	
	var _getSiteSubsection = __webpack_require__(261);
	
	var _getSiteSubsection2 = _interopRequireDefault(_getSiteSubsection);
	
	var _getSiteSubsection3 = __webpack_require__(262);
	
	var _getSiteSubsection4 = _interopRequireDefault(_getSiteSubsection3);
	
	var _getSyndicatedVideoSource = __webpack_require__(263);
	
	var _getSyndicatedVideoSource2 = _interopRequireDefault(_getSyndicatedVideoSource);
	
	var _getTestGroup = __webpack_require__(264);
	
	var _getTestGroup2 = _interopRequireDefault(_getTestGroup);
	
	var _getTimestamp = __webpack_require__(265);
	
	var _getTimestamp2 = _interopRequireDefault(_getTimestamp);
	
	var _getVersion = __webpack_require__(266);
	
	var _getVersion2 = _interopRequireDefault(_getVersion);
	
	var _sanitiseValues = __webpack_require__(247);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports['default'] = {
	    getAdsEnabled: _getAdsEnabled2['default'],
	    getAnalyticsAccountID: _getAnalyticsAccountID2['default'],
	    getAnalyticsSuite: _getAnalyticsSuite2['default'],
	    getAppName: _getAppName2['default'],
	    getAppType: _getAppType2['default'],
	    getArticleID: _getArticleID2['default'],
	    getArticleLength: _getArticleLength2['default'],
	    getArticlePublishedDate: _getArticlePublishedDate2['default'],
	    getArticleTitle: _getArticleTitle2['default'],
	    getArticleUpdatedDate: _getArticleUpdatedDate2['default'],
	    getCollection: _getCollection2['default'],
	    getDaxCorp: _getDaxCorp2['default'],
	    getDomainFromUrl: _getDomainFromUrl2['default'],
	    getEdition: _getEdition2['default'],
	    getIsApp: _getIsApp2['default'],
	    getPageName: _getPageName2['default'],
	    getPageType: _getPageType2['default'],
	    getReferrer: _getReferrer2['default'],
	    getSectionStrings: _getSectionStrings2['default'],
	    getSiteCatalystCookieValue: _getSiteCatalystCookieValue2['default'],
	    getSiteChannel: _getSiteChannel2['default'],
	    getSiteSection: _getSiteSection2['default'],
	    getSiteSubsection1: _getSiteSubsection2['default'],
	    getSiteSubsection2: _getSiteSubsection4['default'],
	    getSyndicatedVideoSource: _getSyndicatedVideoSource2['default'],
	    getTestGroup: _getTestGroup2['default'],
	    getTimestamp: _getTimestamp2['default'],
	    getVersion: _getVersion2['default'],
	    sanitiseKeyValues: _sanitiseValues.sanitiseKeyValues,
	    sanitiseLabelValue: _sanitiseValues.sanitiseLabelValue,
	    sanitisePageName: _sanitiseValues.sanitisePageName
	};
	module.exports = exports['default'];

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAdsEnabled;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAdsEnabled() {
	    return _config2['default'].isAdsEnabled() ? 1 : 0;
	}
	module.exports = exports['default'];

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAnalyticsAccountID;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAnalyticsAccountID() {
	    return _config2['default'].getAnalyticsAcctId();
	}
	module.exports = exports['default'];

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAnalyticsSuite;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAnalyticsSuite() {
	    return _config2['default'].getAnalyticsSuite();
	}
	module.exports = exports['default'];

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAppName;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAppName() {
	    return _config2['default'].getAppName();
	}
	module.exports = exports['default'];

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAppType;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAppType() {
	    if (_config2['default'].isSportApp() || bbcdotcom.analytics.isScwHandlerUsed) {
	        return 'mobile-app';
	    } else if (typeof orb !== 'undefined' && typeof orb.fig === 'function' && orb.fig('mb') === 1 || _config2['default'].getWindowLocation().hostname.search(/m.*.bbc.co/) === 0) {
	        return 'mobile-web';
	    } else {
	        return 'web';
	    }
	}
	module.exports = exports['default'];

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticleID;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var NUL = 'na';
	
	function getArticleID(href) {
	    if (typeof href === 'undefined' || href === '') {
	        href = _config2['default'].getWindowLocation().href;
	    }
	    if (/.*[\-\/](\d{7,9})$/.test(href)) {
	        return RegExp.$1;
	    }
	    return NUL;
	}
	module.exports = exports['default'];

/***/ },
/* 244 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticleLength;
	function getArticleLength() {
	
	    /** Responsive News */
	    if (typeof window.config !== 'undefined' && typeof window.config.asset !== 'undefined' && typeof window.config.asset.length !== 'undefined' && window.config.asset.length !== null) {
	        // Responsive News
	        return window.config.asset.length;
	    }
	
	    /** OneSport */
	    var storyBody = document.getElementById('story-body');
	    if (typeof storyBody !== 'undefined' && storyBody !== null) {
	        return getElementTextLength(storyBody);
	    }
	
	    /** Old Sport */
	    var article = document.getElementsByClassName('article');
	    if (typeof article !== 'undefined' && article !== null && article.length === 1) {
	        var articleElement = article[0];
	        return getElementTextLength(articleElement);
	    }
	
	    /** Old Sport Map */
	    var empContent = document.getElementById('emp-content');
	    if (typeof empContent !== 'undefined' && empContent !== null) {
	        return getElementTextLength(empContent);
	    }
	
	    /** Old Weather */
	    var layoutA = document.getElementsByClassName('layout-block-a');
	    if (typeof layoutA !== 'undefined' && layoutA !== null && layoutA.length === 1) {
	        var layoutAElement = layoutA[0];
	        return getElementTextLength(layoutAElement);
	    }
	
	    return null;
	};
	
	function getElementTextLength(element) {
	
	    // Check the element
	    if (typeof element === 'undefined' || element === null) {
	        return null;
	    }
	
	    try {
	
	        if (typeof element.innerText !== 'undefined' && element.innerText !== null && typeof element.innerText.length !== 'undefined' && element.innerText.length !== null) {
	            // Use innerText as we need to take into consideration layout, discounting hidden elements etc
	            return element.innerText.length;
	        }
	
	        if (typeof element.textContent !== 'undefined' && element.textContent !== null && typeof element.textContent.length !== 'undefined' && element.textContent.length !== null) {
	            // innerText is not supported in Firefox, so use textContent
	            return element.textContent.length;
	        }
	    } catch (e) {
	        return null;
	    }
	
	    return null;
	};
	module.exports = exports['default'];

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticlePublishedDate;
	
	var _utils = __webpack_require__(141);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * @returns {*} Human-readable (eg "2011/12/12 11:56:10") OR second timestamp
	 */
	function getArticlePublishedDate(asTimestamp) {
	    var date = null,
	        sportDesktopDate = _utils2['default'].getMetaNameContent('DCTERMS.created'),
	        sportResponsiveDate = _utils2['default'].getMetaPropertyContent('rnews:datePublished');
	
	    if (window.config && window.config.asset && window.config.asset.first_created && window.config.asset.first_created.date) {
	        // Responsive News
	        // eg 2015-01-08 03:44:31
	        date = window.config.asset.first_created.date;
	    } else if (sportDesktopDate !== '') {
	        // Sport Desktop
	        // eg 2011/12/12T11:56:10+00:00
	        date = sportDesktopDate.replace('T', ' ').replace('+00:00', '');
	    } else if (sportResponsiveDate !== '') {
	        // Sport Responsive
	        // eg 2015/09/23 9:45:36
	        date = sportResponsiveDate;
	    }
	
	    if (date === null || date.length === 0) {
	        return null;
	    }
	
	    date = date.replace(/-/g, '/');
	
	    if (typeof asTimestamp !== 'undefined' && asTimestamp === true) {
	        try {
	            return Date.parse(date) / 1000;
	        } catch (e) {
	            return null;
	        }
	    }
	    return date;
	};
	module.exports = exports['default'];

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticleTitle;
	
	var _helper = __webpack_require__(215);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	var _sanitiseValues = __webpack_require__(247);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getArticleTitle() {
	    return (0, _sanitiseValues.sanitiseLabelValue)(_helper2['default'].getPageName()).replace(/[\s]/g, '_').replace(/_{2,}/g, '_');
	}
	module.exports = exports['default'];

/***/ },
/* 247 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.sanitiseLabelValue = sanitiseLabelValue;
	exports.sanitiseKeyValues = sanitiseKeyValues;
	exports.sanitisePageName = sanitisePageName;
	function sanitiseLabelValue(value) {
	    if (typeof value !== 'string') {
	        return value;
	    }
	    return value.toLowerCase().replace(/[&=\/<>]/g, '');
	}
	
	function sanitiseKeyValues(keyValues) {
	    var cleanKvs = {};
	    for (var key in keyValues) {
	        if (keyValues.hasOwnProperty(key)) {
	            if (keyValues[key] !== '' && keyValues[key] !== null && keyValues[key] !== 'na') {
	                // Do not include label (key-value) if empty.
	                // Ensure we do not send integers/numbers/floats but strings BBCCOM-6288
	                cleanKvs[key] = isNaN(keyValues[key]) ? keyValues[key] : String(keyValues[key]);
	            }
	        }
	    }
	    return cleanKvs;
	}
	
	function sanitisePageName(name) {
	    if (typeof name !== 'string') {
	        return name;
	    }
	    return name.toLowerCase().replace(/[\s]/g, '_').replace(/[&=\/<>+?]/g, '').replace(/_{2,}/g, '_');
	}

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticleUpdatedDate;
	
	var _utils = __webpack_require__(141);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var getSportResponsiveUpdatedTimestamp = function getSportResponsiveUpdatedTimestamp() {
	    var timeElement = document.querySelector('time[data-timestamp]');
	
	    if (typeof timeElement === 'undefined' || !timeElement || timeElement === null) {
	        return null;
	    }
	
	    var timestamp = timeElement.getAttribute('data-timestamp');
	
	    if (typeof timestamp === 'undefined' || !timestamp || timestamp === "") {
	        return null;
	    }
	
	    return timestamp;
	};
	
	function getArticleUpdatedDate() {
	    var asTimestamp = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	    var date = null,
	        sportDesktopDate = _utils2['default'].getMetaNameContent('DCTERMS.modified'),
	        sportResponsiveDate = getSportResponsiveUpdatedTimestamp();
	
	    if (typeof window.config !== 'undefined' && typeof window.config.asset !== 'undefined' && typeof window.config.asset.last_updated !== null && typeof window.config.asset.last_updated !== 'undefined' && typeof window.config.asset.last_updated.date !== 'undefined') {
	        // Responsive News
	        // eg 2015-01-08 03:44:31
	        date = window.config.asset.last_updated.date;
	    } else if (sportDesktopDate !== '') {
	        // Sport Desktop
	        // eg 2011/12/12T11:56:10+00:00
	        date = sportDesktopDate.replace('T', ' ').replace('+00:00', '');
	    } else if (sportResponsiveDate) {
	        return sportResponsiveDate; // Already a timestamp
	    }
	
	    if (date === null || date.length === 0) {
	        return null;
	    }
	
	    if (typeof asTimestamp !== 'undefined' && asTimestamp === true) {
	        return new Date(date.replace(/\//g, '-').replace(' ', 'T')).getTime() / 1000;
	    }
	    return date.replace(/-/g, '/');
	}
	module.exports = exports['default'];

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getCollection;
	
	var _keyValues = __webpack_require__(156);
	
	var _keyValues2 = _interopRequireDefault(_keyValues);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getCollection() {
	    return _keyValues2['default'].get('keyword') !== false ? _keyValues2['default'].get('keyword').toLowerCase() : '';
	}
	module.exports = exports['default'];

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getDaxCorp;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getDaxCorp() {
	    return _config2['default'].getDaxEnvironments().join('_');
	}
	module.exports = exports['default'];

/***/ },
/* 251 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = getDomain;
	function getDomain(uri) {
	    var re = /http(|s):\/\/([^\/]+)(.*)?/;
	    var match = re.exec(uri);
	    return "http" + match[1] + "://" + match[2];
	}
	module.exports = exports["default"];

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getEdition;
	
	var _helper = __webpack_require__(215);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getEdition() {
	    return _helper2['default'].getPageEdition().toLowerCase();
	}
	module.exports = exports['default'];

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getIsApp;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getIsApp() {
	    return _config2['default'].isSportApp() || bbcdotcom.analytics.isScwHandlerUsed ? 1 : 0;
	}
	module.exports = exports['default'];

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getPageName;
	
	var _helper = __webpack_require__(215);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	var _sanitiseValues = __webpack_require__(247);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getPageName() {
	    return (0, _sanitiseValues.sanitisePageName)(_helper2['default'].getPageNameComScore());
	}
	module.exports = exports['default'];

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getPageType;
	
	var _helper = __webpack_require__(215);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getPageType(uri) {
	    var siteCatalystPageType = _helper2['default'].getPageType(uri).toLowerCase();
	    var mappingTable = {
	        'index': 'idx|na',
	        'story': 'sty|na',
	        'story-video': 'sty|vid',
	        'live-event': 'liv|na',
	        'video': 'map|mps',
	        'video-sticky': 'vid|sti',
	        'video-embed': 'vid|emb'
	    };
	    return typeof mappingTable[siteCatalystPageType] !== 'undefined' ? mappingTable[siteCatalystPageType] : 'na|na';
	}
	module.exports = exports['default'];

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getReferrer;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getReferrer() {
	    return document.referrer !== _config2['default'].getReferrer() ? _config2['default'].getReferrer().substr(0, 255) : '';
	}
	module.exports = exports['default'];

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSectionStrings;
	
	var _helper = __webpack_require__(215);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getSectionStrings() {
	    return _helper2['default'].determineSections('.');
	}
	module.exports = exports['default'];

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSiteCatalystCookieValue;
	
	var _utils = __webpack_require__(141);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getSiteCatalystCookieValue() {
	    var siteCatalystCookieValue = _utils2['default'].getCookie('s_vi'); // Will be "undefined" when on "www.bbc.co.uk" because it's a ".com" cookie
	    return typeof siteCatalystCookieValue !== 'undefined' ? siteCatalystCookieValue : '';
	}
	module.exports = exports['default'];

/***/ },
/* 259 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = getSiteChannel;
	function getSiteChannel(sections) {
	    return sections[0];
	}
	module.exports = exports["default"];

/***/ },
/* 260 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSiteSection;
	function getSiteSection(sections) {
	    return sections[1] === sections[0] ? '' : sections[1]; // BBCCOM-6431
	}
	module.exports = exports['default'];

/***/ },
/* 261 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSiteSubsection1;
	function getSiteSubsection1(sections) {
	    return sections[2] === sections[1] ? '' : sections[2]; // BBCCOM-6431
	}
	module.exports = exports['default'];

/***/ },
/* 262 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSiteSubsection2;
	function getSiteSubsection2(sections) {
	    return sections[3] === sections[2] ? '' : sections[3]; // BBCCOM-6431
	}
	module.exports = exports['default'];

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = getSyndicatedVideoSource;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * Currently we only syndicate video to twitter so if the page is of type VIDEO-EMBED then we can assume
	 * we are embedded in twitter. We can look into changing this down the line as and when required.
	 *
	 * @returns {string}
	 */
	function getSyndicatedVideoSource() {
	  return _config2['default'].getType() === 'VIDEO-EMBED' ? 'twitter' : null;
	};
	module.exports = exports['default'];

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getTestGroup;
	
	var _utils = __webpack_require__(141);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getTestGroup() {
	    return _utils2['default'].getCookie('test_group') || 'undefined';
	}
	module.exports = exports['default'];

/***/ },
/* 265 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = getTimestamp;
	/**
	 * Create Timestamp - JavaScript timestamp in milliseconds
	 * eg 1424452599000
	 */
	function getTimestamp() {
	    if (!Date.now) {
	        // IE8 & below
	        return new Date().getTime();
	    }
	
	    return Date.now();
	}
	module.exports = exports["default"];

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getVersion;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getVersion() {
	    return _config2['default'].getVersion();
	}
	module.exports = exports['default'];

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getUserTrackingCookie;
	
	var _utils = __webpack_require__(141);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var OLD_USER_TRACKING_COOKIE = 'ckpf_uid';
	var USER_TRACKING_COOKIE = 'ckpf_sscid';
	
	function getUserTrackingCookie() {
	    var oldValue = _utils2['default'].getCookie(OLD_USER_TRACKING_COOKIE);
	    var newValue = _utils2['default'].getCookie(USER_TRACKING_COOKIE);
	
	    if (typeof newValue !== 'undefined' && newValue !== 0) {
	        return newValue;
	    } else if (typeof oldValue !== 'undefined' && oldValue.length !== 0) {
	        return oldValue;
	    }
	
	    return false;
	}
	module.exports = exports['default'];

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _comScoreHelpers = __webpack_require__(216);
	
	var _sanitiseValues = __webpack_require__(247);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var log = __webpack_require__(142)('analytics:comScore:streamSense');
	var config = __webpack_require__(148);
	
	var analyticsHelper = __webpack_require__(215);
	var utils = __webpack_require__(141);
	
	
	var UNKNOWN = '';
	
	var StreamSense = function () {
	    function StreamSense() {
	        _classCallCheck(this, StreamSense);
	
	        this.streamSense = null;
	        this.videoEvents = [];
	        this.videoPrerollWasPlayed = false;
	        this.playlistCount = 0;
	    }
	
	    /**
	     * Initialise the streamsense module
	     */
	
	
	    _createClass(StreamSense, [{
	        key: 'init',
	        value: function init() {
	            // Construct streamSense (/script/vendor/comscore/streamsense.js)
	            this.streamSense = new ns_.StreamSense({}, analyticsHelper.getAnalyticsUri());
	        }
	
	        /**
	         * This method is called from /av/emp/analytics.js and should only be executed once per video viewing.
	         * It is executed only once the video starts playing for the first time.
	         *
	         * Triggered when playlist is loaded and video starts to play (either 'ad' or 'programme').
	         *
	         * @param object data eg
	         *     adId: null
	         *     mediaId: false
	         *     mediaLength: 34.366
	         *     mediaName: "Fifa's Jerome Valcke"
	         *     mediaOffset: 34.112
	         *     mediaPlayerName: "smp-flash"
	         *     mediaType: "programme"
	         *     milestones: Array[0]
	         *     playType: "AP"
	         */
	
	    }, {
	        key: 'startPlaylist',
	        value: function startPlaylist(data) {
	            log('comscore startPlaylist');
	            this.isPlaylistStarted = true;
	
	            this.videoPrerollWasPlayed = false;
	            this.playlistCount++;
	
	            this._setPersistentLabels(data);
	            this._setPlaylistLabels(data);
	        }
	
	        /**
	         * Advert is requested
	         */
	
	    }, {
	        key: 'adRequest',
	        value: function adRequest(data) {
	            this._streamSenseNotify('custom', 0, { ns_st_ev: 'ad_request' });
	        }
	
	        /**
	         * Ad Manager Loaded
	         */
	
	    }, {
	        key: 'adManagerLoaded',
	        value: function adManagerLoaded(data) {
	            this._streamSenseNotify('custom', 0, { ns_st_ev: 'ad_loaded' });
	        }
	
	        /**
	         * Advert has started/begun/commenced
	         */
	
	    }, {
	        key: 'startAdvert',
	        value: function startAdvert(data) {
	            // Length is programme length, not advert length
	            data.mediaLength = undefined;
	            var keyValues = this._getClipKeyValues(data, 'advert'),
	                positionHead = 0; // pre-roll will always start at 0
	            this._streamSenseSetter('clip', keyValues);
	            this._streamSenseNotify('play', positionHead);
	            this.videoPrerollWasPlayed = true;
	        }
	
	        /**
	         * Advert has ended/finished/completed
	         */
	
	    }, {
	        key: 'endAdvert',
	        value: function endAdvert(data) {
	            // End advert clip because programme has started
	            var clip = this.streamSense.getClip(),
	                positionHead = typeof clip !== 'undefined' && typeof clip.getPlaybackTime === 'function' ? clip.getPlaybackTime() : 0;
	            clip.setLabel('ns_st_cl', String(positionHead)); // cannot run setClip() whilst in 'play' mode, instead use getClip().setLabel()
	            clip.setLabel('ns_st_el', String(positionHead)); // cannot run setClip() whilst in 'play' mode, instead use getClip().setLabel()
	            this._streamSenseNotify('end', positionHead / 1000); // seconds. Convert positionHead from milliseconds to seconds.
	        }
	
	        /**
	         * This method is called from /av/emp/analytics.js when the programme/content starts to play
	         * and is only triggered once startPlaylist() has been triggered.
	         *
	         * This is triggered once programme has started.
	         *
	         * @param object data eg
	         *     { adId:   12345, mediaId: false, mediaLength: 88, mediaName: "Story Name",
	         *       mediaOffset: 0, mediaPlayerName: "smp-flash", mediaType: "programme" }
	         */
	
	    }, {
	        key: 'startProgramme',
	        value: function startProgramme(data) {
	            var keyValues = this._getClipKeyValues(data, 'play');
	            this._streamSenseSetter('clip', keyValues);
	            this._streamSenseNotify('play', data.mediaOffset);
	        }
	
	        /**
	         * This method is called from /av/emp/analytics.js when programme/contents finishes.
	         *
	         * @param object data eg
	         *     { adId:   12345, mediaId: false, mediaLength: 88, mediaName: "Story Name",
	         *       mediaOffset: 0, mediaPlayerName: "smp-flash", mediaType: "programme" }
	         */
	
	    }, {
	        key: 'endProgramme',
	        value: function endProgramme(data) {
	            this._streamSenseNotify('end', parseInt(data.mediaOffset, 10) === 0 ? data.mediaLength : data.mediaOffset);
	        }
	
	        /**
	         * This method is called from /av/emp/analytics.js and should only be executed once per video viewing.
	         * It is executed only once the playlist has finished going through each item.
	         *
	         * Triggered when playlist is unloaded.
	         *
	         * @param object data eg
	         *     { adId:   12345, mediaId: false, mediaLength: 88, mediaName: "Story Name",
	          *       mediaOffset: 0, mediaPlayerName: "smp-flash", mediaType: "programme" }
	         */
	
	    }, {
	        key: 'endPlaylist',
	        value: function endPlaylist(data) {}
	        // Not needed yet
	
	
	        /**
	         * Pause started (pause button pressed)
	         */
	
	    }, {
	        key: 'startPause',
	        value: function startPause(data) {
	            this._streamSenseNotify('pause', data.mediaOffset);
	        }
	
	        /**
	         * Pause finished (play button pressed)
	         */
	
	    }, {
	        key: 'endPause',
	        value: function endPause(data) {
	            this._streamSenseNotify('play', data.mediaOffset);
	        }
	
	        /**
	         * Started seeking/scrubbing
	         */
	
	    }, {
	        key: 'startSeek',
	        value: function startSeek(data) {
	            this._streamSenseNotify('seek', data.mediaOffset);
	        }
	
	        /**
	         * Finished seeking/scrubbing
	         */
	
	    }, {
	        key: 'endSeek',
	        value: function endSeek(data) {
	            this._streamSenseNotify('play', data.mediaOffset);
	        }
	    }, {
	        key: 'isPlaylistStarted',
	        value: function isPlaylistStarted() {
	            return this.isPlaylistStarted;
	        }
	
	        /**
	         * =================================================================================================================
	         * PRIVATE METHODS
	         * =================================================================================================================
	         */
	
	        /**
	         * Sets the persistent labels on StreamSense
	         * @param {object} data
	         * @private
	         */
	
	    }, {
	        key: '_setPersistentLabels',
	        value: function _setPersistentLabels(data) {
	            // The following labels are intended to be set as persistent labels because they capture detail about the playback
	            // environment (the player) which are not metadata of the media that is being played.
	
	            var c1 = bbcdotcom.utils.isString(data.mediaPlayerName) && data.mediaPlayerName.includes('flash') ? '19' : '2';
	
	            var keyValues = (0, _comScoreHelpers.getCoreKeyValues)({
	                c1: c1,
	                c2: config.getAnalyticsAcctId(),
	                c3: '*null', // No logical value but still needs to be set @BBCCOM-7746
	                c4: '*null', // No logical value but still needs to be set @BBCCOM-7746
	                c5: '*null', // No logical value but still needs to be set @BBCCOM-7746
	                b_av_action: this._getAVAction(data.videoPlaysAutomatically),
	                ns_st_br: UNKNOWN, // Playback Bit Rate @todo require additional info from player
	                ns_st_cs: UNKNOWN, // Video Dimensions @todo require additional info from player
	                ns_st_it: 'c', // ??
	                ns_st_mp: data.mediaPlayerName || UNKNOWN, // Media Player Name
	                ns_st_mv: UNKNOWN, // Media Player Version
	                ns_st_vo: UNKNOWN, // Player Volume Level @todo require additional info from player
	                ns_st_ws: 'norm', // Player Window State @todo when full screen, change to "full"
	                ns_st_ep: '*null', // No logical value but still needs to be set @BBCCOM-7746
	                ns_st_sn: '*null' // No logical value but still needs to be set @BBCCOM-7746
	            });
	            keyValues = (0, _comScoreHelpers.appendPageCoreKeyValues)(keyValues);
	            this._streamSenseSetter('labels', keyValues);
	        }
	
	        /**
	         * Set the playlist-level lavels on StreamSense
	         * @param {object} data
	         * @private
	         */
	
	    }, {
	        key: '_setPlaylistLabels',
	        value: function _setPlaylistLabels(data) {
	            var playlistKeyValues = {
	                b_av_ad: config.isAdsEnabled() ? 1 : 0,
	                b_av_format: analyticsHelper.getAvFormatFromKind(data.kind),
	                b_av_plist: 'multi',
	                b_av_method: 'stream',
	                b_av_source: 'bbc',
	                c2: bbcdotcom.config.getAnalyticsAcctId(),
	                ns_st_pl: typeof data.mediaName !== 'undefined' ? (0, _sanitiseValues.sanitisePageName)(data.mediaName) : UNKNOWN
	            };
	            this._streamSenseSetter('playlist', playlistKeyValues);
	        }
	
	        /**
	         * Return the actions that initiated video play:
	         * cpfm : Continuous Play, first video, user initiated
	         * cpf  : Continuous Play, first video, auto started
	         * cp   : Continuous Play, not first video
	         * ap   : Not Continuous Play, auto started
	         * mp   : Not Continuous Play, user initiated
	         *
	         * @param {bool} videoPlaysAutomatically - Whether the video plays automatically.
	         * @returns {string} cp | cpf | cpfm | ap | mp
	         * @private
	         */
	
	    }, {
	        key: '_getAVAction',
	        value: function _getAVAction(videoPlaysAutomatically) {
	            var av_action;
	            if (config.isContinuousPlayPage()) {
	                if (this.playlistCount === 1) {
	                    av_action = videoPlaysAutomatically ? 'cpf' : 'cpfm';
	                } else {
	                    av_action = 'cp';
	                }
	            } else {
	                av_action = videoPlaysAutomatically ? 'ap' : 'mp';
	            }
	
	            return av_action;
	        }
	
	        /**
	         * Request:
	         * streamSense.notify('play', {}, bu.secondsToMilliSeconds(data.mediaOffset));
	         */
	
	    }, {
	        key: '_streamSenseNotify',
	        value: function _streamSenseNotify(event, headPositionSeconds, eventProps) {
	            if (!config.isComScoreEnabled()) {
	                log('bbcdotcom.analytics did not do tracking because isComScoreEnabled=false');
	                return;
	            } else if (!this.streamSense) {
	                log.error('bbcdotcom.analytics did not do tracking because streamSense module is not available');
	                return;
	            }
	
	            eventProps = Object.assign({}, eventProps);
	
	            if (event === 'seek') {
	                // Seek event is actually a "pause" event with the "ns_st_ui=seek" property
	                event = 'pause';
	                eventProps.ns_st_ui = 'seek';
	                log('comScore streamSenseNotify "seek"');
	            }
	
	            if (typeof ns_.StreamSense.PlayerEvents[event.toUpperCase()] === 'undefined') {
	                log.warn('Invalid streamSense.notify() event "' + event + '"');
	            }
	
	            var nsEvent = ns_.StreamSense.PlayerEvents[event.toUpperCase()];
	            this.streamSense.notify(nsEvent, eventProps, utils.secondsToMilliSeconds(headPositionSeconds));
	            this.videoEvents.push({
	                type: 'notify',
	                event: event,
	                props: eventProps,
	                nsEvent: nsEvent,
	                headPositionSeconds: headPositionSeconds
	            });
	        }
	    }, {
	        key: '_streamSenseSetter',
	        value: function _streamSenseSetter(method, keyValues) {
	            if (!config.isComScoreEnabled()) {
	                log('bbcdotcom.analytics did not do tracking because isComScoreEnabled=false');
	                return;
	            } else if (!this.streamSense) {
	                log.error('bbcdotcom.analytics did not do tracking because streamSense module is not available');
	                return;
	            }
	            keyValues = (0, _sanitiseValues.sanitiseKeyValues)(keyValues);
	            log('comScore streamSenseSetter method "' + method + '" keyValues: ', keyValues);
	
	            switch (method) {
	                case 'labels':
	                    this.streamSense.setLabels(keyValues);
	                    break;
	                case 'playlist':
	                    this.streamSense.setPlaylist(keyValues);
	                    break;
	                case 'clip':
	                    this.streamSense.setClip(keyValues);
	                    break;
	                default:
	                    log.warn('Unknown method "' + method + '" for streamSenseSetter()');
	                    break;
	            }
	
	            this.videoEvents.push({
	                type: 'set',
	                method: method,
	                keyValues: keyValues
	            });
	        }
	    }, {
	        key: '_getClipKeyValues',
	        value: function _getClipKeyValues(data, playerEventType) {
	            if (!config.isComScoreEnabled()) {
	                log('bbcdotcom.analytics did not do tracking because isComScoreEnabled=false');
	                return;
	            } else if (!this.streamSense) {
	                log.error('bbcdotcom.analytics did not do tracking because streamSense module is not available');
	                return;
	            }
	
	            var mediaLength = typeof data.mediaLength !== 'undefined' ? utils.secondsToMilliSeconds(data.mediaLength) : 0;
	            var mediaName = '';
	            var adId = typeof data.adId !== 'undefined' ? data.adId : '';
	
	            if (mediaLength === 0 || isNaN(mediaLength)) {
	                // Remove media-length labels from request when zero
	                mediaLength = '';
	            }
	
	            if (playerEventType === 'advert') {
	                mediaName = 'pre-roll|' + adId;
	            } else if (data.mediaName) {
	                mediaName = (0, _sanitiseValues.sanitisePageName)(data.mediaName);
	            }
	
	            var keyValues = {
	                'b_av_adid': adId,
	                'b_av_date': UNKNOWN, // @todo require additional info from player
	                'ns_st_ad': playerEventType === 'advert' ? 'pre-roll' : '', // Advertisement Flag
	                'ns_st_adid': adId, // Ad ID - Not in ComScore Docs?
	                'ns_st_ci': mediaName, // Content ID
	                'ns_st_cl': mediaLength, // Clip Length
	                'ns_st_cn': this.videoPrerollWasPlayed ? 2 : 1, // Clip Number
	                'ns_st_ct': playerEventType === 'advert' ? 'va11' : data.isLive ? 'vc13' : 'vc11', // Classification Type
	                'ns_st_el': mediaLength, // Episode Length
	                'ns_st_li': playerEventType !== 'advert' && data.isLive ? 1 : '', // Live Flag
	                'ns_st_pn': 1, // Part Number
	                'ns_st_pr': mediaName, // Program Title
	                'ns_st_pu': 'bbc', // Publisher Brand Name
	                'ns_st_tp': 1, // Total Parts
	                'ns_st_ty': playerEventType === 'advert' ? 'ad' : data.isLive ? 'live' : 'vod' // Stream Type
	            };
	
	            return keyValues;
	        }
	    }]);
	
	    return StreamSense;
	}();
	
	exports['default'] = new StreamSense();
	module.exports = exports['default'];

/***/ },
/* 269 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.setOverride = setOverride;
	exports.getOverrides = getOverrides;
	var overrides = new Map();
	
	function setOverride(key, value) {
	    overrides.set(key, value);
	}
	
	function getOverrides() {
	    var output = {};
	    overrides.forEach(function (value, key) {
	        output[key] = value;
	    });
	
	    return output;
	}

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _getUserTrackingCookie = __webpack_require__(267);
	
	var _getUserTrackingCookie2 = _interopRequireDefault(_getUserTrackingCookie);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * @constructor
	 */
	function SSCHelper() {
	    var analyticsConfig = _config2['default'].getAnalyticsConfig();
	
	    this.sscHost = {
	        http: analyticsConfig.SSC.HTTP,
	        https: analyticsConfig.SSC.HTTPS
	    };
	
	    this.comScoreHost = {
	        http: analyticsConfig.COMSCORE.HTTP,
	        https: analyticsConfig.COMSCORE.HTTPS
	    };
	}
	
	SSCHelper.prototype.getAnalyticsLocation = function () {
	    if (this.hasUserTrackingCookie()) {
	        return this.getComScoreBaseUrl();
	    } else {
	        return this.getSscBaseUrl();
	    }
	};
	
	SSCHelper.prototype.isSecure = function () {
	    return _config2['default'].getWindowLocation().protocol === 'https:';
	};
	
	SSCHelper.prototype.hasUserTrackingCookie = function () {
	    return (0, _getUserTrackingCookie2['default'])() !== false;
	};
	
	SSCHelper.prototype.getComScoreBaseUrl = function () {
	    if (this.isSecure()) {
	        return this.comScoreHost.https;
	    } else {
	        return this.comScoreHost.http;
	    }
	};
	
	SSCHelper.prototype.getSscBaseUrl = function () {
	    if (this.isSecure()) {
	        return this.sscHost.https;
	    } else {
	        return this.sscHost.http;
	    }
	};
	
	module.exports = new SSCHelper();

/***/ },
/* 271 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * @module stats
	 *
	 * Listens to events raised by bbcdotcom and maintains an immutable bbcdotcom.stats.data object
	 * with useful information on for tracking.
	 */
	
	/**
	 * This is the main stats module object. This is what is returned or exported by this module.
	 * The init function and data property are both exposed publicly although the data property
	 * is frozen so cannot be directly manipulated.
	 *
	 * @type {{data: {}, init: Function}}
	 */
	var stats = {
	    data: {}
	};
	
	/**
	 * Initial values which are exposed on the bbcdotcom.stats.data property
	 *
	 * @type {{adsRequested: Array, adsRendered: Array}}
	 */
	var initialData = {
	    adsRequested: [],
	    adsRendered: [],
	    adsEmpty: [],
	    adsSlots: [],
	    adsShut: []
	};
	
	/**
	 * Map of handlers which is updated every time bind() is called. We keep a reference to these so we
	 * can clean up after ourselves and unbind all of our listeners
	 *
	 * @type {{}}
	 */
	var handlers = {};
	
	/**
	 * This function takes a map of event names to array of handlers and unbinds them all.
	 *
	 * @param eventHandlers
	 */
	function unbind(eventHandlers) {
	    Object.keys(eventHandlers).forEach(function (event) {
	        eventHandlers[event].forEach(function (handler) {
	            bbcdotcom.pubsub.off(event, handler);
	        });
	    });
	}
	
	/**
	 * This function takes an event name or array of event names and a reducer function. It sets up a binding to
	 * the event(s) given and calls the reducer function for each event passing in the current bbcdotcom.stats.data
	 * object and the arguments given then the event was triggered.
	 *
	 * Each bound event/reducer combo is stored into the handlers map and then unbound if init is called again.
	 *
	 * @param events
	 * @param reducer
	 */
	function bind(events, reducer) {
	    var normalisedEvents = Array.isArray(events) ? events : [events];
	
	    normalisedEvents.forEach(function (event) {
	        var handler = function handler() {
	            var next = Object.freeze(reducer.apply(null, [stats.data].concat(Array.prototype.slice.call(arguments))));
	            stats.data = next;
	        };
	
	        bbcdotcom.pubsub.on(event, handler);
	        handlers[event] = (handlers[event] || []).concat(handler);
	    });
	}
	
	/**
	 * Initialise the stats module and (re)bind the event listeners. When called this method will restore
	 * bbcdotcom.stats.data to it's initialData, unbind any bound event listeners and then bind all
	 * of the appropriate event listeners.
	 *
	 * The handler functions which are set up using bind() take two (or more)
	 * arguments, the current data object, and any arguments passed in by the event trigger. These functions
	 * should return a new data object based on the current data state and the event arguments. They should
	 * not modify the data object, but instead return a new modified object.
	 */
	stats.init = function init() {
	
	    stats.data = Object.freeze(initialData);
	    unbind(handlers);
	
	    bind('bbcdotcom:init:complete', function (data, init) {
	        return Object.assign({}, data, init.stats, {
	            implementation: init.stats.isAsync ? 'gpt-async' : 'gpt'
	        });
	    });
	
	    bind('ads:requested', function (data, slots) {
	        return Object.assign({}, data, {
	            adsRequested: slots
	        });
	    });
	
	    bind('ad:render:complete', function (data, adId, isEmpty) {
	        if (data.adsRendered.indexOf(adId) >= 0) {
	            return data;
	        }
	
	        return Object.assign({}, data, {
	            adsRendered: data.adsRendered.concat(adId),
	            adsEmpty: isEmpty ? data.adsEmpty.concat(adId) : data.adsEmpty
	        });
	    });
	
	    bind('ad:render', function (data, adId) {
	        return Object.assign({}, data, {
	            adsSlots: data.adsSlots.concat(adId)
	        });
	    });
	
	    bind('ad:render:close', function (data, adId) {
	        return Object.assign({}, data, {
	            adsShut: data.adsShut.concat(adId)
	        });
	    });
	};
	
	module.exports = stats;

/***/ },
/* 272 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function addLoadEvent(func) {
	    var windowOnload = window.onload;
	    if (typeof window.onload !== 'function') {
	        window.onload = func;
	    } else {
	        window.onload = function () {
	            if (windowOnload) {
	                windowOnload();
	            }
	            func();
	        };
	    }
	};

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var config = __webpack_require__(148);
	var adRegister = __webpack_require__(160);
	var outbrainRenderer = __webpack_require__(227);
	
	var loaded = [];
	var isNielsenLoadedInterval;
	
	var loadNielsenAu = function loadNielsenAu() {
	    if (typeof nol_t !== 'undefined') {
	        nol_t({ cid: "au-bbc", content: "0", server: "secure-au" }).record().post();
	        clearInterval(isNielsenLoadedInterval);
	    }
	};
	
	var loadNielsenNz = function loadNielsenNz() {
	    if (typeof nol_t !== 'undefined') {
	        nol_t({ cid: "nz-bbc", content: "0", server: "secure-nz" }).record().post();
	        clearInterval(isNielsenLoadedInterval);
	    }
	};
	
	var loadScript = function loadScript(src) {
	    var script, body;
	    /* Load the library, asynchronously. */
	    script = document.createElement('script');
	    script.async = true;
	    script.type = 'text/javascript';
	    script.src = src;
	    body = document.getElementsByTagName('body')[0];
	    body.appendChild(script);
	};
	
	module.exports = {
	    write: function write() {
	
	        if (config.isActive('analytics')) {
	
	            /* Nielsen (AU) SiteCensus V6.0 */
	            if (config.isActive('nielsen-au')) {
	                /* COPYRIGHT 2009 Nielsen Online */
	                loadScript(('https:' === document.location.protocol ? 'https:' : 'http:') + '//secure-au.imrworldwide.com/v60.js');
	                loaded.push('nielsen_au');
	            }
	
	            /* Nielsen (NZ) SiteCensus V6.0 */
	            if (config.isActive('nielsen-nz')) {
	                /* COPYRIGHT 2009 Nielsen Online */
	                loadScript(('https:' === document.location.protocol ? 'https:' : 'http:') + '//secure-nz.imrworldwide.com/v60.js');
	                loaded.push('nielsen_nz');
	            }
	
	            /* Nielsen (US) SiteCensus V6.0 */
	            if (config.isActive('nielsen-us')) {
	                /* COPYRIGHT 2010 Nielsen Online */
	                (function () {
	                    var d = new Image(1, 1);
	                    d.onerror = d.onload = function () {
	                        d.onerror = d.onload = null;
	                    };
	                    d.src = [('https:' === document.location.protocol ? 'https:' : 'http:') + "//secure-us.imrworldwide.com/cgi-bin/m?ci=us-804789h&amp;cg=0&amp;cc=1&amp;si=", encodeURI(window.location.href), "&amp;rp=", encodeURI(document.referrer), "&amp;ts=compact&amp;rnd=", new Date().getTime()].join('');
	                })();
	                loaded.push('nielsen_us');
	            }
	
	            /* Effective Measure */
	            (function () {
	                var em = document.createElement('script');
	                em.type = 'text/javascript';
	                em.async = true;
	                em.src = ('https:' === document.location.protocol ? 'https://me-ssl' : 'http://me-cdn') + '.effectivemeasure.net/em.js';
	                var s = document.getElementsByTagName('head')[0];
	                s.appendChild(em);
	            })();
	            loaded.push('effective_measure');
	
	            /* Outbrain Tracking */
	            if (typeof adRegister.getAd('outbrain_tr_1') !== 'undefined') {
	                outbrainRenderer.renderAd('outbrain_tr_1');
	                loaded.push('outbrain');
	            }
	        }
	    },
	    postWrite: function postWrite() {
	        if (config.isActive('analytics')) {
	
	            /* Nielsen (AU) SiteCensus V6.0 */
	            if (config.isActive('nielsen-au')) {
	                isNielsenLoadedInterval = setInterval(loadNielsenAu, 500);
	                loaded.push('nielsen_au-postWrite');
	            }
	
	            /* Nielsen (NZ) SiteCensus V6.0 */
	            if (config.isActive('nielsen-nz')) {
	                isNielsenLoadedInterval = setInterval(loadNielsenNz, 500);
	                loaded.push('nielsen_nz-postWrite');
	            }
	        }
	    },
	    /**
	     * For testing only.
	     */
	    getLoaded: function getLoaded() {
	        return loaded;
	    },
	    r: function r() {
	        loaded = [];
	    }
	};

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _utils = __webpack_require__(141);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _locale = __webpack_require__(151);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	var _sections = __webpack_require__(150);
	
	var _sections2 = _interopRequireDefault(_sections);
	
	var _predicate = __webpack_require__(155);
	
	var _predicate2 = _interopRequireDefault(_predicate);
	
	var _slotAsync2 = __webpack_require__(229);
	
	var _slotAsync3 = _interopRequireDefault(_slotAsync2);
	
	var _slotInfinite2 = __webpack_require__(230);
	
	var _slotInfinite3 = _interopRequireDefault(_slotInfinite2);
	
	var _layout = __webpack_require__(158);
	
	var _layout2 = _interopRequireDefault(_layout);
	
	var _slot2 = __webpack_require__(228);
	
	var _slot3 = _interopRequireDefault(_slot2);
	
	var _adRegister = __webpack_require__(160);
	
	var _adRegister2 = _interopRequireDefault(_adRegister);
	
	var _adUnit = __webpack_require__(162);
	
	var _adUnit2 = _interopRequireDefault(_adUnit);
	
	var _keyValues = __webpack_require__(156);
	
	var _keyValues2 = _interopRequireDefault(_keyValues);
	
	var _breakpoints = __webpack_require__(226);
	
	var _breakpoints2 = _interopRequireDefault(_breakpoints);
	
	var _dfppRequest = __webpack_require__(157);
	
	var _dfppRequest2 = _interopRequireDefault(_dfppRequest);
	
	var _featureSwitch = __webpack_require__(275);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/*
	 * This maps a simpler API and checks the needed objects exits
	 */
	var ad;
	
	var analytics = __webpack_require__(165);
	
	var api = {
	    slot: function slot(adId, groups, preload, advertText, stubCurrentScriptTag) {
	        if (adId && groups) {
	            return (0, _slot3['default'])(adId, groups, preload, advertText, stubCurrentScriptTag);
	        }
	        return false;
	    },
	
	    /** @deprecated Use slotAsync */
	    asyncSlot: _slotAsync3['default'],
	    slotAsync: function slotAsync(adId, groups, preload, advertText) {
	        if (adId && groups) {
	            return (0, _slotAsync3['default'])(adId, groups, advertText);
	        }
	        return false;
	    },
	
	    /**
	     * Renders an an template and optionally writes it to the dom within 'element'
	     *
	     * @param {string} adId - Ad Slot eg 'mpu', 'native'
	     * @param {number[]} groups - Groups that the ad should display on
	     * @param {Element} [element=null] - DOM Element to render template inside
	     * @param {bool} [register=false] - Include JS that registers ad with bbcdotcom module (Display Ad)
	     */
	    slotInfinite: function slotInfinite(adId, groups, element, register) {
	        return (0, _slotInfinite3['default'])(adId, groups, element, register);
	    },
	
	    getCurrentGroupId: function getCurrentGroupId() {
	        return _layout2['default'].getCurrentGroupId();
	    },
	
	    receiveMessage: function receiveMessage(event) {
	        // First validate the origin
	        var re = /(www|m)\.{0,1}(test|int|stage){0,1}\.bbc\.com$/;
	        if (re.exec(event.origin) === null && event.origin !== "http://pal.sandbox.dev.bbc.com" && event.origin !== "http://m.sandbox.dev.bbc.com") {
	            // Not from a valid origin - do noting
	            return;
	        }
	
	        // Then check that the data is valid JSON
	        var data;
	        try {
	            data = JSON.parse(event.data);
	        } catch (e) {
	            // Not valid JSON - do nothing
	            return;
	        }
	
	        if (typeof data.slot !== 'undefined') {
	            // Close the slot & post back success
	            _adRegister2['default'].getAd(data.slot).close();
	            event.source.postMessage(JSON.stringify({ success: true }), '*');
	        }
	    },
	
	    registerSlot: function registerSlot(id, groups) {
	        // TODO - Add ability to register slot when ad has not been pre loaded
	        var groupsString = groups.join('_'),
	            ad = _adRegister2['default'].registerAd(id);
	        if (ad.isPreloaded() && id && groups) {
	            _layout2['default'].moveAd('bbccom_' + id + '_' + groupsString + '_preload', 'bbccom_' + id + '_' + groupsString);
	            _adRegister2['default'].getAd(id).show();
	        }
	    },
	
	    reset: function reset() {
	        return _layout2['default'].reset();
	    },
	
	    show: function show() {
	        ad = _adRegister2['default'].getCurrentAd();
	        if (typeof ad !== 'undefined') {
	            ad.show();
	        }
	    },
	
	    isActive: function isActive(key) {
	        return _config2['default'].isActive(key);
	    },
	
	    setAdKeyValue: function setAdKeyValue(key, value) {
	        _keyValues2['default'].set(key, value);
	    },
	
	    setAdUnit: function setAdUnit(unit) {
	        _adUnit2['default'].setAdUnit(unit);
	    },
	
	    setLocale: function setLocale(field, text) {
	        _locale2['default'].set(field, text);
	    },
	
	    ad: function ad(adId) {
	        return _adRegister2['default'].getAd(adId);
	    },
	
	    setGroupStartWidth: function setGroupStartWidth(group, width) {
	        return _breakpoints2['default'].setGroupStart(group, width);
	    },
	
	    /**
	     * Config passed from server-side then config from client-side is passed into this method.
	     *
	     * @param conf array|object Configuration items
	     */
	    setConfig: _config2['default'].rehydrate.bind(_config2['default']),
	
	    /**
	     * Register ads is used in asynchronous mode to ad additional ads after page load
	     * This differs to refreshing a slot with a new ad
	     */
	    registerAd: function registerAd(adId, groups) {
	        _dfppRequest2['default'].registerAd(adId, groups);
	    },
	
	    getFeatures: _featureSwitch.getFeatures,
	    getFeature: _featureSwitch.getFeature,
	
	    /**
	     * Refresh ads in synchronous loaded pages
	     * There is an async version of refreshing ads in dfppRequest.js
	     * TODO - Remove once using async version of GPT
	     */
	    refreshAd: function refreshAd(adId, size, advertText) {
	
	        var i,
	            adString,
	            adIdPrefix = 'bbccom_',
	            keyValueString = '',
	            keyValues = keyValues.getAll(),
	            ad = _adRegister2['default'].getAd(adId),
	            adSlot = document.getElementById(adIdPrefix + adId),
	            aTag = document.createElement('a'),
	            iFrame = document.createElement('iframe'),
	            adInfo = ad.getAdInfoUrl(),
	            adText = ad.getAdText();
	
	        for (i in keyValues) {
	            if (keyValues.hasOwnProperty(i)) {
	                keyValueString += ';' + i + '=' + keyValues[i];
	            }
	        }
	
	        adString = 'http://ad.doubleclick.net' + _adUnit2['default'].get().replace('/4817', '/N4817/adi') + ';slot=' + adId + ';sz=' + size + keyValueString + ';ord=' + Math.random().toString().slice(2, 16) + ';tile=1' + ';iframe=yes?';
	
	        iFrame.src = adString;
	        iFrame.width = size.split('x')[0];
	        iFrame.height = size.split('x')[1];
	        iFrame.scrolling = 'no';
	        iFrame.style.border = 'none';
	        iFrame.style.overflow = 'hidden';
	
	        aTag.innerHTML = adText;
	        aTag.href = adInfo;
	        aTag.className = 'bbccom_text';
	
	        adSlot.innerHTML = '';
	        adSlot.style.width = size.split('x')[0] + 'px';
	        adSlot.className = adSlot.className.replace('bbccom_display_none', '');
	        adSlot.appendChild(aTag);
	        adSlot.appendChild(iFrame);
	
	        _adRegister2['default'].getAd(adId).open();
	    },
	
	    /**
	     * Analytics tracking by third-party apps (eg Video Experience)
	     */
	    trackEvent: function trackEvent() {
	        // NoOp
	    },
	
	    reInit: function reInit(params) {
	
	        var windowDocument = {
	            title: params.headline,
	            referrer: params.referrer || ''
	        },
	            url = params.url || '',
	            predicate = new _predicate2['default']();
	
	        // TODO - Should new these up instead of having to reset them
	        _sections2['default'].r();
	        _keyValues2['default'].r();
	
	        api.setConfig(params);
	
	        if (typeof params.headline !== 'undefined' && typeof params.summary !== 'undefined') {
	            predicate.set(params.headline + ' ' + params.summary);
	        }
	
	        _sections2['default'].build(true, url);
	
	        _adUnit2['default'].init(_layout2['default'].getClientWidth(), undefined, _sections2['default'].getSections('advert'), _sections2['default'].getSections());
	
	        _keyValues2['default'].init(_utils2['default'].createWindowLocation(url), windowDocument);
	        if (typeof params.assetType !== 'undefined') {
	            _keyValues2['default'].set('asset_type', params.assetType);
	        }
	    }
	};
	
	module.exports = api;

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.getFeature = getFeature;
	exports.getFeatures = getFeatures;
	
	var _config = __webpack_require__(148);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _feature = __webpack_require__(276);
	
	var _feature2 = _interopRequireDefault(_feature);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getFeature() {
	    var featureName = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
	
	
	    if (featureName === null) {
	        return new _feature2['default']({}, palEnv);
	    }
	    featureName = featureName.toLowerCase();
	
	    var featuresConfig = _config2['default'].getFeatures();
	    var palEnv = _config2['default'].getPalEnv();
	
	    var featureData = featuresConfig.hasOwnProperty(featureName) ? Object.assign({ name: featureName }, featuresConfig[featureName]) : { name: featureName };
	
	    return new _feature2['default'](featureData, palEnv);
	}
	
	function getFeatures() {
	
	    var featuresConfig = _config2['default'].getFeatures();
	    var palEnv = _config2['default'].getPalEnv();
	    var features = {};
	
	    for (var featureName in featuresConfig) {
	        /* istanbul ignore else  */
	        if (featuresConfig.hasOwnProperty(featureName)) {
	            features[featureName] = getFeature(featureName);
	        }
	    }
	
	    return features;
	}

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _consts = __webpack_require__(149);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Feature = function () {
	    function Feature() {
	        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        var _ref$name = _ref.name;
	        var name = _ref$name === undefined ? 'unknown-feature' : _ref$name;
	        var _ref$envs = _ref.envs;
	        var envs = _ref$envs === undefined ? [] : _ref$envs;
	        var _ref$on = _ref.on;
	        var on = _ref$on === undefined ? false : _ref$on;
	        var _ref$options = _ref.options;
	        var options = _ref$options === undefined ? {} : _ref$options;
	        var _ref$override = _ref.override;
	        var override = _ref$override === undefined ? null : _ref$override;
	        var palEnv = arguments.length <= 1 || arguments[1] === undefined ? _consts.PAL_ENV_LIVE : arguments[1];
	
	        _classCallCheck(this, Feature);
	
	        this.name = name;
	        this.envs = envs;
	        this.on = on;
	        this.options = options;
	        this.override = override;
	        this.palEnv = palEnv;
	    }
	
	    _createClass(Feature, [{
	        key: 'getName',
	        value: function getName() {
	            return this.name;
	        }
	    }, {
	        key: 'isEnabled',
	        value: function isEnabled() {
	            var environment = arguments.length <= 0 || arguments[0] === undefined ? this.palEnv : arguments[0];
	
	            if (this.override !== null) {
	                return this.override;
	            }
	            return isEnvironmentEnabled.call(this, environment) && getOn.call(this);
	        }
	    }, {
	        key: 'getOptions',
	        value: function getOptions() {
	            return this.options;
	        }
	    }, {
	        key: 'getOption',
	        value: function getOption(option) {
	            var options = this.getOptions();
	            return options.hasOwnProperty(option) ? options[option] : null;
	        }
	    }]);
	
	    return Feature;
	}();
	
	exports['default'] = Feature;
	
	
	function isEnvironmentEnabled(environment) {
	    return this.envs.includes(environment) || this.envs.length === 0;
	}
	
	function getOn() {
	    return this.on;
	}
	module.exports = exports['default'];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNjY2MjNhMjFlMWRhOTBjY2ZmODgiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3dlYnBhY2stZW50cnkuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9lczUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL2VzNi9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19rZXlvZi5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9mbi9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vZGVidWcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vZGVidWcvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L21zL2luZGV4LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L3ZlbmRvci9jb21zY29yZS9zdHJlYW1zZW5zZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jb21tb24vZmVhdHVyZVN3aXRjaC9jb25zdHMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9zZWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL3N1cnZleS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9rcnV4LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvcHJlZGljYXRlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9rZXlWYWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2RmcHBSZXF1ZXN0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9sYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9vYmplY3RzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFJlZ2lzdGVyLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvcHVic3ViLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFVuaXQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkVW5pdFdlYlNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL3Nsb3REZWZlcnJlZC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9jb21TY29yZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL2dldC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19iYXNlR2V0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2Nhc3RQYXRoLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9tZW1vaXplLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9faXNIb3N0T2JqZWN0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fTGlzdENhY2hlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9lcS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19NYXAuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9faXNLZXkuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvaGVscGVyLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL2NvbVNjb3JlSGVscGVycy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9icmFuZGluZy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRUZXh0LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZEFzeW5jUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRzZW5zZVJlbmRlcmVyLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFN1aXRlcy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL291dGJyYWluUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL3Nsb3QuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL3Nsb3RBc3luYy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvc2xvdEluZmluaXRlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvdGVtcGxhdGVzL3RlbXBsYXRlRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL3RlbXBsYXRlcyBeXFwuXFwvLipcXC5tdXN0YWNoZSQiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy90ZW1wbGF0ZXMvYWRUZW1wbGF0ZXMvaW5maW5pdGUtc2xvdC5tdXN0YWNoZSIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vaG9nYW4uanMvbGliL3RlbXBsYXRlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL21ldHJpY3MvbWV0cmljc0J1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvbWV0cmljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBZHNFbmFibGVkLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFuYWx5dGljc0FjY291bnRJRC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBbmFseXRpY3NTdWl0ZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBcHBOYW1lLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFwcFR5cGUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QXJ0aWNsZUlELmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QXJ0aWNsZVB1Ymxpc2hlZERhdGUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QXJ0aWNsZVRpdGxlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL3Nhbml0aXNlVmFsdWVzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVVcGRhdGVkRGF0ZS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRDb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldERheENvcnAuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0RG9tYWluRnJvbVVybC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRFZGl0aW9uLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldElzQXBwLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFBhZ2VOYW1lLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFBhZ2VUeXBlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFJlZmVycmVyLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNlY3Rpb25TdHJpbmdzLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNpdGVDYXRhbHlzdENvb2tpZVZhbHVlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNpdGVDaGFubmVsLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNpdGVTZWN0aW9uLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNpdGVTdWJzZWN0aW9uMS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRTaXRlU3Vic2VjdGlvbjIuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0U3luZGljYXRlZFZpZGVvU291cmNlLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFRlc3RHcm91cC5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRUaW1lc3RhbXAuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0VmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRVc2VyVHJhY2tpbmdDb29raWUuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3Mvc3RyZWFtU2Vuc2UuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvbWV0cmljcy9vdmVycmlkZXMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3Mvc3NjSGVscGVyLmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvc3RhdHMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jdXJyZW5jeVByb3ZpZGVycy5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FwaS5qcyIsIndlYnBhY2s6Ly8vL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2NvbW1vbi9mZWF0dXJlU3dpdGNoL2luZGV4LmpzIiwid2VicGFjazovLy8vZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvY29tbW9uL2ZlYXR1cmVTd2l0Y2gvZmVhdHVyZS5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiYm9vdHN0cmFwIiwic3RyZWFtc2Vuc2UiLCJpbml0IiwiY29uZmlnIiwiYWR2ZXJ0cyIsImFuYWx5dGljcyIsImFuYWx5dGljc0hlbHBlciIsIlV0aWxzIiwic2VjdGlvbnMiLCJsb2NhbGUiLCJjdXJyZW5jeVByb3ZpZGVycyIsImFkZExvYWRFdmVudCIsImFwaSIsIm9iamVjdHMiLCJjbGFzc2VzIiwicHVic3ViIiwiS3J1eCIsIlByZWRpY2F0ZSIsIlN0YXRzIiwiU3VydmV5IiwibG9nZ2VyIiwibG9nIiwiaW5mbyIsIk9iamVjdCIsImFzc2lnbiIsIndpbmRvdyIsImJiY2RvdGNvbSIsImRvbUxvYWRlZCIsInV0aWxzIiwic3RhdHMiLCJzdXJ2ZXkiLCJMb2dnZXIiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5zXyIsImdvb2dsZV9hZF9yZXF1ZXN0X2RvbmUiLCJhZHNlbnNlUmVuZGVyZXIiLCJCb290c3RyYXAiLCJhZGRIdG1sVGFnQ2xhc3MiLCJ0cmFja0Nvb2tpZSIsImhhc0F0cnJpYnV0ZSIsImVsZW1lbnQiLCJhdHRyaWJ1dGVLZXkiLCJhdHRyaWJ1dGVWYWx1ZSIsInJlZ2V4IiwiUmVnRXhwIiwibWF0Y2giLCJoYXNUYWdJZCIsInRhZ05hbWUiLCJpZE5hbWUiLCJhdHRyaWJ1dGVNYXRjaCIsInRhZyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzZWFyY2hUcmVlVXB3YXJkcyIsIm5vZGUiLCJtYXRjaGVyIiwiaW5jbHVkZVNlbGYiLCJsaW1pdCIsImN1cnJlbnQiLCJyZXN1bHQiLCJpdGVyYXRpb24iLCJwYXJlbnROb2RlIiwibWF0Y2hlclJlc3VsdCIsImdldENvb2tpZURvbWFpbiIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJpbmRleE9mIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwiYXJncyIsImFyZ3VtZW50cyIsImxhdGVyIiwiYXBwbHkiLCJjYWxsTm93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImFwcGVuZExpbmtUb0hlYWQiLCJ1cmwiLCJoZWFkIiwibGluayIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwicmVsIiwiaHJlZiIsImFwcGVuZENoaWxkIiwiY2FwaXRhbGl6ZSIsInN0cmluZyIsImkiLCJuIiwicGllY2VzIiwic3BsaXQiLCJsZW5ndGgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsImpvaW4iLCJ3YXJuIiwiYWRkVGFnQ2xhc3MiLCJjbGFzc05hbWUiLCJyZW1vdmVUYWdDbGFzcyIsInJlcGxhY2UiLCJhZGRCb2R5VGFnQ2xhc3MiLCJyZW1vdmVCb2R5VGFnQ2xhc3MiLCJyZW1vdmVIdG1sVGFnQ2xhc3MiLCJoYXNCb2R5VGFnSWQiLCJnZXRVcmlQYXJhbUJ5TmFtZSIsIm5hbWUiLCJzYW5pdGl6ZVJlc3VsdCIsInJlc3VsdHMiLCJleGVjIiwiZ2V0V2luZG93TG9jYXRpb24iLCJzZWFyY2giLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc0RlYnVnIiwidGVzdCIsImNvb2tpZSIsImlzRGVidWdUcmFjZSIsImdldEVudiIsIm1hdGNoZXMiLCJpc0xpdmVFbnYiLCJpc1Rlc3RFbnYiLCJzdGFja1RyYWNlIiwiZXJyIiwiRXJyb3IiLCJjb25zb2xlIiwic3RhY2siLCJnZXRQYXJlbnRFbGVtZW50QnlDbGFzcyIsImRlcHRoIiwiaWdub3JlQm9keSIsInRvTG93ZXJDYXNlIiwiZ2V0Q2xvc2VzdEVsZW1lbnRCeVRhZ05hbWUiLCJwYXJlbnRIYXNDbGFzcyIsImdldEFuY2hvclBvc2l0aW9uV2l0aGluRWxlbWVudCIsInBhcmVudCIsInRhZ3MiLCJocmVmUmVnZXgiLCJhZGRFdmVudCIsIm9iaiIsImZuIiwiYXR0YWNoRXZlbnQiLCJldmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudCIsImRldGFjaEV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRyaWdnZXJFdmVudCIsInByZXZlbnREZWZhdWx0IiwidW5kZWZpbmVkIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJjYW5jZWxFdmVudCIsInJldHVyblZhbHVlIiwiaXNFdmVudERlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidHJpbSIsInN0ciIsIm5hdmlnYXRlVG8iLCJ1cmkiLCJnZXRNZXRhTmFtZUNvbnRlbnQiLCJtZXRhcyIsImdldEF0dHJpYnV0ZSIsImdldE1ldGFQcm9wZXJ0eUNvbnRlbnQiLCJwcm9wZXJ0eSIsInNldENvb2tpZSIsInZhbHVlIiwic2Vjb25kcyIsImRhdGUiLCJEYXRlIiwic2V0VGltZSIsImdldFRpbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b0dNVFN0cmluZyIsInB1c2giLCJnZXRDb29raWUiLCJwYXJ0cyIsInBvcCIsInNoaWZ0IiwiZGVsZXRlQ29va2llIiwiZ2VuZXJhdGVVdWlkVjQiLCJjIiwiciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInYiLCJ0b1N0cmluZyIsImNyZWF0ZVdpbmRvd0xvY2F0aW9uIiwid2luZG93TG9jYXRpb24iLCJ3aXRob3V0UHJvdG9jb2wiLCJ3aXRob3V0UXVlcnlQYXJhbSIsInByb3RvY29sIiwiaG9zdCIsInBvcnQiLCJwYXRobmFtZSIsImhhc2giLCJzZWNvbmRzVG9NaWxsaVNlY29uZHMiLCJwYXJzZUZsb2F0IiwiZ2V0VHJhY2tDb29raWVWYWx1ZXMiLCJjb29raWVzQXJyIiwib3V0IiwidCIsImlzU3RyaW5nIiwidmFsIiwiU3RyaW5nIiwiY2xlYW5BcnJheSIsImFjdHVhbCIsIm5ld0FycmF5Iiwib3V0ZXJIVE1MIiwiZGl2IiwiaCIsImNsb25lTm9kZSIsImlubmVySFRNTCIsImRlYnVnIiwiTG9nRmFjdG9yeSIsIm5hbWVzcGFjZSIsInByZWZpeGVkTmFtZXNwYWNlIiwibG9nTGV2ZWxzIiwiZGVmYXVsdExvZ2dlciIsImNyZWF0ZUxvZ0xldmVsIiwibGV2ZWwiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImNhbGwiLCJsb2dMZXZlbCIsImVuYWJsZSIsImRpc2FibGUiLCJlbmFibGVkIiwiU3RyZWFtU2Vuc2UiLCJzIiwibCIsImNvbVNjb3JlIiwic2l0ZXN0YXQiLCJvIiwiYSIsImYiLCJlIiwiYnJvd3NlckFjY2VwdHNMYXJnZVVSTHMiLCJnIiwiVVJMX0xFTkdUSF9MSU1JVCIsIlJFU1RSSUNURURfVVJMX0xFTkdUSF9MSU1JVCIsInAiLCJkIiwibSIsInkiLCJiIiwidyIsIkUiLCJlc2NhcGUiLCJ1bmVzY2FwZSIsImNoYXJhY3RlclNldCIsImRlZmF1bHRDaGFyc2V0IiwibGFzdEluZGV4T2YiLCJzdWJzdHJpbmciLCJ1IiwiaHR0cEdldCIsIm5zX3AiLCJzcmMiLCJsYXN0TWVhc3VyZW1lbnQiLCJoYXNPd25Qcm9wZXJ0eSIsIkxBQkVMU19PUkRFUiIsInRpdGxlIiwiVVJMIiwicmVmZXJyZXIiLCJTIiwieCIsInVpZCIsImZpbHRlciIsImV4dGVuZCIsImdldFN0cmluZyIsImdldExvbmciLCJOdW1iZXIiLCJpc05hTiIsImdldEludGVnZXIiLCJnZXRCb29sZWFuIiwiaXNOb3RFbXB0eSIsImZvckVhY2giLCJfX3Byb3RvX18iLCJyZWdpb25NYXRjaGVzIiwic2l6ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJpc1RydWUiLCJleGlzdHMiLCJmaXJzdEdyZWF0ZXJUaGFuMCIsImNsb25lT2JqZWN0IiwiY29uc3RydWN0b3IiLCJzYWZlR2V0IiwiZ2V0QnJvd3Nlck5hbWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJhcHBOYW1lIiwiZ2V0QnJvd3NlckZ1bGxWZXJzaW9uIiwiYXBwVmVyc2lvbiIsIiQxIiwicGFyc2VJbnQiLCJBY3RpdmVYT2JqZWN0IiwibG9jYWxTdG9yYWdlIiwiZ2V0Iiwic2V0IiwiaGFzIiwicmVtb3ZlIiwiY2xlYXIiLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJkaXIiLCJhcHBlbmQiLCJ3cml0ZSIsImRlbGV0ZUZpbGUiLCJyZWFkIiwiZW5naW5lIiwiY3JlYXRlSHR0cENsaWVudCIsImNyZWF0ZVJlcXVlc3QiLCJzdGFydCIsIlBMQVRGT1JNIiwiaHR0cFBvc3QiLCJTdG9yYWdlIiwiSU8iLCJnZXRDcm9zc1B1Ymxpc2hlcklkIiwiZ2V0QXBwTmFtZSIsIkNvbnN0YW50cyIsIlVOS05PV05fVkFMVUUiLCJnZXRBcHBWZXJzaW9uIiwiZ2V0VmlzaXRvcklkIiwiZ2V0RGV2aWNlTmFtZSIsImdldFZpc2l0b3JJZFN1ZmZpeCIsImdldFBsYXRmb3JtVmVyc2lvbiIsImdldFBsYXRmb3JtTmFtZSIsImdldFJ1bnRpbWVOYW1lIiwiZ2V0UnVudGltZVZlcnNpb24iLCJnZXRSZXNvbHV0aW9uIiwiZ2V0TGFuZ3VhZ2UiLCJnZXRQYWNrYWdlTmFtZSIsImlzQ29ubmVjdGlvbkF2YWlsYWJsZSIsImlzQ29tcGF0aWJsZSIsImF1dG9TZWxlY3QiLCJpc0Nyb3NzUHVibGlzaGVySWRDaGFuZ2VkIiwiZGV2aWNlIiwiaWQiLCJuZXR3b3JrIiwibWFjIiwiYXBwbGljYXRpb24iLCJ2ZXJzaW9uIiwicGxhdGZvcm0iLCJzY3JlZW4iLCJoZWlnaHQiLCJ3aWR0aCIsImZpbHRlck1hcCIsImdldEtleXMiLCJQTEFZIiwiUEFVU0UiLCJFTkQiLCJCVUZGRVIiLCJLRUVQX0FMSVZFIiwiSEVBUlRfQkVBVCIsIkNVU1RPTSIsIkFEX1BMQVkiLCJBRF9QQVVTRSIsIkFEX0VORCIsIkFEX0NMSUNLIiwiSURMRSIsIlBMQVlJTkciLCJQQVVTRUQiLCJCVUZGRVJJTkciLCJ0b0V2ZW50VHlwZSIsIkFEUExBWSIsIkFEUEFVU0UiLCJBREVORCIsIkFEQ0xJQ0siLCJTVFJFQU1TRU5TRV9WRVJTSU9OIiwiREVGQVVMVF9QTEFZRVJOQU1FIiwiREVGQVVMVF9IRUFSVEJFQVRfSU5URVJWQUwiLCJwbGF5aW5ndGltZSIsImludGVydmFsIiwiREVGQVVMVF9LRUVQX0FMSVZFX0lOVEVSVkFMIiwiREVGQVVMVF9QQVVTRURfT05fQlVGRkVSSU5HX0lOVEVSVkFMIiwiQzFfVkFMVUUiLCJDMTBfVkFMVUUiLCJOU19BUF9DMTJNX1ZBTFVFIiwiTlNfTkNfVkFMVUUiLCJQQUdFX05BTUVfTEFCRUwiLCJyZXNldCIsIm5zX3N0X2NsIiwibnNfc3RfcG4iLCJuc19zdF90cCIsInNldFBhdXNlcyIsInNldFN0YXJ0cyIsInNldEJ1ZmZlcmluZ1RpbWUiLCJzZXRCdWZmZXJpbmdUaW1lc3RhbXAiLCJzZXRQbGF5YmFja1RpbWUiLCJzZXRQbGF5YmFja1RpbWVzdGFtcCIsInNldExhYmVscyIsInNldFJlZ2lzdGVycyIsImdldExhYmVscyIsInNldExhYmVsIiwiZ2V0TGFiZWwiLCJnZXRDbGlwSWQiLCJzZXRDbGlwSWQiLCJuc19zdF9jbiIsIm5zX3N0X2J0IiwibnNfc3Rfc3EiLCJuc19zdF9wdCIsIm5zX3N0X3BjIiwiY3JlYXRlTGFiZWxzIiwiZ2V0QnVmZmVyaW5nVGltZSIsImdldFBsYXliYWNrVGltZSIsImluY3JlbWVudFBhdXNlcyIsImluY3JlbWVudFN0YXJ0cyIsImdldFBsYXliYWNrVGltZXN0YW1wIiwiZ2V0QnVmZmVyaW5nVGltZXN0YW1wIiwiZ2V0UGF1c2VzIiwiZ2V0U3RhcnRzIiwic2V0UGxheWxpc3RJZCIsInNldFJlYnVmZmVyQ291bnQiLCJnZXRDbGlwIiwiZ2V0UGxheWxpc3RJZCIsIm5zX3N0X3NwIiwibnNfc3RfYmMiLCJuc19zdF9icCIsIm5zX3N0X2lkIiwibnNfc3RfcGEiLCJuc19zdF9wcCIsImRpZEZpcnN0UGxheU9jY3VycmVkIiwibnNfc3RfcGIiLCJzZXRGaXJzdFBsYXlPY2N1cnJlZCIsInNldFBsYXlsaXN0Q291bnRlciIsImluY3JlbWVudFBsYXlsaXN0Q291bnRlciIsImFkZFBsYXliYWNrVGltZSIsImFkZEJ1ZmZlcmluZ1RpbWUiLCJnZXRSZWJ1ZmZlckNvdW50IiwiaW5jcmVtZW50UmVidWZmZXJDb3VudCIsInEiLCJrIiwiUiIsIlgiLCJPIiwiQyIsIlciLCJVIiwieiIsIl8iLCJNIiwibXQiLCJydCIsIlYiLCJKIiwiTiIsIiQiLCJMIiwiSyIsIkciLCJpc1BhdXNlT25CdWZmZXJpbmdFbmFibGVkIiwiYXQiLCJRIiwiQSIsIlAiLCJZIiwiWiIsImV0IiwidHQiLCJjdCIsInB0IiwibHQiLCJvdCIsInV0IiwiZHQiLCJodCIsIkYiLCJudCIsIm5zX3N0X21wIiwiSCIsIm5zX3N0X212IiwiQiIsIm5zX3N0X2VjIiwic3QiLCJnZXRQaXhlbFVSTCIsIml0IiwiSSIsImFtIiwibmV3QXBwbGljYXRpb25NZWFzdXJlbWVudCIsIkhJRERFTiIsImdldFF1ZXVlIiwib2ZmZXIiLCJnZXRBcHBDb250ZXh0IiwiZ2V0U2FsdCIsImoiLCJmdCIsIlQiLCJuc19zdF9wbyIsIm5zX3RzIiwidnQiLCJjNyIsImM4IiwiYzkiLCJuc19zdF9ldiIsImlzUGVyc2lzdGVudExhYmVsc1NoYXJlZCIsImd0IiwibnNfc3RfdWIiLCJuc19zdF9iciIsIm5zX3N0X2l0IiwibnNfc3Rfc3YiLCJuc190eXBlIiwibnNfc3RfaGMiLCJ5dCIsImJ0IiwibnNfc3RfYWQiLCJub3RpZnkiLCJ3dCIsIkQiLCJpc0VtcHR5Iiwic2V0UGF1c2VPbkJ1ZmZlcmluZ0ludGVydmFsIiwiZ2V0UGF1c2VPbkJ1ZmZlcmluZ0ludGVydmFsIiwic2V0S2VlcEFsaXZlSW50ZXJ2YWwiLCJnZXRLZWVwQWxpdmVJbnRlcnZhbCIsInNldEhlYXJ0YmVhdEludGVydmFscyIsImlzUGF1c2VQbGF5U3dpdGNoRGVsYXlFbmFibGVkIiwiZ2V0U3RhdGUiLCJzZXRQaXhlbFVSTCIsIm5zX3BpeGVsVXJsIiwic2V0UGVyc2lzdGVudExhYmVsc1NoYXJlZCIsInNldFBhdXNlT25CdWZmZXJpbmdFbmFibGVkIiwic2V0UGF1c2VQbGF5U3dpdGNoRGVsYXlFbmFibGVkIiwic2V0UGF1c2VQbGF5U3dpdGNoRGVsYXkiLCJnZXRQYXVzZVBsYXlTd2l0Y2hEZWxheSIsInNldENsaXAiLCJzZXRQbGF5bGlzdCIsImltcG9ydFN0YXRlIiwiZXhwb3J0U3RhdGUiLCJnZXRWZXJzaW9uIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInNwbGljZSIsImdldFBsYXlsaXN0IiwiYWROb3RpZnkiLCJjdXN0b21Ob3RpZnkiLCJ2aWV3Tm90aWZ5IiwiYWN0aXZlSW5kZXgiLCJpc0Zpbml0ZSIsIm5ld0luc3RhbmNlIiwiZGVzdHJveUluc3RhbmNlIiwiZGVzdHJveSIsIm5ld1BsYXlsaXN0IiwibmV3Q2xpcCIsInNldFBsYXlsaXN0TGFiZWxzIiwiZ2V0UGxheWxpc3RMYWJlbHMiLCJzZXRDbGlwTGFiZWxzIiwiZ2V0Q2xpcExhYmVscyIsInJlc2V0SW5zdGFuY2UiLCJyZXNldFBsYXlsaXN0IiwicmVzZXRDbGlwIiwidmlld0V2ZW50IiwiY3VzdG9tRXZlbnQiLCJBZEV2ZW50cyIsIlBsYXllckV2ZW50cyIsIlN0cmVhbWluZ1RhZyIsImN1c3RvbWVyQzIiLCJzZWN1cmUiLCJuc19zdF9jaSIsImMzIiwiYzQiLCJjNiIsIk5vbmUiLCJBdWRpb0NvbnRlbnQiLCJWaWRlb0NvbnRlbnQiLCJwbGF5QWR2ZXJ0aXNlbWVudCIsIm5zX3N0X2N0IiwicGxheVZpZGVvQWR2ZXJ0aXNlbWVudCIsInBsYXlBdWRpb0FkdmVydGlzZW1lbnQiLCJwbGF5Q29udGVudFBhcnQiLCJwbGF5VmlkZW9Db250ZW50UGFydCIsInBsYXlBdWRpb0NvbnRlbnRQYXJ0Iiwic3RvcCIsImxheW91dCIsImJyZWFrcG9pbnRzIiwiYWRSZWdpc3RlciIsImFkVW5pdCIsImtleVZhbHVlcyIsImFkU3VpdGVzIiwiZGZwcFJlcXVlc3QiLCJBbmFseXRpY3NIZWxwZXIiLCJwYXJhbXMiLCJsZW4iLCJ3aW5kb3dEb2N1bWVudCIsImdldFdpbmRvd0RvY3VtZW50IiwiYWRzVG9EaXNwbGF5IiwiaW5jbHVkZXMiLCJjbGFzc05hbWVzIiwiaXNBY3RpdmUiLCJpc1Nwb3J0QXBwIiwiZnJvbUNvbmZpZyIsImlzQXN5bmMiLCJnZXRBc3NldFByZWZpeCIsImlzSUU3IiwiZGlzYWJsZVJlc2V0IiwiaXNJRTgiLCJidWlsZCIsImdldFNlY3Rpb24iLCJzZXRHcm91cFN0YXJ0IiwiY29weSIsImdldEdyb3VwIiwic2V0R3JvdXAiLCJzZXRHcm91cEZpbmlzaCIsImdldEdyb3VwcyIsImNsaWVudFdpZHRoIiwic2V0Q2xpZW50V2lkdGgiLCJjdXN0b21CcmVha3BvaW50cyIsInNldEdyb3VwcyIsInJlZ2lzdGVyQWQiLCJsb2NhbGVEYXRhIiwiaXNLcnV4RW5hYmxlZCIsIndyaXRlS3J1eCIsImdldENsaWVudFdpZHRoIiwic2VydmVyc2lkZUFkVW5pdHMydG85IiwiZ2V0U2VjdGlvbnMiLCJnZXRUeXBlIiwicmVxdWVzdEFkcyIsInJlY2VpdmVNZXNzYWdlIiwidHJpZ2dlciIsInBhZ2VUeXBlIiwiZ2V0UGFnZVR5cGUiLCJwcmltYXJ5QWRVbml0IiwiZ2V0QWRVbml0MSIsInNlY29uZGFyeUFkVW5pdCIsImdldEFkVW5pdHMydG85IiwiYWRzRW5hYmxlZCIsImlzQWRzRW5hYmxlZCIsImVycm9yIiwiYWRzIiwiZ2V0QWRzIiwiZGlzYWJsZVNjcmVlblJlYWRlckZvckFkQ29udGVudCIsIkFEU19FTkFCTEVEX0hUTUxfQ0xBU1MiLCJBTkFMWVRJQ1MiLCJDT01TQ09SRSIsIkhUVFAiLCJIVFRQUyIsIldFQlNJVEVfU1VJVEVfTElWRSIsIldFQlNJVEVfU1VJVEVfVEVTVCIsIkFQUF9TVUlURV9MSVZFIiwiQVBQX1NVSVRFX1RFU1QiLCJDVVNUT01FUl9JRF9MSVZFIiwiQ1VTVE9NRVJfSURfVEVTVCIsIlNTQyIsIl9jb25maWciLCJnZXRXaW5Mb2MiLCJnZXRXaW5Eb2MiLCJzZXR0aW5ncyIsImhlYWRsaW5lIiwiYXN5bmMiLCJkaXNhYmxlQWRzSW5pdGlhbExvYWQiLCJkYXhFbnZpcm9ubWVudHMiLCJvdXRicmFpbkVuYWJsZWQiLCJrcnV4RW5hYmxlZCIsImNvbnRpbnVvdXNQbGF5UGFnZSIsInN0aWNreVBsYXllclBhZ2UiLCJpZVZlcnNpb24iLCJpZTciLCJpZTgiLCJpZTkiLCJwcmVmaXhlcyIsImFzc2V0UHJlZml4IiwianNQcmVmaXgiLCJzd2ZQcmVmaXgiLCJjc3NQcmVmaXgiLCJmZWF0dXJlcyIsInBhbEVudiIsIkNvbmZpZyIsInNlcnZlckNvbmYiLCJkYXRhIiwicmVoeWRyYXRlIiwic2V0RGF0YSIsInNldFdpbmRvd0xvY2F0aW9uIiwic2V0V2luZG93RG9jdW1lbnQiLCJvcmIiLCJzZXRSZWZlcnJlciIsImNvbmYiLCJzZXRTZWN0aW9ucyIsInNldFR5cGUiLCJzZXRIZWFkbGluZSIsInNldEFkc0VuYWJsZWQiLCJhbGxvd0FkdmVydGlzaW5nIiwic2V0T3V0YnJhaW5FbmFibGVkIiwic2V0S3J1eEVuYWJsZWQiLCJhbmFseXRpY3NFbmFibGVkIiwic2V0QW5hbHl0aWNzRW5hYmxlZCIsImNvbVNjb3JlRW5hYmxlZCIsInNldENvbVNjb3JlRW5hYmxlZCIsImFzeW5jRW5hYmxlZCIsInNldEFzeW5jIiwiZGlzYWJsZUluaXRpYWxMb2FkIiwic2V0RGlzYWJsZUluaXRpYWxMb2FkIiwia2V5d29yZCIsImFkS2V5d29yZCIsImFkQ2FtcGFpZ25LZXl3b3JkIiwic2V0RmVhdHVyZXMiLCJzZXRQYWxFbnYiLCJhZHZlcnRpc2VtZW50VGV4dCIsImFkdmVydEluZm9QYWdlVXJsIiwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0Iiwic3BvbnNvcmVkQnlUZXh0IiwiYWRzQnlHb29nbGVUZXh0IiwiaXNDb250aW51b3VzUGxheVBhZ2UiLCJzZXRDb250aW51b3VzUGxheVBhZ2UiLCJpc1N0aWNreVBsYXllclBhZ2UiLCJzZXRTdGlja3lQbGF5ZXJQYWdlIiwic3RhdHNQcm92aWRlciIsIm51bVByb3ZpZGVycyIsInByb3ZpZGVycyIsInNlY3RzIiwiQXJyYXkiLCJpc0Rpc2FibGVBZHNJbml0aWFsTG9hZCIsInNpdGUiLCJrZXkiLCJwcmVmaXgiLCJyZWYiLCJ2ZW5kb3IiLCJzc2NIZWxwZXIiLCJnZXRBbmFseXRpY3NMb2NhdGlvbiIsInRlc3RFbnYiLCJzZXRJRTciLCJzZXRJRTgiLCJzZXRBc3NldFByZWZpeCIsIlBBTF9FTlZfTElWRSIsIlBBTF9FTlZfU1RBR0UiLCJQQUxfRU5WX1RFU1QiLCJQQUxfRU5WX0lOVCIsIlBBTF9FTlZfU0FOREJPWCIsImFkdmVydFNlY3Rpb25zIiwiYW5hbHl0aWNzU2VjdGlvbnMiLCJjbGVhbnVwUGF0aCIsInBhdGgiLCJ3c0xhbmciLCJidWlsZEFkdmVydFNlY3Rpb25zIiwiYnVpbGRBbmFseXRpY3NTZWN0aW9ucyIsImlzQ3VycmVudFVyaSIsIl9zZWN0aW9ucyIsIl9hZHZlcnRTZWN0aW9ucyIsIl9hbmFseXRpY3NTZWN0aW9ucyIsIlVOS05PV04iLCJnZXRVcmlGb3JTZWN0aW9ucyIsImdldEFycmF5Iiwib2Zmc2V0IiwicmVsb2FkRGF0YSIsImdldFNlY3Rpb25zRm9yVXJpIiwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHQiLCJhc3NvY2lhdGlvbkluZm9QYWdlVXJsIiwiZ29vZ2xlQWRzUGFnZVVybCIsImZpZWxkIiwidGV4dCIsImdldERhdGEiLCJlRGlnaXRhbFJlc2VhcmNoIiwic3VydmV5RW5hYmxlZCIsImZsYWciLCJFRFJTdXJ2ZXkiLCJsb2FkU2NyaXB0IiwiZG9jIiwiY2FsbGJhY2siLCJzZXRBdHRyaWJ1dGUiLCJDTEFTU19CQVNFIiwiQ0xBU1NfU0VQIiwiY29uY2F0Iiwic2xpY2UiLCJhcnIiLCJyb290T3ZlcnJpZGUiLCJmaW5hbFJvb3QiLCJzZXJ2aWNlIiwiY29uZmlnTWFwIiwiZ2V0S3J1eElkIiwic2VjdGlvbnNBcnJheSIsImdldEtydXhJZE1ldGhvZDIiLCJrcnV4SWQiLCJwcm92aWRlZEtydXhJZCIsImV4Y2x1c2lvbnMiLCJpbmNsdXNpb25zIiwicHJlZGljYXRlcyIsImFpcmxpbmUiLCJydWxlcyIsInZpb2xlbmNlIiwic2Vuc2l0aXZlIiwic2V0QWRFeGNsdXNpb24iLCJzZXRFeGNsdXNpb24iLCJnZXRFeGNsdXNpb25zIiwiZ2V0SW5jbHVzaW9ucyIsImNvbnRlbnRNZXRhRGF0YSIsIm51bWJlclRvTWF0Y2giLCJudW1iZXJNYXRjaGVkIiwiZXhwIiwia2V5d29yZE9iaiIsImFzc2V0VHlwZU1hcCIsInNldFN0b3J5SWQiLCJ3aW5kb3dMb2NhdGlvbkhyZWYiLCJzZXRDVHlwZSIsInNldEFzc2V0VHlwZSIsImFzc2V0VHlwZSIsIm1hdGNoQXJyIiwicmVmU3RyaW5nIiwic2V0UmVmZXJyZXJEb21haW4iLCJyZWZEb21haW4iLCJzZXRSc2kiLCJyc2lfc2VncyIsInNlZ3NfZW5kIiwic2Vnc19iZWciLCJzZXRXb3JsZFNlcnZpY2VUaXRsZSIsIndpbmRvd0xvY2F0aW9uUGF0aG5hbWUiLCJzZXRLZXl3b3JkUGFydHMiLCJrZXl3b3JkUGFydHMiLCJnZXRBbGwiLCJzZXRBcnJheSIsImdldEtleXdvcmRQYXJ0cyIsIkxvZyIsIkxheW91dCIsIk9iamVjdHMiLCJLZXlWYWx1ZXMiLCJBZFJlZ2lzdGVyIiwiUHViU3ViIiwiQWRVbml0IiwiU2VjdGlvbnMiLCJTbG90RGVmZXJyZWQiLCJBRF9JRF9QUkVGSVgiLCJzZXRLcnV4RGF0YSIsInNlZ21lbnRzIiwiZ29vZ2xldGFnIiwicHViYWRzIiwic2V0VGFyZ2V0aW5nIiwidXNlciIsImdldEFkRGF0YSIsImFkTmFtZSIsImFkIiwiYWRTaXplcyIsImdldEFkQ3VycmVudEdyb3VwU2l6ZXMiLCJkb21JZCIsInNldHVwUmVuZGVyRW5kZWRDYWxsYmFjayIsImNtZCIsImFkSWQiLCJzbG90IiwiZ2V0VGFyZ2V0aW5nIiwiZ2V0QWQiLCJzbG90RWxlbWVudElkIiwiZ2V0U2xvdEVsZW1lbnRJZCIsImlzUmVuZGVyZWQiLCJzZXRSZW5kZXJlZCIsInNldEV2ZW50U2l6ZSIsInJlbmRlcklmUmVhZHkiLCJERlBQUmVxdWVzdCIsInNsb3RzIiwiZ2V0UHJldmlld1VpZCIsImNoaWxkcmVuIiwiZWwiLCJnZXRFbGVtZW50QnlJZCIsImNsaWVudEhlaWdodCIsImVuYWJsZVNpbmdsZVJlcXVlc3QiLCJlbmFibGVTeW5jUmVuZGVyaW5nIiwiZ2V0QWRDb3VudCIsImVuYWJsZVNlcnZpY2VzIiwiYWREYXRhIiwiZ2V0QWRJZCIsImRlZmluZVNsb3QiLCJhZGRTZXJ2aWNlIiwiZGVmaW5lT3V0T2ZQYWdlU2xvdCIsImtleVNsb3RzIiwia2V5cyIsInJlZnJlc2hBZCIsInJlZnJlc2giLCJpbmplY3RBZHZlcnRpc2VtZW50VGV4dCIsImdyb3VwcyIsImN1cnJlbnRHcm91cElkIiwiZ2V0Q3VycmVudEdyb3VwSWQiLCJoYXNBbnlHcm91cEFscmVhZHlCZWVuUmVnaXN0ZXJlZCIsImRpc3BsYXkiLCJzZXRDYXRlZ29yeUV4Y2x1c2lvbiIsImFkU2l6ZUxlZXdheUFnYWluc3RTbG90U2l6ZSIsImFkU2l6ZUxlZXdheUFnYWluc3RTbG90U2l6ZVdpdGhOb0JvcmRlciIsImluaXRpYWxHcm91cCIsImluaXRpYWxHcm91cElkIiwiY3VycmVudEdyb3VwIiwiY3VycmVudEdyb3VwU2l6ZXMiLCJsYXlvdXREaXNhYmxlUmVzZXQiLCJkZXRlcm1pbmVDdXJyZW50R3JvdXBBbmRTaXplcyIsInNsb3RTaXplcyIsImlzQWRTaXplU3VpdGFibGVGb3JDdXJyZW50R3JvdXAiLCJzbG90SW5kZXgiLCJnZXRBZE5hbWUiLCJsZWV3YXkiLCJhZFR5cGUiLCJhYnMiLCJnZXRXaWR0aCIsImdldENyZWF0aXZlSGVpZ2h0Iiwic2hvdWxkU2hvd0FkIiwiY3VycmVudFNsb3RIYXNHcm91cCIsInNob3dPckhpZGVBZEZvckN1cnJlbnRHcm91cCIsImlzUmVzcG9uc2l2ZSIsIm9wZW4iLCJzaHV0IiwiZG9jdW1lbnRFbGVtZW50IiwibW92ZUFkIiwiZnJvbSIsInRvIiwiZ2V0Q3VycmVudEdyb3VwIiwic2V0Q3VycmVudEdyb3VwSWQiLCJncm91cElkIiwiZ2V0Q3VycmVudEdyb3VwU2l6ZXMiLCJvdmVycmlkZUdyb3VwU2l6ZXMiLCJzdHJOYW1lIiwibmFtZVBhcnRzIiwicmVnaXN0ZXIiLCJmYWN0b3J5IiwiY3VycmVudEFkSWQiLCJzcG9uc29yQWRPdmVycmlkZSIsImFkQ29uZmlnIiwic2V0QWRGYWN0b3J5IiwiYWRGYWN0b3J5Iiwic2VjdGlvbiIsInN1Yl9zZWN0aW9uIiwib3ZlcnJpZGUiLCJzZXRDb25maWciLCJzZXRDdXJyZW50QWRJZCIsImdldEN1cnJlbnRBZElkIiwiZ2V0Q3VycmVudEFkIiwic2V0QmFzZUNvbnRlbnQiLCJzaG93IiwiY2xvc2UiLCJjb3VudCIsImxpc3RlbmVycyIsIm9uIiwibGlzdGVuZXIiLCJUeXBlRXJyb3IiLCJldmVudHMiLCJvZmYiLCJhZFVuaXRXZWJTZXJ2aWNlIiwiem9uZURhdGEiLCJERlBfSUQiLCJERlBfU1VJVEVfREVGQVVMVCIsIkRGUF9TVUlURV9ERVZJQ0VfV0lEVEhfU1dJVENIIiwiQURfVU5JVF9ERUZBVUxUIiwiQURfVU5JVF8yX0RFRkFVTFQiLCJDSEFOTkVMX0tFWSIsIlNFQ1RJT05fS0VZIiwiU1VCX1NFQ1RJT05fS0VZIiwiY3VzdG9tQWRVbml0IiwiZGZwU3VpdGUiLCJhZFVuaXRzMnRvOSIsInByZXZpZXdVaWQiLCJxdWVyeVN0cmluZ092ZXJyaWRlIiwiYWxsb3dlZFNpdGVzIiwibGl2ZSIsInd3dyIsInNwZWNpYWxzIiwicHJldmlldyIsImxpdmVfbW9iaWxlIiwid3d3X21vYmlsZSIsInNwZWNpYWxzX21vYmlsZSIsInByZXZpZXdfbW9iaWxlIiwidGVzdF9tb2JpbGUiLCJ0ZXN0X2FyYWJpYyIsInRlc3RfcnVzc2lhbiIsImxpdmVfZWFydGgiLCJ0ZXN0X2VhcnRoIiwidGVzdF9hbXBfbmV3cyIsImxpdmVfYW1wX25ld3MiLCJXT1JMRF9TRVJWSUNFX0FEX1VOSVRfUFJFRklYIiwibGl2ZV9kZXNrdG9wIiwidGVzdF9kZXNrdG9wIiwiV09STERfU0VSVklDRV9BRF9VTklUX1NVRkZJWF9NQVAiLCJqYXBhbmVzZSIsIlZFUlRJQ0FMU19BRF9VTklUU19QUkVGSVgiLCJBRF9VTklUMl9FWENFUFRJT05TIiwiYWRTZWN0aW9ucyIsImFzc2lnbkRmcFN1aXRlIiwiZ2V0V29ybGRTZXJ2aWNlQWRVbml0U3VmZml4IiwiYWRVbml0U3VmZml4IiwiZGVyaXZlQWRVbml0MSIsIm1Eb3RSZWdFeHAiLCJhZFVuaXRPdmVycmlkZSIsInNpdGVPdmVycmlkZSIsInVpZE92ZXJyaWRlIiwiZGVyaXZlQWRVbml0MnRvOUZyb21VcmkiLCJwYXR0ZXJuIiwicmUiLCJ1cmxQYXRoIiwiJDIiLCJkZXJpdmVBZFVuaXQydG85IiwicHJvY2Vzc1pvbmVEYXRhIiwiem9uZXMiLCJ6b25lIiwiYWRTZWN0aW9uc0FycmF5Iiwic2V0VWlkIiwib3ZlcnJpZGVVaWQiLCJzZXRBZFVuaXQiLCJvdmVycmlkZUFkVW5pdCIsImVuZHNXaXRoIiwiYWRJRCIsInNsb3REb21DaGlsZEVsZW1lbnQiLCJyZWdpc3RlclNsb3RHcm91cHMiLCJzZXRDdXJyZW50U2xvdEdyb3VwcyIsImZpcnN0RWxlbWVudENoaWxkIiwiZmlyc3RDaGlsZCIsInN0cmVhbVNlbnNlIiwic2V0TWV0cmljT3ZlcnJpZGUiLCJERUxBWV9UUkFDS0lOR19DT09LSUUiLCJDb21TY29yZSIsInBsYXlsaXN0Q291bnQiLCJ2aWRlb0V2ZW50Q291bnRlciIsImFsbG93TGlua1RyYWNraW5nIiwiaXNQbGF5bGlzdFN0YXJ0ZWQiLCJ1c2VyVHJhY2tpbmdDb29raWVWYWx1ZSIsInRyYWNraW5nUmVxdWVzdHMiLCJpc1Njd0hhbmRsZXJVc2VkIiwicHJvY2Vzc0RlbGF5VHJhY2tpbmdDb29raWUiLCJzZXR1cFN0cmVhbVNlbnNlIiwiaW5pdEFwcFBhZ2VUcmFja2luZyIsInBhZ2VOYW1lIiwic2V0QXBwIiwic2V0QXBwTmFtZSIsInNldEFwcFZlcnNpb25OdW1iZXIiLCJzZXRBcHBPcyIsImFwcE9zIiwiYXBwVHJhY2tQYWdlIiwicGFnZSIsImtleVZhbHVlIiwiYl9hcHBfbmFtZSIsImJfc2l0ZV9jaGFubmVsIiwiYl9hcHBfaW1wX3ZlciIsImJfYXBwX29zIiwidmlkZW9FdmVudHMiLCJpc0NvbVNjb3JlRW5hYmxlZCIsImRvVHJhY2siLCJhcHBseUxpbmtUcmFja2luZ1RvUGFnZUVsZW1lbnRzIiwiZXhjZXB0aW9uIiwibWVzc2FnZSIsImxpbmtPYmoiLCJ2YXJzIiwiZ2V0TGlua1RyYWNraW5nUHJvcGVydGllcyIsIm1ldHJpY3NCdWlsZGVyIiwiaXNCQkNVcmkiLCJwcmVSZXF1aXNpdGUiLCJtYXBOYW1lIiwiYl9saW5rIiwiYnVpbGRQaXBlRGVsaW1pdGVkS2V5IiwidHJhY2tMaW5rIiwibWV0aG9kcyIsIm1ha2VJbWFnZVJlcXVlc3QiLCJpc0FuYWx5dGljc0VuYWJsZWQiLCJvdmVycmlkZXMiLCJkZWZhdWx0QzIiLCJjMiIsImxvZ0xpbmUiLCJlbmNvZGVWYWx1ZSIsImxvYWRUcmFja2luZ0ltYWdlIiwic2VjdGlvblN0cmluZ3MiLCJhbHJlYWR5TGlua2VkIiwiY2xpY2tMaXN0ZW5lciIsInZlcnRpY2Fsc1JlZ2V4cCIsIkxJTktfVFJBQ0tJTkdfU0VDVElPTlMiLCJUUkFDS0lOR19USU1FT1VUIiwiTlVMIiwiaXNMaXZlRXZlbnQiLCJpc0V4dGVybmFsUmVkaXJlY3RUb0JCQ1VyaSIsImRldGVybWluZVNlY3Rpb25zIiwic2VwYXJhdG9yIiwiZ2V0U3RvcnlIZWFkbGluZSIsImNwc0hlYWRsaW5lIiwiZ2V0SGVhZGxpbmUiLCJhc3NldCIsImdldFBhZ2VFZGl0aW9uIiwiZWRpdGlvbiIsImdldFZlcnRpY2FsIiwib25lc3BvcnQiLCJvbW5pdHVyZUFzc2V0VHlwZSIsImJiYyIsImZtdGoiLCJzYW5pdGlzZVBhZ2VOYW1lIiwiZ2V0UGFnZU5hbWUiLCJnZXRQYWdlTmFtZUNvbVNjb3JlIiwicGF0aFNsYXNoZXMiLCJwYXRoQml0cyIsInJlc3BvbnNlIiwidmVydGljYWwiLCJsaW5rU2VjdGlvbnMiLCJpbm5lclRleHQiLCJwcm9tb3RlZCIsInNhbml0aXNlTGlua05hbWUiLCJnZXRMaW5rTmFtZUZyb21VcmxGb3JWZXJ0aWNhbHMiLCJtYXRjaGVkIiwibGlua09ialRyYWNrIiwiZGF0YXNldCIsInRyYWNrIiwicmV2IiwiaHRtbFJldkFyciIsImxpbmtOYW1lIiwibGlua1Bvc2l0aW9uIiwicGFyZW50RWwiLCJ3aWRnZXRJZCIsIm1hcHBpbmciLCJnZXRBbmFseXRpY3NVcmkiLCJpbWciLCJJU19HTkxfSlNfVU5JVF9URVNUIiwiZGVsYXlUcmFja2luZ0Nvb2tpZU5hbWUiLCJjb29raWVWYWx1ZSIsInRyYWNrTGlua0J5RHJvcHBpbmdDb29raWUiLCJkb1RyYWNrQ2FsbGJhY2siLCJjdXN0b21UcmFja2luZ0tleVZhbHVlcyIsImNvb2tpZVZhbCIsInRyYWNrTGlua0FuZFJlc3VtZU5hdmlnYXRpb24iLCJldmVudEhhbmRsZWQiLCJ0aW1lb3V0SWQiLCJyZXN1bWUiLCJyZXN1bWVOYXZpZ2F0aW9uIiwidHJhY2tlZCIsInByb2Nlc3NMaW5rQ2FsbGJhY2siLCJyb290U2VjdGlvbiIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJhc3NldFVyaSIsImdldEF2Rm9ybWF0RnJvbUtpbmQiLCJraW5kIiwiZ2V0Q29yZUtleVZhbHVlcyIsImFwcGVuZFBhZ2VDb3JlS2V5VmFsdWVzIiwiYXBwZW5kTm9uUGFnZUNvcmVLZXlWYWx1ZXMiLCJ1c2VyVHJhY2tpbmdDb29raWUiLCJjb29raWVzRW5hYmxlZElFRml4Iiwic3luZGljYXRlZFZpZGVvU291cmNlIiwiaXNJbmRleCIsIm5DRSIsImNvb2tpZUVuYWJsZWQiLCJ0ZXN0Q29va2llIiwiYWRBc3luY1JlbmRlcmVyIiwiYWRSZW5kZXJlciIsImFkVGV4dCIsImJyYW5kaW5nIiwib3V0YnJhaW5SZW5kZXJlciIsInNsb3RBc3luYyIsInNsb3REZWZlcnJlZCIsInNsb3RJbmZpbml0ZSIsIkJyYW5kaW5nIiwiQURfSEVJR0hUX0FESlVTVE1FTlQiLCJTTE9UX1BSRUZJWCIsIkFEX0lTX1ZJU0lCTEUiLCJBRF9JU19TSFVUX0NMQVNTIiwiRElTUExBWV9OT05FX0NMQVNTIiwiYWRUZXh0S2V5IiwiZ2V0Q29udGVudHMiLCJkb21BZCIsIkFkIiwicHJlbG9hZGVkIiwiY2xvc2VkIiwicmVuZGVyZWQiLCJldmVudFNpemUiLCJjb250ZW50cyIsImJhc2UiLCJzaXplU2V0IiwiYWxsb3dTY3JlZW5SZWFkZXIiLCJjdXJyZW50U2xvdEdyb3VwcyIsInJlZ2lzdGVyZWRTbG90R3JvdXBzIiwic2V0Q2xvc2VkIiwiaXNDbG9zZUFkIiwiZ2V0QmFzZUNvbnRlbnQiLCJjdXJyZW50U2xvdCIsImdldEN1cnJlbnRTbG90R3JvdXBzIiwiZ2V0UmVnaXN0ZXJlZFNsb3RHcm91cHMiLCJzZXRQcmVsb2FkZWQiLCJwcmVsb2FkIiwiaXNQcmVsb2FkZWQiLCJkb21FbGVtZW50IiwiZ2V0RG9tRWxlbWVudCIsImdldEFkdmVydERpbWVuc2lvbnMiLCJhZHZlcnQiLCJzZXRXaWR0aCIsInNldEhlaWdodCIsImdldEhlaWdodCIsInNldEFkRG9tSGVpZ2h0V2lkdGgiLCJpc0lmcmFtZVNldHRpbmdTaXplIiwiYWRQYWRIZWlnaHQiLCJzdHlsZSIsInNldElmcmFtZVNpemUiLCJhZElmcmFtZXMiLCJpbnNFbGVtZW50cyIsInNldFJlc3BvbnNpdmUiLCJyZXNwb25zaXZlIiwiZ2V0QWRUZXh0S2V5IiwiZ2V0QWRUZXh0IiwiaGFzQWRUZXh0IiwiZ2V0VGV4dCIsImdldEFkSW5mb1VybCIsImdldEluZm9VcmwiLCJsaW5rcyIsImlmcmFtZXMiLCJ0YWJJbmRleCIsInBhcmVudEVsZW1lbnQiLCJpc1NodXQiLCJzZXRUaXRsZUZvclNwb25zb3JBZHMiLCJvcGVuQXN5bmMiLCJzZWxmIiwic2V0Q3VycmVudFNsb3RWaXNpYmxlIiwic2xvdEVsZW1lbnQiLCJncm91cHNSZWdpc3RlcmVkIiwiYWRUZXh0SW50ZXJ2YWwiLCJhZEluZm9VcmwiLCJpbmplY3RUcnkiLCJ0cnlJbmplY3RBZFRleHQiLCJhVGFnIiwiaW5zZXJ0QmVmb3JlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiaGlkZUFkQ29udGFpbmVyIiwib3ZlcmZsb3ciLCJwYWRkaW5nIiwiZ3JvdXAiLCJBZFRleHQiLCJrZXl3b3JkcyIsImFsdFRpdGxlIiwicmVxdWlyZWpzIiwibmV3cyIsImluZGV4VGl0bGUiLCJpbmRleFRpdGxlU3RyaW5nIiwiYWRJbmZvTGluayIsInNldFRpdGxlSHRtbCIsImdldEluZGV4VGl0bGUiLCJmaW5kIiwidGV4dENvbnRlbnQiLCJnZXRVcmwiLCJnZXRUaXRsZSIsIlNFQ1RJT05fT1ZFUlJJREVTIiwiQURfVEVYVF9LRVlfVE9fVVJMX0xPQ0FMRV9LRVlfTUFQIiwiREVGQVVMVF9JTkZPX1VSTF9MT0NBTEVfS0VZIiwibG9jYWxlS2V5Iiwic2V0U2VjdGlvbk92ZXJyaWRlcyIsInJlbmRlckFkIiwiYWR2ZXJ0VGV4dCIsImFkSW5mbyIsImNyZWF0ZUFkIiwiYWRUZW1wbGF0ZSIsInN1YnN0aXR1dGVEYXRhIiwidGVtcGxhdGUiLCJhZEh0bWwiLCJhZHNlbnNlUmFuZG9tIiwiY2VpbCIsImFwcGx5UGFnZVVybE92ZXJyaWRlIiwiZ29vZ2xlX3BhZ2VfdXJsIiwiZ2V0QWRzZW5zZUNoYW5uZWwiLCJnb29nbGVBZHMiLCJhZFRleHRWYWx1ZSIsInZpc2libGVfdXJsIiwibGluZTEiLCJsaW5lMiIsImxpbmUzIiwiZ29vZ2xlX2FkX2NsaWVudCIsImdvb2dsZV9hZF9vdXRwdXQiLCJnb29nbGVfbWF4X251bV9hZHMiLCJnb29nbGVfYWRfdHlwZSIsImdvb2dsZV9hZF9jaGFubmVsIiwic2V0UmFuZG9tIiwic3VpdGVzIiwiZGZwcElkIiwibGVhZGVyYm9hcmQiLCJtcHUiLCJsYXJnZSIsImJpZyIsInN0YW5kYXJkIiwib3BhcXVlIiwiaW50ZXJzdGl0aWFsIiwiZW1wdHkiLCJub25lIiwibm9hZCIsInN1aXRlIiwid2FsbHBhcGVyIiwibXB1X21pZGRsZSIsIm1wdV9ib3R0b20iLCJzcG9uc29yIiwibW9kdWxlX3dvcmxkaW5waWN0dXJlcyIsInByb21vIiwiYWRfZmVhdHVyZV9yYyIsImFkc2Vuc2UiLCJhZHNlbnNlX21wdSIsInBhcmFsbGF4IiwicHJvbW9fZmVhdHVyZV9yZXNwb25zaXZlIiwiaW5yZWFkIiwiY3VzdG9tR3JvdXBzIiwiY3VzdG9tR3JvdXAiLCJwcm9kdWN0VGVtcGxhdGVzIiwic3BvcnQiLCJmYWxsYmFjayIsInNhbml0aXNlRGF0YVNyYyIsImdlbmVyYXRlSHRtbCIsInByb2R1Y3QiLCJpc091dGJyYWluRW5hYmxlZCIsImh0bWwiLCJjdXJyZW50U2NyaXB0VGFnIiwic2xvdENvbmZpZyIsInNjcmlwdFRhZ3MiLCJzbG90RG9tSWQiLCJhZERvbUlkIiwiVGVtcGxhdGVGYWN0b3J5IiwiU2xvdEluZmluaXRlIiwiZ3JvdXBzQ2xhc3MiLCJyZW5kZXJlZFRlbXBsYXRlIiwiZ2V0VGVtcGxhdGUiLCJyZW5kZXIiLCJyZW5kZXJJbnRvRWxlbWVudCIsIkFWQUlMQUJMRV9URU1QTEFURVMiLCJ0ZW1wbGF0ZXMiLCJyZWR1Y2UiLCJvYmplY3RNYXAiLCJ0ZW1wbGF0ZU5hbWUiLCJub2RlU2NyaXB0UmVwbGFjZSIsIm5vZGVTY3JpcHRJcyIsInJlcGxhY2VDaGlsZCIsIm5vZGVTY3JpcHRDbG9uZSIsImNoaWxkTm9kZXMiLCJzY3JpcHQiLCJhdHRyaWJ1dGVzIiwiTWV0cmljc0J1aWxkZXIiLCJtZXRyaWNzIiwiTWFwIiwibWV0cmljIiwicG9zdFByb2Nlc3MiLCJnZXRNZXRyaWNIZWxwZXIiLCJvdXRwdXQiLCJvcHRpb25zIiwiZ2V0TWV0cmljIiwibWFwTmFtZXMiLCJnZXRBZHNFbmFibGVkIiwiZ2V0QW5hbHl0aWNzQWNjb3VudElEIiwiZ2V0QW5hbHl0aWNzU3VpdGUiLCJnZXRBcHBUeXBlIiwiZ2V0QXJ0aWNsZUlEIiwiZ2V0QXJ0aWNsZUxlbmd0aCIsImdldEFydGljbGVQdWJsaXNoZWREYXRlIiwiZ2V0QXJ0aWNsZVRpdGxlIiwiZ2V0QXJ0aWNsZVVwZGF0ZWREYXRlIiwiZ2V0Q29sbGVjdGlvbiIsImdldERheENvcnAiLCJnZXREb21haW5Gcm9tVXJsIiwiZ2V0RWRpdGlvbiIsImdldElzQXBwIiwiZ2V0UmVmZXJyZXIiLCJnZXRTaXRlQ2F0YWx5c3RDb29raWVWYWx1ZSIsImdldFNpdGVDaGFubmVsIiwiZ2V0U2l0ZVNlY3Rpb24iLCJnZXRTaXRlU3Vic2VjdGlvbjEiLCJnZXRTaXRlU3Vic2VjdGlvbjIiLCJnZXRUZXN0R3JvdXAiLCJnZXRUaW1lc3RhbXAiLCJnZXRTZWN0aW9uU3RyaW5ncyIsImdldFN5bmRpY2F0ZWRWaWRlb1NvdXJjZSIsInNhbml0aXNlS2V5VmFsdWVzIiwic2FuaXRpc2VMYWJlbFZhbHVlIiwiZ2V0QW5hbHl0aWNzQWNjdElkIiwiZmlnIiwic3RvcnlCb2R5IiwiZ2V0RWxlbWVudFRleHRMZW5ndGgiLCJhcnRpY2xlIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImFydGljbGVFbGVtZW50IiwiZW1wQ29udGVudCIsImxheW91dEEiLCJsYXlvdXRBRWxlbWVudCIsImFzVGltZXN0YW1wIiwic3BvcnREZXNrdG9wRGF0ZSIsInNwb3J0UmVzcG9uc2l2ZURhdGUiLCJmaXJzdF9jcmVhdGVkIiwicGFyc2UiLCJjbGVhbkt2cyIsImdldFNwb3J0UmVzcG9uc2l2ZVVwZGF0ZWRUaW1lc3RhbXAiLCJ0aW1lRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0aW1lc3RhbXAiLCJsYXN0X3VwZGF0ZWQiLCJnZXREYXhFbnZpcm9ubWVudHMiLCJnZXREb21haW4iLCJzaXRlQ2F0YWx5c3RQYWdlVHlwZSIsIm1hcHBpbmdUYWJsZSIsInNpdGVDYXRhbHlzdENvb2tpZVZhbHVlIiwibm93IiwiZ2V0VXNlclRyYWNraW5nQ29va2llIiwiT0xEX1VTRVJfVFJBQ0tJTkdfQ09PS0lFIiwiVVNFUl9UUkFDS0lOR19DT09LSUUiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwidmlkZW9QcmVyb2xsV2FzUGxheWVkIiwiX3NldFBlcnNpc3RlbnRMYWJlbHMiLCJfc2V0UGxheWxpc3RMYWJlbHMiLCJfc3RyZWFtU2Vuc2VOb3RpZnkiLCJtZWRpYUxlbmd0aCIsIl9nZXRDbGlwS2V5VmFsdWVzIiwicG9zaXRpb25IZWFkIiwiX3N0cmVhbVNlbnNlU2V0dGVyIiwiY2xpcCIsIm1lZGlhT2Zmc2V0IiwiYzEiLCJtZWRpYVBsYXllck5hbWUiLCJjNSIsImJfYXZfYWN0aW9uIiwiX2dldEFWQWN0aW9uIiwidmlkZW9QbGF5c0F1dG9tYXRpY2FsbHkiLCJuc19zdF9jcyIsIm5zX3N0X3ZvIiwibnNfc3Rfd3MiLCJuc19zdF9lcCIsIm5zX3N0X3NuIiwicGxheWxpc3RLZXlWYWx1ZXMiLCJiX2F2X2FkIiwiYl9hdl9mb3JtYXQiLCJiX2F2X3BsaXN0IiwiYl9hdl9tZXRob2QiLCJiX2F2X3NvdXJjZSIsIm5zX3N0X3BsIiwibWVkaWFOYW1lIiwiYXZfYWN0aW9uIiwiaGVhZFBvc2l0aW9uU2Vjb25kcyIsImV2ZW50UHJvcHMiLCJuc19zdF91aSIsIm5zRXZlbnQiLCJwcm9wcyIsIm1ldGhvZCIsInBsYXllckV2ZW50VHlwZSIsImlzTGl2ZSIsInNldE92ZXJyaWRlIiwiZ2V0T3ZlcnJpZGVzIiwiU1NDSGVscGVyIiwiYW5hbHl0aWNzQ29uZmlnIiwiZ2V0QW5hbHl0aWNzQ29uZmlnIiwic3NjSG9zdCIsImh0dHAiLCJodHRwcyIsImNvbVNjb3JlSG9zdCIsImhhc1VzZXJUcmFja2luZ0Nvb2tpZSIsImdldENvbVNjb3JlQmFzZVVybCIsImdldFNzY0Jhc2VVcmwiLCJpc1NlY3VyZSIsImluaXRpYWxEYXRhIiwiYWRzUmVxdWVzdGVkIiwiYWRzUmVuZGVyZWQiLCJhZHNFbXB0eSIsImFkc1Nsb3RzIiwiYWRzU2h1dCIsImhhbmRsZXJzIiwidW5iaW5kIiwiZXZlbnRIYW5kbGVycyIsImhhbmRsZXIiLCJyZWR1Y2VyIiwibm9ybWFsaXNlZEV2ZW50cyIsImlzQXJyYXkiLCJuZXh0IiwiZnJlZXplIiwiaW1wbGVtZW50YXRpb24iLCJ3aW5kb3dPbmxvYWQiLCJsb2FkZWQiLCJpc05pZWxzZW5Mb2FkZWRJbnRlcnZhbCIsImxvYWROaWVsc2VuQXUiLCJub2xfdCIsImNpZCIsImNvbnRlbnQiLCJzZXJ2ZXIiLCJyZWNvcmQiLCJwb3N0IiwibG9hZE5pZWxzZW5OeiIsImJvZHkiLCJlbmNvZGVVUkkiLCJlbSIsInBvc3RXcml0ZSIsImdldExvYWRlZCIsInN0dWJDdXJyZW50U2NyaXB0VGFnIiwiYXN5bmNTbG90Iiwib3JpZ2luIiwiSlNPTiIsInNvdXJjZSIsInBvc3RNZXNzYWdlIiwic3RyaW5naWZ5Iiwic3VjY2VzcyIsInJlZ2lzdGVyU2xvdCIsImdyb3Vwc1N0cmluZyIsInNldEFkS2V5VmFsdWUiLCJ1bml0Iiwic2V0TG9jYWxlIiwic2V0R3JvdXBTdGFydFdpZHRoIiwiZ2V0RmVhdHVyZXMiLCJnZXRGZWF0dXJlIiwiYWRTdHJpbmciLCJhZElkUHJlZml4Iiwia2V5VmFsdWVTdHJpbmciLCJhZFNsb3QiLCJpRnJhbWUiLCJzY3JvbGxpbmciLCJib3JkZXIiLCJ0cmFja0V2ZW50IiwicmVJbml0IiwicHJlZGljYXRlIiwic3VtbWFyeSIsImZlYXR1cmVOYW1lIiwiZmVhdHVyZXNDb25maWciLCJnZXRQYWxFbnYiLCJmZWF0dXJlRGF0YSIsIkZlYXR1cmUiLCJlbnZzIiwiZW52aXJvbm1lbnQiLCJpc0Vudmlyb25tZW50RW5hYmxlZCIsImdldE9uIiwib3B0aW9uIiwiZ2V0T3B0aW9ucyJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7OztBQ3RDQSxvQkFBQUEsQ0FBUSxDQUFSOztBQUVBLEtBQUlDLFlBQVksbUJBQUFELENBQVEsR0FBUixDQUFoQjtBQUNBLEtBQUlFLGNBQWMsbUJBQUFGLENBQVEsR0FBUixDQUFsQjtBQUNBLEtBQUlHLE9BQU8sbUJBQUFILENBQVEsR0FBUixDQUFYO0FBQ0EsS0FBSUksU0FBUyxtQkFBQUosQ0FBUSxHQUFSLENBQWI7QUFDQSxLQUFJSyxVQUFVLG1CQUFBTCxDQUFRLEdBQVIsQ0FBZDtBQUNBLEtBQUlNLFlBQVksbUJBQUFOLENBQVEsR0FBUixDQUFoQjtBQUNBLEtBQUlPLGtCQUFrQixtQkFBQVAsQ0FBUSxHQUFSLENBQXRCO0FBQ0EsS0FBSVEsUUFBUSxtQkFBQVIsQ0FBUSxHQUFSLENBQVo7QUFDQSxLQUFJUyxXQUFXLG1CQUFBVCxDQUFRLEdBQVIsQ0FBZjtBQUNBLEtBQUlVLFNBQVMsbUJBQUFWLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSVcsb0JBQW9CLG1CQUFBWCxDQUFRLEdBQVIsQ0FBeEI7QUFDQSxLQUFJWSxlQUFlLG1C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QUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3Qjs7Ozs7O0FDVkE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDLEU7Ozs7OztBQ1REO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxFOzs7Ozs7QUNURDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUMsRTs7Ozs7O0FDVEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDLEU7Ozs7OztBQ1REO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxFOzs7Ozs7QUNURDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU8sc0NBQXNDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEc7Ozs7OztBQzNCQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUMsRTs7Ozs7O0FDVEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxFOzs7Ozs7QUNkRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVMsV0FBVztBQUNwQjtBQUNBO0FBQ0EsRUFBQyxFOzs7Ozs7QUNyQkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQWtCO0FBQ2xCLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQSxNQUFLO0FBQ0w7QUFDQSxFQUFDLEU7Ozs7OztBQ2hIRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEc7Ozs7OztBQ0pBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBTyxNQUFNO0FBQ2I7QUFDQSxHOzs7Ozs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBLHVCQUFzQjtBQUN0QixFQUFDO0FBQ0Q7QUFDQTtBQUNBLG1HO0FBQ0E7QUFDQSxFQUFDLEU7Ozs7OztBQ2pCRDtBQUNBOztBQUVBLDZCQUE0QixnQkFBZ0IsNkJBQTZCLEdBQUcsRTs7Ozs7O0FDSDVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7QUFDRDtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxFOzs7Ozs7QUMzQkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5RUFBd0Usd0JBQXdCLFVBQVUsR0FBRztBQUM3RyxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUMsRTs7Ozs7O0FDYkQ7QUFDQTtBQUNBO0FBQ0EsMkRBQTBELG9CQUFvQixFOzs7Ozs7QUNIOUU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBQyxhOzs7Ozs7QUNSRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQjs7Ozs7O0FDN0JBO0FBQ0Esb0Y7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBLCtEQUE4RCx3QkFBd0IsRTs7Ozs7O0FDSHRGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDLGU7Ozs7OztBQ1BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUMsRTs7Ozs7O0FDTkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUNBQWtDLHdCQUF3Qix3QkFBd0IsWUFBWSxFQUFFO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQSxJQUFHO0FBQ0gsRTs7Ozs7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxFOzs7Ozs7QUNKRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHOzs7Ozs7QUNaQTtBQUNBOztBQUVBLDJDQUEwQyxnQ0FBb0MsRTs7Ozs7O0FDSDlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBa0MsVUFBVSxFQUFFO0FBQzlDLG9CQUFtQixzQ0FBc0M7QUFDekQsRUFBQyxvQ0FBb0M7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNILEVBQUMsVzs7Ozs7O0FDaENELDBDOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxFOzs7Ozs7QUNuQkQsdUJBQXNCO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRzs7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHOzs7Ozs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLE1BQUssVUFBVTtBQUNmLElBQUc7QUFDSCxHOzs7Ozs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDLEU7Ozs7OztBQ1hEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF3QixtRUFBbUU7QUFDM0YsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxnQjs7Ozs7O0FDaEJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUFzQixPQUFPO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE2QjtBQUM3QiwyQkFBMEI7QUFDMUIsMkJBQTBCO0FBQzFCLHNCQUFxQjtBQUNyQjtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE2RCxPQUFPO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1QsUUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBLElBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTCxJQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUF5QjtBQUN6QixzQkFBcUI7QUFDckIsMkJBQTBCO0FBQzFCLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEc7Ozs7OztBQzdJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEc7Ozs7OztBQ0pBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSCxHOzs7Ozs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBcUMsaUJBQWlCLEVBQUU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFnRSxnQkFBZ0I7QUFDaEY7QUFDQTtBQUNBLElBQUcsMkNBQTJDLGdDQUFnQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUI7Ozs7OztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHOzs7Ozs7QUNYQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRzs7Ozs7O0FDUEEscUI7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRzs7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBeUIsa0JBQWtCLEVBQUU7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRyxVQUFVO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRzs7Ozs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNEIsYUFBYTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF3QyxvQ0FBb0M7QUFDNUUsNkNBQTRDLG9DQUFvQztBQUNoRixNQUFLLDJCQUEyQixvQ0FBb0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFnQixtQkFBbUI7QUFDbkM7QUFDQTtBQUNBLGtDQUFpQywyQkFBMkI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBLEc7Ozs7OztBQ3JFQSx3Qjs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJGQUFnRixhQUFhLEVBQUU7O0FBRS9GO0FBQ0Esc0RBQXFELDBCQUEwQjtBQUMvRTtBQUNBLEc7Ozs7OztBQ1pBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1FQUFrRSwrQkFBK0I7QUFDakcsRzs7Ozs7O0FDTkE7QUFDQSxXQUFVO0FBQ1YsRzs7Ozs7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFvQixhQUFhO0FBQ2pDLElBQUc7QUFDSCxHOzs7Ozs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBTztBQUNQO0FBQ0EsUUFBTztBQUNQO0FBQ0EsUUFBTyxrQ0FBa0MsZ0NBQWdDLGFBQWE7QUFDdEYsOEJBQTZCLG1DQUFtQyxhQUFhO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQSw0REFBMkQ7QUFDM0Q7QUFDQSxpREFBZ0QsaUJBQWlCLEVBQUU7QUFDbkU7QUFDQSwyREFBMEQsYUFBYSxFQUFFO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBTztBQUNQLDJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEc7Ozs7OztBQ3BGQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQ0FBK0IscUJBQXFCO0FBQ3BELGdDQUErQixTQUFTLEVBQUU7QUFDMUMsRUFBQyxVQUFVOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUEyQixTQUFTLG1CQUFtQjtBQUN2RCxnQ0FBK0IsYUFBYTtBQUM1QztBQUNBLElBQUcsVUFBVTtBQUNiO0FBQ0EsRzs7Ozs7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSCxHOzs7Ozs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU8sVUFBVSxjQUFjO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUssR0FBRztBQUNSO0FBQ0EsRzs7Ozs7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQzs7QUFFRCxzQzs7Ozs7O0FDWEE7QUFDQTtBQUNBO0FBQ0EsMkZBQXNGO0FBQ3RGO0FBQ0E7QUFDQSxHOzs7Ozs7QUNOQTtBQUNBO0FBQ0EsZ0Q7Ozs7OztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBc0I7QUFDdEIscUJBQW9CLHVCQUF1QixTQUFTLElBQUk7QUFDeEQsSUFBRztBQUNILEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBeUQ7QUFDekQ7QUFDQSxNQUFLO0FBQ0w7QUFDQSx1QkFBc0IsaUNBQWlDO0FBQ3ZELE1BQUs7QUFDTCxJQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUE4RCw4QkFBOEI7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJEQUEwRCxnQkFBZ0I7O0FBRTFFO0FBQ0E7QUFDQTtBQUNBLHFCQUFvQixvQkFBb0I7O0FBRXhDLDJDQUEwQyxvQkFBb0I7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSCx5QkFBd0IsZUFBZSxFQUFFO0FBQ3pDLHlCQUF3QixnQkFBZ0I7QUFDeEMsRUFBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQW9ELEtBQUssUUFBUSxpQ0FBaUM7QUFDbEcsRUFBQztBQUNEO0FBQ0EsZ0RBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDOzs7Ozs7QUMxT0EscUM7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEwRCxzQkFBc0I7QUFDaEYsaUZBQWdGLHNCQUFzQjtBQUN0RyxHOzs7Ozs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHOzs7Ozs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSCxHOzs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNILEU7Ozs7OztBQ1RBO0FBQ0E7QUFDQSx5RDs7Ozs7O0FDRkE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOEJBQTZCO0FBQzdCLGVBQWM7QUFDZDtBQUNBLEVBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxnQ0FBK0I7QUFDL0I7QUFDQTtBQUNBLFdBQVU7QUFDVixFQUFDLEU7Ozs7OztBQ2hCRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEc7Ozs7OztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUdBQXdHLE9BQU87QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFOzs7Ozs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWdDO0FBQ2hDLGVBQWM7QUFDZCxrQkFBaUI7QUFDakI7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCOzs7Ozs7OztBQ2pDQSxLQUFJUSxRQUFRLG1CQUFBUixDQUFRLEdBQVIsQ0FBWjs7QUFFQSxLQUFJdUMsWUFBWSxTQUFaQSxTQUFZLEdBQVk7QUFDeEIvQixXQUFNZ0MsZUFBTixDQUFzQixXQUF0QjtBQUNILEVBRkQ7O0FBSUFOLFFBQU9DLE9BQVAsR0FBaUJJLFNBQWpCLEM7Ozs7Ozs7O0FDTkE7QUFDQTs7OztBQUtBLEtBQUlqQixPQUFNLG1CQUFBdEIsQ0FBUSxHQUFSLEVBQWtCLE9BQWxCLENBQVY7O0FBRUEsS0FBSXlDLGNBQWMsRUFBbEIsQyxDQUF1Qjs7O0FBR3ZCOzs7Ozs7QUFNQSxLQUFJQyxlQUFlLFNBQWZBLFlBQWUsQ0FBU0MsT0FBVCxFQUFrQkMsWUFBbEIsRUFBZ0NDLGNBQWhDLEVBQWdEO0FBQy9ELFNBQUksT0FBT0YsT0FBUCxLQUFtQixXQUFuQixJQUFrQ0EsWUFBWSxFQUE5QyxJQUFvREEsWUFBWSxJQUFwRSxFQUEwRTtBQUN0RSxhQUFJRyxRQUFRLElBQUlDLE1BQUosQ0FBVyxZQUFZRixjQUFaLEdBQTZCLFNBQXhDLENBQVo7QUFDQSxnQkFBT0YsUUFBUUMsWUFBUixFQUFzQkksS0FBdEIsQ0FBNEJGLEtBQTVCLENBQVA7QUFDSDtBQUNKLEVBTEQ7O0FBT0EsS0FBSUcsV0FBVyxTQUFYQSxRQUFXLENBQVNDLE9BQVQsRUFBa0JDLE1BQWxCLEVBQTBCO0FBQ3JDLFNBQUlDLGNBQUo7QUFBQSxTQUNJQyxNQUFNQyxTQUFTQyxvQkFBVCxDQUE4QkwsT0FBOUIsRUFBdUMsQ0FBdkMsQ0FEVjtBQUVBLFNBQUksT0FBT0csR0FBUCxLQUFlLFdBQWYsSUFDQUEsUUFBUSxFQURSLElBRUFBLFFBQVEsSUFGUixJQUdBLE9BQU9GLE1BQVAsS0FBa0IsUUFIdEIsRUFHZ0M7QUFDNUJDLDBCQUFpQlYsYUFBYVcsR0FBYixFQUFrQixJQUFsQixFQUF3QkYsTUFBeEIsQ0FBakI7QUFDQSxnQkFBUUMsbUJBQW1CLElBQTNCO0FBQ0g7QUFDRCxZQUFPLEtBQVA7QUFDSCxFQVhEOztBQWFBOzs7Ozs7Ozs7Ozs7OztBQWNBLEtBQUlJLG9CQUFvQixTQUFwQkEsaUJBQW9CLENBQVVDLElBQVYsRUFBZ0JDLE9BQWhCLEVBQXlCQyxXQUF6QixFQUFzQ0MsS0FBdEMsRUFBNkM7QUFDakUsU0FBSUMsT0FBSjtBQUFBLFNBQ0lDLFNBQVMsS0FEYjtBQUFBLFNBRUlDLFlBQVksQ0FGaEI7O0FBSUEsU0FBSSxDQUFDTixJQUFMLEVBQVc7QUFDUCxnQkFBTyxLQUFQO0FBQ0g7O0FBRURHLGFBQVEsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixHQUE0QkEsS0FBNUIsR0FBb0MsRUFBNUM7QUFDQUQsbUJBQWNBLGdCQUFnQixJQUFoQixHQUF1QixJQUF2QixHQUE4QixLQUE1QztBQUNBRSxlQUFVRixjQUFjRixJQUFkLEdBQXFCQSxLQUFLTyxVQUFwQzs7QUFFQSxZQUFPSCxXQUFXRSxZQUFZSCxLQUE5QixFQUFxQztBQUNqQyxhQUFJSyxnQkFBZ0JQLFFBQVFHLE9BQVIsQ0FBcEI7QUFDQSxhQUFJSSxnQkFBZ0IsQ0FBcEIsRUFBdUI7QUFDbkJILHNCQUFTRCxPQUFUO0FBQ0E7QUFDSCxVQUhELE1BR08sSUFBSUksZ0JBQWdCLENBQXBCLEVBQXVCO0FBQzFCO0FBQ0g7QUFDREosbUJBQVVBLFFBQVFHLFVBQWxCO0FBQ0FEO0FBQ0g7QUFDRCxZQUFPRCxNQUFQO0FBQ0gsRUF6QkQ7O0FBMkJBLEtBQUlJLGtCQUFrQixTQUFsQkEsZUFBa0IsR0FBVztBQUM3QixZQUFReEMsT0FBT3lDLFFBQVAsQ0FBZ0JDLFFBQWhCLENBQXlCQyxPQUF6QixDQUFpQyxVQUFqQyxNQUFpRCxDQUFDLENBQWxELEdBQ0YsU0FERSxHQUVEM0MsT0FBT3lDLFFBQVAsQ0FBZ0JDLFFBQWhCLENBQXlCQyxPQUF6QixDQUFpQyxZQUFqQyxNQUFtRCxDQUFDLENBQXBELEdBQ0QsV0FEQyxHQUVEM0MsT0FBT3lDLFFBQVAsQ0FBZ0JDLFFBSnRCO0FBS0gsRUFORDs7QUFRQWxDLFFBQU9DLE9BQVAsR0FBaUI7QUFDYm1DLGVBQVUsa0JBQVNDLElBQVQsRUFBZUMsSUFBZixFQUFxQkMsU0FBckIsRUFBZ0M7QUFDdEMsYUFBSUMsT0FBSjtBQUNBLGdCQUFPLFlBQVc7QUFDZCxpQkFBSUMsVUFBVSxJQUFkO0FBQUEsaUJBQW9CQyxPQUFPQyxTQUEzQjtBQUNBLGlCQUFJQyxRQUFRLFNBQVJBLEtBQVEsR0FBVztBQUNuQkosMkJBQVUsSUFBVjtBQUNBLHFCQUFJLENBQUNELFNBQUwsRUFBZ0I7QUFBRUYsMEJBQUtRLEtBQUwsQ0FBV0osT0FBWCxFQUFvQkMsSUFBcEI7QUFBNEI7QUFDakQsY0FIRDtBQUlBLGlCQUFJSSxVQUFVUCxhQUFhLENBQUNDLE9BQTVCO0FBQ0FPLDBCQUFhUCxPQUFiO0FBQ0FBLHVCQUFVUSxXQUFXSixLQUFYLEVBQWtCTixJQUFsQixDQUFWO0FBQ0EsaUJBQUlRLE9BQUosRUFBYTtBQUFFVCxzQkFBS1EsS0FBTCxDQUFXSixPQUFYLEVBQW9CQyxJQUFwQjtBQUE0QjtBQUM5QyxVQVZEO0FBV0gsTUFkWTtBQWViTyx1QkFBa0IsMEJBQVNDLEdBQVQsRUFBYztBQUM1QixhQUFJQyxPQUFPL0IsU0FBUytCLElBQVQsSUFBaUIvQixTQUFTQyxvQkFBVCxDQUE4QixNQUE5QixFQUFzQyxDQUF0QyxDQUE1QjtBQUFBLGFBQ0krQixPQUFPaEMsU0FBU2lDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FEWDs7QUFHQUQsY0FBS0UsSUFBTCxHQUFZLFVBQVo7QUFDQUYsY0FBS0csR0FBTCxHQUFXLFlBQVg7QUFDQUgsY0FBS0ksSUFBTCxHQUFZTixHQUFaOztBQUVBQyxjQUFLTSxXQUFMLENBQWlCTCxJQUFqQjtBQUNILE1BeEJZO0FBeUJiTSxpQkFBWSxvQkFBU0MsTUFBVCxFQUFpQjtBQUN6QixhQUFJLE9BQU9BLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDL0IsaUJBQUlDLENBQUo7QUFBQSxpQkFBT0MsQ0FBUDtBQUFBLGlCQUFVQyxTQUFTSCxPQUFPSSxLQUFQLENBQWEsR0FBYixDQUFuQjtBQUNBLGtCQUFLSCxJQUFJLENBQVQsRUFBWUEsSUFBSUUsT0FBT0UsTUFBdkIsRUFBK0JKLEdBQS9CLEVBQ0E7QUFDSSxxQkFBSUUsT0FBT0YsQ0FBUCxFQUFVSSxNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3RCSCx5QkFBSUMsT0FBT0YsQ0FBUCxFQUFVSyxNQUFWLENBQWlCLENBQWpCLEVBQW9CQyxXQUFwQixFQUFKO0FBQ0FKLDRCQUFPRixDQUFQLElBQVlDLElBQUlDLE9BQU9GLENBQVAsRUFBVU8sTUFBVixDQUFpQixDQUFqQixDQUFoQjtBQUNIO0FBQ0o7QUFDRCxvQkFBT0wsT0FBT00sSUFBUCxDQUFZLEdBQVosQ0FBUDtBQUNIO0FBQ0osTUFyQ1k7QUFzQ2I7OztBQUdBaEYsVUFBSyxlQUFZO0FBQ2JBLGNBQUlpRixJQUFKLENBQVMseUJBQVQsRUFBb0MxQixTQUFwQztBQUNILE1BM0NZO0FBNENiMkIsa0JBQWEscUJBQVNuRCxHQUFULEVBQWNvRCxTQUFkLEVBQXlCO0FBQ2xDLGFBQUksT0FBT3BELEdBQVAsS0FBZSxXQUFmLElBQ0FBLFFBQVEsRUFEUixJQUVBQSxRQUFRLElBRlIsSUFHQSxPQUFPb0QsU0FBUCxLQUFxQixRQUhyQixJQUdpQ0EsY0FBYyxFQUhuRCxFQUd1RDtBQUNuRCxpQkFBSSxDQUFDL0QsYUFBYVcsR0FBYixFQUFrQixXQUFsQixFQUErQm9ELFNBQS9CLENBQUwsRUFBZ0Q7QUFDNUNwRCxxQkFBSW9ELFNBQUosR0FBZ0JwRCxJQUFJb0QsU0FBSixHQUFnQixHQUFoQixHQUFzQkEsU0FBdEM7QUFDSDtBQUNELG9CQUFPcEQsSUFBSW9ELFNBQVg7QUFDSDtBQUNKLE1BdERZO0FBdURiQyxxQkFBZ0Isd0JBQVNyRCxHQUFULEVBQWNvRCxTQUFkLEVBQXlCO0FBQ3JDLGFBQUksT0FBT3BELEdBQVAsS0FBZSxXQUFmLElBQ0FBLFFBQVEsRUFEUixJQUVBQSxRQUFRLElBRlIsSUFHQSxPQUFPb0QsU0FBUCxLQUFxQixRQUhyQixJQUdpQ0EsY0FBYyxFQUhuRCxFQUd1RDtBQUNuRCxpQkFBSS9ELGFBQWFXLEdBQWIsRUFBa0IsV0FBbEIsRUFBK0JvRCxTQUEvQixDQUFKLEVBQStDO0FBQzNDcEQscUJBQUlvRCxTQUFKLEdBQWdCcEQsSUFBSW9ELFNBQUosQ0FBY0UsT0FBZCxDQUFzQixNQUFNRixTQUE1QixFQUF1QyxFQUF2QyxDQUFoQjtBQUNBcEQscUJBQUlvRCxTQUFKLEdBQWdCcEQsSUFBSW9ELFNBQUosQ0FBY0UsT0FBZCxDQUFzQkYsU0FBdEIsRUFBaUMsRUFBakMsQ0FBaEI7QUFDSDtBQUNELG9CQUFPcEQsSUFBSW9ELFNBQVg7QUFDSDtBQUNKLE1BbEVZO0FBbUViRyxzQkFBaUIseUJBQVNILFNBQVQsRUFBb0I7QUFDakMsYUFBSXBELE1BQU1DLFNBQVNDLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLENBQVY7QUFDQSxnQkFBTyxLQUFLaUQsV0FBTCxDQUFpQm5ELEdBQWpCLEVBQXNCb0QsU0FBdEIsQ0FBUDtBQUNILE1BdEVZO0FBdUViSSx5QkFBb0IsNEJBQVNKLFNBQVQsRUFBb0I7QUFDcEMsYUFBSXBELE1BQU1DLFNBQVNDLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLENBQVY7QUFDQSxnQkFBTyxLQUFLbUQsY0FBTCxDQUFvQnJELEdBQXBCLEVBQXlCb0QsU0FBekIsQ0FBUDtBQUNILE1BMUVZO0FBMkViakUsc0JBQWlCLHlCQUFTaUUsU0FBVCxFQUFvQjtBQUNqQyxhQUFJcEQsTUFBTUMsU0FBU0Msb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0MsQ0FBdEMsQ0FBVjtBQUNBLGdCQUFPLEtBQUtpRCxXQUFMLENBQWlCbkQsR0FBakIsRUFBc0JvRCxTQUF0QixDQUFQO0FBQ0gsTUE5RVk7QUErRWJLLHlCQUFvQiw0QkFBU0wsU0FBVCxFQUFvQjtBQUNwQyxhQUFJcEQsTUFBTUMsU0FBU0Msb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0MsQ0FBdEMsQ0FBVjtBQUNBLGdCQUFPLEtBQUttRCxjQUFMLENBQW9CckQsR0FBcEIsRUFBeUJvRCxTQUF6QixDQUFQO0FBQ0gsTUFsRlk7QUFtRmJNLG1CQUFjLHNCQUFTNUQsTUFBVCxFQUFpQjtBQUMzQixnQkFBT0YsU0FBUyxNQUFULEVBQWlCRSxNQUFqQixDQUFQO0FBQ0gsTUFyRlk7O0FBdUZiNkQsd0JBQW1CLDJCQUFTQyxJQUFULEVBQWVDLGNBQWYsRUFBK0I7QUFDOUNBLDBCQUFpQkEsbUJBQW1CLEtBQXBDOztBQUVBLGFBQUksT0FBT0QsSUFBUCxLQUFnQixXQUFwQixFQUFpQztBQUM3QixvQkFBTyxFQUFQO0FBQ0g7O0FBRURBLGdCQUFPQSxLQUFLTixPQUFMLENBQWEsTUFBYixFQUFxQixLQUFyQixFQUE0QkEsT0FBNUIsQ0FBb0MsTUFBcEMsRUFBNEMsS0FBNUMsQ0FBUDtBQUNBLGFBQUk3RCxRQUFRLElBQUlDLE1BQUosQ0FBVyxXQUFXa0UsSUFBWCxHQUFrQixXQUE3QixDQUFaO0FBQUEsYUFDSUUsVUFBVXJFLE1BQU1zRSxJQUFOLENBQVd6RixVQUFVdkIsTUFBVixDQUFpQmlILGlCQUFqQixHQUFxQ0MsTUFBaEQsQ0FEZDs7QUFHQSxhQUFJSCxZQUFZLElBQWhCLEVBQXNCO0FBQ2xCLG9CQUFPLEVBQVA7QUFDSDs7QUFFRCxnQkFBT0ksbUJBQW1CTCxpQkFBaUJDLFFBQVEsQ0FBUixFQUFXUixPQUFYLENBQW1CLGtCQUFuQixFQUF1QyxFQUF2QyxDQUFqQixHQUE4RFEsUUFBUSxDQUFSLENBQWpGLENBQVA7QUFDSCxNQXZHWTtBQXdHYkssY0FBUyxtQkFBVztBQUNoQixnQkFBUSxrQkFBaUJDLElBQWpCLENBQXNCL0YsT0FBT3lDLFFBQVAsQ0FBZ0J1QixJQUF0QyxLQUErQ3BDLFNBQVNvRSxNQUFULENBQWdCckQsT0FBaEIsQ0FBd0IsWUFBeEIsTUFBMEMsQ0FBQztBQUFsRztBQUNILE1BMUdZO0FBMkdic0QsbUJBQWMsd0JBQVc7QUFDckIsZ0JBQVEsd0JBQXVCRixJQUF2QixDQUE0Qi9GLE9BQU95QyxRQUFQLENBQWdCdUIsSUFBNUMsS0FBcURwQyxTQUFTb0UsTUFBVCxDQUFnQnJELE9BQWhCLENBQXdCLGtCQUF4QixNQUFnRCxDQUFDO0FBQTlHO0FBQ0gsTUE3R1k7QUE4R2J1RCxhQUFRLGtCQUFXO0FBQ2YsYUFBSXpELFdBQVd4QyxVQUFVdkIsTUFBVixDQUFpQmlILGlCQUFqQixFQUFmO0FBQ0EsYUFBSSxpQ0FBaUNJLElBQWpDLENBQXNDdEQsU0FBU3VCLElBQS9DLENBQUosRUFBMEQ7QUFDdEQsb0JBQU8sTUFBUDtBQUNIO0FBQ0QsYUFBSW1DLFVBQVUxRCxTQUFTdUIsSUFBVCxDQUFjMUMsS0FBZCxDQUFvQix5Q0FBcEIsQ0FBZDtBQUNBLGdCQUFPNkUsWUFBWSxJQUFaLEdBQW1CLE1BQW5CLEdBQTRCQSxRQUFRLENBQVIsQ0FBbkM7QUFDSCxNQXJIWTtBQXNIYkMsZ0JBQVcscUJBQVc7QUFDbEIsZ0JBQU8sS0FBS0YsTUFBTCxPQUFrQixNQUF6QjtBQUNILE1BeEhZO0FBeUhiRyxnQkFBVyxxQkFBVztBQUNsQixnQkFBTyxLQUFLSCxNQUFMLE9BQWtCLE1BQWxCLElBQTRCLEtBQUtBLE1BQUwsT0FBa0IsT0FBckQ7QUFDSCxNQTNIWTtBQTRIYkksaUJBQVksc0JBQVc7QUFDbkIsYUFBSUMsTUFBTSxJQUFJQyxLQUFKLEVBQVY7QUFDQXhHLGdCQUFPeUcsT0FBUCxDQUFlN0csR0FBZixDQUFtQjJHLElBQUlHLEtBQXZCO0FBQ0gsTUEvSFk7QUFnSWI7Ozs7Ozs7Ozs7O0FBV0FDLDhCQUF5QixpQ0FBUzVFLElBQVQsRUFBZWdELFNBQWYsRUFBMEI2QixLQUExQixFQUFpQ0MsVUFBakMsRUFBNkM7QUFDbEVBLHNCQUFhLE9BQU9BLFVBQVAsS0FBc0IsV0FBdEIsSUFBcUNBLGVBQWUsSUFBcEQsR0FBMkQsSUFBM0QsR0FBa0UsS0FBL0U7O0FBRUEsYUFBSTNFLFFBQVMsT0FBTzBFLEtBQVAsS0FBaUIsV0FBakIsSUFBZ0NBLFVBQVUsQ0FBMUMsR0FBOEMsQ0FBOUMsR0FBa0RBLEtBQS9EO0FBQUEsYUFDSTVFLFVBQVUsU0FBVkEsT0FBVSxDQUFVRCxJQUFWLEVBQWdCO0FBQ3RCLGlCQUFJLENBQUNBLElBQUQsSUFBUyxPQUFPQSxLQUFLZ0QsU0FBWixLQUEwQixXQUFuQyxJQUFrRCxPQUFPaEQsS0FBS1AsT0FBWixLQUF3QixXQUExRSxJQUNDcUYsY0FBYzlFLEtBQUtQLE9BQUwsQ0FBYXNGLFdBQWIsT0FBK0IsTUFEbEQsRUFDMkQ7QUFDdkQsd0JBQU8sQ0FBQyxDQUFSO0FBQ0gsY0FIRCxNQUdPLElBQUkvRSxLQUFLZ0QsU0FBTCxDQUFlcEMsT0FBZixDQUF1Qm9DLFNBQXZCLE1BQXNDLENBQUMsQ0FBM0MsRUFBOEM7QUFDakQsd0JBQU8sQ0FBUDtBQUNIO0FBQ0osVUFSTDs7QUFVQSxnQkFBT2pELGtCQUFrQkMsSUFBbEIsRUFBd0JDLE9BQXhCLEVBQWlDLEtBQWpDLEVBQXdDRSxLQUF4QyxDQUFQO0FBQ0gsTUF6Slk7O0FBMkpiOzs7Ozs7Ozs7O0FBVUE2RSxpQ0FBNEIsb0NBQVNoRixJQUFULEVBQWVQLE9BQWYsRUFBd0JTLFdBQXhCLEVBQXFDQyxLQUFyQyxFQUE0QztBQUNwRSxnQkFBT0osa0JBQWtCQyxJQUFsQixFQUF3QixVQUFVQSxJQUFWLEVBQWdCO0FBQzNDLG9CQUFPQSxRQUFRQSxLQUFLUCxPQUFiLElBQXdCTyxLQUFLUCxPQUFMLENBQWFzRixXQUFiLE9BQStCdEYsT0FBdkQsR0FBaUUsQ0FBakUsR0FBcUUsQ0FBNUU7QUFDSCxVQUZNLEVBRUpTLFdBRkksRUFFU0MsS0FGVCxDQUFQO0FBR0gsTUF6S1k7O0FBMktiOzs7Ozs7Ozs7OztBQVdBOEUscUJBQWdCLHdCQUFTakYsSUFBVCxFQUFlZ0QsU0FBZixFQUEwQjZCLEtBQTFCLEVBQWlDQyxVQUFqQyxFQUE2QztBQUN6RCxnQkFBUSxLQUFLRix1QkFBTCxDQUE2QjVFLElBQTdCLEVBQW1DZ0QsU0FBbkMsRUFBOEM2QixLQUE5QyxFQUFxREMsVUFBckQsTUFBcUUsS0FBckUsR0FBNkUsS0FBN0UsR0FBcUYsSUFBN0Y7QUFDSCxNQXhMWTs7QUEwTGI7Ozs7Ozs7OztBQVNBSSxxQ0FBZ0Msd0NBQVNDLE1BQVQsRUFBaUJsRCxJQUFqQixFQUF1QjtBQUNuRCxhQUFJSSxDQUFKLEVBQ0krQyxJQURKLEVBRUlDLFNBRko7QUFHQSxhQUFJRixVQUFVbEQsSUFBZCxFQUFvQjtBQUNoQm1ELG9CQUFPRCxPQUFPckYsb0JBQVAsQ0FBNEIsR0FBNUIsQ0FBUDtBQUNBdUYseUJBQVksSUFBSS9GLE1BQUosQ0FBVzJDLE9BQUssR0FBaEIsQ0FBWjtBQUNBLGtCQUFJSSxJQUFJLENBQVIsRUFBV0EsSUFBSStDLEtBQUszQyxNQUFwQixFQUE0QkosR0FBNUIsRUFBaUM7QUFDN0IscUJBQUksT0FBTytDLEtBQUsvQyxDQUFMLEVBQVFKLElBQWYsS0FBd0IsV0FBeEIsSUFBdUNBLFNBQVMsRUFBaEQsSUFBc0RtRCxLQUFLL0MsQ0FBTCxFQUFRSixJQUFSLENBQWExQyxLQUFiLENBQW1COEYsU0FBbkIsTUFBa0MsSUFBNUYsRUFBa0c7QUFDOUYsNEJBQVFoRCxJQUFJLENBQVo7QUFDSDtBQUNKO0FBQ0o7QUFDRCxnQkFBTyxDQUFQO0FBQ0gsTUFqTlk7O0FBbU5iOzs7O0FBSUFpRCxlQUFVLGtCQUFTQyxHQUFULEVBQWN4RCxJQUFkLEVBQW9CeUQsRUFBcEIsRUFBd0I7QUFDOUIsYUFBSUQsSUFBSUUsV0FBUixFQUFxQjtBQUNqQkYsaUJBQUksTUFBTXhELElBQU4sR0FBYXlELEVBQWpCLElBQXVCQSxFQUF2QjtBQUNBRCxpQkFBSXhELE9BQU95RCxFQUFYLElBQWlCLFlBQVc7QUFDeEJELHFCQUFJLE1BQU14RCxJQUFOLEdBQWF5RCxFQUFqQixFQUFxQnZILE9BQU95SCxLQUE1QjtBQUNILGNBRkQ7QUFHQUgsaUJBQUlFLFdBQUosQ0FBZ0IsT0FBTzFELElBQXZCLEVBQTZCd0QsSUFBSXhELE9BQU95RCxFQUFYLENBQTdCO0FBQ0gsVUFORCxNQU1PO0FBQ0hELGlCQUFJSSxnQkFBSixDQUFxQjVELElBQXJCLEVBQTJCeUQsRUFBM0IsRUFBK0IsS0FBL0I7QUFDSDtBQUNKLE1Bak9ZO0FBa09iOzs7O0FBSUFJLGtCQUFhLHFCQUFTTCxHQUFULEVBQWN4RCxJQUFkLEVBQW9CeUQsRUFBcEIsRUFBd0I7QUFDakMsYUFBSSxPQUFPRCxHQUFQLEtBQWUsV0FBZixJQUE4QkEsUUFBUSxJQUExQyxFQUFnRDtBQUM1QztBQUNIO0FBQ0QsYUFBSUEsSUFBSU0sV0FBUixFQUFxQjtBQUNqQk4saUJBQUlNLFdBQUosQ0FBZ0IsT0FBTzlELElBQXZCLEVBQTZCd0QsSUFBSXhELE9BQU95RCxFQUFYLENBQTdCO0FBQ0FELGlCQUFJeEQsT0FBT3lELEVBQVgsSUFBaUIsSUFBakI7QUFDSCxVQUhELE1BR087QUFDSEQsaUJBQUlPLG1CQUFKLENBQXdCL0QsSUFBeEIsRUFBOEJ5RCxFQUE5QixFQUFrQyxLQUFsQztBQUNIO0FBQ0osTUFoUFk7QUFpUGI7Ozs7O0FBS0FPLG1CQUFjLHNCQUFTUixHQUFULEVBQWN4RCxJQUFkLEVBQW9CaUUsY0FBcEIsRUFBb0M7QUFDOUNBLDBCQUFpQkEsbUJBQW1CQyxTQUFuQixHQUErQixJQUEvQixHQUFzQ0QsY0FBdkQ7QUFDQSxhQUFJTixRQUFRN0YsU0FBU3FHLFdBQVQsQ0FBcUIsYUFBckIsQ0FBWjtBQUNBUixlQUFNUyxjQUFOLENBQXFCcEUsSUFBckIsRUFBMkIsSUFBM0IsRUFBaUMsSUFBakMsRUFBdUM5RCxNQUF2QyxFQUErQyxDQUEvQyxFQUFrRCxDQUFsRCxFQUFxRCxDQUFyRCxFQUF3RCxDQUF4RCxFQUEyRCxDQUEzRCxFQUE4RCxLQUE5RCxFQUFxRSxLQUFyRSxFQUE0RSxLQUE1RSxFQUFtRixLQUFuRixFQUEwRixDQUExRixFQUE2RixJQUE3RjtBQUNBLGFBQUkrSCxjQUFKLEVBQW9CO0FBQ2hCTixtQkFBTU0sY0FBTjtBQUNIO0FBQ0RULGFBQUlhLGFBQUosQ0FBa0JWLEtBQWxCO0FBQ0EsZ0JBQU9BLEtBQVA7QUFDSCxNQS9QWTs7QUFpUWJXLGtCQUFhLHFCQUFVWCxLQUFWLEVBQWlCO0FBQzFCLGFBQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1Isb0JBQU8sS0FBUDtBQUNIOztBQUVELGFBQUksT0FBT0EsTUFBTU0sY0FBYixLQUFnQyxVQUFwQyxFQUFnRDtBQUM1Q04sbUJBQU1NLGNBQU47QUFDSCxVQUZELE1BRU87QUFDSE4sbUJBQU1ZLFdBQU4sR0FBb0IsS0FBcEI7QUFDSDtBQUNKLE1BM1FZOztBQTZRYkMsOEJBQXlCLGlDQUFVYixLQUFWLEVBQWlCO0FBQ3RDLGFBQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1Isb0JBQU8sS0FBUDtBQUNIOztBQUVELGdCQUFPQSxNQUFNYyxnQkFBTixJQUEwQmQsTUFBTVksV0FBTixLQUFzQixLQUF2RDtBQUNILE1BblJZOztBQXFSYkcsV0FBTSxjQUFTQyxHQUFULEVBQWM7QUFDaEIsYUFBSSxPQUFPQSxHQUFQLEtBQWUsUUFBbkIsRUFBNkI7QUFDekIsb0JBQU9BLElBQUl4RCxPQUFKLENBQVksWUFBWixFQUEwQixFQUExQixFQUE4QkEsT0FBOUIsQ0FBc0MsWUFBdEMsRUFBb0QsRUFBcEQsQ0FBUDtBQUNIO0FBQ0QsZ0JBQU93RCxHQUFQO0FBQ0gsTUExUlk7O0FBNFJiQyxpQkFBWSxvQkFBVUMsR0FBVixFQUFlO0FBQ3ZCM0ksZ0JBQU95QyxRQUFQLENBQWdCdUIsSUFBaEIsR0FBdUIyRSxHQUF2QjtBQUNILE1BOVJZOztBQWdTYjs7Ozs7QUFLQUMseUJBQW9CLDRCQUFTckQsSUFBVCxFQUFlO0FBQy9CLGFBQUlzRCxRQUFRakgsU0FBU0Msb0JBQVQsQ0FBOEIsTUFBOUIsQ0FBWjtBQUFBLGFBQ0l1QyxDQURKO0FBRUEsY0FBS0EsSUFBSSxDQUFULEVBQVlBLElBQUl5RSxNQUFNckUsTUFBdEIsRUFBOEJKLEdBQTlCLEVBQW1DO0FBQy9CLGlCQUFJeUUsTUFBTXpFLENBQU4sRUFBUzBFLFlBQVQsQ0FBc0IsTUFBdEIsTUFBa0N2RCxJQUF0QyxFQUE0QztBQUN4Qyx3QkFBT3NELE1BQU16RSxDQUFOLEVBQVMwRSxZQUFULENBQXNCLFNBQXRCLENBQVA7QUFDSDtBQUNKO0FBQ0QsZ0JBQU8sRUFBUDtBQUNILE1BOVNZO0FBK1NiOzs7OztBQUtBQyw2QkFBd0IsZ0NBQVNDLFFBQVQsRUFBbUI7QUFDdkMsYUFBSUgsUUFBUWpILFNBQVNDLG9CQUFULENBQThCLE1BQTlCLENBQVo7QUFBQSxhQUNJdUMsQ0FESjtBQUVBLGNBQUtBLElBQUksQ0FBVCxFQUFZQSxJQUFJeUUsTUFBTXJFLE1BQXRCLEVBQThCSixHQUE5QixFQUFtQztBQUMvQixpQkFBSXlFLE1BQU16RSxDQUFOLEVBQVMwRSxZQUFULENBQXNCLFVBQXRCLE1BQXNDRSxRQUExQyxFQUFvRDtBQUNoRCx3QkFBT0gsTUFBTXpFLENBQU4sRUFBUzBFLFlBQVQsQ0FBc0IsU0FBdEIsQ0FBUDtBQUNIO0FBQ0o7QUFDRCxnQkFBTyxFQUFQO0FBQ0gsTUE3VFk7QUE4VGJHLGdCQUFXLG1CQUFTMUQsSUFBVCxFQUFlMkQsS0FBZixFQUFzQkMsT0FBdEIsRUFBK0I7QUFDdEMsYUFBSUMsSUFBSjtBQUNBLGFBQUksT0FBTzdELElBQVAsS0FBZ0IsV0FBaEIsSUFBK0JBLFNBQVMsRUFBeEMsSUFBOEMsT0FBTzJELEtBQVAsS0FBaUIsV0FBL0QsSUFBOEVBLFVBQVUsRUFBNUYsRUFBZ0c7QUFDNUYsaUJBQUksT0FBT0MsT0FBUCxLQUFtQixXQUFuQixJQUFrQ0EsWUFBWSxJQUE5QyxJQUFzREEsWUFBWSxDQUF0RSxFQUF5RTtBQUNyRTtBQUNBQSwyQkFBVSxLQUFLLEVBQUwsR0FBVSxFQUFWLEdBQWUsR0FBekI7QUFDSDtBQUNEQyxvQkFBTyxJQUFJQyxJQUFKLEVBQVA7QUFDQUQsa0JBQUtFLE9BQUwsQ0FBYUYsS0FBS0csT0FBTCxLQUFrQkosVUFBVSxJQUF6QyxFQU40RixDQU0xQztBQUNsRHZILHNCQUFTb0UsTUFBVCxHQUFrQndELG1CQUFtQmpFLElBQW5CLElBQXlCLEdBQXpCLEdBQTZCaUUsbUJBQW1CTixLQUFuQixDQUE3QixHQUF1RCxZQUF2RCxHQUFvRUUsS0FBS0ssV0FBTCxFQUFwRSxHQUNiLFlBRGEsR0FDQWpILGlCQURBLEdBQ2tCLFVBRHBDO0FBRUF6Qix5QkFBWTJJLElBQVosQ0FBaUIsQ0FBQyxLQUFELEVBQVFuRSxJQUFSLEVBQWMyRCxLQUFkLEVBQXFCQyxPQUFyQixDQUFqQjtBQUNIO0FBQ0osTUEzVVk7QUE0VWJRLGdCQUFXLG1CQUFTcEUsSUFBVCxFQUFlO0FBQ3RCLGFBQUlTLFNBQVMsT0FBT3BFLFNBQVNvRSxNQUE3QjtBQUFBLGFBQ0k0RCxRQUFRNUQsT0FBT3pCLEtBQVAsQ0FBYSxPQUFPaUYsbUJBQW1CakUsSUFBbkIsQ0FBUCxHQUFrQyxHQUEvQyxDQURaO0FBQUEsYUFFSTJELEtBRko7QUFHQSxhQUFJVSxNQUFNcEYsTUFBTixLQUFpQixDQUFyQixFQUF3QjtBQUNwQjBFLHFCQUFRckQsbUJBQW1CK0QsTUFBTUMsR0FBTixHQUFZdEYsS0FBWixDQUFrQixHQUFsQixFQUF1QnVGLEtBQXZCLEVBQW5CLENBQVI7QUFDSDtBQUNEL0kscUJBQVkySSxJQUFaLENBQWlCLENBQUMsS0FBRCxFQUFRbkUsSUFBUixFQUFjMkQsS0FBZCxDQUFqQjtBQUNBLGdCQUFPQSxLQUFQO0FBQ0gsTUFyVlk7QUFzVmJhLG1CQUFjLHNCQUFTeEUsSUFBVCxFQUFlO0FBQ3pCM0Qsa0JBQVNvRSxNQUFULEdBQWtCd0QsbUJBQW1CakUsSUFBbkIsSUFBeUIsb0RBQXpCLEdBQThFL0MsaUJBQTlFLEdBQWdHLFVBQWxIO0FBQ0F6QixxQkFBWTJJLElBQVosQ0FBaUIsQ0FBQyxRQUFELEVBQVduRSxJQUFYLENBQWpCO0FBQ0gsTUF6Vlk7QUEwVmJ5RSxxQkFBZ0IsMEJBQVc7QUFDdkIsZ0JBQU8sdUNBQXVDL0UsT0FBdkMsQ0FBK0MsT0FBL0MsRUFBd0QsVUFBU2dGLENBQVQsRUFBWTtBQUN2RSxpQkFBSUMsSUFBSUMsS0FBS0MsS0FBTCxDQUFXRCxLQUFLRSxNQUFMLEtBQWMsRUFBekIsQ0FBUjtBQUFBLGlCQUFzQ0MsSUFBSUwsTUFBTSxHQUFOLEdBQVlDLENBQVosR0FBaUJBLElBQUUsR0FBRixHQUFRLEdBQW5FO0FBQ0Esb0JBQU9JLEVBQUVDLFFBQUYsQ0FBVyxFQUFYLENBQVA7QUFDSCxVQUhNLENBQVA7QUFJSCxNQS9WWTtBQWdXYjs7O0FBR0FDLDJCQUFzQiw4QkFBUzdCLEdBQVQsRUFBYztBQUNoQyxhQUFJOEIsY0FBSjtBQUFBLGFBQ0lDLGVBREo7QUFBQSxhQUVJQyxvQkFBb0JoQyxHQUZ4QjtBQUdBLGFBQUksT0FBT0EsR0FBUCxLQUFlLFdBQWYsSUFBOEJBLFFBQVEsSUFBdEMsSUFBOENBLFFBQVEsRUFBMUQsRUFBOEQ7QUFDMUQ4Qiw4QkFBaUI7QUFDYnpHLHVCQUFXLEVBREU7QUFFYjRHLDJCQUFXLEVBRkU7QUFHYkMsdUJBQVcsRUFIRTtBQUlibkksMkJBQVcsRUFKRTtBQUtib0ksdUJBQVcsRUFMRTtBQU1iQywyQkFBVyxFQU5FO0FBT2JuRix5QkFBVyxFQVBFO0FBUWJvRix1QkFBVztBQVJFLGNBQWpCO0FBVUgsVUFYRCxNQVdPO0FBQ0gsaUJBQUlyQyxJQUFJaEcsT0FBSixDQUFZLEdBQVosTUFBcUIsQ0FBQyxDQUExQixFQUE2QjtBQUN6QmdJLHFDQUFvQmhDLElBQUloRSxNQUFKLENBQVcsQ0FBWCxFQUFjZ0UsSUFBSWhHLE9BQUosQ0FBWSxHQUFaLENBQWQsQ0FBcEI7QUFDSDtBQUNEK0gsK0JBQWtCQyxrQkFBa0JoRyxNQUFsQixDQUF5QmdHLGtCQUFrQmhJLE9BQWxCLENBQTBCLEdBQTFCLElBQStCLENBQXhELENBQWxCO0FBQ0E4SCw4QkFBaUI7QUFDYnpHLHVCQUFXMkUsR0FERSxFQUNnQztBQUM3Q2lDLDJCQUFXakMsSUFBSWhFLE1BQUosQ0FBVyxDQUFYLEVBQWNnRSxJQUFJaEcsT0FBSixDQUFZLEdBQVosSUFBaUIsQ0FBL0IsQ0FGRSxFQUVrQztBQUMvQ2tJLHVCQUFXSCxnQkFBZ0IvRixNQUFoQixDQUF1QixDQUF2QixFQUEwQitGLGdCQUFnQi9ILE9BQWhCLENBQXdCLEdBQXhCLENBQTFCLENBSEUsRUFHOEQ7QUFDM0VELDJCQUFXZ0ksZ0JBQWdCL0YsTUFBaEIsQ0FBdUIsQ0FBdkIsRUFBMEIrRixnQkFBZ0IvSCxPQUFoQixDQUF3QixHQUF4QixDQUExQixDQUpFLEVBSThEO0FBQzNFbUksdUJBQVcsRUFMRTtBQU1iQywyQkFBV0wsZ0JBQWdCL0YsTUFBaEIsQ0FBdUIrRixnQkFBZ0IvSCxPQUFoQixDQUF3QixHQUF4QixDQUF2QixDQU5FO0FBT2JpRCx5QkFBVytDLElBQUloRSxNQUFKLENBQVdnRSxJQUFJaEcsT0FBSixDQUFZLEdBQVosQ0FBWCxDQVBFO0FBUWJxSSx1QkFBVztBQVJFLGNBQWpCO0FBVUg7QUFDRCxnQkFBT1AsY0FBUDtBQUNILE1BbllZO0FBb1liUSw0QkFBdUIsK0JBQVM5QixPQUFULEVBQWtCO0FBQ3JDLGdCQUFPZ0IsS0FBS0MsS0FBTCxDQUFXYyxXQUFXL0IsT0FBWCxFQUFvQixFQUFwQixJQUF3QixJQUFuQyxDQUFQO0FBQ0gsTUF0WVk7QUF1WWI7OztBQUdBZSxRQUFHLGFBQVc7QUFDVm5KLHVCQUFjLEVBQWQ7QUFDSCxNQTVZWTtBQTZZYm9LLDJCQUFzQiw4QkFBU0MsVUFBVCxFQUFxQjtBQUN2QyxhQUFJLE9BQU9BLFVBQVAsS0FBc0IsV0FBMUIsRUFBdUM7QUFDbkMsb0JBQU9ySyxXQUFQO0FBQ0g7QUFDRCxhQUFJc0ssTUFBTSxFQUFWO0FBQUEsYUFDSUMsQ0FESjtBQUVBLGNBQUtBLElBQUksQ0FBVCxFQUFZQSxJQUFJdkssWUFBWXlELE1BQTVCLEVBQW9DOEcsR0FBcEMsRUFBeUM7QUFDckMsaUJBQUlGLFdBQVd6SSxPQUFYLENBQW1CNUIsWUFBWXVLLENBQVosRUFBZSxDQUFmLENBQW5CLE1BQTBDLENBQUMsQ0FBL0MsRUFBa0Q7QUFDOUNELHFCQUFJM0IsSUFBSixDQUFTM0ksWUFBWXVLLENBQVosQ0FBVDtBQUNIO0FBQ0o7QUFDRCxnQkFBT0QsR0FBUDtBQUNILE1BelpZOztBQTJaYkUsZUFBVSxrQkFBVUMsR0FBVixFQUFlO0FBQ3JCLGdCQUFPLE9BQU9BLEdBQVAsS0FBZSxRQUFmLElBQTJCQSxlQUFlQyxNQUFqRDtBQUNILE1BN1pZOztBQStaYkMsaUJBQVksb0JBQVVDLE1BQVYsRUFBa0I7QUFDMUIsYUFBSUMsV0FBVyxFQUFmO0FBQ0EsYUFBSXhILENBQUo7QUFDQSxjQUFJQSxJQUFJLENBQVIsRUFBV0EsSUFBRXVILE9BQU9uSCxNQUFwQixFQUE0QkosR0FBNUIsRUFBZ0M7QUFDNUIsaUJBQUl1SCxPQUFPdkgsQ0FBUCxLQUFhdUgsT0FBT3ZILENBQVAsTUFBYyxDQUEvQixFQUFpQztBQUM3QndILDBCQUFTbEMsSUFBVCxDQUFjaUMsT0FBT3ZILENBQVAsQ0FBZDtBQUNIO0FBQ0o7QUFDRCxnQkFBT3dILFFBQVA7QUFDSCxNQXhhWTs7QUEwYWJDLGdCQUFXLG1CQUFVOUosSUFBVixFQUFnQjtBQUN2QixhQUFJQSxTQUFTaUcsU0FBYixFQUF3QjtBQUNwQjtBQUNIO0FBQ0Q7QUFDQSxnQkFBT2pHLEtBQUs4SixTQUFMLElBQ1AsVUFBVXhILENBQVYsRUFBYTtBQUNULGlCQUFJeUgsTUFBTWxLLFNBQVNpQyxhQUFULENBQXVCLEtBQXZCLENBQVY7QUFBQSxpQkFDSWtJLENBREo7QUFFQUQsaUJBQUk3SCxXQUFKLENBQWdCSSxFQUFFMkgsU0FBRixDQUFZLElBQVosQ0FBaEI7QUFDQUQsaUJBQUlELElBQUlHLFNBQVI7QUFDQUgsbUJBQU0sSUFBTjtBQUNBLG9CQUFPQyxDQUFQO0FBQ0gsVUFQRCxDQU9FaEssSUFQRixDQURBO0FBU0g7QUF4YlksRUFBakIsQzs7Ozs7Ozs7OztBQ3RGQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkEsS0FBTW1LLFFBQVEsbUJBQUE1TixDQUFRLEdBQVIsQ0FBZDs7QUFFQSxVQUFTNk4sVUFBVCxDQUFvQkMsU0FBcEIsRUFBK0I7O0FBRTNCLFNBQU1DLG1DQUFpQ0QsU0FBdkM7O0FBRUEsU0FBTUUsWUFBWSxDQUNkLEtBRGMsRUFFZCxNQUZjLEVBR2QsTUFIYyxFQUlkLE9BSmMsRUFLZCxPQUxjLENBQWxCOztBQVFBLFNBQU1DLGdCQUFnQkwsTUFBTUcsaUJBQU4sQ0FBdEI7O0FBRUEsY0FBUy9MLE1BQVQsR0FBeUI7QUFDckIsZ0JBQU9pTSx5Q0FBUDtBQUNIOztBQUVELGNBQVNDLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCO0FBQzNCbk0sZ0JBQU9tTSxLQUFQLElBQWdCUCxNQUFNRyxpQkFBTixDQUFoQjtBQUNBL0wsZ0JBQU9tTSxLQUFQLEVBQWM3TSxHQUFkLEdBQW9CLFNBQVNBLEdBQVQsR0FBc0I7QUFBQSwrQ0FBTnNELElBQU07QUFBTkEscUJBQU07QUFBQTs7QUFDdEMsb0JBQU8sUUFBT2xELE9BQU95RyxPQUFkLE1BQTBCLFFBQTFCLElBQ0h6RyxPQUFPeUcsT0FBUCxDQUFlZ0csS0FBZixDQURHLElBRUhDLFNBQVNDLFNBQVQsQ0FBbUJ0SixLQUFuQixDQUF5QnVKLElBQXpCLENBQThCNU0sT0FBT3lHLE9BQVAsQ0FBZWdHLEtBQWYsQ0FBOUIsRUFBcUR6TSxPQUFPeUcsT0FBNUQsRUFBcUV2RCxJQUFyRSxDQUZKO0FBR0gsVUFKRDtBQUtIOztBQXpCMEI7QUFBQTtBQUFBOztBQUFBO0FBMkIzQiw4QkFBdUJvSixTQUF2Qiw4SEFBa0M7QUFBQSxpQkFBdkJPLFFBQXVCOztBQUM5QkwsNEJBQWVLLFFBQWY7QUFDSDtBQTdCMEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUErQjNCLFlBQU92TSxNQUFQO0FBQ0g7O0FBRUQ2TCxZQUFXVyxNQUFYLEdBQW9CLFNBQVNBLE1BQVQsR0FBeUI7QUFBQSx3Q0FBTjVKLElBQU07QUFBTkEsYUFBTTtBQUFBOztBQUN6Q2dKLFdBQU1ZLE1BQU4sY0FBZ0I1SixJQUFoQjtBQUNBZ0osV0FBTSxXQUFOLEVBQW1CLG1CQUFuQixFQUF3Q2hKLElBQXhDO0FBQ0gsRUFIRDtBQUlBaUosWUFBV1ksT0FBWCxHQUFxQixTQUFTQSxPQUFULEdBQTBCO0FBQzNDYixXQUFNLFdBQU4sRUFBbUIsb0JBQW5CO0FBQ0FBLFdBQU1hLE9BQU47QUFDSCxFQUhEOztBQUtBLEtBQUksaUJBQWlCaEgsSUFBakIsQ0FBc0IvRixPQUFPeUMsUUFBUCxDQUFnQnVCLElBQXRDLEtBQStDcEMsU0FBU29FLE1BQVQsQ0FBZ0JyRCxPQUFoQixDQUF3QixZQUF4QixNQUEwQyxDQUFDLENBQTlGLEVBQWlHO0FBQzdGd0osZ0JBQVdXLE1BQVgsQ0FBa0IsWUFBbEI7QUFDSCxFQUZELE1BRU8sSUFBSVosTUFBTWMsT0FBTixDQUFjLFlBQWQsQ0FBSixFQUFpQztBQUNwQ2QsV0FBTSxXQUFOLEVBQW1CLG9EQUFuQjtBQUNIOztBQUVEMUwsUUFBT0MsT0FBUCxHQUFpQjBMLFVBQWpCLEM7Ozs7Ozs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBVyxPQUFPO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFZLE9BQU87QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDs7Ozs7Ozs7QUN0S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixhQUFZO0FBQ1o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxPQUFPO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFpQixTQUFTO0FBQzFCLDZCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBVyxPQUFPO0FBQ2xCLGFBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQ0FBeUMsU0FBUztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUF5QyxTQUFTO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE1BQU07QUFDakIsYUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNwTUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLGNBQWM7QUFDekIsWUFBVyxPQUFPO0FBQ2xCLGFBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixhQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixhQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEIsYUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDNUhBO0FBQ0EsS0FBSXpMLE1BQUlBLE9BQUssRUFBYixDQUFnQkEsSUFBSXVNLFdBQUosR0FBZ0J2TSxJQUFJdU0sV0FBSixJQUFpQixZQUFVO0FBQUMsWUFBU2xCLENBQVQsQ0FBV1QsQ0FBWCxFQUFhakgsQ0FBYixFQUFlO0FBQUMsU0FBSTZGLElBQUVvQixLQUFHLEVBQVQ7QUFBQSxTQUFZbEgsSUFBRSxXQUFkO0FBQUEsU0FBMEI4SSxJQUFFQyxFQUFFQyxRQUFGLElBQVlELEVBQUVFLFFBQWQsSUFBd0IsVUFBUy9CLENBQVQsRUFBVztBQUFDLFdBQUlqSCxJQUFFLFdBQU47QUFBQSxXQUFrQjZGLElBQUVELEVBQUVqRSxNQUF0QjtBQUFBLFdBQTZCa0gsSUFBRSxFQUEvQjtBQUFBLFdBQWtDSSxJQUFFLFNBQXBDO0FBQUEsV0FBOENDLElBQUUsV0FBaEQ7QUFBQSxXQUE0REMsSUFBRSxRQUE5RDtBQUFBLFdBQXVFekIsSUFBRTBCLEVBQUVDLHVCQUFGLEtBQTRCQyxFQUFFQyxnQkFBOUIsR0FBK0NELEVBQUVFLDJCQUExSDtBQUFBLFdBQXNKQyxDQUF0SjtBQUFBLFdBQXdKQyxJQUFFLE1BQTFKO0FBQUEsV0FBaUt6RCxJQUFFLEdBQW5LO0FBQUEsV0FBdUswRCxDQUF2SztBQUFBLFdBQXlLQyxDQUF6SztBQUFBLFdBQTJLQyxDQUEzSztBQUFBLFdBQTZLQyxDQUE3SztBQUFBLFdBQStLQyxJQUFFakIsRUFBRTNELGtCQUFGLElBQXNCNkUsTUFBdk0sQ0FBOE0sSUFBR25FLEVBQUVvRCxDQUFGLEVBQUtqSixDQUFMLElBQVEsQ0FBWCxFQUFhLEtBQUk2SixJQUFFLENBQUYsRUFBSUQsSUFBRS9ELEVBQUUzRixLQUFGLENBQVEsR0FBUixDQUFOLEVBQW1CNEosSUFBRUYsRUFBRVQsQ0FBRixDQUF6QixFQUE4QlUsSUFBRUMsQ0FBaEMsRUFBa0NELEdBQWxDO0FBQXNDRixhQUFFQyxFQUFFQyxDQUFGLEVBQUtaLENBQUwsRUFBUWpKLENBQVIsQ0FBRixFQUFhMkosSUFBRSxDQUFGLEtBQU1kLElBQUU1QyxJQUFFZ0UsU0FBU0wsRUFBRUMsQ0FBRixFQUFLWCxDQUFMLEVBQVFTLElBQUUzSixFQUFFbUosQ0FBRixDQUFWLENBQVQsQ0FBVixDQUFiO0FBQXRDLFFBQXdGbEMsS0FBR3lDLElBQUUsS0FBRixHQUFTLENBQUUsSUFBSTFFLElBQUosRUFBWCxHQUFxQjBFLENBQXJCLEdBQXVCLElBQXZCLElBQTZCOUQsRUFBRXNFLFlBQUYsSUFBZ0J0RSxFQUFFdUUsY0FBbEIsSUFBa0MsRUFBL0QsSUFBbUV0QixDQUF0RSxFQUF3RTVCLEVBQUU5RyxNQUFGLEdBQVN1SCxDQUFULElBQVlULEVBQUUzSSxPQUFGLENBQVUySCxDQUFWLElBQWEsQ0FBekIsS0FBNkJ3RCxJQUFFeEMsRUFBRTNHLE1BQUYsQ0FBUyxDQUFULEVBQVdvSCxJQUFFLENBQWIsRUFBZ0IwQyxXQUFoQixDQUE0Qm5FLENBQTVCLENBQUYsRUFBaUNnQixJQUFFLENBQUNBLEVBQUVvRCxTQUFGLENBQVksQ0FBWixFQUFjWixDQUFkLElBQWlCQyxDQUFqQixHQUFtQixNQUFuQixHQUEwQkssRUFBRTlDLEVBQUVvRCxTQUFGLENBQVlaLElBQUUsQ0FBZCxDQUFGLENBQTNCLEVBQWdEbkosTUFBaEQsQ0FBdUQsQ0FBdkQsRUFBeURvSCxDQUF6RCxDQUFoRSxDQUF4RSxFQUFxTTRDLEVBQUVDLE9BQUYsQ0FBVXRELENBQVYsQ0FBck0sRUFBa04sUUFBT3VELElBQVAseUNBQU9BLElBQVAsT0FBY3pLLENBQWQsS0FBa0J5SyxPQUFLLEVBQUNDLEtBQUl4RCxDQUFMLEVBQXZCLENBQWxOLEVBQWtQdUQsS0FBS0UsZUFBTCxHQUFxQnpELENBQXZRO0FBQXlRLE1BQTVuQixDQUE2bkIsSUFBRyxRQUFPakgsQ0FBUCx5Q0FBT0EsQ0FBUCxPQUFXRCxDQUFkLEVBQWdCO0FBQUMsV0FBSWtKLElBQUUsRUFBTjtBQUFBLFdBQVNDLElBQUVKLEVBQUUzRCxrQkFBRixJQUFzQjZFLE1BQWpDLENBQXdDLEtBQUksSUFBSWIsQ0FBUixJQUFhbkosQ0FBYjtBQUFlQSxXQUFFMkssY0FBRixDQUFpQnhCLENBQWpCLEtBQXFCRixFQUFFNUQsSUFBRixDQUFPNkQsRUFBRUMsQ0FBRixJQUFLLEdBQUwsR0FBU0QsRUFBRWxKLEVBQUVtSixDQUFGLENBQUYsQ0FBaEIsQ0FBckI7QUFBZixRQUE2RCxVQUFVekgsSUFBVixDQUFlbUUsQ0FBZixNQUFvQkEsS0FBRyxHQUF2QixHQUE0QkEsS0FBR29ELEVBQUUxSSxJQUFGLENBQU8sR0FBUCxDQUEvQjtBQUEyQyxhQUFPc0ksRUFBRWhELENBQUYsQ0FBUDtBQUFZLGFBQVM0RCxDQUFULENBQVd4QyxDQUFYLEVBQWFqSCxDQUFiLEVBQWU7QUFBQyxTQUFJNkYsQ0FBSjtBQUFBLFNBQU05RixJQUFFK0ksRUFBRTNELGtCQUFGLElBQXNCNkUsTUFBOUI7QUFBQSxTQUFxQ25CLElBQUUsRUFBdkM7QUFBQSxTQUEwQ0ksSUFBRUssRUFBRXNCLFlBQTlDO0FBQUEsU0FBMkROLElBQUVyRCxFQUFFL0csS0FBRixDQUFRLEdBQVIsQ0FBN0Q7QUFBQSxTQUEwRWdKLElBQUVvQixFQUFFLENBQUYsQ0FBNUU7QUFBQSxTQUFpRm5CLElBQUVtQixFQUFFLENBQUYsQ0FBbkY7QUFBQSxTQUF3RjVDLElBQUV5QixFQUFFakosS0FBRixDQUFRLEdBQVIsQ0FBMUYsQ0FBdUcsS0FBSSxJQUFJdUosSUFBRSxDQUFOLEVBQVFDLElBQUVoQyxFQUFFdkgsTUFBaEIsRUFBdUJzSixJQUFFQyxDQUF6QixFQUEyQkQsR0FBM0IsRUFBK0I7QUFBQyxXQUFJeEQsSUFBRXlCLEVBQUUrQixDQUFGLEVBQUt2SixLQUFMLENBQVcsR0FBWCxDQUFOO0FBQUEsV0FBc0J5SixJQUFFTSxTQUFTaEUsRUFBRSxDQUFGLENBQVQsQ0FBeEI7QUFBQSxXQUF1QzJELElBQUVLLFNBQVNoRSxFQUFFLENBQUYsQ0FBVCxDQUF6QyxDQUF3RDBELE1BQUkzSixFQUFFMkosQ0FBRixJQUFLQyxDQUFUO0FBQVksVUFBSUMsSUFBRSxFQUFOLENBQVMsS0FBSSxJQUFJSixJQUFFLENBQU4sRUFBUUMsSUFBRVQsRUFBRTlJLE1BQWhCLEVBQXVCc0osSUFBRUMsQ0FBekIsRUFBMkJELEdBQTNCLEVBQStCO0FBQUMsV0FBSUssSUFBRWIsRUFBRVEsQ0FBRixDQUFOLENBQVcsSUFBR3pKLEVBQUUySyxjQUFGLENBQWlCYixDQUFqQixDQUFILEVBQXVCO0FBQUMsYUFBSUMsSUFBRS9KLEVBQUU4SixDQUFGLENBQU4sQ0FBVyxPQUFPQyxDQUFQLElBQVUsV0FBVixJQUF1QkEsS0FBRyxJQUExQixLQUFpQ0YsRUFBRUMsQ0FBRixJQUFLLENBQUMsQ0FBTixFQUFRakIsRUFBRXhELElBQUYsQ0FBT3RGLEVBQUUrSixDQUFGLElBQUssR0FBTCxHQUFTL0osRUFBRUMsRUFBRThKLENBQUYsQ0FBRixDQUFoQixDQUF6QztBQUFtRTtBQUFDLFdBQUksSUFBSUEsQ0FBUixJQUFhOUosQ0FBYixFQUFlO0FBQUMsV0FBRzZKLEVBQUVDLENBQUYsQ0FBSCxFQUFRLFNBQVMsSUFBRzlKLEVBQUUySyxjQUFGLENBQWlCYixDQUFqQixDQUFILEVBQXVCO0FBQUMsYUFBSUMsSUFBRS9KLEVBQUU4SixDQUFGLENBQU4sQ0FBVyxPQUFPQyxDQUFQLElBQVUsV0FBVixJQUF1QkEsS0FBRyxJQUExQixJQUFnQ2xCLEVBQUV4RCxJQUFGLENBQU90RixFQUFFK0osQ0FBRixJQUFLLEdBQUwsR0FBUy9KLEVBQUVDLEVBQUU4SixDQUFGLENBQUYsQ0FBaEIsQ0FBaEM7QUFBeUQ7QUFBQyxVQUFFWixJQUFFLEdBQUYsR0FBTUwsRUFBRXRJLElBQUYsQ0FBTyxHQUFQLENBQVIsRUFBb0JzRixJQUFFQSxLQUFHQSxFQUFFdkgsT0FBRixDQUFVLE1BQVYsSUFBa0IsQ0FBbEIsR0FBb0IsU0FBT3lCLEVBQUU2RixFQUFFaUYsS0FBSixDQUEzQixHQUFzQyxFQUF6QyxLQUE4Q2hGLEVBQUV2SCxPQUFGLENBQVUsTUFBVixJQUFrQixDQUFsQixHQUFvQixTQUFPeUIsRUFBRTZGLEVBQUVrRixHQUFKLENBQTNCLEdBQW9DLEVBQWxGLEtBQXVGakYsRUFBRXZILE9BQUYsQ0FBVSxNQUFWLElBQWtCLENBQWxCLEdBQW9CLFNBQU95QixFQUFFNkYsRUFBRW1GLFFBQUosQ0FBM0IsR0FBeUMsRUFBaEksQ0FBdEIsQ0FBMEosSUFBSUMsSUFBRTVCLEVBQUVDLHVCQUFGLEtBQTRCQyxFQUFFQyxnQkFBOUIsR0FBK0NELEVBQUVFLDJCQUF2RCxDQUFtRixJQUFHM0QsRUFBRTFGLE1BQUYsR0FBUzZLLENBQVQsSUFBWW5GLEVBQUV2SCxPQUFGLENBQVUsR0FBVixJQUFlLENBQTlCLEVBQWdDO0FBQUMsV0FBSTJNLElBQUVwRixFQUFFdkYsTUFBRixDQUFTLENBQVQsRUFBVzBLLElBQUUsQ0FBYixFQUFnQlosV0FBaEIsQ0FBNEIsR0FBNUIsQ0FBTixDQUF1Q3ZFLElBQUUsQ0FBQ0EsRUFBRXdFLFNBQUYsQ0FBWSxDQUFaLEVBQWNZLENBQWQsSUFBaUIsVUFBakIsR0FBNEJsTCxFQUFFOEYsRUFBRXdFLFNBQUYsQ0FBWVksSUFBRSxDQUFkLENBQUYsQ0FBN0IsRUFBa0QzSyxNQUFsRCxDQUF5RCxDQUF6RCxFQUEyRDBLLENBQTNELENBQUY7QUFBZ0UsYUFBT25GLENBQVA7QUFBUyxRQUFJdUQsSUFBRSxZQUFVO0FBQUMsU0FBSUEsSUFBRSxFQUFDOEIsS0FBSSxZQUFVO0FBQUMsYUFBSTlCLElBQUUsQ0FBTixDQUFRLE9BQU8sWUFBVTtBQUFDLGtCQUFNLENBQUUsSUFBSXBFLElBQUosRUFBRixHQUFZLEdBQVosR0FBZ0JvRSxHQUF0QjtBQUEwQixVQUE1QztBQUE2QyxRQUFoRSxFQUFMLEVBQXdFK0IsUUFBTyxnQkFBUy9CLENBQVQsRUFBV25DLENBQVgsRUFBYTtBQUFDLGFBQUlqSCxJQUFFLEVBQU4sQ0FBUyxLQUFJLElBQUk2RixDQUFSLElBQWFvQixDQUFiO0FBQWVBLGFBQUUwRCxjQUFGLENBQWlCOUUsQ0FBakIsS0FBcUJ1RCxFQUFFbkMsRUFBRXBCLENBQUYsQ0FBRixDQUFyQixLQUErQjdGLEVBQUU2RixDQUFGLElBQUtvQixFQUFFcEIsQ0FBRixDQUFwQztBQUFmLFVBQXlELE9BQU83RixDQUFQO0FBQVMsUUFBeEssRUFBeUtvTCxRQUFPLGdCQUFTaEMsQ0FBVCxFQUFXO0FBQUMsYUFBSW5DLElBQUVuSSxVQUFVcUIsTUFBaEI7QUFBQSxhQUF1QkgsQ0FBdkIsQ0FBeUJvSixJQUFFQSxLQUFHLEVBQUwsQ0FBUSxLQUFJLElBQUl2RCxJQUFFLENBQVYsRUFBWUEsSUFBRW9CLENBQWQsRUFBZ0JwQixHQUFoQixFQUFvQjtBQUFDN0YsZUFBRWxCLFVBQVUrRyxDQUFWLENBQUYsQ0FBZSxJQUFHLENBQUM3RixDQUFKLEVBQU0sU0FBUyxLQUFJLElBQUlELENBQVIsSUFBYUMsQ0FBYjtBQUFlQSxlQUFFMkssY0FBRixDQUFpQjVLLENBQWpCLE1BQXNCcUosRUFBRXJKLENBQUYsSUFBS0MsRUFBRUQsQ0FBRixDQUEzQjtBQUFmO0FBQWdELGlCQUFPcUosQ0FBUDtBQUFTLFFBQXpVLEVBQTBVaUMsV0FBVSxtQkFBU2pDLENBQVQsRUFBV25DLENBQVgsRUFBYTtBQUFDLGFBQUlqSCxJQUFFb0gsT0FBT2dDLENBQVAsQ0FBTixDQUFnQixPQUFPQSxLQUFHLElBQUgsR0FBUW5DLEtBQUcsSUFBWCxHQUFnQmpILENBQXZCO0FBQXlCLFFBQTNZLEVBQTRZc0wsU0FBUSxpQkFBU2xDLENBQVQsRUFBV25DLENBQVgsRUFBYTtBQUFDLGFBQUlqSCxJQUFFdUwsT0FBT25DLENBQVAsQ0FBTixDQUFnQixPQUFPQSxLQUFHLElBQUgsSUFBU29DLE1BQU14TCxDQUFOLENBQVQsR0FBa0JpSCxLQUFHLENBQXJCLEdBQXVCakgsQ0FBOUI7QUFBZ0MsUUFBbGQsRUFBbWR5TCxZQUFXLG9CQUFTckMsQ0FBVCxFQUFXbkMsQ0FBWCxFQUFhO0FBQUMsYUFBSWpILElBQUV1TCxPQUFPbkMsQ0FBUCxDQUFOLENBQWdCLE9BQU9BLEtBQUcsSUFBSCxJQUFTb0MsTUFBTXhMLENBQU4sQ0FBVCxHQUFrQmlILEtBQUcsQ0FBckIsR0FBdUJqSCxDQUE5QjtBQUFnQyxRQUE1aEIsRUFBNmhCMEwsWUFBVyxvQkFBU3RDLENBQVQsRUFBV25DLENBQVgsRUFBYTtBQUFDLGFBQUlqSCxJQUFFb0gsT0FBT2dDLENBQVAsRUFBVTNHLFdBQVYsTUFBeUIsTUFBL0IsQ0FBc0MsT0FBTzJHLEtBQUcsSUFBSCxHQUFRbkMsS0FBRyxDQUFDLENBQVosR0FBY2pILENBQXJCO0FBQXVCLFFBQW5uQixFQUFvbkIyTCxZQUFXLG9CQUFTdkMsQ0FBVCxFQUFXO0FBQUMsZ0JBQU8sT0FBT0EsQ0FBUCxJQUFVLFdBQVYsSUFBdUJBLEtBQUcsSUFBMUIsSUFBZ0MsT0FBT0EsRUFBRWpKLE1BQVQsSUFBaUIsV0FBakQsSUFBOERpSixFQUFFakosTUFBRixHQUFTLENBQTlFO0FBQWdGLFFBQTN0QixFQUE0dEI3QixTQUFRLGlCQUFTMkksQ0FBVCxFQUFXakgsQ0FBWCxFQUFhO0FBQUMsYUFBSTZGLElBQUUsQ0FBQyxDQUFQLENBQVMsT0FBT3VELEVBQUV3QyxPQUFGLENBQVU1TCxDQUFWLEVBQVksVUFBU29KLENBQVQsRUFBV3BKLENBQVgsRUFBYTtBQUFDb0osZ0JBQUduQyxDQUFILEtBQU9wQixJQUFFN0YsQ0FBVDtBQUFZLFVBQXRDLEdBQXdDNkYsQ0FBL0M7QUFBaUQsUUFBNXlCLEVBQTZ5QitGLFNBQVEsaUJBQVN4QyxDQUFULEVBQVduQyxDQUFYLEVBQWFqSCxDQUFiLEVBQWU7QUFBQyxhQUFHO0FBQUMsZUFBRyxPQUFPaUgsQ0FBUCxJQUFVLFVBQWIsRUFBd0I7QUFBQ2pILGlCQUFFLE9BQU9BLENBQVAsSUFBVSxXQUFWLEdBQXNCQSxDQUF0QixHQUF3QixJQUExQixDQUErQixJQUFHLE9BQU9vSixFQUFFLFFBQUYsQ0FBUCxJQUFvQixRQUFwQixJQUE4QixPQUFPQSxFQUFFLENBQUYsQ0FBUCxJQUFhLFdBQTlDLEVBQTBEO0FBQUMsbUJBQUl2RCxJQUFFLE9BQU91RCxFQUFFeUMsU0FBVCxJQUFvQixXQUExQixDQUFzQyxLQUFJLElBQUk5TCxDQUFSLElBQWFxSixDQUFiO0FBQWUsa0JBQUMsQ0FBQ3ZELENBQUQsSUFBSUEsS0FBRyxPQUFPdUQsRUFBRXlDLFNBQUYsQ0FBWTlMLENBQVosQ0FBUCxJQUF1QixXQUEvQixLQUE2QyxPQUFPcUosRUFBRXJKLENBQUYsQ0FBUCxJQUFhLFVBQTFELElBQXNFa0gsRUFBRXNCLElBQUYsQ0FBT3ZJLENBQVAsRUFBU29KLEVBQUVySixDQUFGLENBQVQsRUFBY0EsQ0FBZCxDQUF0RTtBQUFmO0FBQXNHLGNBQXZNLE1BQTRNLEtBQUksSUFBSUEsSUFBRSxDQUFOLEVBQVE4SSxJQUFFTyxFQUFFakosTUFBaEIsRUFBdUJKLElBQUU4SSxDQUF6QixFQUEyQjlJLEdBQTNCO0FBQStCa0gsaUJBQUVzQixJQUFGLENBQU92SSxDQUFQLEVBQVNvSixFQUFFckosQ0FBRixDQUFULEVBQWNBLENBQWQ7QUFBL0I7QUFBZ0Q7QUFBQyxVQUF6VCxDQUF5VCxPQUFNa0osQ0FBTixFQUFRLENBQUU7QUFBQyxRQUF6b0MsRUFBMG9DNkMsZUFBYyx1QkFBUzFDLENBQVQsRUFBV25DLENBQVgsRUFBYWpILENBQWIsRUFBZTZGLENBQWYsRUFBaUI5RixDQUFqQixFQUFtQjtBQUFDLGFBQUdrSCxJQUFFLENBQUYsSUFBS3BCLElBQUUsQ0FBUCxJQUFVb0IsSUFBRWxILENBQUYsR0FBSXFKLEVBQUVqSixNQUFoQixJQUF3QjBGLElBQUU5RixDQUFGLEdBQUlDLEVBQUVHLE1BQWpDLEVBQXdDLE9BQU0sQ0FBQyxDQUFQLENBQVMsT0FBTSxFQUFFSixDQUFGLElBQUssQ0FBWCxFQUFhO0FBQUMsZUFBSThJLElBQUVPLEVBQUVoSixNQUFGLENBQVM2RyxHQUFULENBQU47QUFBQSxlQUFvQmdDLElBQUVqSixFQUFFSSxNQUFGLENBQVN5RixHQUFULENBQXRCLENBQW9DLElBQUdnRCxLQUFHSSxDQUFOLEVBQVEsT0FBTSxDQUFDLENBQVA7QUFBUyxpQkFBTSxDQUFDLENBQVA7QUFBUyxRQUF6eUMsRUFBMHlDOEMsTUFBSyxjQUFTM0MsQ0FBVCxFQUFXO0FBQUMsYUFBSW5DLElBQUUsQ0FBTjtBQUFBLGFBQVFqSCxDQUFSLENBQVUsS0FBSSxJQUFJQSxDQUFSLElBQWFvSixDQUFiO0FBQWVBLGFBQUV1QixjQUFGLENBQWlCM0ssQ0FBakIsS0FBcUJpSCxHQUFyQjtBQUFmLFVBQXdDLE9BQU9BLENBQVA7QUFBUyxRQUF0M0MsRUFBdTNDMUwsS0FBSSxhQUFTNk4sQ0FBVCxFQUFXbkMsQ0FBWCxFQUFhO0FBQUMsYUFBRyxPQUFPQSxDQUFQLElBQVUsV0FBVixJQUF1QkEsQ0FBMUIsRUFBNEI7QUFBQyxlQUFJakgsSUFBRSxJQUFJZ0YsSUFBSixFQUFOO0FBQUEsZUFBZWEsSUFBRTdGLEVBQUVnTSxRQUFGLEtBQWEsR0FBYixHQUFpQmhNLEVBQUVpTSxVQUFGLEVBQWpCLEdBQWdDLEdBQWhDLEdBQW9Dak0sRUFBRWtNLFVBQUYsRUFBckQsQ0FBb0U5SixRQUFRN0csR0FBUixDQUFZc0ssQ0FBWixFQUFjdUQsQ0FBZDtBQUFpQjtBQUFDLFFBQTUvQyxFQUE2L0MrQyxRQUFPLGdCQUFTL0MsQ0FBVCxFQUFXO0FBQUMsZ0JBQU8sT0FBT0EsQ0FBUCxJQUFVLFdBQVYsR0FBc0IsQ0FBQyxDQUF2QixHQUF5QixPQUFPQSxDQUFQLElBQVUsUUFBVixJQUFvQkEsSUFBRUEsRUFBRTNHLFdBQUYsRUFBRixFQUFrQjJHLE1BQUksTUFBSixJQUFZQSxNQUFJLEdBQWhCLElBQXFCQSxNQUFJLElBQS9ELElBQXFFQSxJQUFFLENBQUMsQ0FBSCxHQUFLLENBQUMsQ0FBM0c7QUFBNkcsUUFBN25ELEVBQThuRGxELFVBQVMsa0JBQVNlLENBQVQsRUFBVztBQUFDLGFBQUcsT0FBT0EsQ0FBUCxJQUFVLFdBQWIsRUFBeUIsT0FBTSxXQUFOLENBQWtCLElBQUcsT0FBT0EsQ0FBUCxJQUFVLFFBQWIsRUFBc0IsT0FBT0EsQ0FBUCxDQUFTLElBQUd4TCxPQUFPNk0sU0FBUCxDQUFpQnBDLFFBQWpCLENBQTBCcUMsSUFBMUIsQ0FBK0J0QixDQUEvQixNQUFvQyxnQkFBdkMsRUFBd0QsT0FBT0EsRUFBRTFHLElBQUYsQ0FBTyxHQUFQLENBQVAsQ0FBbUIsSUFBRzZJLEVBQUUyQyxJQUFGLENBQU85RSxDQUFQLElBQVUsQ0FBYixFQUFlO0FBQUMsZUFBSWpILElBQUUsRUFBTixDQUFTLEtBQUksSUFBSTZGLENBQVIsSUFBYW9CLENBQWI7QUFBZUEsZUFBRTBELGNBQUYsQ0FBaUI5RSxDQUFqQixNQUFzQjdGLEtBQUc2RixJQUFFLEdBQUYsR0FBTW9CLEVBQUVwQixDQUFGLENBQU4sR0FBVyxHQUFwQztBQUFmLFlBQXdELE9BQU83RixDQUFQO0FBQVMsaUJBQU9pSCxFQUFFZixRQUFGLEVBQVA7QUFBb0IsUUFBdDVELEVBQXU1RGtHLFFBQU8sZ0JBQVNoRCxDQUFULEVBQVc7QUFBQyxnQkFBTyxPQUFPQSxDQUFQLElBQVUsV0FBVixJQUF1QkEsS0FBRyxJQUFqQztBQUFzQyxRQUFoOUQsRUFBaTlEaUQsbUJBQWtCLDZCQUFVO0FBQUMsY0FBSSxJQUFJakQsSUFBRSxDQUFOLEVBQVFuQyxJQUFFbkksVUFBVXFCLE1BQXhCLEVBQStCaUosSUFBRW5DLENBQWpDLEVBQW1DbUMsR0FBbkMsRUFBdUM7QUFBQyxlQUFJcEosSUFBRWxCLFVBQVVzSyxDQUFWLENBQU4sQ0FBbUIsSUFBR3BKLElBQUUsQ0FBTCxFQUFPLE9BQU9BLENBQVA7QUFBUyxpQkFBTyxDQUFQO0FBQVMsUUFBbGtFLEVBQW1rRXNNLGFBQVkscUJBQVNsRCxDQUFULEVBQVc7QUFBQyxhQUFHLFFBQU1BLENBQU4sSUFBUyxvQkFBaUJBLENBQWpCLHlDQUFpQkEsQ0FBakIsRUFBWixFQUErQixPQUFPQSxDQUFQLENBQVMsSUFBSW5DLElBQUVtQyxFQUFFbUQsV0FBRixFQUFOLENBQXNCLEtBQUksSUFBSXZNLENBQVIsSUFBYW9KLENBQWI7QUFBZUEsYUFBRXVCLGNBQUYsQ0FBaUIzSyxDQUFqQixNQUFzQmlILEVBQUVqSCxDQUFGLElBQUtvSixFQUFFcEosQ0FBRixDQUEzQjtBQUFmLFVBQWdELE9BQU9pSCxDQUFQO0FBQVMsUUFBbHRFLEVBQW10RXVGLFNBQVEsaUJBQVN2RixDQUFULEVBQVdqSCxDQUFYLEVBQWE7QUFBQyxnQkFBT0EsSUFBRW9KLEVBQUVnRCxNQUFGLENBQVNwTSxDQUFULElBQVlBLENBQVosR0FBYyxFQUFoQixFQUFtQm9KLEVBQUVnRCxNQUFGLENBQVNuRixDQUFULElBQVlBLENBQVosR0FBY2pILENBQXhDO0FBQTBDLFFBQW54RSxFQUFveEV5TSxnQkFBZSwwQkFBVTtBQUFDLGFBQUlyRCxJQUFFc0QsVUFBVUMsU0FBaEI7QUFBQSxhQUEwQjFGLElBQUV5RixVQUFVRSxPQUF0QztBQUFBLGFBQThDNU0sQ0FBOUM7QUFBQSxhQUFnRDZGLENBQWhELENBQWtELE9BQU0sQ0FBQ0EsSUFBRXVELEVBQUU5SyxPQUFGLENBQVUsT0FBVixDQUFILEtBQXdCLENBQUMsQ0FBekIsSUFBNEIsQ0FBQ3VILElBQUV1RCxFQUFFOUssT0FBRixDQUFVLE1BQVYsQ0FBSCxLQUF1QixDQUFDLENBQXBELEdBQXNEMkksSUFBRSxPQUF4RCxHQUFnRSxDQUFDcEIsSUFBRXVELEVBQUU5SyxPQUFGLENBQVUsU0FBVixDQUFILEtBQTBCLENBQUMsQ0FBM0IsR0FBNkIySSxJQUFFLFNBQS9CLEdBQXlDLENBQUNwQixJQUFFdUQsRUFBRTlLLE9BQUYsQ0FBVSxRQUFWLENBQUgsS0FBeUIsQ0FBQyxDQUExQixHQUE0QjJJLElBQUUsUUFBOUIsR0FBdUMsQ0FBQ3BCLElBQUV1RCxFQUFFOUssT0FBRixDQUFVLFFBQVYsQ0FBSCxLQUF5QixDQUFDLENBQTFCLEdBQTRCMkksSUFBRSxRQUE5QixHQUF1QyxDQUFDcEIsSUFBRXVELEVBQUU5SyxPQUFGLENBQVUsU0FBVixDQUFILEtBQTBCLENBQUMsQ0FBM0IsR0FBNkIySSxJQUFFLFNBQS9CLEdBQXlDLENBQUNwQixJQUFFdUQsRUFBRTlLLE9BQUYsQ0FBVSxVQUFWLENBQUgsS0FBMkIsQ0FBQyxDQUE1QixHQUE4QjJJLElBQUUsMEJBQWhDLEdBQTJEQSxLQUFHLDZCQUFILElBQWtDQSxLQUFHLFVBQXJDLEdBQWdEQSxJQUFFLG1CQUFsRCxHQUFzRSxDQUFDakgsSUFBRW9KLEVBQUVnQixXQUFGLENBQWMsR0FBZCxJQUFtQixDQUF0QixLQUEwQnZFLElBQUV1RCxFQUFFZ0IsV0FBRixDQUFjLEdBQWQsQ0FBNUIsTUFBa0RuRCxJQUFFbUMsRUFBRWlCLFNBQUYsQ0FBWXJLLENBQVosRUFBYzZGLENBQWQsQ0FBRixFQUFtQm9CLEVBQUV4RSxXQUFGLE1BQWlCd0UsRUFBRTVHLFdBQUYsRUFBakIsS0FBbUM0RyxJQUFFeUYsVUFBVUUsT0FBL0MsQ0FBckUsQ0FBalcsRUFBK2QzRixDQUFyZTtBQUF1ZSxRQUF2MEYsRUFBdzBGNEYsdUJBQXNCLGlDQUFVO0FBQUMsYUFBSXpELElBQUVzRCxVQUFVQyxTQUFoQjtBQUFBLGFBQTBCMUYsSUFBRXlGLFVBQVVFLE9BQXRDO0FBQUEsYUFBOEM1TSxJQUFFLEtBQUc2RyxXQUFXNkYsVUFBVUksVUFBckIsQ0FBbkQ7QUFBQSxhQUFvRmpILENBQXBGO0FBQUEsYUFBc0Y5RixDQUF0RjtBQUFBLGFBQXdGOEksQ0FBeEY7QUFBQSxhQUEwRkksQ0FBMUY7QUFBQSxhQUE0RnFCLENBQTVGLENBQThGLE9BQU0sQ0FBQ3pCLElBQUVPLEVBQUU5SyxPQUFGLENBQVUsT0FBVixDQUFILEtBQXdCLENBQUMsQ0FBekIsSUFBNEIwQixJQUFFb0osRUFBRWlCLFNBQUYsQ0FBWXhCLElBQUUsQ0FBZCxDQUFGLEVBQW1CLENBQUNBLElBQUVPLEVBQUU5SyxPQUFGLENBQVUsU0FBVixDQUFILEtBQTBCLENBQUMsQ0FBM0IsS0FBK0IwQixJQUFFb0osRUFBRWlCLFNBQUYsQ0FBWXhCLElBQUUsQ0FBZCxDQUFqQyxDQUEvQyxJQUFtRyxDQUFDQSxJQUFFTyxFQUFFOUssT0FBRixDQUFVLE1BQVYsQ0FBSCxLQUF1QixDQUFDLENBQXhCLEdBQTBCMEIsSUFBRW9KLEVBQUVpQixTQUFGLENBQVl4QixJQUFFLENBQWQsQ0FBNUIsR0FBNkMsQ0FBQ0EsSUFBRU8sRUFBRTlLLE9BQUYsQ0FBVSxTQUFWLENBQUgsS0FBMEIsQ0FBQyxDQUEzQixHQUE2QjBCLElBQUVvSixFQUFFaUIsU0FBRixDQUFZeEIsSUFBRSxFQUFkLENBQS9CLEdBQWlELENBQUNBLElBQUVPLEVBQUU5SyxPQUFGLENBQVUsUUFBVixDQUFILEtBQXlCLENBQUMsQ0FBMUIsR0FBNEIwQixJQUFFb0osRUFBRWlCLFNBQUYsQ0FBWXhCLElBQUUsQ0FBZCxDQUE5QixHQUErQyxDQUFDQSxJQUFFTyxFQUFFOUssT0FBRixDQUFVLFFBQVYsQ0FBSCxLQUF5QixDQUFDLENBQTFCLElBQTZCMEIsSUFBRW9KLEVBQUVpQixTQUFGLENBQVl4QixJQUFFLENBQWQsQ0FBRixFQUFtQixDQUFDQSxJQUFFTyxFQUFFOUssT0FBRixDQUFVLFNBQVYsQ0FBSCxLQUEwQixDQUFDLENBQTNCLEtBQStCMEIsSUFBRW9KLEVBQUVpQixTQUFGLENBQVl4QixJQUFFLENBQWQsQ0FBakMsQ0FBaEQsSUFBb0csQ0FBQ0EsSUFBRU8sRUFBRTlLLE9BQUYsQ0FBVSxTQUFWLENBQUgsS0FBMEIsQ0FBQyxDQUEzQixHQUE2QjBCLElBQUVvSixFQUFFaUIsU0FBRixDQUFZeEIsSUFBRSxDQUFkLENBQS9CLEdBQWdENUIsS0FBRyw2QkFBSCxJQUFrQ3FELElBQUUsSUFBSXROLE1BQUosQ0FBVyw0QkFBWCxDQUFGLEVBQTJDc04sRUFBRWpKLElBQUYsQ0FBTytILENBQVAsS0FBVyxJQUFYLEtBQWtCcEosSUFBRTZHLFdBQVc3SixPQUFPK1AsRUFBbEIsQ0FBcEIsQ0FBN0UsSUFBeUg5RixLQUFHLFVBQUgsSUFBZXFELElBQUUsSUFBSXROLE1BQUosQ0FBVyxvQ0FBWCxDQUFGLEVBQW1Ec04sRUFBRWpKLElBQUYsQ0FBTytILENBQVAsS0FBVyxJQUFYLEtBQWtCcEosSUFBRTZHLFdBQVc3SixPQUFPK1AsRUFBbEIsQ0FBcEIsQ0FBbEUsSUFBOEcsQ0FBQ2hOLElBQUVxSixFQUFFZ0IsV0FBRixDQUFjLEdBQWQsSUFBbUIsQ0FBdEIsS0FBMEJ2QixJQUFFTyxFQUFFZ0IsV0FBRixDQUFjLEdBQWQsQ0FBNUIsTUFBa0RwSyxJQUFFb0osRUFBRWlCLFNBQUYsQ0FBWXhCLElBQUUsQ0FBZCxDQUFwRCxDQUEzbUIsRUFBaXJCN0ksSUFBRUEsRUFBRWtHLFFBQUYsRUFBbnJCLEVBQWdzQixDQUFDK0MsSUFBRWpKLEVBQUUxQixPQUFGLENBQVUsR0FBVixDQUFILEtBQW9CLENBQUMsQ0FBckIsS0FBeUIwQixJQUFFQSxFQUFFcUssU0FBRixDQUFZLENBQVosRUFBY3BCLENBQWQsQ0FBM0IsQ0FBaHNCLEVBQTZ1QixDQUFDQSxJQUFFakosRUFBRTFCLE9BQUYsQ0FBVSxHQUFWLENBQUgsS0FBb0IsQ0FBQyxDQUFyQixLQUF5QjBCLElBQUVBLEVBQUVxSyxTQUFGLENBQVksQ0FBWixFQUFjcEIsQ0FBZCxDQUEzQixDQUE3dUIsRUFBMHhCLENBQUNBLElBQUVqSixFQUFFMUIsT0FBRixDQUFVLEdBQVYsQ0FBSCxLQUFvQixDQUFDLENBQXJCLEtBQXlCMEIsSUFBRUEsRUFBRXFLLFNBQUYsQ0FBWSxDQUFaLEVBQWNwQixDQUFkLENBQTNCLENBQTF4QixFQUF1MEJwRCxJQUFFbUgsU0FBUyxLQUFHaE4sQ0FBWixFQUFjLEVBQWQsQ0FBejBCLEVBQTIxQndMLE1BQU0zRixDQUFOLE1BQVc3RixJQUFFLEtBQUc2RyxXQUFXNkYsVUFBVUksVUFBckIsQ0FBaEIsQ0FBMzFCLEVBQTY0QjlNLENBQW41QjtBQUFxNUIsUUFBNTFILEVBQTYxSHFKLHlCQUF3QixtQ0FBVTtBQUFDLGdCQUFPMU4sT0FBT3NSLGFBQVAsS0FBdUIsSUFBdkIsSUFBNkIsQ0FBQyxDQUFyQztBQUF1QyxRQUF2NkgsRUFBTixDQUErNkgsT0FBTzdELENBQVA7QUFBUyxJQUFuOEgsRUFBTjtBQUFBLE9BQTQ4SG5DLElBQUUsWUFBVTtBQUFDLFNBQUlBLElBQUUsS0FBTjtBQUFBLFNBQVlqSCxJQUFFLGFBQVU7QUFBQyxXQUFJQSxJQUFFLElBQU47QUFBQSxXQUFXNkYsSUFBRSxPQUFPcUgsWUFBUCxJQUFxQixXQUFyQixHQUFpQ0EsWUFBakMsR0FBOEMsRUFBM0QsQ0FBOEQ5RCxFQUFFZ0MsTUFBRixDQUFTLElBQVQsRUFBYyxFQUFDK0IsS0FBSSxhQUFTL0QsQ0FBVCxFQUFXO0FBQUMsa0JBQU92RCxFQUFFb0IsSUFBRW1DLENBQUosQ0FBUDtBQUFjLFVBQS9CLEVBQWdDZ0UsS0FBSSxhQUFTaEUsQ0FBVCxFQUFXcEosQ0FBWCxFQUFhO0FBQUM2RixhQUFFb0IsSUFBRW1DLENBQUosSUFBT3BKLENBQVA7QUFBUyxVQUEzRCxFQUE0RHFOLEtBQUksYUFBU2pFLENBQVQsRUFBVztBQUFDLGtCQUFPbkMsSUFBRW1DLENBQUYsSUFBT3ZELENBQWQ7QUFBZ0IsVUFBNUYsRUFBNkZ5SCxRQUFPLGdCQUFTbEUsQ0FBVCxFQUFXO0FBQUMsa0JBQU92RCxFQUFFb0IsSUFBRW1DLENBQUosQ0FBUDtBQUFjLFVBQTlILEVBQStIbUUsT0FBTSxpQkFBVTtBQUFDLGdCQUFJLElBQUluRSxDQUFSLElBQWF2RCxDQUFiO0FBQWVBLGVBQUU4RSxjQUFGLENBQWlCdkIsQ0FBakIsS0FBcUIsT0FBT3ZELEVBQUV1RCxDQUFGLENBQTVCO0FBQWY7QUFBZ0QsVUFBaE0sRUFBZDtBQUFpTixNQUF4UyxDQUF5UyxPQUFPcEosQ0FBUDtBQUFTLElBQTdULEVBQTk4SDtBQUFBLE9BQTh3SUEsSUFBRSxXQUFTb0osQ0FBVCxFQUFXbkMsQ0FBWCxFQUFhO0FBQUMsU0FBSWpILElBQUUsSUFBSXdOLEtBQUosRUFBTixDQUFnQnhOLEVBQUV5TixNQUFGLEdBQVMsWUFBVTtBQUFDeEcsWUFBR0EsRUFBRSxHQUFGLENBQUg7QUFBVSxNQUE5QixFQUErQmpILEVBQUUwTixPQUFGLEdBQVUsWUFBVTtBQUFDekcsWUFBR0EsR0FBSDtBQUFPLE1BQTNELEVBQTREakgsRUFBRXlLLEdBQUYsR0FBTXJCLENBQWxFO0FBQW9FLElBQWwzSTtBQUFBLE9BQW0zSXZELElBQUUsU0FBRkEsQ0FBRSxDQUFTdUQsQ0FBVCxFQUFXbkMsQ0FBWCxFQUFhO0FBQUNBLFVBQUc5SCxXQUFXOEgsQ0FBWCxFQUFhLENBQWIsQ0FBSDtBQUFtQixJQUF0NUk7QUFBQSxPQUF1NUlsSCxJQUFFLFNBQUZBLENBQUUsQ0FBU3FKLENBQVQsRUFBV25DLENBQVgsRUFBYWpILENBQWIsRUFBZTtBQUFDQSxVQUFHYixXQUFXYSxDQUFYLEVBQWEsQ0FBYixDQUFIO0FBQW1CLElBQTU3STtBQUFBLE9BQTY3STZJLElBQUUsWUFBVTtBQUFDLFlBQU0sRUFBQzhFLEtBQUksYUFBU3ZFLENBQVQsRUFBVztBQUFDLGdCQUFPLElBQVA7QUFBWSxRQUE3QixFQUE4QndFLFFBQU8sZ0JBQVN4RSxDQUFULEVBQVduQyxDQUFYLEVBQWFqSCxDQUFiLEVBQWUsQ0FBRSxDQUF0RCxFQUF1RDZOLE9BQU0sZUFBU3pFLENBQVQsRUFBV25DLENBQVgsRUFBYWpILENBQWIsRUFBZSxDQUFFLENBQTlFLEVBQStFOE4sWUFBVyxvQkFBUzFFLENBQVQsRUFBV25DLENBQVgsRUFBYTtBQUFDLGdCQUFNLENBQUMsQ0FBUDtBQUFTLFFBQWpILEVBQWtIOEcsTUFBSyxjQUFTM0UsQ0FBVCxFQUFXbkMsQ0FBWCxFQUFhO0FBQUMsZ0JBQU8sSUFBUDtBQUFZLFFBQWpKLEVBQU47QUFBeUosSUFBcEssRUFBLzdJO0FBQUEsT0FBc21KZ0MsSUFBRSxTQUFGQSxDQUFFLENBQVNHLENBQVQsRUFBV25DLENBQVgsRUFBYTtBQUFDLFlBQU8rRyxNQUFQLElBQWUsV0FBZixJQUE0Qi9HLENBQTVCLElBQStCOUgsV0FBVzhILENBQVgsRUFBYSxDQUFiLENBQS9CLENBQStDLElBQUlqSCxJQUFFZ08sT0FBT0MsZ0JBQVAsRUFBTjtBQUFBLFNBQWdDcEksSUFBRTdGLEVBQUVrTyxhQUFGLENBQWdCLEtBQWhCLEVBQXNCOUUsQ0FBdEIsRUFBd0IsSUFBeEIsQ0FBbEMsQ0FBZ0V2RCxFQUFFc0ksS0FBRixJQUFVbEgsS0FBRzlILFdBQVc4SCxDQUFYLEVBQWEsQ0FBYixDQUFiO0FBQTZCLElBQWx3SjtBQUFBLE9BQW13SnFELElBQUUsWUFBVTtBQUFDLFNBQUlsQixJQUFFLEVBQUNnRixVQUFTLFNBQVYsRUFBb0I3RCxTQUFRdkssQ0FBNUIsRUFBOEJxTyxVQUFTdE8sQ0FBdkMsRUFBeUN1TyxTQUFRckgsQ0FBakQsRUFBbURzSCxJQUFHMUYsQ0FBdEQsRUFBd0QyRixxQkFBb0IsK0JBQVU7QUFBQyxnQkFBTyxJQUFQO0FBQVksUUFBbkcsRUFBb0dDLFlBQVcsc0JBQVU7QUFBQyxnQkFBT0MsVUFBVUMsYUFBakI7QUFBK0IsUUFBekosRUFBMEpDLGVBQWMsdUJBQVN4RixDQUFULEVBQVc7QUFBQyxnQkFBT3NGLFVBQVVDLGFBQWpCO0FBQStCLFFBQW5OLEVBQW9ORSxjQUFhLHdCQUFVO0FBQUMsZ0JBQU8sS0FBS0MsYUFBTCxLQUFzQixDQUFFLElBQUk5SixJQUFKLEVBQXhCLEdBQWtDLENBQUMsRUFBRWMsS0FBS0UsTUFBTCxLQUFjLEdBQWhCLENBQTFDO0FBQStELFFBQTNTLEVBQTRTK0ksb0JBQW1CLDhCQUFVO0FBQUMsZ0JBQU0sSUFBTjtBQUFXLFFBQXJWLEVBQXNWRCxlQUFjLHlCQUFVO0FBQUMsZ0JBQU0sRUFBTjtBQUFTLFFBQXhYLEVBQXlYRSxvQkFBbUIsOEJBQVU7QUFBQyxnQkFBTSxFQUFOO0FBQVMsUUFBaGEsRUFBaWFDLGlCQUFnQiwyQkFBVTtBQUFDLGdCQUFNLElBQU47QUFBVyxRQUF2YyxFQUF3Y0MsZ0JBQWUsMEJBQVU7QUFBQyxnQkFBTSxFQUFOO0FBQVMsUUFBM2UsRUFBNGVDLG1CQUFrQiw2QkFBVTtBQUFDLGdCQUFNLEVBQU47QUFBUyxRQUFsaEIsRUFBbWhCQyxlQUFjLHlCQUFVO0FBQUMsZ0JBQU0sRUFBTjtBQUFTLFFBQXJqQixFQUFzakJDLGFBQVksdUJBQVU7QUFBQyxnQkFBTSxFQUFOO0FBQVMsUUFBdGxCLEVBQXVsQkMsZ0JBQWUsMEJBQVU7QUFBQyxnQkFBTSxFQUFOO0FBQVMsUUFBMW5CLEVBQTJuQkMsdUJBQXNCLGlDQUFVO0FBQUMsZ0JBQU0sQ0FBQyxDQUFQO0FBQVMsUUFBcnFCLEVBQXNxQkMsY0FBYSx3QkFBVTtBQUFDLGdCQUFNLENBQUMsQ0FBUDtBQUFTLFFBQXZzQixFQUF3c0JDLFlBQVcsc0JBQVUsQ0FBRSxDQUEvdEIsRUFBZ3VCQywyQkFBMEIscUNBQVU7QUFBQyxnQkFBTSxDQUFDLENBQVA7QUFBUyxRQUE5d0IsRUFBTixDQUFzeEIsT0FBT3RHLENBQVA7QUFBUyxJQUExeUIsRUFBcndKO0FBQUEsT0FBa2pMRixJQUFFLFlBQVU7QUFBQyxjQUFTQyxDQUFULEdBQVk7QUFBQyxjQUFPLE9BQU82RSxNQUFQLElBQWUsV0FBZixJQUE0QixPQUFPQSxPQUFPalMsS0FBZCxJQUFxQixXQUF4RDtBQUFvRSxlQUFTK00sQ0FBVCxHQUFZO0FBQUMsY0FBT00sRUFBRXVDLFVBQUYsQ0FBYXFDLE9BQU9qUyxLQUFQLENBQWE0VCxNQUFiLENBQW9CQyxFQUFqQyxJQUFxQzVCLE9BQU9qUyxLQUFQLENBQWE0VCxNQUFiLENBQW9CQyxFQUF6RCxHQUE0RHhHLEVBQUV1QyxVQUFGLENBQWFxQyxPQUFPalMsS0FBUCxDQUFhOFQsT0FBYixDQUFxQkMsR0FBbEMsSUFBdUM5QixPQUFPalMsS0FBUCxDQUFhOFQsT0FBYixDQUFxQkMsR0FBNUQsR0FBZ0UsSUFBbkk7QUFBd0ksZUFBU2xLLENBQVQsR0FBWTtBQUFDLFdBQUdDLEtBQUcsSUFBTixFQUFXO0FBQUMsYUFBSXVELElBQUVOLEdBQU4sQ0FBVU0sS0FBRyxJQUFILElBQVN2RCxJQUFFdUQsQ0FBRixFQUFJa0IsSUFBRSxJQUFOLEVBQVdwQixJQUFFRSxDQUF0QixLQUEwQnZELElBQUUsQ0FBRSxJQUFJYixJQUFKLEVBQUYsR0FBWSxDQUFDLEVBQUVjLEtBQUtFLE1BQUwsS0FBYyxHQUFoQixDQUFmLEVBQW9Dc0UsSUFBRSxJQUF0QyxFQUEyQ3BCLElBQUUsSUFBdkU7QUFBNkU7QUFBQyxVQUFJbEosSUFBRSxJQUFOO0FBQUEsU0FBVzZGLElBQUUsSUFBYjtBQUFBLFNBQWtCeUUsSUFBRSxJQUFwQjtBQUFBLFNBQXlCcEIsSUFBRSxJQUEzQixDQUFnQyxPQUFNLEVBQUNrRixVQUFTLFlBQVYsRUFBdUI3RCxTQUFRdEIsQ0FBL0IsRUFBaUNvRixVQUFTdE8sQ0FBMUMsRUFBNEN1TyxTQUFRckgsQ0FBcEQsRUFBc0RzSCxJQUFHMUYsQ0FBekQsRUFBMkQyRixxQkFBb0IsK0JBQVU7QUFBQyxnQkFBTzVJLEtBQUlzRCxDQUFYO0FBQWEsUUFBdkcsRUFBd0d1RixZQUFXLHNCQUFVO0FBQUMsZ0JBQU9yRixFQUFFdUMsVUFBRixDQUFhcUMsT0FBT2pTLEtBQVAsQ0FBYWdVLFdBQWIsQ0FBeUI3TyxJQUF0QyxJQUE0QzhNLE9BQU9qUyxLQUFQLENBQWFnVSxXQUFiLENBQXlCN08sSUFBckUsR0FBMEV3TixVQUFVQyxhQUEzRjtBQUF5RyxRQUF2TyxFQUF3T0MsZUFBYyx1QkFBUzNILENBQVQsRUFBVztBQUFDLGdCQUFPbUMsRUFBRXVDLFVBQUYsQ0FBYXFDLE9BQU9qUyxLQUFQLENBQWFnVSxXQUFiLENBQXlCQyxPQUF0QyxJQUErQ2hDLE9BQU9qUyxLQUFQLENBQWFnVSxXQUFiLENBQXlCQyxPQUF4RSxHQUFnRnRCLFVBQVVDLGFBQWpHO0FBQStHLFFBQWpYLEVBQWtYRSxjQUFhLHdCQUFVO0FBQUMsZ0JBQU9qSixLQUFJQyxDQUFYO0FBQWEsUUFBdlosRUFBd1prSixvQkFBbUIsOEJBQVU7QUFBQyxnQkFBT3pFLENBQVA7QUFBUyxRQUEvYixFQUFnY3dFLGVBQWMseUJBQVU7QUFBQyxnQkFBTzFGLEVBQUVvRCxPQUFGLENBQVV3QixPQUFPalMsS0FBUCxDQUFhNFQsTUFBYixDQUFvQk0sUUFBOUIsRUFBdUMsRUFBdkMsQ0FBUDtBQUFrRCxRQUEzZ0IsRUFBNGdCakIsb0JBQW1CLDhCQUFVO0FBQUMsZ0JBQU81RixFQUFFb0QsT0FBRixDQUFVd0IsT0FBT2pTLEtBQVAsQ0FBYTRULE1BQWIsQ0FBb0JLLE9BQTlCLEVBQXNDLEVBQXRDLENBQVA7QUFBaUQsUUFBM2xCLEVBQTRsQmYsaUJBQWdCLDJCQUFVO0FBQUMsZ0JBQU0sSUFBTjtBQUFXLFFBQWxvQixFQUFtb0JDLGdCQUFlLDBCQUFVO0FBQUMsZ0JBQU0sWUFBTjtBQUFtQixRQUFockIsRUFBaXJCQyxtQkFBa0IsNkJBQVU7QUFBQyxnQkFBTSxFQUFOO0FBQVMsUUFBdnRCLEVBQXd0QkMsZUFBYyx5QkFBVTtBQUFDLGdCQUFPLE9BQU9jLE1BQVAsSUFBZSxXQUFmLElBQTRCLE9BQU9BLE9BQU9DLE1BQWQsSUFBc0IsV0FBbEQsSUFBK0QsT0FBT0QsT0FBT0UsS0FBZCxJQUFxQixXQUFwRixHQUFnR0YsT0FBT0MsTUFBUCxHQUFjLEdBQWQsR0FBa0JELE9BQU9FLEtBQXpILEdBQStILEVBQXRJO0FBQXlJLFFBQTEzQixFQUEyM0JmLGFBQVksdUJBQVU7QUFBQyxnQkFBTSxFQUFOO0FBQVMsUUFBMzVCLEVBQTQ1QkMsZ0JBQWUsMEJBQVU7QUFBQyxnQkFBTSxFQUFOO0FBQVMsUUFBLzdCLEVBQWc4QkMsdUJBQXNCLGlDQUFVO0FBQUMsZ0JBQU0sQ0FBQyxDQUFQO0FBQVMsUUFBMStCLEVBQTIrQkMsY0FBYXJHLENBQXgvQixFQUFOO0FBQWlnQyxJQUFuNEMsRUFBcGpMLENBQTA3Tm1CLEVBQUVtRixVQUFGLEdBQWEsWUFBVTtBQUFDdkcsT0FBRXNHLFlBQUYsTUFBa0JwRyxFQUFFZ0MsTUFBRixDQUFTZCxDQUFULEVBQVdwQixDQUFYLENBQWxCO0FBQWdDLElBQXhELENBQXlELElBQUlDLElBQUUsT0FBT3hOLE1BQVAsSUFBZSxXQUFmLElBQTRCLE9BQU80QixRQUFQLElBQWlCLFdBQW5EO0FBQUEsT0FBK0R1TCxDQUEvRDtBQUFBLE9BQWlFbEQsQ0FBakUsQ0FBbUV1RCxLQUFHTCxJQUFFbk4sTUFBRixFQUFTaUssSUFBRXJJLFFBQWQsS0FBeUJ1TCxJQUFFLEVBQUYsRUFBS2xELElBQUUsRUFBQ3hILFVBQVMsRUFBQ3VCLE1BQUssRUFBTixFQUFWLEVBQW9Ca0wsT0FBTSxFQUExQixFQUE2QkMsS0FBSSxFQUFqQyxFQUFvQ0MsVUFBUyxFQUE3QyxFQUFnRHBKLFFBQU8sRUFBdkQsRUFBaEMsRUFBNEYsSUFBSXlILElBQUVBLEtBQUcsRUFBVCxDQUFZQSxFQUFFaUgsU0FBRixHQUFZLFVBQVNwSixDQUFULEVBQVdqSCxDQUFYLEVBQWE7QUFBQyxVQUFJLElBQUk2RixDQUFSLElBQWFvQixDQUFiO0FBQWVtQyxTQUFFOUssT0FBRixDQUFVdUgsQ0FBVixFQUFZN0YsQ0FBWixLQUFnQixDQUFDLENBQWpCLElBQW9CLE9BQU9pSCxFQUFFcEIsQ0FBRixDQUEzQjtBQUFmO0FBQStDLElBQXpFLEVBQTBFdUQsRUFBRWtILE9BQUYsR0FBVSxVQUFTbEgsQ0FBVCxFQUFXbkMsQ0FBWCxFQUFhO0FBQUMsU0FBSWpILENBQUo7QUFBQSxTQUFNNkYsSUFBRSxFQUFSLENBQVcsS0FBSTdGLENBQUosSUFBU29KLENBQVQ7QUFBVyxRQUFDLENBQUNuQyxDQUFELElBQUlBLEVBQUV2RixJQUFGLENBQU8xQixDQUFQLENBQUwsS0FBaUJvSixFQUFFdUIsY0FBRixDQUFpQjNLLENBQWpCLENBQWpCLEtBQXVDNkYsRUFBRUEsRUFBRTFGLE1BQUosSUFBWUgsQ0FBbkQ7QUFBWCxNQUFpRSxPQUFPNkYsQ0FBUDtBQUFTLElBQXZMLENBQXdMLElBQUk2RCxJQUFFLFlBQVU7QUFBQyxTQUFJTixJQUFFLENBQUMsTUFBRCxFQUFRLE9BQVIsRUFBZ0IsS0FBaEIsRUFBc0IsUUFBdEIsRUFBK0IsWUFBL0IsRUFBNEMsSUFBNUMsRUFBaUQsUUFBakQsRUFBMEQsU0FBMUQsRUFBb0UsVUFBcEUsRUFBK0UsUUFBL0UsRUFBd0YsVUFBeEYsQ0FBTixDQUEwRyxPQUFNLEVBQUNtSCxNQUFLLENBQU4sRUFBUUMsT0FBTSxDQUFkLEVBQWdCQyxLQUFJLENBQXBCLEVBQXNCQyxRQUFPLENBQTdCLEVBQStCQyxZQUFXLENBQTFDLEVBQTRDQyxZQUFXLENBQXZELEVBQXlEQyxRQUFPLENBQWhFLEVBQWtFQyxTQUFRLENBQTFFLEVBQTRFQyxVQUFTLENBQXJGLEVBQXVGQyxRQUFPLENBQTlGLEVBQWdHQyxVQUFTLEVBQXpHLEVBQTRHL0ssVUFBUyxrQkFBU2UsQ0FBVCxFQUFXO0FBQUMsZ0JBQU9tQyxFQUFFbkMsQ0FBRixDQUFQO0FBQVksUUFBN0ksRUFBTjtBQUFxSixJQUExUSxFQUFOO0FBQUEsT0FBbVJoQixJQUFFLFlBQVU7QUFBQyxTQUFJbUQsSUFBRSxDQUFDTSxFQUFFK0csR0FBSCxFQUFPL0csRUFBRTZHLElBQVQsRUFBYzdHLEVBQUU4RyxLQUFoQixFQUFzQjlHLEVBQUVnSCxNQUF4QixDQUFOLENBQXNDLE9BQU0sRUFBQ1EsTUFBSyxDQUFOLEVBQVFDLFNBQVEsQ0FBaEIsRUFBa0JDLFFBQU8sQ0FBekIsRUFBMkJDLFdBQVUsQ0FBckMsRUFBdUNDLGFBQVkscUJBQVNySyxDQUFULEVBQVc7QUFBQyxnQkFBT21DLEVBQUVuQyxDQUFGLENBQVA7QUFBWSxRQUEzRSxFQUFOO0FBQW1GLElBQXBJLEVBQXJSO0FBQUEsT0FBNFowQyxJQUFFLEVBQUM0SCxRQUFPN0gsRUFBRW9ILE9BQVYsRUFBa0JVLFNBQVE5SCxFQUFFcUgsUUFBNUIsRUFBcUNVLE9BQU0vSCxFQUFFc0gsTUFBN0MsRUFBb0RVLFNBQVFoSSxFQUFFdUgsUUFBOUQsRUFBOVo7QUFBQSxPQUFzZTNILElBQUUsRUFBQ3FJLHFCQUFvQixXQUFyQixFQUFpQ0Msb0JBQW1CLGFBQXBELEVBQWtFQyw0QkFBMkIsQ0FBQyxFQUFDQyxhQUFZLEdBQWIsRUFBaUJDLFVBQVMsR0FBMUIsRUFBRCxFQUFnQyxFQUFDRCxhQUFZLElBQWIsRUFBa0JDLFVBQVMsR0FBM0IsRUFBaEMsQ0FBN0YsRUFBOEpDLDZCQUE0QixJQUExTCxFQUErTEMsc0NBQXFDLEdBQXBPLEVBQXdPQyxVQUFTLElBQWpQLEVBQXNQQyxXQUFVLElBQWhRLEVBQXFRQyxrQkFBaUIsR0FBdFIsRUFBMFJDLGFBQVksR0FBdFMsRUFBMFNDLGlCQUFnQixNQUExVCxFQUFpVTlJLDZCQUE0QixJQUE3VixFQUFrV0Qsa0JBQWlCLElBQW5YLEVBQXdYcUIsY0FBYSxDQUFDLElBQUQsRUFBTSxJQUFOLEVBQVcsS0FBWCxFQUFpQixLQUFqQixFQUF1QixLQUF2QixFQUE2QixLQUE3QixFQUFtQyxTQUFuQyxFQUE2QyxZQUE3QyxFQUEwRCxZQUExRCxFQUF1RSxZQUF2RSxFQUFvRixZQUFwRixFQUFpRyxVQUFqRyxFQUE0RyxhQUE1RyxFQUEwSCxhQUExSCxFQUF3SSxhQUF4SSxFQUFzSixhQUF0SixFQUFvSyxVQUFwSyxFQUErSyxhQUEvSyxFQUE2TCxhQUE3TCxFQUEyTSxhQUEzTSxFQUF5TixhQUF6TixFQUF1TyxVQUF2TyxFQUFrUCxVQUFsUCxFQUE2UCxLQUE3UCxFQUFtUSxNQUFuUSxFQUEwUSxNQUExUSxFQUFpUixNQUFqUixFQUF3UixNQUF4UixFQUErUixPQUEvUixFQUF1UyxhQUF2UyxFQUFxVCxNQUFyVCxFQUE0VCxVQUE1VCxFQUF1VSxVQUF2VSxFQUFrVixVQUFsVixFQUE2VixjQUE3VixFQUE0VyxVQUE1VyxFQUF1WCxXQUF2WCxFQUFtWSxVQUFuWSxFQUE4WSxXQUE5WSxFQUEwWixXQUExWixFQUFzYSxXQUF0YSxFQUFrYixjQUFsYixFQUFpYyxjQUFqYyxFQUFnZCxjQUFoZCxFQUErZCxjQUEvZCxFQUE4ZSxVQUE5ZSxFQUF5ZixVQUF6ZixFQUFvZ0IsU0FBcGdCLEVBQThnQixZQUE5Z0IsRUFBMmhCLFlBQTNoQixFQUF3aUIsWUFBeGlCLEVBQXFqQixZQUFyakIsRUFBa2tCLFVBQWxrQixFQUE2a0IsT0FBN2tCLEVBQXFsQixVQUFybEIsRUFBZ21CLGFBQWhtQixFQUE4bUIsYUFBOW1CLEVBQTRuQixhQUE1bkIsRUFBMG9CLGFBQTFvQixFQUF3cEIsVUFBeHBCLEVBQW1xQixVQUFucUIsRUFBOHFCLFVBQTlxQixFQUF5ckIsVUFBenJCLEVBQW9zQixVQUFwc0IsRUFBK3NCLFVBQS9zQixFQUEwdEIsVUFBMXRCLEVBQXF1QixVQUFydUIsRUFBZ3ZCLFVBQWh2QixFQUEydkIsVUFBM3ZCLEVBQXN3QixVQUF0d0IsRUFBaXhCLFVBQWp4QixFQUE0eEIsVUFBNXhCLEVBQXV5QixVQUF2eUIsRUFBa3pCLFVBQWx6QixFQUE2ekIsVUFBN3pCLEVBQXcwQixhQUF4MEIsRUFBczFCLGFBQXQxQixFQUFvMkIsYUFBcDJCLEVBQWszQixhQUFsM0IsRUFBZzRCLFVBQWg0QixFQUEyNEIsYUFBMzRCLEVBQXk1QixhQUF6NUIsRUFBdTZCLGFBQXY2QixFQUFxN0IsYUFBcjdCLEVBQW04QixVQUFuOEIsRUFBODhCLFVBQTk4QixFQUF5OUIsVUFBejlCLEVBQW8rQixVQUFwK0IsRUFBKytCLFVBQS8rQixFQUEwL0IsVUFBMS9CLEVBQXFnQyxVQUFyZ0MsRUFBZ2hDLFVBQWhoQyxFQUEyaEMsV0FBM2hDLEVBQXVpQyxZQUF2aUMsRUFBb2pDLGVBQXBqQyxFQUFva0MsZUFBcGtDLEVBQW9sQyxlQUFwbEMsRUFBb21DLFVBQXBtQyxFQUErbUMsWUFBL21DLEVBQTRuQyxhQUE1bkMsRUFBMG9DLFVBQTFvQyxFQUFxcEMsVUFBcnBDLEVBQWdxQyxXQUFocUMsRUFBNHFDLFVBQTVxQyxFQUF1ckMsV0FBdnJDLEVBQW1zQyxXQUFuc0MsRUFBK3NDLFVBQS9zQyxFQUEwdEMsV0FBMXRDLEVBQXN1QyxVQUF0dUMsRUFBaXZDLFVBQWp2QyxFQUE0dkMsV0FBNXZDLEVBQXd3QyxZQUF4d0MsRUFBcXhDLFVBQXJ4QyxFQUFneUMsV0FBaHlDLEVBQTR5QyxVQUE1eUMsRUFBdXpDLFVBQXZ6QyxFQUFrMEMsV0FBbDBDLEVBQTgwQyxXQUE5MEMsRUFBMDFDLFlBQTExQyxFQUF1MkMsVUFBdjJDLEVBQWszQyxZQUFsM0MsRUFBKzNDLE9BQS8zQyxFQUF1NEMsVUFBdjRDLEVBQWs1QyxVQUFsNUMsRUFBNjVDLFVBQTc1QyxFQUF3NkMsYUFBeDZDLEVBQXM3QyxhQUF0N0MsRUFBbzhDLGFBQXA4QyxFQUFrOUMsYUFBbDlDLEVBQWcrQyxVQUFoK0MsRUFBMitDLFVBQTMrQyxFQUFzL0MsYUFBdC9DLEVBQW9nRCxhQUFwZ0QsRUFBa2hELGFBQWxoRCxFQUFnaUQsYUFBaGlELEVBQThpRCxVQUE5aUQsRUFBeWpELFVBQXpqRCxFQUFva0QsVUFBcGtELEVBQStrRCxVQUEva0QsRUFBMGxELFVBQTFsRCxFQUFxbUQsVUFBcm1ELEVBQWduRCxVQUFobkQsRUFBMm5ELFVBQTNuRCxFQUFzb0QsVUFBdG9ELEVBQWlwRCxVQUFqcEQsRUFBNHBELFVBQTVwRCxFQUF1cUQsVUFBdnFELEVBQWtyRCxVQUFsckQsRUFBNnJELFVBQTdyRCxFQUF3c0QsVUFBeHNELEVBQW10RCxVQUFudEQsRUFBOHRELFVBQTl0RCxFQUF5dUQsVUFBenVELEVBQW92RCxVQUFwdkQsRUFBK3ZELFVBQS92RCxFQUEwd0QsVUFBMXdELEVBQXF4RCxXQUFyeEQsRUFBaXlELFVBQWp5RCxFQUE0eUQsVUFBNXlELEVBQXV6RCxVQUF2ekQsRUFBazBELFVBQWwwRCxFQUE2MEQsVUFBNzBELEVBQXcxRCxVQUF4MUQsRUFBbTJELElBQW4yRCxFQUF3MkQsS0FBeDJELEVBQTgyRCxLQUE5MkQsRUFBbzNELEtBQXAzRCxFQUEwM0QsS0FBMTNELEVBQWc0RCxJQUFoNEQsRUFBcTRELEtBQXI0RCxFQUEyNEQsS0FBMzRELEVBQWk1RCxLQUFqNUQsRUFBdTVELEtBQXY1RCxFQUE2NUQsSUFBNzVELEVBQWs2RCxLQUFsNkQsRUFBdzZELEtBQXg2RCxFQUE4NkQsS0FBOTZELEVBQW83RCxLQUFwN0QsRUFBMDdELElBQTE3RCxFQUErN0QsS0FBLzdELEVBQXE4RCxLQUFyOEQsRUFBMjhELEtBQTM4RCxFQUFpOUQsS0FBajlELEVBQXU5RCxLQUF2OUQsRUFBNjlELEtBQTc5RCxFQUFtK0QsS0FBbitELEVBQXkrRCxLQUF6K0QsRUFBKytELEtBQS8rRCxFQUFxL0QsS0FBci9ELEVBQTIvRCxJQUEzL0QsRUFBZ2dFLElBQWhnRSxFQUFxZ0UsSUFBcmdFLENBQXJZLEVBQXhlO0FBQUEsT0FBeTNGaEIsSUFBRSxZQUFVO0FBQUMsU0FBSTNDLElBQUUsYUFBVTtBQUFDLGdCQUFTNkIsQ0FBVCxDQUFXTSxDQUFYLEVBQWFuQyxDQUFiLEVBQWU7QUFBQyxhQUFJakgsSUFBRWlILEVBQUVtQyxDQUFGLENBQU4sQ0FBV3BKLEtBQUcsSUFBSCxLQUFVbUosRUFBRUMsQ0FBRixJQUFLcEosQ0FBZjtBQUFrQixZQUFJaUgsSUFBRSxJQUFOO0FBQUEsV0FBV2pILElBQUUsQ0FBYjtBQUFBLFdBQWU2RixJQUFFLENBQWpCO0FBQUEsV0FBbUI5RixJQUFFLENBQXJCO0FBQUEsV0FBdUI4SSxJQUFFLENBQXpCO0FBQUEsV0FBMkJJLElBQUUsQ0FBN0I7QUFBQSxXQUErQnFCLElBQUUsQ0FBakM7QUFBQSxXQUFtQ3BCLENBQW5DO0FBQUEsV0FBcUNDLENBQXJDLENBQXVDQyxFQUFFZ0MsTUFBRixDQUFTLElBQVQsRUFBYyxFQUFDbUgsT0FBTSxlQUFTdlMsQ0FBVCxFQUFXO0FBQUNBLGdCQUFHLElBQUgsSUFBU0EsRUFBRUcsTUFBRixHQUFTLENBQWxCLEdBQW9CaUosRUFBRWlILFNBQUYsQ0FBWWxILENBQVosRUFBY25KLENBQWQsQ0FBcEIsR0FBcUNtSixJQUFFLEVBQXZDLEVBQTBDQSxFQUFFd0IsY0FBRixDQUFpQixVQUFqQixNQUErQnhCLEVBQUVxSixRQUFGLEdBQVcsR0FBMUMsQ0FBMUMsRUFBeUZySixFQUFFd0IsY0FBRixDQUFpQixVQUFqQixNQUErQnhCLEVBQUVzSixRQUFGLEdBQVcsR0FBMUMsQ0FBekYsRUFBd0l0SixFQUFFd0IsY0FBRixDQUFpQixVQUFqQixNQUErQnhCLEVBQUV1SixRQUFGLEdBQVcsR0FBMUMsQ0FBeEksRUFBdUx6TCxFQUFFMEwsU0FBRixDQUFZLENBQVosQ0FBdkwsRUFBc00xTCxFQUFFMkwsU0FBRixDQUFZLENBQVosQ0FBdE0sRUFBcU4zTCxFQUFFNEwsZ0JBQUYsQ0FBbUIsQ0FBbkIsQ0FBck4sRUFBMk81TCxFQUFFNkwscUJBQUYsQ0FBd0IsQ0FBQyxDQUF6QixDQUEzTyxFQUF1UTdMLEVBQUU4TCxlQUFGLENBQWtCLENBQWxCLENBQXZRLEVBQTRSOUwsRUFBRStMLG9CQUFGLENBQXVCLENBQUMsQ0FBeEIsQ0FBNVI7QUFBdVQsVUFBMVUsRUFBMlVDLFdBQVUsbUJBQVNqVCxDQUFULEVBQVc2RixDQUFYLEVBQWE7QUFBQzdGLGdCQUFHLElBQUgsSUFBU29KLEVBQUVnQyxNQUFGLENBQVNqQyxDQUFULEVBQVduSixDQUFYLENBQVQsRUFBdUJpSCxFQUFFaU0sWUFBRixDQUFlL0osQ0FBZixFQUFpQnRELENBQWpCLENBQXZCO0FBQTJDLFVBQTlZLEVBQStZc04sV0FBVSxxQkFBVTtBQUFDLGtCQUFPaEssQ0FBUDtBQUFTLFVBQTdhLEVBQThhaUssVUFBUyxrQkFBU2hLLENBQVQsRUFBV3BKLENBQVgsRUFBYTtBQUFDLGVBQUk2RixJQUFFLEVBQU4sQ0FBU0EsRUFBRXVELENBQUYsSUFBS3BKLENBQUwsRUFBT2lILEVBQUVnTSxTQUFGLENBQVlwTixDQUFaLEVBQWMsSUFBZCxDQUFQO0FBQTJCLFVBQXplLEVBQTBld04sVUFBUyxrQkFBU2pLLENBQVQsRUFBVztBQUFDLGtCQUFPRCxFQUFFQyxDQUFGLENBQVA7QUFBWSxVQUEzZ0IsRUFBNGdCa0ssV0FBVSxxQkFBVTtBQUFDLGtCQUFNLENBQUMsT0FBT3BLLENBQVAsSUFBVSxXQUFWLElBQXVCQSxLQUFHLElBQTNCLEtBQWtDakMsRUFBRXNNLFNBQUYsQ0FBWSxHQUFaLENBQWxDLEVBQW1EckssQ0FBekQ7QUFBMkQsVUFBNWxCLEVBQTZsQnFLLFdBQVUsbUJBQVNuSyxDQUFULEVBQVc7QUFBQ0YsZUFBRUUsQ0FBRjtBQUFJLFVBQXZuQixFQUF3bkI4SixjQUFhLHNCQUFTOUosQ0FBVCxFQUFXUCxDQUFYLEVBQWE7QUFBQyxlQUFJeUIsSUFBRWxCLEVBQUVvSyxRQUFSLENBQWlCbEosS0FBRyxJQUFILEtBQVVyRCxFQUFFc00sU0FBRixDQUFZakosQ0FBWixHQUFlLE9BQU9sQixFQUFFb0ssUUFBbEMsR0FBNENsSixJQUFFbEIsRUFBRXFLLFFBQWhELEVBQXlEbkosS0FBRyxJQUFILEtBQVV2SyxJQUFFd0wsT0FBT2pCLENBQVAsQ0FBRixFQUFZLE9BQU9sQixFQUFFcUssUUFBL0IsQ0FBekQsRUFBa0czSyxFQUFFLFVBQUYsRUFBYU0sQ0FBYixDQUFsRyxFQUFrSE4sRUFBRSxVQUFGLEVBQWFNLENBQWIsQ0FBbEgsRUFBa0lOLEVBQUUsVUFBRixFQUFhTSxDQUFiLENBQWxJLEVBQWtKTixFQUFFLFVBQUYsRUFBYU0sQ0FBYixDQUFsSixFQUFrS04sRUFBRSxVQUFGLEVBQWFNLENBQWIsQ0FBbEssQ0FBa0wsSUFBR1AsS0FBRzVDLEVBQUVrTCxPQUFMLElBQWN0SSxLQUFHLElBQXBCLEVBQXlCeUIsSUFBRWxCLEVBQUVzSyxRQUFKLEVBQWFwSixLQUFHLElBQUgsS0FBVXpFLElBQUUwRixPQUFPakIsQ0FBUCxDQUFGLEVBQVksT0FBT2xCLEVBQUVzSyxRQUEvQixDQUFiLENBQXNEN0ssS0FBRzVDLEVBQUVvTCxTQUFMLEtBQWlCL0csSUFBRWxCLEVBQUV1SyxRQUFKLEVBQWFySixLQUFHLElBQUgsS0FBVXJCLElBQUVzQyxPQUFPakIsQ0FBUCxDQUFGLEVBQVksT0FBT2xCLEVBQUV1SyxRQUEvQixDQUE5QixFQUF3RSxJQUFHOUssS0FBRzVDLEVBQUVtTCxNQUFMLElBQWF2SSxLQUFHNUMsRUFBRWlMLElBQWxCLElBQXdCckksS0FBRyxJQUE5QixFQUFtQ3lCLElBQUVsQixFQUFFd0ssUUFBSixFQUFhdEosS0FBRyxJQUFILEtBQVV0SyxJQUFFdUwsT0FBT2pCLENBQVAsQ0FBRixFQUFZLE9BQU9sQixFQUFFd0ssUUFBL0IsQ0FBYjtBQUFzRCxVQUF0a0MsRUFBdWtDQyxjQUFhLHNCQUFTOVQsQ0FBVCxFQUFXOEksQ0FBWCxFQUFhO0FBQUMsZUFBSUksSUFBRUosS0FBRyxFQUFULENBQVlJLEVBQUV1SyxRQUFGLEdBQVd2TSxFQUFFcU0sU0FBRixFQUFYLEVBQXlCckssRUFBRXdLLFFBQUYsR0FBV3JNLE9BQU9ILEVBQUU2TSxnQkFBRixFQUFQLENBQXBDLENBQWlFLElBQUcvVCxLQUFHMkosRUFBRTZHLElBQUwsSUFBV3hRLEtBQUcsSUFBakIsRUFBc0JrSixFQUFFeUssUUFBRixHQUFXdE0sT0FBT3ZCLENBQVAsQ0FBWCxDQUFxQixJQUFHOUYsS0FBRzJKLEVBQUU4RyxLQUFMLElBQVl6USxLQUFHMkosRUFBRStHLEdBQWpCLElBQXNCMVEsS0FBRzJKLEVBQUVpSCxVQUEzQixJQUF1QzVRLEtBQUcySixFQUFFa0gsVUFBNUMsSUFBd0Q3USxLQUFHLElBQTlELEVBQW1Fa0osRUFBRTBLLFFBQUYsR0FBV3ZNLE9BQU9ILEVBQUU4TSxlQUFGLEVBQVAsQ0FBWCxFQUF1QzlLLEVBQUUySyxRQUFGLEdBQVd4TSxPQUFPcEgsQ0FBUCxDQUFsRCxDQUE0RCxPQUFPb0osRUFBRWdDLE1BQUYsQ0FBU25DLENBQVQsRUFBV2hDLEVBQUVrTSxTQUFGLEVBQVgsR0FBMEJsSyxDQUFqQztBQUFtQyxVQUE1M0MsRUFBNjNDK0ssaUJBQWdCLDJCQUFVO0FBQUNoVTtBQUFJLFVBQTU1QyxFQUE2NUNpVSxpQkFBZ0IsMkJBQVU7QUFBQ3BPO0FBQUksVUFBNTdDLEVBQTY3Q2lPLGtCQUFpQiw0QkFBVTtBQUFDLGVBQUkxSyxJQUFFckosQ0FBTixDQUFRLE9BQU84SSxLQUFHLENBQUgsS0FBT08sS0FBRyxDQUFFLElBQUlwRSxJQUFKLEVBQUYsR0FBWTZELENBQXRCLEdBQXlCTyxDQUFoQztBQUFrQyxVQUFuZ0QsRUFBb2dEeUosa0JBQWlCLDBCQUFTekosQ0FBVCxFQUFXO0FBQUNySixlQUFFcUosQ0FBRjtBQUFJLFVBQXJpRCxFQUFzaUQySyxpQkFBZ0IsMkJBQVU7QUFBQyxlQUFJM0ssSUFBRUgsQ0FBTixDQUFRLE9BQU9xQixLQUFHLENBQUgsS0FBT2xCLEtBQUcsQ0FBRSxJQUFJcEUsSUFBSixFQUFGLEdBQVlzRixDQUF0QixHQUF5QmxCLENBQWhDO0FBQWtDLFVBQTNtRCxFQUE0bUQySixpQkFBZ0IseUJBQVMzSixDQUFULEVBQVc7QUFBQ0gsZUFBRUcsQ0FBRjtBQUFJLFVBQTVvRCxFQUE2b0Q4SyxzQkFBcUIsZ0NBQVU7QUFBQyxrQkFBTzVKLENBQVA7QUFBUyxVQUF0ckQsRUFBdXJEMEksc0JBQXFCLDhCQUFTNUosQ0FBVCxFQUFXO0FBQUNrQixlQUFFbEIsQ0FBRjtBQUFJLFVBQTV0RCxFQUE2dEQrSyx1QkFBc0IsaUNBQVU7QUFBQyxrQkFBT3RMLENBQVA7QUFBUyxVQUF2d0QsRUFBd3dEaUssdUJBQXNCLCtCQUFTMUosQ0FBVCxFQUFXO0FBQUNQLGVBQUVPLENBQUY7QUFBSSxVQUE5eUQsRUFBK3lEZ0wsV0FBVSxxQkFBVTtBQUFDLGtCQUFPcFUsQ0FBUDtBQUFTLFVBQTcwRCxFQUE4MEQyUyxXQUFVLG1CQUFTdkosQ0FBVCxFQUFXO0FBQUNwSixlQUFFb0osQ0FBRjtBQUFJLFVBQXgyRCxFQUF5MkRpTCxXQUFVLHFCQUFVO0FBQUMsa0JBQU94TyxDQUFQO0FBQVMsVUFBdjRELEVBQXc0RCtNLFdBQVUsbUJBQVN4SixDQUFULEVBQVc7QUFBQ3ZELGVBQUV1RCxDQUFGO0FBQUksVUFBbDZELEVBQWQsR0FBbTdERCxJQUFFLEVBQXI3RCxFQUF3N0RsQyxFQUFFc0wsS0FBRixFQUF4N0Q7QUFBazhELE1BQXZpRSxDQUF3aUUsT0FBT3RMLENBQVA7QUFBUyxJQUE1akUsRUFBMzNGO0FBQUEsT0FBMDdKNEMsSUFBRSxZQUFVO0FBQUMsU0FBSTVDLElBQUUsYUFBVTtBQUFDLFdBQUlBLElBQUUsSUFBTjtBQUFBLFdBQVdqSCxJQUFFLElBQWI7QUFBQSxXQUFrQjZGLENBQWxCO0FBQUEsV0FBb0I5RixJQUFFLENBQXRCO0FBQUEsV0FBd0I4SSxJQUFFLENBQTFCO0FBQUEsV0FBNEJJLElBQUUsQ0FBOUI7QUFBQSxXQUFnQ3FCLElBQUUsQ0FBbEM7QUFBQSxXQUFvQ3BCLElBQUUsQ0FBdEM7QUFBQSxXQUF3Q0MsQ0FBeEM7QUFBQSxXQUEwQ0wsSUFBRSxDQUE1QztBQUFBLFdBQThDbEQsSUFBRSxDQUFDLENBQWpELENBQW1Ed0QsRUFBRWdDLE1BQUYsQ0FBUyxJQUFULEVBQWMsRUFBQ21ILE9BQU0sZUFBU3ZTLENBQVQsRUFBVztBQUFDQSxnQkFBRyxJQUFILElBQVNBLEVBQUVHLE1BQUYsR0FBUyxDQUFsQixHQUFvQmlKLEVBQUVpSCxTQUFGLENBQVlsSCxDQUFaLEVBQWNuSixDQUFkLENBQXBCLEdBQXFDbUosSUFBRSxFQUF2QyxFQUEwQ2xDLEVBQUVxTixhQUFGLENBQWdCLENBQUUsSUFBSXRQLElBQUosRUFBRixHQUFZLEdBQVosR0FBZ0I4RCxDQUFoQyxDQUExQyxFQUE2RTdCLEVBQUU0TCxnQkFBRixDQUFtQixDQUFuQixDQUE3RSxFQUFtRzVMLEVBQUU4TCxlQUFGLENBQWtCLENBQWxCLENBQW5HLEVBQXdIOUwsRUFBRTBMLFNBQUYsQ0FBWSxDQUFaLENBQXhILEVBQXVJMUwsRUFBRTJMLFNBQUYsQ0FBWSxDQUFaLENBQXZJLEVBQXNKM0wsRUFBRXNOLGdCQUFGLENBQW1CLENBQW5CLENBQXRKLEVBQTRLM08sSUFBRSxDQUFDLENBQS9LO0FBQWlMLFVBQXBNLEVBQXFNcU4sV0FBVSxtQkFBU2pULENBQVQsRUFBVzZGLENBQVgsRUFBYTtBQUFDN0YsZ0JBQUcsSUFBSCxJQUFTb0osRUFBRWdDLE1BQUYsQ0FBU2pDLENBQVQsRUFBV25KLENBQVgsQ0FBVCxFQUF1QmlILEVBQUVpTSxZQUFGLENBQWUvSixDQUFmLEVBQWlCdEQsQ0FBakIsQ0FBdkI7QUFBMkMsVUFBeFEsRUFBeVFzTixXQUFVLHFCQUFVO0FBQUMsa0JBQU9oSyxDQUFQO0FBQVMsVUFBdlMsRUFBd1NpSyxVQUFTLGtCQUFTaEssQ0FBVCxFQUFXcEosQ0FBWCxFQUFhO0FBQUMsZUFBSTZGLElBQUUsRUFBTixDQUFTQSxFQUFFdUQsQ0FBRixJQUFLcEosQ0FBTCxFQUFPaUgsRUFBRWdNLFNBQUYsQ0FBWXBOLENBQVosRUFBYyxJQUFkLENBQVA7QUFBMkIsVUFBblcsRUFBb1d3TixVQUFTLGtCQUFTakssQ0FBVCxFQUFXO0FBQUMsa0JBQU9ELEVBQUVDLENBQUYsQ0FBUDtBQUFZLFVBQXJZLEVBQXNZb0wsU0FBUSxtQkFBVTtBQUFDLGtCQUFPeFUsQ0FBUDtBQUFTLFVBQWxhLEVBQW1heVUsZUFBYyx5QkFBVTtBQUFDLGtCQUFPNU8sQ0FBUDtBQUFTLFVBQXJjLEVBQXNjeU8sZUFBYyx1QkFBU2xMLENBQVQsRUFBVztBQUFDdkQsZUFBRXVELENBQUY7QUFBSSxVQUFwZSxFQUFxZThKLGNBQWEsc0JBQVM5SixDQUFULEVBQVduQyxDQUFYLEVBQWE7QUFBQyxlQUFJakgsSUFBRW9KLEVBQUVzTCxRQUFSLENBQWlCMVUsS0FBRyxJQUFILEtBQVVELElBQUV3TCxPQUFPdkwsQ0FBUCxDQUFGLEVBQVksT0FBT29KLEVBQUVzTCxRQUEvQixHQUF5QzFVLElBQUVvSixFQUFFdUwsUUFBN0MsRUFBc0QzVSxLQUFHLElBQUgsS0FBVWlKLElBQUVzQyxPQUFPdkwsQ0FBUCxDQUFGLEVBQVksT0FBT29KLEVBQUV1TCxRQUEvQixDQUF0RCxFQUErRjNVLElBQUVvSixFQUFFd0wsUUFBbkcsRUFBNEc1VSxLQUFHLElBQUgsS0FBVXNLLElBQUVpQixPQUFPdkwsQ0FBUCxDQUFGLEVBQVksT0FBT29KLEVBQUV3TCxRQUEvQixDQUE1RyxFQUFxSjVVLElBQUVvSixFQUFFeUwsUUFBekosRUFBa0s3VSxLQUFHLElBQUgsS0FBVTZGLElBQUU3RixDQUFGLEVBQUksT0FBT29KLEVBQUV5TCxRQUF2QixDQUFsSyxFQUFtTTVOLEtBQUdoQixFQUFFb0wsU0FBTCxLQUFpQnJSLElBQUVvSixFQUFFMEwsUUFBSixFQUFhOVUsS0FBRyxJQUFILEtBQVVrSixJQUFFcUMsT0FBT3ZMLENBQVAsQ0FBRixFQUFZLE9BQU9vSixFQUFFMEwsUUFBL0IsQ0FBOUIsQ0FBbk0sQ0FBMlEsSUFBRzdOLEtBQUdoQixFQUFFbUwsTUFBTCxJQUFhbkssS0FBR2hCLEVBQUVpTCxJQUFsQixJQUF3QmpLLEtBQUcsSUFBOUIsRUFBbUNqSCxJQUFFb0osRUFBRTJMLFFBQUosRUFBYS9VLEtBQUcsSUFBSCxLQUFVNkksSUFBRTBDLE9BQU92TCxDQUFQLENBQUYsRUFBWSxPQUFPb0osRUFBRTJMLFFBQS9CLENBQWI7QUFBc0QsVUFBcjNCLEVBQXMzQmxCLGNBQWEsc0JBQVM3VCxDQUFULEVBQVdzSyxDQUFYLEVBQWE7QUFBQyxlQUFJcEIsSUFBRW9CLEtBQUcsRUFBVCxDQUFZcEIsRUFBRTBMLFFBQUYsR0FBV3hOLE9BQU9ILEVBQUU2TSxnQkFBRixFQUFQLENBQVgsRUFBd0M1SyxFQUFFd0wsUUFBRixHQUFXdE4sT0FBT3JILENBQVAsQ0FBbkQsRUFBNkRtSixFQUFFMkwsUUFBRixHQUFXek4sT0FBT3ZCLENBQVAsQ0FBeEUsRUFBa0ZvRCxJQUFFLENBQUYsS0FBTUMsRUFBRXlMLFFBQUYsR0FBV3ZOLE9BQU82QixDQUFQLENBQWpCLENBQWxGLENBQThHLElBQUdqSixLQUFHMEosRUFBRThHLEtBQUwsSUFBWXhRLEtBQUcwSixFQUFFK0csR0FBakIsSUFBc0J6USxLQUFHMEosRUFBRWlILFVBQTNCLElBQXVDM1EsS0FBRzBKLEVBQUVrSCxVQUE1QyxJQUF3RDVRLEtBQUcsSUFBOUQsRUFBbUVrSixFQUFFNEwsUUFBRixHQUFXMU4sT0FBT0gsRUFBRThNLGVBQUYsRUFBUCxDQUFYLEVBQXVDN0ssRUFBRTZMLFFBQUYsR0FBVzNOLE9BQU95QixDQUFQLENBQWxELENBQTRELElBQUc3SSxLQUFHMEosRUFBRTZHLElBQUwsSUFBV3ZRLEtBQUcsSUFBakIsRUFBc0JpSCxFQUFFK04sb0JBQUYsT0FBMkI5TCxFQUFFK0wsUUFBRixHQUFXLEdBQVgsRUFBZWhPLEVBQUVpTyxvQkFBRixDQUF1QixDQUFDLENBQXhCLENBQTFDLEVBQXNFLE9BQU85TCxFQUFFZ0MsTUFBRixDQUFTbEMsQ0FBVCxFQUFXakMsRUFBRWtNLFNBQUYsRUFBWCxHQUEwQmpLLENBQWpDO0FBQW1DLFVBQXp3QyxFQUEwd0MrSyxpQkFBZ0IsMkJBQVU7QUFBQ2xVO0FBQUksVUFBenlDLEVBQTB5Q2lVLGlCQUFnQiwyQkFBVTtBQUFDbkwsZ0JBQUk3SSxFQUFFZ1UsZUFBRixFQUFKO0FBQXdCLFVBQTcxQyxFQUE4MUNtQixvQkFBbUIsNEJBQVMvTCxDQUFULEVBQVc7QUFBQ04sZUFBRU0sQ0FBRjtBQUFJLFVBQWo0QyxFQUFrNENnTSwwQkFBeUIsb0NBQVU7QUFBQ3RNO0FBQUksVUFBMTZDLEVBQTI2Q3VNLGlCQUFnQix5QkFBU2pNLENBQVQsRUFBVztBQUFDLGVBQUdwSixFQUFFa1Usb0JBQUYsTUFBMEIsQ0FBN0IsRUFBK0I7QUFBQyxpQkFBSXJPLElBQUV1RCxJQUFFcEosRUFBRWtVLG9CQUFGLEVBQVIsQ0FBaUNsVSxFQUFFZ1Qsb0JBQUYsQ0FBdUIsQ0FBQyxDQUF4QixHQUEyQmhULEVBQUUrUyxlQUFGLENBQWtCL1MsRUFBRStULGVBQUYsS0FBb0JsTyxDQUF0QyxDQUEzQixFQUFvRW9CLEVBQUU4TCxlQUFGLENBQWtCOUwsRUFBRThNLGVBQUYsS0FBb0JsTyxDQUF0QyxDQUFwRTtBQUE2RztBQUFDLFVBQXRuRCxFQUF1bkR5UCxrQkFBaUIsMEJBQVNsTSxDQUFULEVBQVc7QUFBQyxlQUFHcEosRUFBRW1VLHFCQUFGLE1BQTJCLENBQTlCLEVBQWdDO0FBQUMsaUJBQUl0TyxJQUFFdUQsSUFBRXBKLEVBQUVtVSxxQkFBRixFQUFSLENBQWtDblUsRUFBRThTLHFCQUFGLENBQXdCLENBQUMsQ0FBekIsR0FBNEI5UyxFQUFFNlMsZ0JBQUYsQ0FBbUI3UyxFQUFFOFQsZ0JBQUYsS0FBcUJqTyxDQUF4QyxDQUE1QixFQUF1RW9CLEVBQUU0TCxnQkFBRixDQUFtQjVMLEVBQUU2TSxnQkFBRixLQUFxQmpPLENBQXhDLENBQXZFO0FBQWtIO0FBQUMsVUFBMTBELEVBQTIwRGlPLGtCQUFpQiw0QkFBVTtBQUFDLGVBQUkxSyxJQUFFa0IsQ0FBTixDQUFRLE9BQU90SyxFQUFFbVUscUJBQUYsTUFBMkIsQ0FBM0IsS0FBK0IvSyxLQUFHLENBQUUsSUFBSXBFLElBQUosRUFBRixHQUFZaEYsRUFBRW1VLHFCQUFGLEVBQTlDLEdBQXlFL0ssQ0FBaEY7QUFBa0YsVUFBajhELEVBQWs4RHlKLGtCQUFpQiwwQkFBU3pKLENBQVQsRUFBVztBQUFDa0IsZUFBRWxCLENBQUY7QUFBSSxVQUFuK0QsRUFBbytEMkssaUJBQWdCLDJCQUFVO0FBQUMsZUFBSTNLLElBQUVGLENBQU4sQ0FBUSxPQUFPbEosRUFBRWtVLG9CQUFGLE1BQTBCLENBQTFCLEtBQThCOUssS0FBRyxDQUFFLElBQUlwRSxJQUFKLEVBQUYsR0FBWWhGLEVBQUVrVSxvQkFBRixFQUE3QyxHQUF1RTlLLENBQTlFO0FBQWdGLFVBQXZsRSxFQUF3bEUySixpQkFBZ0IseUJBQVMzSixDQUFULEVBQVc7QUFBQ0YsZUFBRUUsQ0FBRjtBQUFJLFVBQXhuRSxFQUF5bkVpTCxXQUFVLHFCQUFVO0FBQUMsa0JBQU90VSxDQUFQO0FBQVMsVUFBdnBFLEVBQXdwRTZTLFdBQVUsbUJBQVN4SixDQUFULEVBQVc7QUFBQ3JKLGVBQUVxSixDQUFGO0FBQUksVUFBbHJFLEVBQW1yRWdMLFdBQVUscUJBQVU7QUFBQyxrQkFBT3ZMLENBQVA7QUFBUyxVQUFqdEUsRUFBa3RFOEosV0FBVSxtQkFBU3ZKLENBQVQsRUFBVztBQUFDUCxlQUFFTyxDQUFGO0FBQUksVUFBNXVFLEVBQTZ1RW1NLGtCQUFpQiw0QkFBVTtBQUFDLGtCQUFPdE0sQ0FBUDtBQUFTLFVBQWx4RSxFQUFteEV1TSx3QkFBdUIsa0NBQVU7QUFBQ3ZNO0FBQUksVUFBenpFLEVBQTB6RXNMLGtCQUFpQiwwQkFBU25MLENBQVQsRUFBVztBQUFDSCxlQUFFRyxDQUFGO0FBQUksVUFBMzFFLEVBQTQxRTRMLHNCQUFxQixnQ0FBVTtBQUFDLGtCQUFPcFAsQ0FBUDtBQUFTLFVBQXI0RSxFQUFzNEVzUCxzQkFBcUIsOEJBQVM5TCxDQUFULEVBQVc7QUFBQ3hELGVBQUV3RCxDQUFGO0FBQUksVUFBMzZFLEVBQWQsR0FBNDdFcEosSUFBRSxJQUFJNEosQ0FBSixFQUE5N0UsRUFBbzhFVCxJQUFFLEVBQXQ4RSxFQUF5OEVsQyxFQUFFc0wsS0FBRixFQUF6OEU7QUFBbTlFLE1BQXZoRixDQUF3aEYsT0FBT3RMLENBQVA7QUFBUyxJQUE1aUYsRUFBNTdKO0FBQUEsT0FBMitPNkMsSUFBRSxZQUFVO0FBQUMsU0FBSTdDLElBQUUsV0FBU0EsRUFBVCxFQUFXakgsQ0FBWCxFQUFhO0FBQUMsZ0JBQVN5VixDQUFULENBQVdyTSxDQUFYLEVBQWE7QUFBQyxhQUFJbkMsSUFBRSxDQUFOLENBQVEsSUFBR3lPLEtBQUcsSUFBTixFQUFXLEtBQUksSUFBSTFWLElBQUUsQ0FBVixFQUFZQSxJQUFFMFYsRUFBRXZWLE1BQWhCLEVBQXVCSCxHQUF2QixFQUEyQjtBQUFDLGVBQUk2RixJQUFFNlAsRUFBRTFWLENBQUYsQ0FBTjtBQUFBLGVBQVdELElBQUU4RixFQUFFaU0sV0FBZixDQUEyQixJQUFHLENBQUMvUixDQUFELElBQUlxSixJQUFFckosQ0FBVCxFQUFXO0FBQUNrSCxpQkFBRXBCLEVBQUVrTSxRQUFKLENBQWE7QUFBTTtBQUFDLGlCQUFPOUssQ0FBUDtBQUFTLGlCQUFTME8sQ0FBVCxHQUFZO0FBQUNDLGFBQUksSUFBSXhNLElBQUVxTSxFQUFFM0wsRUFBRTBLLE9BQUYsR0FBWVQsZUFBWixFQUFGLENBQU4sQ0FBdUMsSUFBRzNLLElBQUUsQ0FBTCxFQUFPO0FBQUMsZUFBSW5DLElBQUU0TyxJQUFFLENBQUYsR0FBSUEsQ0FBSixHQUFNek0sQ0FBWixDQUFjME0sSUFBRTNXLFdBQVc0VyxDQUFYLEVBQWE5TyxDQUFiLENBQUY7QUFBa0IsY0FBRSxDQUFGO0FBQUksaUJBQVMrTyxDQUFULEdBQVk7QUFBQ0osYUFBSSxJQUFJeE0sSUFBRXFNLEVBQUUzTCxFQUFFMEssT0FBRixHQUFZVCxlQUFaLEVBQUYsQ0FBTixDQUF1QzhCLElBQUV6TSxJQUFFVSxFQUFFMEssT0FBRixHQUFZVCxlQUFaLEtBQThCM0ssQ0FBbEMsRUFBb0MwTSxLQUFHLElBQUgsSUFBU0YsR0FBN0M7QUFBaUQsaUJBQVNLLENBQVQsR0FBWTtBQUFDSixhQUFFLENBQUYsRUFBSUssSUFBRSxDQUFOLEVBQVFDLElBQUUsQ0FBVjtBQUFZLGlCQUFTSixDQUFULEdBQVk7QUFBQ0ksYUFBSSxJQUFJL00sSUFBRWdOLEdBQUcxTSxFQUFFa0gsVUFBTCxFQUFnQixJQUFoQixDQUFOLENBQTRCeUYsR0FBR2pOLENBQUgsR0FBTXlNLElBQUUsQ0FBUixFQUFVRixHQUFWO0FBQWMsaUJBQVNDLENBQVQsR0FBWTtBQUFDRSxjQUFHLElBQUgsS0FBVTVXLGFBQWE0VyxDQUFiLEdBQWdCQSxJQUFFLElBQTVCO0FBQWtDLGlCQUFTUSxDQUFULEdBQVk7QUFBQ0MsY0FBSUMsSUFBRXJYLFdBQVdzWCxDQUFYLEVBQWFDLENBQWIsQ0FBTjtBQUFzQixpQkFBU0QsQ0FBVCxHQUFZO0FBQUMsYUFBSXJOLElBQUVnTixHQUFHMU0sRUFBRWlILFVBQUwsRUFBZ0IsSUFBaEIsQ0FBTixDQUE0QjBGLEdBQUdqTixDQUFILEdBQU1RLEdBQU4sRUFBVTBNLEdBQVY7QUFBYyxpQkFBU0MsQ0FBVCxHQUFZO0FBQUNDLGNBQUcsSUFBSCxLQUFVdFgsYUFBYXNYLENBQWIsR0FBZ0JBLElBQUUsSUFBNUI7QUFBa0MsaUJBQVNHLENBQVQsR0FBWTtBQUFDQyxjQUFJL1EsRUFBRWdSLHlCQUFGLE1BQStCQyxHQUFHN1EsRUFBRW1MLE1BQUwsQ0FBL0IsS0FBOENuRyxJQUFFOUwsV0FBVzRYLENBQVgsRUFBYUMsQ0FBYixDQUFoRCxDQUFKO0FBQXFFLGlCQUFTRCxDQUFULEdBQVk7QUFBQyxhQUFHRSxLQUFHaFIsRUFBRWtMLE9BQVIsRUFBZ0I7QUFBQ3JILGFBQUUwTCxzQkFBRixJQUEyQjFMLEVBQUVrSyxlQUFGLEVBQTNCLENBQStDLElBQUk1SyxJQUFFZ04sR0FBRzFNLEVBQUU4RyxLQUFMLEVBQVcsSUFBWCxDQUFOLENBQXVCNkYsR0FBR2pOLENBQUgsR0FBTVEsR0FBTixFQUFVcU4sSUFBRWhSLEVBQUVtTCxNQUFkO0FBQXFCO0FBQUMsaUJBQVN3RixDQUFULEdBQVk7QUFBQzNMLGNBQUcsSUFBSCxLQUFVL0wsYUFBYStMLENBQWIsR0FBZ0JBLElBQUUsSUFBNUI7QUFBa0MsaUJBQVNpTSxDQUFULENBQVc5TixDQUFYLEVBQWE7QUFBQyxnQkFBT0EsS0FBR25ELEVBQUVrTCxPQUFMLElBQWMvSCxLQUFHbkQsRUFBRW1MLE1BQTFCO0FBQWlDLGlCQUFTK0YsQ0FBVCxHQUFZO0FBQUNyTyxlQUFJNUosYUFBYTRKLENBQWIsR0FBZ0JBLElBQUUsSUFBdEI7QUFBNEIsaUJBQVNzTyxFQUFULENBQVloTyxDQUFaLEVBQWM7QUFBQyxnQkFBT0EsS0FBR00sRUFBRTZHLElBQUwsR0FBVXRLLEVBQUVrTCxPQUFaLEdBQW9CL0gsS0FBR00sRUFBRThHLEtBQUwsR0FBV3ZLLEVBQUVtTCxNQUFiLEdBQW9CaEksS0FBR00sRUFBRWdILE1BQUwsR0FBWXpLLEVBQUVvTCxTQUFkLEdBQXdCakksS0FBR00sRUFBRStHLEdBQUwsR0FBU3hLLEVBQUVpTCxJQUFYLEdBQWdCLElBQXZGO0FBQTRGLGlCQUFTbUcsRUFBVCxDQUFZcFEsQ0FBWixFQUFjakgsQ0FBZCxFQUFnQjZGLENBQWhCLEVBQWtCO0FBQUNzUixhQUFJLElBQUd0UixDQUFILEVBQUtpRCxJQUFFM0osV0FBVyxVQUFTaUssQ0FBVCxFQUFXbkMsQ0FBWCxFQUFhO0FBQUMsa0JBQU8sWUFBVTtBQUFDb1EsZ0JBQUdqTyxDQUFILEVBQUtuQyxDQUFMO0FBQVEsWUFBMUI7QUFBMkIsVUFBekMsQ0FBMENBLENBQTFDLEVBQTRDakgsQ0FBNUMsQ0FBWCxFQUEwRDZGLENBQTFELENBQUYsQ0FBTCxLQUF5RSxJQUFHeVIsR0FBR3JRLENBQUgsQ0FBSCxFQUFTO0FBQUMsZUFBSWxILElBQUV3WCxJQUFOO0FBQUEsZUFBVzFPLElBQUVLLENBQWI7QUFBQSxlQUFlRCxJQUFFdU8sR0FBR3hYLENBQUgsQ0FBakI7QUFBQSxlQUF1QnNLLElBQUV6QixLQUFHLENBQUgsR0FBS0ksSUFBRUosQ0FBUCxHQUFTLENBQWxDLENBQW9DNE8sR0FBR0YsSUFBSCxFQUFRdlgsQ0FBUixHQUFXMFgsR0FBR3pRLENBQUgsRUFBS2pILENBQUwsQ0FBWCxFQUFtQjJYLEdBQUdKLElBQUgsQ0FBbkIsRUFBNEJLLEdBQUczUSxDQUFILENBQTVCLENBQWtDLEtBQUksSUFBSWtDLElBQUUsQ0FBTixFQUFRdkQsSUFBRWlTLEVBQUUxWCxNQUFoQixFQUF1QmdKLElBQUV2RCxDQUF6QixFQUEyQnVELEdBQTNCO0FBQStCME8sZUFBRTFPLENBQUYsRUFBS3BKLENBQUwsRUFBT2tILENBQVAsRUFBU2pILENBQVQsRUFBV3NLLENBQVg7QUFBL0IsWUFBNkN3TixHQUFHOVgsQ0FBSCxHQUFNOEosRUFBRW9KLFlBQUYsQ0FBZWxULENBQWYsRUFBaUJpSCxDQUFqQixDQUFOLEVBQTBCNkMsRUFBRTBLLE9BQUYsR0FBWXRCLFlBQVosQ0FBeUJsVCxDQUF6QixFQUEyQmlILENBQTNCLENBQTFCLENBQXdELElBQUlTLElBQUUwTyxHQUFHblEsRUFBRXFMLFdBQUYsQ0FBY3JLLENBQWQsQ0FBSCxFQUFvQmpILENBQXBCLENBQU4sQ0FBNkJvSixFQUFFZ0MsTUFBRixDQUFTMUQsQ0FBVCxFQUFXMUgsQ0FBWCxHQUFjOFcsR0FBR25OLENBQUgsTUFBUTBNLEdBQUczTyxDQUFILEdBQU11UCxJQUFFdE4sQ0FBUixFQUFVQyxHQUFsQixDQUFkO0FBQXFDO0FBQUMsaUJBQVNrTyxFQUFULENBQVkxTyxDQUFaLEVBQWM7QUFBQyxhQUFJbkMsSUFBRW1DLEVBQUUyTyxRQUFSLENBQWlCOVEsS0FBRyxJQUFILEtBQVUrUSxJQUFFL1EsQ0FBRixFQUFJLE9BQU9tQyxFQUFFMk8sUUFBdkIsR0FBaUM5USxJQUFFbUMsRUFBRTZPLFFBQXJDLEVBQThDaFIsS0FBRyxJQUFILEtBQVVpUixJQUFFalIsQ0FBRixFQUFJLE9BQU9tQyxFQUFFNk8sUUFBdkIsQ0FBOUMsRUFBK0VoUixJQUFFbUMsRUFBRStPLFFBQW5GLEVBQTRGbFIsS0FBRyxJQUFILEtBQVUyQyxJQUFFMkIsT0FBT3RFLENBQVAsQ0FBRixFQUFZLE9BQU9tQyxFQUFFK08sUUFBL0IsQ0FBNUY7QUFBcUksaUJBQVM5QixFQUFULENBQVlqTixDQUFaLEVBQWNuQyxDQUFkLEVBQWdCO0FBQUNBLGVBQUl0RCxTQUFKLEtBQWdCc0QsSUFBRSxDQUFDLENBQW5CLEdBQXNCQSxLQUFHbVIsR0FBR2hQLENBQUgsQ0FBekIsQ0FBK0IsSUFBSXBKLElBQUU2RixFQUFFd1MsV0FBRixFQUFOLENBQXNCLElBQUd0TyxDQUFILEVBQUs7QUFBQyxlQUFHLENBQUN1TyxJQUFKLEVBQVM7QUFBQyxpQkFBSXZZLElBQUV3WSxFQUFFQyxFQUFSO0FBQUEsaUJBQVczUCxJQUFFMFAsRUFBRW5CLEVBQWY7QUFBQSxpQkFBa0JuTyxJQUFFbEosRUFBRTBZLHlCQUFGLENBQTRCMU8sQ0FBNUIsRUFBOEJsQixFQUFFNlAsTUFBaEMsRUFBdUN0UCxDQUF2QyxFQUF5Q3BKLENBQXpDLENBQXBCLENBQWdFK0osRUFBRTRPLFFBQUYsR0FBYUMsS0FBYixDQUFtQjNQLENBQW5CO0FBQXNCO0FBQUMsVUFBdkcsTUFBNEdqSixLQUFHc0ssRUFBRUMsT0FBRixDQUFVZCxFQUFFekosQ0FBRixFQUFJb0osQ0FBSixDQUFWLENBQUg7QUFBcUIsaUJBQVNrUCxFQUFULEdBQWE7QUFBQyxhQUFJbFAsSUFBRVcsRUFBRThPLGFBQUYsRUFBTjtBQUFBLGFBQXdCNVIsSUFBRThDLEVBQUUrTyxPQUFGLEVBQTFCO0FBQUEsYUFBc0M5WSxJQUFFK0osRUFBRXNPLFdBQUYsRUFBeEMsQ0FBd0QsT0FBT2pQLEtBQUcsSUFBSCxJQUFTbkMsS0FBRyxJQUFaLElBQWtCQSxFQUFFOUcsTUFBRixJQUFVLENBQTVCLElBQStCSCxLQUFHLElBQWxDLElBQXdDQSxFQUFFRyxNQUFGLElBQVUsQ0FBekQ7QUFBMkQsaUJBQVNpWSxFQUFULENBQVluUixDQUFaLEVBQWM7QUFBQzhSLGFBQUUzQyxHQUFHLElBQUgsQ0FBRixFQUFXaE4sRUFBRWdDLE1BQUYsQ0FBUzJOLENBQVQsRUFBVzlSLENBQVgsQ0FBWDtBQUF5QixpQkFBU3dRLEVBQVQsQ0FBWXhRLENBQVosRUFBY2pILENBQWQsRUFBZ0I7QUFBQyxhQUFJNkYsSUFBRTJSLEdBQUd4WCxDQUFILENBQU4sQ0FBWSxJQUFHaUgsS0FBR2hCLEVBQUVrTCxPQUFSLEVBQWdCckgsRUFBRXVMLGVBQUYsQ0FBa0J4UCxDQUFsQixHQUFxQm1RLEdBQXJCLEVBQXlCTyxHQUF6QixDQUFoQixLQUFrRCxJQUFHdFAsS0FBR2hCLEVBQUVvTCxTQUFSLEVBQWtCdkgsRUFBRXdMLGdCQUFGLENBQW1CelAsQ0FBbkIsR0FBc0IrUSxHQUF0QixDQUFsQixLQUFpRCxJQUFHM1AsS0FBR2hCLEVBQUVpTCxJQUFSLEVBQWE7QUFBQyxlQUFJblIsSUFBRXFKLEVBQUVrSCxPQUFGLENBQVV4RyxFQUFFMEssT0FBRixHQUFZckIsU0FBWixFQUFWLENBQU4sQ0FBeUNySixFQUFFMEssT0FBRixHQUFZakMsS0FBWixDQUFrQnhTLENBQWxCO0FBQXFCO0FBQUMsaUJBQVMyWCxFQUFULENBQVl0TyxDQUFaLEVBQWNuQyxDQUFkLEVBQWdCO0FBQUMsYUFBSWpILElBQUV3WCxHQUFHdlEsQ0FBSCxDQUFOO0FBQUEsYUFBWXBCLElBQUVtVCxHQUFHL1IsQ0FBSCxDQUFkLENBQW9Ca0MsSUFBRXRELENBQUYsRUFBSXVELEtBQUduRCxFQUFFa0wsT0FBTCxJQUFjd0UsS0FBSVcsR0FBSixFQUFReE0sRUFBRTBLLE9BQUYsR0FBWXhCLG9CQUFaLENBQWlDaFQsQ0FBakMsQ0FBUixFQUE0QzhXLEdBQUcxTixDQUFILE1BQVFVLEVBQUUwSyxPQUFGLEdBQVlQLGVBQVosSUFBOEJuSyxFQUFFdUssU0FBRixLQUFjLENBQWQsSUFBaUJ2SyxFQUFFOEksU0FBRixDQUFZLENBQVosQ0FBdkQsQ0FBMUQsSUFBa0l4SixLQUFHbkQsRUFBRW1MLE1BQUwsR0FBWTBGLEdBQUcxTixDQUFILEtBQU9VLEVBQUVrSyxlQUFGLEVBQW5CLEdBQXVDNUssS0FBR25ELEVBQUVvTCxTQUFMLElBQWdCdkgsRUFBRTBLLE9BQUYsR0FBWTFCLHFCQUFaLENBQWtDOVMsQ0FBbEMsR0FBcUNpWixLQUFHdEMsR0FBeEQsSUFBNkR2TixLQUFHbkQsRUFBRWlMLElBQUwsSUFBVytFLEdBQXJQO0FBQXlQLGlCQUFTYSxFQUFULENBQVkxTixDQUFaLEVBQWM7QUFBQyxnQkFBT0EsS0FBR25ELEVBQUVtTCxNQUFMLElBQWFoSSxLQUFHbkQsRUFBRWlMLElBQWxCLElBQXdCK0YsS0FBR2hSLEVBQUVpTCxJQUFMLElBQVcrRixLQUFHLElBQXRDLEdBQTJDN04sS0FBR25ELEVBQUVvTCxTQUFMLElBQWdCNEYsS0FBRzdOLENBQTlELEdBQWdFLENBQUMsQ0FBeEU7QUFBMEUsaUJBQVM0UCxFQUFULENBQVkvUixDQUFaLEVBQWM7QUFBQyxhQUFJakgsSUFBRSxDQUFDLENBQVAsQ0FBUyxPQUFPaUgsRUFBRTBELGNBQUYsQ0FBaUIsVUFBakIsTUFBK0IzSyxJQUFFb0osRUFBRXFDLFVBQUYsQ0FBYXhFLEVBQUVpUyxRQUFmLENBQWpDLEdBQTJEbFosQ0FBbEU7QUFBb0UsaUJBQVN3WCxFQUFULENBQVlwTyxDQUFaLEVBQWM7QUFBQyxhQUFJbkMsSUFBRSxDQUFDLENBQVAsQ0FBUyxPQUFPbUMsRUFBRXVCLGNBQUYsQ0FBaUIsT0FBakIsTUFBNEIxRCxJQUFFc0UsT0FBT25DLEVBQUUrUCxLQUFULENBQTlCLEdBQStDbFMsQ0FBdEQ7QUFBd0QsaUJBQVNxUSxFQUFULENBQVlsTyxDQUFaLEVBQWM7QUFBQyxnQkFBT0EsS0FBRyxJQUFILElBQVNtTyxRQUFNbk8sQ0FBdEI7QUFBd0IsaUJBQVN3TyxFQUFULENBQVl4TyxDQUFaLEVBQWM7QUFBQ08sYUFBRVAsQ0FBRixFQUFJRixJQUFFLENBQUUsSUFBSWxFLElBQUosRUFBUjtBQUFrQixpQkFBU3VTLEVBQVQsR0FBYTtBQUFDLGdCQUFPNU4sQ0FBUDtBQUFTLGlCQUFTZ08sRUFBVCxDQUFZdk8sQ0FBWixFQUFjO0FBQUN4RCxhQUFFd0QsQ0FBRjtBQUFJLGlCQUFTZ1EsRUFBVCxHQUFhO0FBQUMsZ0JBQU94VCxDQUFQO0FBQVMsaUJBQVN3USxFQUFULEdBQWE7QUFBQyxhQUFJblAsQ0FBSixFQUFNakgsQ0FBTixDQUFRbEIsVUFBVXFCLE1BQVYsSUFBa0IsQ0FBbEIsSUFBcUI4RyxJQUFFaEIsRUFBRXFMLFdBQUYsQ0FBYzNILENBQWQsQ0FBRixFQUFtQjNKLElBQUVsQixVQUFVLENBQVYsQ0FBMUMsS0FBeURtSSxJQUFFbkksVUFBVSxDQUFWLENBQUYsRUFBZWtCLElBQUVsQixVQUFVLENBQVYsQ0FBMUUsRUFBd0YsSUFBSWlCLElBQUUsRUFBTixDQUFTLElBQUcsT0FBT3hDLFFBQVAsSUFBaUIsV0FBcEIsRUFBZ0M7QUFBQyxlQUFJc0wsSUFBRXRMLFFBQU4sQ0FBZXdDLEVBQUVzWixFQUFGLEdBQUt4USxFQUFFaUMsR0FBUCxFQUFXL0ssRUFBRXVaLEVBQUYsR0FBS3pRLEVBQUVnQyxLQUFsQixFQUF3QjlLLEVBQUV3WixFQUFGLEdBQUsxUSxFQUFFa0MsUUFBL0I7QUFBd0MsaUJBQU8vSyxLQUFHLElBQUgsSUFBU29KLEVBQUVnQyxNQUFGLENBQVNyTCxDQUFULEVBQVdDLENBQVgsQ0FBVCxFQUF1QkQsRUFBRTRLLGNBQUYsQ0FBaUIsT0FBakIsTUFBNEI1SyxFQUFFb1osS0FBRixHQUFRL1IsT0FBTyxDQUFFLElBQUlwQyxJQUFKLEVBQVQsQ0FBcEMsQ0FBdkIsRUFBZ0ZpQyxLQUFHLElBQUgsSUFBUyxDQUFDbEgsRUFBRTRLLGNBQUYsQ0FBaUIsVUFBakIsQ0FBVixLQUF5QzVLLEVBQUV5WixRQUFGLEdBQVc5UCxFQUFFeEQsUUFBRixDQUFXZSxDQUFYLENBQXBELENBQWhGLEVBQW1KcEIsRUFBRTRULHdCQUFGLE1BQThCMVAsQ0FBOUIsSUFBaUNYLEVBQUVnQyxNQUFGLENBQVNyTCxDQUFULEVBQVdnSyxFQUFFb0osU0FBRixFQUFYLENBQXBMLEVBQThNL0osRUFBRWdDLE1BQUYsQ0FBU3JMLENBQVQsRUFBVzhGLEVBQUVzTixTQUFGLEVBQVgsQ0FBOU0sRUFBd091RyxHQUFHelMsQ0FBSCxFQUFLbEgsQ0FBTCxDQUF4TyxFQUFnUCtKLEVBQUUrSixZQUFGLENBQWU1TSxDQUFmLEVBQWlCbEgsQ0FBakIsQ0FBaFAsRUFBb1ErSixFQUFFMEssT0FBRixHQUFZWCxZQUFaLENBQXlCNU0sQ0FBekIsRUFBMkJsSCxDQUEzQixDQUFwUSxFQUFrU0EsRUFBRTRLLGNBQUYsQ0FBaUIsVUFBakIsTUFBK0I1SyxFQUFFZ1ksUUFBRixHQUFXQyxDQUExQyxDQUFsUyxFQUErVWpZLEVBQUU0SyxjQUFGLENBQWlCLFVBQWpCLE1BQStCNUssRUFBRWtZLFFBQUYsR0FBV0MsQ0FBMUMsQ0FBL1UsRUFBNFhuWSxFQUFFNEssY0FBRixDQUFpQixVQUFqQixNQUErQjVLLEVBQUU0WixRQUFGLEdBQVcsR0FBMUMsQ0FBNVgsRUFBMmE1WixFQUFFNEssY0FBRixDQUFpQixVQUFqQixNQUErQjVLLEVBQUU2WixRQUFGLEdBQVcsR0FBMUMsQ0FBM2EsRUFBMGQ3WixFQUFFNEssY0FBRixDQUFpQixVQUFqQixNQUErQjVLLEVBQUUwUyxRQUFGLEdBQVcsR0FBMUMsQ0FBMWQsRUFBeWdCMVMsRUFBRTRLLGNBQUYsQ0FBaUIsVUFBakIsTUFBK0I1SyxFQUFFMlMsUUFBRixHQUFXLEdBQTFDLENBQXpnQixFQUF3akIzUyxFQUFFNEssY0FBRixDQUFpQixVQUFqQixNQUErQjVLLEVBQUU4WixRQUFGLEdBQVcsR0FBMUMsQ0FBeGpCLEVBQXVtQjlaLEVBQUUrWixRQUFGLEdBQVd4USxFQUFFcUksbUJBQXBuQixFQUF3b0I1UixFQUFFZ2EsT0FBRixHQUFVLFFBQWxwQixFQUEycEJoYSxDQUFscUI7QUFBb3FCLGlCQUFTMlosRUFBVCxDQUFZelMsQ0FBWixFQUFjakgsQ0FBZCxFQUFnQjtBQUFDLGFBQUk2RixJQUFFN0YsS0FBRyxFQUFULENBQVk2RixFQUFFc1MsUUFBRixHQUFXL1EsT0FBT3dDLENBQVAsQ0FBWCxDQUFxQixJQUFHLENBQUMvRCxFQUFFOEUsY0FBRixDQUFpQixVQUFqQixDQUFKLEVBQWlDO0FBQUMsZUFBSTVLLElBQUVvSixDQUFOO0FBQUEsZUFBUU4sSUFBRTJPLEdBQUczUixDQUFILENBQVYsQ0FBZ0IsSUFBR29CLEtBQUd5QyxFQUFFNkcsSUFBTCxJQUFXdEosS0FBR3lDLEVBQUVpSCxVQUFoQixJQUE0QjFKLEtBQUd5QyxFQUFFa0gsVUFBakMsSUFBNkMzSixLQUFHLElBQUgsSUFBUzBDLEtBQUcxRCxFQUFFa0wsT0FBOUQsRUFBc0VwUixLQUFHOEksSUFBRWlCLEVBQUUwSyxPQUFGLEdBQVlOLG9CQUFaLEVBQUwsQ0FBd0NyTyxFQUFFcVQsUUFBRixHQUFXOVAsRUFBRXFDLFVBQUYsQ0FBYTFMLENBQWIsQ0FBWDtBQUEyQixpQkFBT2tILEtBQUd5QyxFQUFFa0gsVUFBTCxLQUFrQi9LLEVBQUVtVSxRQUFGLEdBQVc1UyxPQUFPK08sQ0FBUCxDQUE3QixHQUF3Q3RRLENBQS9DO0FBQWlELGlCQUFTb1UsRUFBVCxDQUFZN1EsQ0FBWixFQUFjO0FBQUMsYUFBSW5DLElBQUV1USxHQUFHcE8sQ0FBSCxDQUFOLENBQVluQyxJQUFFLENBQUYsS0FBTW1DLEVBQUUrUCxLQUFGLEdBQVEvUixPQUFPLENBQUUsSUFBSXBDLElBQUosRUFBVCxDQUFkO0FBQW1DLGlCQUFTa1YsRUFBVCxDQUFZOVEsQ0FBWixFQUFjbkMsQ0FBZCxFQUFnQmpILENBQWhCLEVBQWtCO0FBQUNpSCxhQUFFQSxLQUFHLEVBQUwsRUFBUUEsRUFBRWtULFFBQUYsR0FBVyxDQUFuQixFQUFxQi9RLEtBQUdNLEVBQUVvSCxPQUFMLElBQWMxSCxLQUFHTSxFQUFFdUgsUUFBbkIsSUFBNkJwTCxFQUFFdVUsTUFBRixDQUFTaFIsQ0FBVCxFQUFXbkMsQ0FBWCxFQUFhakgsQ0FBYixDQUFsRDtBQUFrRSxpQkFBU3FhLEVBQVQsQ0FBWWpSLENBQVosRUFBY25DLENBQWQsRUFBZ0I7QUFBQ3BCLFdBQUV1VSxNQUFGLENBQVMxUSxFQUFFbUgsTUFBWCxFQUFrQnpILENBQWxCLEVBQW9CbkMsQ0FBcEI7QUFBdUIsWUFBSXBCLElBQUUsSUFBTjtBQUFBLFdBQVc5RixJQUFFLEdBQWI7QUFBQSxXQUFpQjhJLENBQWpCO0FBQUEsV0FBbUJJLElBQUUsSUFBckI7QUFBQSxXQUEwQkMsSUFBRSxDQUE1QjtBQUFBLFdBQThCQyxJQUFFLENBQWhDO0FBQUEsV0FBa0NMLENBQWxDO0FBQUEsV0FBb0NsRCxDQUFwQztBQUFBLFdBQXNDK0QsQ0FBdEM7QUFBQSxXQUF3Q0MsSUFBRSxDQUExQztBQUFBLFdBQTRDRSxJQUFFLElBQTlDO0FBQUEsV0FBbURDLENBQW5EO0FBQUEsV0FBcURpQixJQUFFLENBQUMsQ0FBeEQ7QUFBQSxXQUEwREMsQ0FBMUQ7QUFBQSxXQUE0RGdPLElBQUUsQ0FBQyxDQUEvRDtBQUFBLFdBQWlFekMsQ0FBakU7QUFBQSxXQUFtRVYsQ0FBbkU7QUFBQSxXQUFxRUosSUFBRXBNLEVBQUV1SSwwQkFBekU7QUFBQSxXQUFvRzZFLElBQUVwTixFQUFFMEksMkJBQXhHO0FBQUEsV0FBb0lnRixJQUFFMU4sRUFBRTJJLG9DQUF4STtBQUFBLFdBQTZLNEQsSUFBRSxDQUEvSztBQUFBLFdBQWlMTSxJQUFFLENBQW5MO0FBQUEsV0FBcUxELElBQUUsQ0FBdkw7QUFBQSxXQUF5TG9FLElBQUUsQ0FBQyxDQUE1TDtBQUFBLFdBQThMckQsQ0FBOUw7QUFBQSxXQUFnTWUsQ0FBaE07QUFBQSxXQUFrTUUsQ0FBbE07QUFBQSxXQUFvTWEsQ0FBcE07QUFBQSxXQUFzTWxCLENBQXRNO0FBQUEsV0FBd01VLElBQUUsRUFBMU0sQ0FBNk1qTyxFQUFFbUYsVUFBRixJQUFlckcsRUFBRWdDLE1BQUYsQ0FBUyxJQUFULEVBQWMsRUFBQ21ILE9BQU0sZUFBU3RMLENBQVQsRUFBVztBQUFDNkMsYUFBRXlJLEtBQUYsQ0FBUXRMLENBQVIsR0FBVzZDLEVBQUVxTCxrQkFBRixDQUFxQixDQUFyQixDQUFYLEVBQW1DckwsRUFBRXdLLGFBQUYsQ0FBZ0IsQ0FBRSxJQUFJdFAsSUFBSixFQUFGLEdBQVksSUFBNUIsQ0FBbkMsRUFBcUU4RSxFQUFFMEssT0FBRixHQUFZakMsS0FBWixDQUFrQnRMLENBQWxCLENBQXJFLEVBQTBGQSxLQUFHLElBQUgsSUFBUyxDQUFDQSxFQUFFc1QsT0FBRixFQUFWLEdBQXNCblIsRUFBRWlILFNBQUYsQ0FBWXhILENBQVosRUFBYzVCLENBQWQsQ0FBdEIsR0FBdUM0QixJQUFFLEVBQW5JLEVBQXNJZSxJQUFFLENBQXhJLEVBQTBJdU0sSUFBRSxDQUE1SSxFQUE4SUgsR0FBOUksRUFBa0pDLEdBQWxKLEVBQXNKTSxHQUF0SixFQUEwSkssR0FBMUosRUFBOEpPLEdBQTlKLEVBQWtLeE4sSUFBRTFELEVBQUVpTCxJQUF0SyxFQUEyS3RMLElBQUUsSUFBN0ssRUFBa0xzRCxJQUFFLENBQUMsQ0FBckwsRUFBdUwrTixJQUFFLElBQXpMLEVBQThMZSxJQUFFMU8sRUFBRXNJLGtCQUFsTSxFQUFxTnNHLElBQUU1TyxFQUFFcUksbUJBQXpOLEVBQTZPb0gsSUFBRSxJQUEvTztBQUFvUCxVQUF2USxFQUF3UXlCLDZCQUE0QixxQ0FBU3BSLENBQVQsRUFBVztBQUFDNE4sZUFBRTVOLENBQUY7QUFBSSxVQUFwVCxFQUFxVHFSLDZCQUE0Qix1Q0FBVTtBQUFDLGtCQUFPekQsQ0FBUDtBQUFTLFVBQXJXLEVBQXNXMEQsc0JBQXFCLDhCQUFTdFIsQ0FBVCxFQUFXO0FBQUNzTixlQUFFdE4sQ0FBRjtBQUFJLFVBQTNZLEVBQTRZdVIsc0JBQXFCLGdDQUFVO0FBQUMsa0JBQU9qRSxDQUFQO0FBQVMsVUFBcmIsRUFBc2JrRSx1QkFBc0IsK0JBQVN4UixDQUFULEVBQVc7QUFBQ3NNLGVBQUV0TSxDQUFGO0FBQUksVUFBNWQsRUFBNmRnUixRQUFPLGtCQUFVO0FBQUMsZUFBSW5ULENBQUosRUFBTWpILENBQU4sRUFBUTZJLENBQVIsRUFBVUksQ0FBVixDQUFZakosSUFBRWxCLFVBQVUsQ0FBVixDQUFGLEVBQWVBLFVBQVVxQixNQUFWLElBQWtCLENBQWxCLElBQXFCMEksSUFBRS9KLFVBQVUsQ0FBVixDQUFGLEVBQWVtSyxJQUFFbkssVUFBVSxDQUFWLENBQXRDLEtBQXFEK0osSUFBRSxFQUFGLEVBQUtJLElBQUVuSyxVQUFVLENBQVYsQ0FBNUQsQ0FBZixFQUF5Rm1JLElBQUVtUSxHQUFHcFgsQ0FBSCxDQUEzRixDQUFpRyxJQUFJc0ssSUFBRWxCLEVBQUVnQyxNQUFGLENBQVMsRUFBVCxFQUFZdkMsQ0FBWixDQUFOLENBQXFCb1IsR0FBRzNQLENBQUgsR0FBTUEsRUFBRUssY0FBRixDQUFpQixVQUFqQixNQUErQkwsRUFBRTRPLFFBQUYsR0FBVzlQLEVBQUVxQyxVQUFGLENBQWF4QyxDQUFiLEVBQWdCL0MsUUFBaEIsRUFBMUMsQ0FBTixDQUE0RSxJQUFHbEcsS0FBRzBKLEVBQUU2RyxJQUFMLElBQVd2USxLQUFHMEosRUFBRThHLEtBQWhCLElBQXVCeFEsS0FBRzBKLEVBQUVnSCxNQUE1QixJQUFvQzFRLEtBQUcwSixFQUFFK0csR0FBNUMsRUFBZ0Q1SyxFQUFFZ1YsNkJBQUYsTUFBbUMzRCxFQUFFdk4sQ0FBRixDQUFuQyxJQUF5Q3VOLEVBQUVqUSxDQUFGLENBQXpDLEtBQWdEMEMsS0FBRzFELEVBQUVrTCxPQUFMLElBQWNsSyxLQUFHaEIsRUFBRW1MLE1BQW5CLElBQTJCLENBQUMsQ0FBQ3RJLENBQTdFLElBQWdGdU8sR0FBR3BRLENBQUgsRUFBS3FELENBQUwsRUFBT3ZLLENBQVAsQ0FBaEYsR0FBMEZzWCxHQUFHcFEsQ0FBSCxFQUFLcUQsQ0FBTCxDQUExRixDQUFoRCxLQUFzSjtBQUFDLGlCQUFJcEIsSUFBRWtOLEdBQUdwVyxDQUFILEVBQUtzSyxDQUFMLENBQU4sQ0FBY2xCLEVBQUVnQyxNQUFGLENBQVNsQyxDQUFULEVBQVdvQixDQUFYLEdBQWMrTCxHQUFHbk4sQ0FBSCxFQUFLLENBQUMsQ0FBTixDQUFkLEVBQXVCVSxHQUF2QjtBQUEyQjtBQUFDLFVBQTkzQixFQUErM0J1SixXQUFVLHFCQUFVO0FBQUMsa0JBQU90SyxDQUFQO0FBQVMsVUFBNzVCLEVBQTg1QmlTLFVBQVMsb0JBQVU7QUFBQyxrQkFBT25SLENBQVA7QUFBUyxVQUEzN0IsRUFBNDdCc0osV0FBVSxtQkFBU2hNLENBQVQsRUFBVztBQUFDQSxnQkFBRyxJQUFILEtBQVU0QixLQUFHLElBQUgsR0FBUUEsSUFBRTVCLENBQVYsR0FBWW1DLEVBQUVnQyxNQUFGLENBQVN2QyxDQUFULEVBQVc1QixDQUFYLENBQXRCO0FBQXFDLFVBQXYvQixFQUF3L0JvTSxVQUFTLGtCQUFTakssQ0FBVCxFQUFXO0FBQUMsa0JBQU9QLEVBQUVPLENBQUYsQ0FBUDtBQUFZLFVBQXpoQyxFQUEwaENnSyxVQUFTLGtCQUFTaEssQ0FBVCxFQUFXbkMsQ0FBWCxFQUFhO0FBQUNBLGdCQUFHLElBQUgsR0FBUSxPQUFPNEIsRUFBRU8sQ0FBRixDQUFmLEdBQW9CUCxFQUFFTyxDQUFGLElBQUtuQyxDQUF6QjtBQUEyQixVQUE1a0MsRUFBNmtDOFQsYUFBWSxxQkFBUzNSLENBQVQsRUFBVztBQUFDLGVBQUdBLEtBQUcsSUFBSCxJQUFTQSxFQUFFakosTUFBRixJQUFVLENBQXRCLEVBQXdCLE9BQU8sSUFBUCxDQUFZLElBQUk4RyxJQUFFekYsc0JBQW9CeUksUUFBMUI7QUFBQSxlQUFtQ2pLLElBQUVvSixFQUFFOUssT0FBRixDQUFVLEdBQVYsQ0FBckMsQ0FBb0QsSUFBRzBCLEtBQUcsQ0FBTixFQUFRO0FBQUMsaUJBQUdBLElBQUVvSixFQUFFakosTUFBRixHQUFTLENBQWQsRUFBZ0I7QUFBQyxtQkFBSUosSUFBRXFKLEVBQUVpQixTQUFGLENBQVlySyxJQUFFLENBQWQsRUFBaUJFLEtBQWpCLENBQXVCLEdBQXZCLENBQU4sQ0FBa0MsS0FBSSxJQUFJMkksSUFBRSxDQUFOLEVBQVF5QixJQUFFdkssRUFBRUksTUFBaEIsRUFBdUIwSSxJQUFFeUIsQ0FBekIsRUFBMkJ6QixHQUEzQixFQUErQjtBQUFDLHFCQUFJSyxJQUFFbkosRUFBRThJLENBQUYsQ0FBTjtBQUFBLHFCQUFXTSxJQUFFRCxFQUFFaEosS0FBRixDQUFRLEdBQVIsQ0FBYixDQUEwQmlKLEVBQUVoSixNQUFGLElBQVUsQ0FBVixHQUFZMEYsRUFBRXVOLFFBQUYsQ0FBV2pLLEVBQUUsQ0FBRixDQUFYLEVBQWdCbEMsRUFBRWtDLEVBQUUsQ0FBRixDQUFGLENBQWhCLENBQVosR0FBcUNBLEVBQUVoSixNQUFGLElBQVUsQ0FBVixJQUFhMEYsRUFBRXVOLFFBQUYsQ0FBVzlKLEVBQUVnSixlQUFiLEVBQTZCckwsRUFBRWtDLEVBQUUsQ0FBRixDQUFGLENBQTdCLENBQWxEO0FBQXdGLG9CQUFFQyxFQUFFaUIsU0FBRixDQUFZLENBQVosRUFBY3JLLElBQUUsQ0FBaEIsQ0FBRjtBQUFxQjtBQUFDLFlBQXBPLE1BQXlPb0osS0FBRyxHQUFILENBQU8sT0FBT0gsSUFBRUcsQ0FBRixFQUFJSCxDQUFYO0FBQWEsVUFBMTdDLEVBQTI3Q29QLGFBQVksdUJBQVU7QUFBQyxrQkFBT3BQLElBQUVBLENBQUYsR0FBSSxPQUFPdUIsSUFBUCxJQUFhLFdBQWIsSUFBMEIsT0FBT0EsS0FBS0MsR0FBWixJQUFpQixRQUEzQyxHQUFvRHhCLElBQUV1QixLQUFLQyxHQUFMLENBQVM3SixPQUFULENBQWlCLE9BQWpCLEVBQXlCLEdBQXpCLEVBQThCQSxPQUE5QixDQUFzQyxZQUF0QyxFQUFtRCxFQUFuRCxDQUF0RCxHQUE2RyxPQUFPb2EsV0FBUCxJQUFvQixRQUFwQixHQUE2Qi9SLElBQUUrUixZQUFZcGEsT0FBWixDQUFvQixPQUFwQixFQUE0QixHQUE1QixFQUFpQ0EsT0FBakMsQ0FBeUMsWUFBekMsRUFBc0QsRUFBdEQsQ0FBL0IsR0FBeUYsSUFBak47QUFBc04sVUFBeHFELEVBQXlxRDZZLDBCQUF5QixvQ0FBVTtBQUFDLGtCQUFPek8sQ0FBUDtBQUFTLFVBQXR0RCxFQUF1dERpUSwyQkFBMEIsbUNBQVM3UixDQUFULEVBQVc7QUFBQzRCLGVBQUU1QixDQUFGO0FBQUksVUFBandELEVBQWt3RHlOLDJCQUEwQixxQ0FBVTtBQUFDLGtCQUFPb0MsQ0FBUDtBQUFTLFVBQWh6RCxFQUFpekRpQyw0QkFBMkIsb0NBQVM5UixDQUFULEVBQVc7QUFBQzZQLGVBQUU3UCxDQUFGO0FBQUksVUFBNTFELEVBQTYxRHlSLCtCQUE4Qix5Q0FBVTtBQUFDLGtCQUFPUCxDQUFQO0FBQVMsVUFBLzRELEVBQWc1RGEsZ0NBQStCLHdDQUFTL1IsQ0FBVCxFQUFXO0FBQUNrUixlQUFFbFIsQ0FBRjtBQUFJLFVBQS83RCxFQUFnOERnUyx5QkFBd0IsaUNBQVNoUyxDQUFULEVBQVc7QUFBQ0EsZ0JBQUdBLElBQUUsQ0FBTCxLQUFTckosSUFBRXFKLENBQVg7QUFBYyxVQUFsL0QsRUFBbS9EaVMseUJBQXdCLG1DQUFVO0FBQUMsa0JBQU90YixDQUFQO0FBQVMsVUFBL2hFLEVBQWdpRXViLFNBQVEsaUJBQVNsUyxDQUFULEVBQVduQyxDQUFYLEVBQWE7QUFBQyxlQUFJakgsSUFBRSxDQUFDLENBQVAsQ0FBUyxPQUFPMkosS0FBRzFELEVBQUVpTCxJQUFMLEtBQVlwSCxFQUFFMEssT0FBRixHQUFZakMsS0FBWixJQUFvQnpJLEVBQUUwSyxPQUFGLEdBQVl2QixTQUFaLENBQXNCN0osQ0FBdEIsRUFBd0IsSUFBeEIsQ0FBcEIsRUFBa0RuQyxLQUFHNkMsRUFBRW1LLGVBQUYsRUFBckQsRUFBeUVqVSxJQUFFLENBQUMsQ0FBeEYsR0FBMkZBLENBQWxHO0FBQW9HLFVBQW5xRSxFQUFvcUV1YixhQUFZLHFCQUFTblMsQ0FBVCxFQUFXO0FBQUMsZUFBSW5DLElBQUUsQ0FBQyxDQUFQLENBQVMsT0FBTzBDLEtBQUcxRCxFQUFFaUwsSUFBTCxLQUFZcEgsRUFBRXNMLHdCQUFGLElBQTZCdEwsRUFBRXlJLEtBQUYsRUFBN0IsRUFBdUN6SSxFQUFFMEssT0FBRixHQUFZakMsS0FBWixFQUF2QyxFQUEyRHpJLEVBQUVtSixTQUFGLENBQVk3SixDQUFaLEVBQWMsSUFBZCxDQUEzRCxFQUErRW5DLElBQUUsQ0FBQyxDQUE5RixHQUFpR0EsQ0FBeEc7QUFBMEcsVUFBL3lFLEVBQWd6RXVVLGFBQVkscUJBQVN2VSxDQUFULEVBQVc7QUFBQ3NMLG1CQUFRLElBQUl2UyxJQUFFb0osRUFBRWdDLE1BQUYsQ0FBUyxFQUFULEVBQVluRSxDQUFaLENBQU4sQ0FBcUI2QyxFQUFFb0osWUFBRixDQUFlbFQsQ0FBZixFQUFpQixJQUFqQixHQUF1QjhKLEVBQUUwSyxPQUFGLEdBQVl0QixZQUFaLENBQXlCbFQsQ0FBekIsRUFBMkIsSUFBM0IsQ0FBdkIsRUFBd0Q4WCxHQUFHOVgsQ0FBSCxDQUF4RCxFQUE4RDRKLEdBQTlEO0FBQWtFLFVBQXY2RSxFQUF3NkU2UixhQUFZLHVCQUFVO0FBQUMsa0JBQU8xQyxDQUFQO0FBQVMsVUFBeDhFLEVBQXk4RTJDLFlBQVcsc0JBQVU7QUFBQyxrQkFBT3BTLEVBQUVxSSxtQkFBVDtBQUE2QixVQUE1L0UsRUFBNi9FZ0ssYUFBWSxxQkFBU3ZTLENBQVQsRUFBVztBQUFDeU8sYUFBRXhTLElBQUYsQ0FBTytELENBQVA7QUFBVSxVQUEvaEYsRUFBZ2lGd1MsZ0JBQWUsd0JBQVMzVSxDQUFULEVBQVc7QUFBQzRRLGFBQUVnRSxNQUFGLENBQVN6UyxFQUFFOUssT0FBRixDQUFVMkksQ0FBVixFQUFZNFEsQ0FBWixDQUFULEVBQXdCLENBQXhCO0FBQTJCLFVBQXRsRixFQUF1bEZyRCxTQUFRLG1CQUFVO0FBQUMsa0JBQU8xSyxFQUFFMEssT0FBRixFQUFQO0FBQW1CLFVBQTduRixFQUE4bkZzSCxhQUFZLHVCQUFVO0FBQUMsa0JBQU9oUyxDQUFQO0FBQVMsVUFBOXBGLEVBQWQsQ0FBZixFQUE4ckZWLEVBQUVnQyxNQUFGLENBQVMsSUFBVCxFQUFjLEVBQUMyUSxVQUFTN0IsRUFBVixFQUFhOEIsY0FBYTNCLEVBQTFCLEVBQTZCNEIsWUFBVyxvQkFBUzdTLENBQVQsRUFBV25DLENBQVgsRUFBYTtBQUFDbUMsZUFBRUEsS0FBR3ZELEVBQUV3UyxXQUFGLEVBQUwsRUFBcUJqUCxLQUFHMUIsRUFBRTBCLENBQUYsRUFBSW5DLENBQUosQ0FBeEI7QUFBK0IsVUFBckYsRUFBZCxDQUE5ckYsRUFBb3lGNUssSUFBSTBNLFFBQUosS0FBZXdQLElBQUVsYyxJQUFJME0sUUFBSixDQUFhM00sT0FBZixFQUF1QjJOLElBQUV3TyxFQUFFM1MsQ0FBRixFQUF4QyxDQUFweUYsRUFBbTFGaUQsSUFBRSxFQUFyMUYsRUFBdzFGZSxJQUFFLENBQTExRixFQUE0MUZELElBQUUxRCxFQUFFaUwsSUFBaDJGLEVBQXEyRnBILElBQUUsSUFBSUQsQ0FBSixFQUF2MkYsRUFBNjJGb0IsSUFBRSxJQUEvMkYsRUFBbzNGZ08sSUFBRSxDQUFDLENBQXYzRixFQUF5M0ZuRCxJQUFFLElBQTMzRixFQUFnNEZLLElBQUUsQ0FBbDRGLEVBQW80RkYsR0FBcDRGLEVBQXc0Rk8sSUFBRSxJQUExNEYsRUFBKzRGMU4sSUFBRSxJQUFqNUYsRUFBczVGd1IsSUFBRSxDQUFDLENBQXo1RixFQUEyNUZyRCxJQUFFLElBQTc1RixFQUFrNkY5TixJQUFFLENBQXA2RixFQUFzNkYwTyxJQUFFLEVBQXg2RixFQUEyNkZoUyxFQUFFME0sS0FBRixFQUEzNkYsRUFBcTdGdEwsTUFBR3BCLEVBQUVvTixTQUFGLENBQVloTSxFQUFaLENBQXg3RixFQUF1OEZqSCxLQUFHNkYsRUFBRWtWLFdBQUYsQ0FBYy9hLENBQWQsQ0FBMThGO0FBQTI5RixNQUF0d08sQ0FBdXdPLE9BQU8sVUFBU2lILENBQVQsRUFBVztBQUFDLGdCQUFTNEIsQ0FBVCxDQUFXTyxDQUFYLEVBQWFuQyxDQUFiLEVBQWU7QUFBQyxnQkFBT2pILEVBQUVELENBQUYsS0FBTXVLLEVBQUVsQixDQUFGLEVBQUluQyxDQUFKLENBQWI7QUFBb0IsaUJBQVNnQyxDQUFULEdBQVk7QUFBQ2xKLGFBQUUsQ0FBQyxDQUFILENBQUssS0FBSSxJQUFJcUosSUFBRSxDQUFWLEVBQVlBLEtBQUd2RCxDQUFmLEVBQWlCdUQsR0FBakI7QUFBcUIsZUFBR3BKLEVBQUUySyxjQUFGLENBQWlCdkIsQ0FBakIsQ0FBSCxFQUF1QjtBQUFDckosaUJBQUVxSixDQUFGLENBQUk7QUFBTTtBQUF2RCxVQUF1RCxPQUFPL00sSUFBSXVNLFdBQUosQ0FBZ0JzVCxXQUFoQixHQUE0Qm5jLENBQTVCLEVBQThCQSxDQUFyQztBQUF1QyxpQkFBU3VLLENBQVQsQ0FBV2xCLENBQVgsRUFBYW5DLENBQWIsRUFBZTtBQUFDLGdCQUFPbUMsSUFBRUEsS0FBRyxJQUFMLEVBQVVuQyxJQUFFQSxLQUFHLElBQWYsRUFBb0JtQyxLQUFHLFFBQU9BLENBQVAseUNBQU9BLENBQVAsTUFBVSxRQUFiLEtBQXdCbkMsSUFBRW1DLENBQUYsRUFBSUEsSUFBRSxJQUE5QixDQUFwQixFQUF3RHBKLEVBQUUsRUFBRTZGLENBQUosSUFBTyxJQUFJeEosSUFBSXVNLFdBQVIsQ0FBb0IzQixDQUFwQixFQUFzQm1DLENBQXRCLENBQS9ELEVBQXdGSCxHQUF4RixFQUE0RmpKLEVBQUU2RixDQUFGLENBQW5HO0FBQXdHLGlCQUFTcUQsQ0FBVCxHQUFZO0FBQUMsYUFBSUUsSUFBRSxDQUFDLENBQVA7QUFBQSxhQUFTbkMsSUFBRWxILENBQVgsQ0FBYSxJQUFHLE9BQU9qQixVQUFVLENBQVYsQ0FBUCxJQUFxQixRQUFyQixJQUErQnFkLFNBQVNyZCxVQUFVLENBQVYsQ0FBVCxDQUFsQyxFQUF5RG1JLElBQUVuSSxVQUFVLENBQVYsQ0FBRixDQUF6RCxLQUE2RSxJQUFHQSxVQUFVLENBQVYsYUFBdUJ6QyxJQUFJdU0sV0FBOUIsRUFBMEMsS0FBSSxJQUFJL0MsQ0FBUixJQUFhN0YsQ0FBYjtBQUFlLGVBQUdBLEVBQUU2RixDQUFGLE1BQU8vRyxVQUFVLENBQVYsQ0FBVixFQUF1QjtBQUFDbUksaUJBQUVwQixDQUFGLENBQUk7QUFBTTtBQUFqRCxVQUFpRCxPQUFPN0YsRUFBRTJLLGNBQUYsQ0FBaUIxRCxDQUFqQixNQUFzQm1DLElBQUVwSixFQUFFaUgsQ0FBRixDQUFGLEVBQU8sT0FBT2pILEVBQUVpSCxDQUFGLENBQWQsRUFBbUJtQyxFQUFFbUosS0FBRixFQUFuQixFQUE2QnRKLEdBQW5ELEdBQXdERyxDQUEvRDtBQUFpRSxpQkFBU0QsQ0FBVCxDQUFXQyxDQUFYLEVBQWE7QUFBQyxnQkFBT0EsSUFBRUEsS0FBRyxFQUFMLEVBQVFQLElBQUkwUyxXQUFKLENBQWdCblMsQ0FBaEIsQ0FBUixFQUEyQlAsSUFBSWlULFdBQUosRUFBbEM7QUFBb0QsaUJBQVNoVCxDQUFULENBQVdNLENBQVgsRUFBYW5DLENBQWIsRUFBZWpILENBQWYsRUFBaUI7QUFBQyxnQkFBT29KLElBQUVBLEtBQUcsRUFBTCxFQUFRLE9BQU9uQyxDQUFQLElBQVUsUUFBVixLQUFxQm1DLEVBQUVvSyxRQUFGLEdBQVd2TSxDQUFoQyxDQUFSLEVBQTJDNEIsSUFBSXlTLE9BQUosQ0FBWWxTLENBQVosRUFBY3BKLENBQWQsQ0FBM0MsRUFBNEQ2SSxJQUFJMkwsT0FBSixFQUFuRTtBQUFpRixpQkFBUzVPLENBQVQsQ0FBV3dELENBQVgsRUFBYW5DLENBQWIsRUFBZWpILENBQWYsRUFBaUI7QUFBQyxnQkFBTyxPQUFPb0osQ0FBUCxJQUFVLFdBQVYsR0FBc0IsQ0FBQyxDQUF2QixJQUEwQnBKLElBQUVBLEtBQUcsSUFBTCxFQUFVaUgsSUFBRUEsS0FBRyxFQUFmLEVBQWtCNEIsSUFBSXVSLE1BQUosQ0FBV2hSLENBQVgsRUFBYW5DLENBQWIsRUFBZWpILENBQWYsQ0FBNUMsQ0FBUDtBQUFzRSxpQkFBUzBILENBQVQsQ0FBVzBCLENBQVgsRUFBYTtBQUFDLGdCQUFPQSxDQUFQLElBQVUsV0FBVixJQUF1QlAsSUFBSW9LLFNBQUosQ0FBYzdKLENBQWQsQ0FBdkI7QUFBd0MsaUJBQVNLLENBQVQsR0FBWTtBQUFDLGdCQUFPWixJQUFJc0ssU0FBSixFQUFQO0FBQXVCLGlCQUFTekosQ0FBVCxDQUFXTixDQUFYLEVBQWE7QUFBQyxnQkFBT0EsQ0FBUCxJQUFVLFdBQVYsSUFBdUJQLElBQUlpVCxXQUFKLEdBQWtCN0ksU0FBbEIsQ0FBNEI3SixDQUE1QixDQUF2QjtBQUFzRCxpQkFBU25ELENBQVQsR0FBWTtBQUFDLGdCQUFPNEMsSUFBSWlULFdBQUosR0FBa0IzSSxTQUFsQixFQUFQO0FBQXFDLGlCQUFTeEosQ0FBVCxDQUFXUCxDQUFYLEVBQWE7QUFBQyxnQkFBT0EsQ0FBUCxJQUFVLFdBQVYsSUFBdUJQLElBQUkyTCxPQUFKLEdBQWN2QixTQUFkLENBQXdCN0osQ0FBeEIsQ0FBdkI7QUFBa0QsaUJBQVNFLENBQVQsR0FBWTtBQUFDLGdCQUFPVCxJQUFJMkwsT0FBSixHQUFjckIsU0FBZCxFQUFQO0FBQWlDLGlCQUFTdkosQ0FBVCxDQUFXUixDQUFYLEVBQWE7QUFBQyxnQkFBT1AsSUFBSTBKLEtBQUosQ0FBVW5KLEtBQUcsRUFBYixDQUFQO0FBQXdCLGlCQUFTUyxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGdCQUFPUCxJQUFJaVQsV0FBSixHQUFrQnZKLEtBQWxCLENBQXdCbkosS0FBRyxFQUEzQixDQUFQO0FBQXNDLGlCQUFTVSxDQUFULENBQVdWLENBQVgsRUFBYTtBQUFDLGdCQUFPUCxJQUFJMkwsT0FBSixHQUFjakMsS0FBZCxDQUFvQm5KLEtBQUcsRUFBdkIsQ0FBUDtBQUFrQyxpQkFBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQyxnQkFBT0EsSUFBRUEsS0FBRyxFQUFMLEVBQVFQLElBQUlvVCxVQUFKLENBQWUsSUFBZixFQUFvQjdTLENBQXBCLENBQWY7QUFBc0MsaUJBQVM0QixDQUFULENBQVc1QixDQUFYLEVBQWFuQyxDQUFiLEVBQWU7QUFBQyxnQkFBT25JLFVBQVVxQixNQUFWLEdBQWlCLENBQWpCLEtBQXFCaUosSUFBRXRLLFVBQVUsQ0FBVixDQUFGLEVBQWVtSSxJQUFFbkksVUFBVSxDQUFWLENBQXRDLEdBQW9Ec0ssSUFBRUEsS0FBRyxFQUF6RCxFQUE0RCxPQUFPbkMsQ0FBUCxJQUFVLFFBQVYsS0FBcUJtQyxFQUFFOFAsUUFBRixHQUFXalMsQ0FBaEMsQ0FBNUQsRUFBK0Y0QixJQUFJbVQsWUFBSixDQUFpQjVTLENBQWpCLEVBQW1CbkMsQ0FBbkIsQ0FBdEc7QUFBNEgsaUJBQVNnRSxDQUFULEdBQVk7QUFBQyxnQkFBT3BDLElBQUk0UyxXQUFKLEVBQVA7QUFBeUIsaUJBQVN4QyxDQUFULENBQVc3UCxDQUFYLEVBQWE7QUFBQ1AsYUFBSTJTLFdBQUosQ0FBZ0JwUyxDQUFoQjtBQUFtQixZQUFJcEosSUFBRSxFQUFOO0FBQUEsV0FBUzZGLElBQUUsQ0FBQyxDQUFaO0FBQUEsV0FBYzlGLElBQUUsQ0FBQyxDQUFqQixDQUFtQnFKLEVBQUVnQyxNQUFGLENBQVNuRSxDQUFULEVBQVcsRUFBQ2lWLGFBQVluYyxDQUFiLEVBQWVxYyxhQUFZOVIsQ0FBM0IsRUFBNkIsT0FBTUEsQ0FBbkMsRUFBcUMrUixpQkFBZ0JuVCxDQUFyRCxFQUF1RG9ULFNBQVFwVCxDQUEvRCxFQUFpRXFULGFBQVlwVCxDQUE3RSxFQUErRXFULFNBQVExVCxDQUF2RixFQUF5RnNSLFFBQU94VSxDQUFoRyxFQUFrR3FOLFdBQVV2TCxDQUE1RyxFQUE4R3lMLFdBQVUxSixDQUF4SCxFQUEwSGdULG1CQUFrQi9TLENBQTVJLEVBQThJZ1QsbUJBQWtCelcsQ0FBaEssRUFBa0swVyxlQUFjaFQsQ0FBaEwsRUFBa0xpVCxlQUFjdFQsQ0FBaE0sRUFBa011VCxlQUFjalQsQ0FBaE4sRUFBa05rVCxlQUFjalQsQ0FBaE8sRUFBa09rVCxXQUFValQsQ0FBNU8sRUFBOE9rVCxXQUFValQsQ0FBeFAsRUFBMFBrVCxhQUFZalMsQ0FBdFEsRUFBd1F5USxhQUFZeFEsQ0FBcFIsRUFBc1J1USxhQUFZdkMsQ0FBbFMsRUFBWDtBQUFpVCxNQUEzeUQsQ0FBNHlEaFMsQ0FBNXlELEdBQSt5REEsQ0FBdHpEO0FBQXd6RCxJQUExa1MsRUFBNytPLENBQTBqaEIsT0FBTzZDLEVBQUVvVCxRQUFGLEdBQVd2VCxDQUFYLEVBQWFHLEVBQUVxVCxZQUFGLEdBQWV6VCxDQUE1QixFQUE4QnJOLElBQUkrZ0IsWUFBSixHQUFpQi9nQixJQUFJK2dCLFlBQUosSUFBa0IsWUFBVTtBQUFDLFNBQUluVyxJQUFFLFlBQVU7QUFBQyxXQUFJQSxJQUFFLFdBQVNBLEdBQVQsRUFBVztBQUFDLGtCQUFTUyxDQUFULEdBQVk7QUFBQyxlQUFHLENBQUNyTCxJQUFJME0sUUFBTCxJQUFlSyxFQUFFZ0QsTUFBRixDQUFTbkYsR0FBVCxDQUFsQixFQUE4QjtBQUFDa0MsaUJBQUVDLEVBQUUrQyxNQUFGLENBQVNsRixJQUFFWSxLQUFYLENBQUYsQ0FBb0IsSUFBR3VCLEVBQUVnRCxNQUFGLENBQVNuRixJQUFFb1csVUFBWCxDQUFILEVBQTBCO0FBQUMsbUJBQUlyZCxJQUFFaUgsSUFBRXFXLE1BQUYsR0FBUyxZQUFULEdBQXNCLFVBQVEvZixTQUFTYSxRQUFULENBQWtCdUIsSUFBbEIsQ0FBdUJTLE1BQXZCLENBQThCLENBQTlCLEtBQWtDLEdBQWxDLEdBQXNDLFFBQXRDLEdBQStDLE1BQXZELENBQTVCLENBQTJGOEksRUFBRTZSLFdBQUYsQ0FBYy9hLElBQUUsK0JBQWhCLEdBQWlEa0osRUFBRWtLLFFBQUYsQ0FBVyxJQUFYLEVBQWdCbk0sSUFBRW9XLFVBQWxCLENBQWpEO0FBQStFLGNBQXJNLE1BQTBNblUsRUFBRTZSLFdBQUYsQ0FBYyxFQUFkLEdBQWtCNVIsS0FBRy9HLFFBQVE3RyxHQUFSLENBQVksdUZBQVosQ0FBckI7QUFBMEgsY0FBRTZYLFFBQUYsQ0FBVyxVQUFYLEVBQXNCLEdBQXRCO0FBQTJCLG1CQUFTM0osQ0FBVCxDQUFXeEMsQ0FBWCxFQUFhO0FBQUMsa0JBQU9tQyxFQUFFZ0QsTUFBRixDQUFTbkYsQ0FBVCxNQUFjQSxJQUFFLEVBQWhCLEdBQW9CbUMsRUFBRWdELE1BQUYsQ0FBU25GLEVBQUVzVyxRQUFYLE1BQXVCdFcsRUFBRXNXLFFBQUYsR0FBVyxHQUFsQyxDQUFwQixFQUEyRG5VLEVBQUVnRCxNQUFGLENBQVNuRixFQUFFdVcsRUFBWCxNQUFpQnZXLEVBQUV1VyxFQUFGLEdBQUssT0FBdEIsQ0FBM0QsRUFBMEZwVSxFQUFFZ0QsTUFBRixDQUFTbkYsRUFBRXdXLEVBQVgsTUFBaUJ4VyxFQUFFd1csRUFBRixHQUFLLE9BQXRCLENBQTFGLEVBQXlIclUsRUFBRWdELE1BQUYsQ0FBU25GLEVBQUV5VyxFQUFYLE1BQWlCelcsRUFBRXlXLEVBQUYsR0FBSyxPQUF0QixDQUF6SCxFQUF3SnpXLENBQS9KO0FBQWlLLG1CQUFTMEMsQ0FBVCxDQUFXUCxDQUFYLEVBQWE7QUFBQyxrQkFBT3JKLElBQUUsQ0FBRixJQUFLcUosS0FBR3JKLENBQVIsR0FBVThJLEtBQUdPLElBQUVySixDQUFmLEdBQWlCOEksSUFBRSxDQUFuQixFQUFxQkEsQ0FBNUI7QUFBOEIsbUJBQVNTLENBQVQsQ0FBV0YsQ0FBWCxFQUFhO0FBQUNGLGFBQUU0UixRQUFGLE1BQWM3VSxFQUFFaUwsSUFBaEIsSUFBc0JoSSxFQUFFNFIsUUFBRixNQUFjN1UsRUFBRW1MLE1BQXRDLEdBQTZDbEksRUFBRWtSLE1BQUYsQ0FBUzFRLEVBQUUrRyxHQUFYLEVBQWU5RyxFQUFFUCxDQUFGLENBQWYsQ0FBN0MsR0FBa0VGLEVBQUU0UixRQUFGLE1BQWM3VSxFQUFFbUwsTUFBaEIsSUFBd0JsSSxFQUFFa1IsTUFBRixDQUFTMVEsRUFBRStHLEdBQVgsRUFBZTVILENBQWYsQ0FBMUY7QUFBNEcsbUJBQVNlLENBQVQsQ0FBV1IsQ0FBWCxFQUFhO0FBQUMsa0JBQU9TLEVBQUUsVUFBRixFQUFhWixDQUFiLEVBQWVHLENBQWYsS0FBbUJTLEVBQUUsSUFBRixFQUFPWixDQUFQLEVBQVNHLENBQVQsQ0FBbkIsSUFBZ0NTLEVBQUUsSUFBRixFQUFPWixDQUFQLEVBQVNHLENBQVQsQ0FBaEMsSUFBNkNTLEVBQUUsSUFBRixFQUFPWixDQUFQLEVBQVNHLENBQVQsQ0FBcEQ7QUFBZ0UsbUJBQVNTLENBQVQsQ0FBVzVDLENBQVgsRUFBYWpILENBQWIsRUFBZTZGLENBQWYsRUFBaUI7QUFBQyxlQUFHdUQsRUFBRWdELE1BQUYsQ0FBU25GLENBQVQsS0FBYW1DLEVBQUVnRCxNQUFGLENBQVNwTSxDQUFULENBQWIsSUFBMEJvSixFQUFFZ0QsTUFBRixDQUFTdkcsQ0FBVCxDQUE3QixFQUF5QztBQUFDLGlCQUFJOUYsSUFBRUMsRUFBRWlILENBQUYsQ0FBTjtBQUFBLGlCQUFXNEIsSUFBRWhELEVBQUVvQixDQUFGLENBQWIsQ0FBa0IsT0FBT21DLEVBQUVnRCxNQUFGLENBQVNyTSxDQUFULEtBQWFxSixFQUFFZ0QsTUFBRixDQUFTdkQsQ0FBVCxDQUFiLElBQTBCOUksTUFBSThJLENBQXJDO0FBQXVDLG1CQUFNLENBQUMsQ0FBUDtBQUFTLG1CQUFTa0IsQ0FBVCxDQUFXOUMsQ0FBWCxFQUFhakgsQ0FBYixFQUFlO0FBQUNzSixhQUFFckMsQ0FBRixHQUFLcEIsR0FBTCxDQUFTLElBQUl5RSxJQUFFLEVBQUNrSixVQUFTM04sQ0FBVixFQUFZNE0sVUFBUyxHQUFyQixFQUF5QkMsVUFBUyxHQUFsQyxFQUFOLENBQTZDdEosRUFBRWdDLE1BQUYsQ0FBU2QsQ0FBVCxFQUFXdEssQ0FBWCxHQUFja0osRUFBRW9TLE9BQUYsQ0FBVWhSLENBQVYsQ0FBZCxFQUEyQnJCLElBQUVqSixDQUE3QixFQUErQkQsSUFBRWtILENBQWpDLEVBQW1DNEIsSUFBRSxDQUFyQyxFQUF1Q0ssRUFBRWtSLE1BQUYsQ0FBUzFRLEVBQUU2RyxJQUFYLEVBQWdCMUgsQ0FBaEIsQ0FBdkM7QUFBMEQsbUJBQVNtQyxDQUFULENBQVcvRCxDQUFYLEVBQWE7QUFBQyxlQUFJakgsSUFBRSxDQUFFLElBQUlnRixJQUFKLEVBQVIsQ0FBa0JzRSxFQUFFdEosQ0FBRixHQUFLNkYsR0FBTCxFQUFTb0IsSUFBRXdDLEVBQUV4QyxDQUFGLENBQVgsQ0FBZ0IsSUFBSWdDLElBQUUsRUFBQ3VLLFVBQVMzTixDQUFWLEVBQVk0TSxVQUFTLEdBQXJCLEVBQXlCQyxVQUFTLEdBQWxDLEVBQXNDeUgsVUFBUyxHQUEvQyxFQUFOLENBQTBEL1EsRUFBRWdDLE1BQUYsQ0FBU25DLENBQVQsRUFBV2hDLENBQVgsR0FBY2lDLEVBQUVvUyxPQUFGLENBQVVyUyxDQUFWLENBQWQsRUFBMkJKLElBQUUsQ0FBN0IsRUFBK0JLLEVBQUVrUixNQUFGLENBQVMxUSxFQUFFNkcsSUFBWCxFQUFnQjFILENBQWhCLENBQS9CLEVBQWtEOUksSUFBRUMsQ0FBcEQsRUFBc0RzSyxJQUFFLENBQUMsQ0FBekQ7QUFBMkQsbUJBQVNXLENBQVQsQ0FBVzdCLENBQVgsRUFBYW5DLENBQWIsRUFBZTtBQUFDLGVBQUlqSCxJQUFFLENBQUUsSUFBSWdGLElBQUosRUFBUixDQUFrQm9FLElBQUVLLEVBQUVMLENBQUYsQ0FBRixFQUFPeEQsS0FBR2tELEVBQUU2VSxJQUFMLEtBQVkvWCxJQUFFcUIsQ0FBZCxDQUFQLEVBQXdCcUQsS0FBRzFFLEtBQUdxQixDQUFOLEdBQVEyQyxFQUFFUixDQUFGLEtBQU1GLEVBQUVzTCxPQUFGLEdBQVl2QixTQUFaLENBQXNCN0osQ0FBdEIsR0FBeUJGLEVBQUU0UixRQUFGLE1BQWM3VSxFQUFFa0wsT0FBaEIsS0FBMEJwUixJQUFFQyxDQUFGLEVBQUlrSixFQUFFa1IsTUFBRixDQUFTMVEsRUFBRTZHLElBQVgsRUFBZ0IxSCxDQUFoQixDQUE5QixDQUEvQixJQUFrRmtCLEVBQUUvSixDQUFGLEVBQUlvSixDQUFKLENBQTFGLEdBQWlHVyxFQUFFL0osQ0FBRixFQUFJb0osQ0FBSixDQUF6SCxFQUFnSWtCLElBQUUsQ0FBQyxDQUFuSSxFQUFxSTFFLElBQUVxQixDQUF2STtBQUF5SSxjQUFJakgsSUFBRSxJQUFOO0FBQUEsYUFBVzZGLElBQUUsQ0FBYjtBQUFBLGFBQWU5RixJQUFFLENBQWpCO0FBQUEsYUFBbUI4SSxJQUFFLENBQXJCO0FBQUEsYUFBdUJJLElBQUUsSUFBekI7QUFBQSxhQUE4QnFCLElBQUUsQ0FBQyxDQUFqQztBQUFBLGFBQW1DcEIsSUFBRSxJQUFJWSxDQUFKLEVBQXJDO0FBQUEsYUFBMkNYLElBQUUsQ0FBQyxDQUE5QztBQUFBLGFBQWdETCxJQUFFLEVBQUM2VSxNQUFLLENBQU4sRUFBUUMsY0FBYSxDQUFyQixFQUF1QkMsY0FBYSxDQUFwQyxFQUFsRDtBQUFBLGFBQXlGalksSUFBRWtELEVBQUU2VSxJQUE3RixDQUFrR3ZVLEVBQUVnQyxNQUFGLENBQVMsSUFBVCxFQUFjLEVBQUMwUyxtQkFBa0IsNkJBQVU7QUFBQzNVLGtCQUFHL0csT0FBSCxJQUFZQSxRQUFRNUIsSUFBUixDQUFhLHNJQUFiLENBQVosQ0FBaUssSUFBSTRJLElBQUUsRUFBQzJVLFVBQVMsSUFBVixFQUFOLENBQXNCL1MsRUFBRTVCLENBQUY7QUFBSyxZQUExTixFQUEyTjRVLHdCQUF1QixnQ0FBUy9XLENBQVQsRUFBVztBQUFDLGlCQUFJakgsSUFBRSxFQUFDK2QsVUFBUyxJQUFWLEVBQU4sQ0FBc0I5VyxLQUFHbUMsRUFBRWdDLE1BQUYsQ0FBU3BMLENBQVQsRUFBV2lILENBQVgsQ0FBSCxFQUFpQitELEVBQUVoTCxDQUFGLENBQWpCO0FBQXNCLFlBQTFTLEVBQTJTaWUsd0JBQXVCLGdDQUFTaFgsQ0FBVCxFQUFXO0FBQUMsaUJBQUlqSCxJQUFFLEVBQUMrZCxVQUFTLElBQVYsRUFBTixDQUFzQjlXLEtBQUdtQyxFQUFFZ0MsTUFBRixDQUFTcEwsQ0FBVCxFQUFXaUgsQ0FBWCxDQUFILEVBQWlCK0QsRUFBRWhMLENBQUYsQ0FBakI7QUFBc0IsWUFBMVgsRUFBMlhrZSxpQkFBZ0IseUJBQVNqWCxDQUFULEVBQVc7QUFBQ2tDLGtCQUFHL0csT0FBSCxJQUFZQSxRQUFRNUIsSUFBUixDQUFhLGdJQUFiLENBQVosQ0FBMkosSUFBSVIsSUFBRSxFQUFDK2QsVUFBUyxJQUFWLEVBQU4sQ0FBc0I5VyxLQUFHbUMsRUFBRWdDLE1BQUYsQ0FBU3BMLENBQVQsRUFBV2lILENBQVgsQ0FBSCxFQUFpQmdFLEVBQUVqTCxDQUFGLEVBQUk4SSxFQUFFK1UsWUFBTixDQUFqQjtBQUFxQyxZQUE3bUIsRUFBOG1CTSxzQkFBcUIsOEJBQVNsWCxDQUFULEVBQVc7QUFBQyxpQkFBSWpILElBQUUsRUFBQytkLFVBQVMsSUFBVixFQUFOLENBQXNCOVcsS0FBR21DLEVBQUVnQyxNQUFGLENBQVNwTCxDQUFULEVBQVdpSCxDQUFYLENBQUgsRUFBaUJnRSxFQUFFakwsQ0FBRixFQUFJOEksRUFBRStVLFlBQU4sQ0FBakI7QUFBcUMsWUFBMXNCLEVBQTJzQk8sc0JBQXFCLDhCQUFTblgsQ0FBVCxFQUFXO0FBQUMsaUJBQUlqSCxJQUFFLEVBQUMrZCxVQUFTLElBQVYsRUFBTixDQUFzQjlXLEtBQUdtQyxFQUFFZ0MsTUFBRixDQUFTcEwsQ0FBVCxFQUFXaUgsQ0FBWCxDQUFILEVBQWlCZ0UsRUFBRWpMLENBQUYsRUFBSThJLEVBQUU4VSxZQUFOLENBQWpCO0FBQXFDLFlBQXZ5QixFQUF3eUJTLE1BQUssZ0JBQVU7QUFBQyxpQkFBSWpWLElBQUUsQ0FBRSxJQUFJcEUsSUFBSixFQUFSLENBQWtCa0UsRUFBRWtSLE1BQUYsQ0FBUzFRLEVBQUU4RyxLQUFYLEVBQWlCN0csRUFBRVAsQ0FBRixDQUFqQjtBQUF1QixZQUFqMkIsRUFBZCxHQUFrM0IxQixHQUFsM0I7QUFBczNCLFFBQTEzRSxDQUEyM0UsT0FBTyxVQUFTMEIsQ0FBVCxFQUFXLENBQUUsQ0FBYixDQUFjbkMsQ0FBZCxHQUFpQkEsQ0FBeEI7QUFBMEIsTUFBaDZFLEVBQU4sQ0FBeTZFLE9BQU9BLENBQVA7QUFBUyxJQUE3N0UsRUFBakUsRUFBaWdGNkMsQ0FBeGdGO0FBQTBnRixFQUFqbDRCLEVBQWpDLEM7Ozs7Ozs7Ozs7O0FDRGhCLEtBQUl6UCxTQUFTLG1CQUFBSixDQUFRLEdBQVIsQ0FBYjtBQUNBLEtBQUk2QixRQUFRLG1CQUFBN0IsQ0FBUSxHQUFSLENBQVo7QUFDQSxLQUFJUyxXQUFXLG1CQUFBVCxDQUFRLEdBQVIsQ0FBZjtBQUNBLEtBQUlVLFNBQVMsbUJBQUFWLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSStCLFNBQVMsbUJBQUEvQixDQUFRLEdBQVIsQ0FBYjtBQUNBLEtBQUllLFVBQVUsbUJBQUFmLENBQVEsR0FBUixDQUFkOztBQUVBLEtBQUlpQixPQUFPLG1CQUFBakIsQ0FBUSxHQUFSLENBQVg7QUFDQSxLQUFJa0IsWUFBWSxtQkFBQWxCLENBQVEsR0FBUixDQUFoQjs7QUFFQSxLQUFJTSxZQUFZLG1CQUFBTixDQUFRLEdBQVIsQ0FBaEI7O0FBRUEsS0FBSXFrQixTQUFTLG1CQUFBcmtCLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSXNrQixjQUFjLG1CQUFBdGtCLENBQVEsR0FBUixDQUFsQjtBQUNBLEtBQUl1a0IsYUFBYSxtQkFBQXZrQixDQUFRLEdBQVIsQ0FBakI7QUFDQSxLQUFJd2tCLFNBQVMsbUJBQUF4a0IsQ0FBUSxHQUFSLENBQWI7QUFDQSxLQUFJeWtCLFlBQVksbUJBQUF6a0IsQ0FBUSxHQUFSLENBQWhCO0FBQ0EsS0FBSTBrQixXQUFXLG1CQUFBMWtCLENBQVEsR0FBUixDQUFmO0FBQ0EsS0FBSTJrQixjQUFjLG1CQUFBM2tCLENBQVEsR0FBUixDQUFsQjtBQUNBLEtBQUlnQixTQUFTLG1CQUFBaEIsQ0FBUSxHQUFSLENBQWI7QUFDQSxLQUFJbUIsUUFBUSxtQkFBQW5CLENBQVEsR0FBUixDQUFaO0FBQ0EsS0FBSTRrQixrQkFBa0IsbUJBQUE1a0IsQ0FBUSxHQUFSLENBQXRCOztBQUVBLEtBQUlZLGVBQWUsbUJBQUFaLENBQVEsR0FBUixDQUFuQjtBQUNBLEtBQUlzQixNQUFNLG1CQUFBdEIsQ0FBUSxHQUFSLEVBQWtCLE1BQWxCLENBQVY7O0FBRUE7Ozs7O0FBS0FrQyxRQUFPQyxPQUFQLEdBQWlCLFNBQVNoQyxJQUFULENBQWUwa0IsTUFBZixFQUF1QjtBQUNwQzs7QUFFQSxTQUFJO0FBQ0EsYUFBSTdULENBQUo7QUFBQSxhQUNJbEwsQ0FESjtBQUFBLGFBRUlnZixHQUZKO0FBQUEsYUFHSTNZLGlCQUFpQi9MLE9BQU9pSCxpQkFBUCxFQUhyQjtBQUFBLGFBSUkwZCxpQkFBaUIza0IsT0FBTzRrQixpQkFBUCxFQUpyQjs7QUFNQTFqQixhQUFJQyxJQUFKLENBQVMsZ0NBQVQsRUFBMkNzakIsTUFBM0M7O0FBRUE7OztBQUdBLGFBQUcsd0NBQXdDcGQsSUFBeEMsQ0FBNkMwRSxlQUFlTSxRQUE1RCxLQUF5RW9ZLE9BQU9JLFlBQW5GLEVBQWdHO0FBQzVGM2pCLGlCQUFJQyxJQUFKLENBQVMsdUJBQVQsRUFBa0NzakIsT0FBT0ksWUFBekM7QUFDQUosb0JBQU9JLFlBQVAsR0FBc0JKLE9BQU9JLFlBQVAsQ0FBb0IvVCxNQUFwQixDQUEyQixVQUFTdk8sT0FBVCxFQUFpQjtBQUM5RCx3QkFBTyxDQUFDQSxRQUFRdWlCLFFBQVIsQ0FBaUIsS0FBakIsQ0FBUjtBQUNILGNBRnFCLENBQXRCO0FBR0g7O0FBRURyakIsZUFBTVcsZUFBTixDQUFzQnpCLFFBQVFva0IsVUFBUixDQUFtQixNQUFuQixFQUEyQixZQUEzQixDQUF0QjtBQUNBaGtCLGVBQU1oQixJQUFOOztBQUVBLGFBQUlDLE9BQU9nbEIsUUFBUCxDQUFnQixLQUFoQixLQUEwQixDQUFDaGxCLE9BQU9pbEIsVUFBUCxFQUEvQixFQUFvRDs7QUFFaERqbEIsb0JBQU9ELElBQVAsQ0FBWTBrQixNQUFaOztBQUVBaGpCLG1CQUFNVyxlQUFOLENBQXNCekIsUUFBUXVrQixVQUFSLENBQW1CbGxCLE1BQW5CLEVBQTJCc0IsTUFBM0IsQ0FBdEI7O0FBRUE7OztBQUdBLGlCQUFJdEIsT0FBT21sQixPQUFQLEVBQUosRUFBc0I7QUFDbEIscUJBQUksK0JBQStCOWQsSUFBL0IsQ0FBb0MvRixPQUFPeUMsUUFBUCxDQUFnQnVCLElBQXBELEtBQTZELGlCQUFpQitCLElBQWpCLENBQXNCL0YsT0FBT3lDLFFBQVAsQ0FBZ0J1QixJQUF0QyxDQUE3RCxJQUE0R3BDLFNBQVNvRSxNQUFULENBQWdCckQsT0FBaEIsQ0FBd0IsWUFBeEIsTUFBMEMsQ0FBQyxDQUEzSixFQUE4SjtBQUMxSnhDLDJCQUFNc0QsZ0JBQU4sQ0FBdUIvRSxPQUFPb2xCLGNBQVAsS0FBMEIsb0NBQWpEO0FBQ0gsa0JBRkQsTUFFTztBQUNIM2pCLDJCQUFNc0QsZ0JBQU4sQ0FBdUIvRSxPQUFPb2xCLGNBQVAsS0FBMEIsZ0NBQWpEO0FBQ0g7QUFDSjtBQUNELGlCQUFJLENBQUNwbEIsT0FBT21sQixPQUFQLEVBQUQsSUFBcUJubEIsT0FBT3FsQixLQUFQLEVBQXpCLEVBQXlDO0FBQ3JDLHFCQUFJLCtCQUErQmhlLElBQS9CLENBQW9DL0YsT0FBT3lDLFFBQVAsQ0FBZ0J1QixJQUFwRCxLQUE2RCxpQkFBaUIrQixJQUFqQixDQUFzQi9GLE9BQU95QyxRQUFQLENBQWdCdUIsSUFBdEMsQ0FBN0QsSUFBNEdwQyxTQUFTb0UsTUFBVCxDQUFnQnJELE9BQWhCLENBQXdCLFlBQXhCLE1BQTBDLENBQUMsQ0FBM0osRUFBOEo7QUFDMUp4QywyQkFBTXNELGdCQUFOLENBQXVCL0UsT0FBT29sQixjQUFQLEtBQTBCLDhCQUFqRDtBQUNILGtCQUZELE1BRU87QUFDSDNqQiwyQkFBTXNELGdCQUFOLENBQXVCL0UsT0FBT29sQixjQUFQLEtBQTBCLDBCQUFqRDtBQUNIO0FBQ0RuQix3QkFBT3FCLFlBQVA7QUFDSDs7QUFFRDs7O0FBR0EsaUJBQUl0bEIsT0FBT3VsQixLQUFQLEVBQUosRUFBb0I7QUFDaEJ0Qix3QkFBT3FCLFlBQVA7QUFDSDs7QUFFRDs7O0FBR0FqbEIsc0JBQVNtbEIsS0FBVCxDQUFlLElBQWY7QUFDQSxpQkFBSW5sQixTQUFTb2xCLFVBQVQsQ0FBb0IsQ0FBcEIsTUFBMkIsT0FBL0IsRUFBd0M7QUFDcEN2Qiw2QkFBWXdCLGFBQVosQ0FBMEIsQ0FBMUIsRUFBNkIsR0FBN0I7QUFDSDs7QUFFRCxpQkFBSWpCLE9BQU9SLE1BQVAsS0FBa0IsUUFBdEIsRUFBK0I7QUFDM0IscUJBQUkwQixPQUFPdmtCLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCNmlCLFlBQVkwQixRQUFaLENBQXFCLENBQXJCLENBQWxCLENBQVg7QUFDQTFCLDZCQUFZMkIsUUFBWixDQUFxQixDQUFyQixFQUF3QkYsSUFBeEI7QUFDQXpCLDZCQUFZNEIsY0FBWixDQUEyQixDQUEzQixFQUE4QixJQUE5QjtBQUNIOztBQUVEOzs7QUFHQTdCLG9CQUFPbGtCLElBQVAsQ0FBWW1rQixZQUFZNkIsU0FBWixFQUFaO0FBQ0EsaUJBQUl0QixPQUFPdUIsV0FBWCxFQUF3QjtBQUNwQjtBQUNBL0Isd0JBQU9nQyxjQUFQLENBQXNCeEIsT0FBT3VCLFdBQTdCO0FBQ0g7O0FBRUQ7OztBQUdBLGlCQUFJdkIsT0FBT3lCLGlCQUFYLEVBQThCO0FBQzFCaEMsNkJBQVlpQyxTQUFaLENBQXNCMUIsT0FBT3lCLGlCQUE3QjtBQUNIOztBQUVEOzs7QUFHQSxpQkFBSXpCLE9BQU9JLFlBQVgsRUFBeUI7QUFDckIsc0JBQUtuZixJQUFFLENBQUYsRUFBSWdmLE1BQUlELE9BQU9JLFlBQVAsQ0FBb0IvZSxNQUFqQyxFQUF5Q0osSUFBSWdmLEdBQTdDLEVBQWtEaGYsR0FBbEQsRUFBdUQ7QUFDbkR5ZSxnQ0FBV2lDLFVBQVgsQ0FBc0IzQixPQUFPSSxZQUFQLENBQW9CbmYsQ0FBcEIsQ0FBdEI7QUFDSDtBQUNKOztBQUVEOzs7QUFHQSxpQkFBSStlLE9BQU80QixVQUFYLEVBQXVCO0FBQ25CLHNCQUFLelYsQ0FBTCxJQUFVNlQsT0FBTzRCLFVBQWpCLEVBQTZCO0FBQ3pCLHlCQUFJNUIsT0FBTzRCLFVBQVAsQ0FBa0IvVixjQUFsQixDQUFpQ00sQ0FBakMsQ0FBSixFQUF5QztBQUNyQ3RRLGdDQUFPeVMsR0FBUCxDQUFXbkMsQ0FBWCxFQUFjNlQsT0FBTzRCLFVBQVAsQ0FBa0J6VixDQUFsQixDQUFkO0FBQ0g7QUFDSjtBQUNKOztBQUVEOzs7QUFHQTtBQUNBLGlCQUFJNVEsT0FBT3NtQixhQUFQLEVBQUosRUFBMkI7QUFDdEIscUJBQUl6bEIsSUFBSixFQUFELENBQWEwbEIsU0FBYjtBQUNIOztBQUVEOzs7QUFHQyxpQkFBSXpsQixTQUFKLEVBQUQsQ0FBa0JpUyxHQUFsQixDQUFzQjRSLGVBQWVuVSxLQUFmLEdBQXVCLEdBQXZCLEdBQTZCL08sTUFBTXlJLGtCQUFOLENBQXlCLGFBQXpCLENBQW5EOztBQUVBOzs7QUFHQWthLG9CQUFPcmtCLElBQVAsQ0FBWWtrQixPQUFPdUMsY0FBUCxFQUFaLEVBQXFDLEtBQUtDLHFCQUExQyxFQUFpRXBtQixTQUFTcW1CLFdBQVQsQ0FBcUIsUUFBckIsQ0FBakUsRUFBaUdybUIsU0FBU3FtQixXQUFULEVBQWpHOztBQUVBOzs7QUFHQXJDLHVCQUFVdGtCLElBQVYsQ0FBZWdNLGNBQWYsRUFBK0I0WSxjQUEvQixFQUErQzNrQixPQUFPMm1CLE9BQVAsRUFBL0M7O0FBRUE7OztBQUdBckMsc0JBQVN2a0IsSUFBVCxDQUFjZ00sZUFBZXpHLElBQTdCOztBQUVBOzs7QUFHQWlmLHlCQUFZeGtCLElBQVo7QUFDQSxpQkFBSSxPQUFPMGtCLE9BQU9JLFlBQWQsS0FBK0IsV0FBL0IsSUFBOENKLE9BQU9JLFlBQVAsQ0FBb0IvZSxNQUFwQixHQUE2QixDQUEvRSxFQUFrRjtBQUM5RXllLDZCQUFZcUMsVUFBWjtBQUNIOztBQUVEOzs7QUFHQWpsQixvQkFBTzVCLElBQVA7O0FBRUEsaUJBQUl1QixPQUFPMEgsZ0JBQVgsRUFBNkI7QUFDekIxSCx3QkFBTzBILGdCQUFQLENBQXdCLFNBQXhCLEVBQW1DLEtBQUs2ZCxjQUF4QyxFQUF3RCxLQUF4RDtBQUNILGNBRkQsTUFFTztBQUNIO0FBQ0F2bEIsd0JBQU93SCxXQUFQLENBQW1CLFdBQW5CLEVBQWdDLEtBQUsrZCxjQUFyQztBQUNIO0FBQ0o7O0FBRUQzbUIsbUJBQVVILElBQVY7O0FBRUE7QUFDQWEsZ0JBQU9rbUIsT0FBUCxDQUFlLHlCQUFmLEVBQTBDO0FBQ3RDckMscUJBQVFBLE1BRDhCO0FBRXRDO0FBQ0EvaUIsb0JBQU87QUFDSHFsQiwyQkFBVXZDLGdCQUFnQndDLFdBQWhCLEVBRFA7QUFFSEMsZ0NBQWU3QyxPQUFPOEMsVUFBUCxFQUZaO0FBR0hDLGtDQUFpQi9DLE9BQU9nRCxjQUFQLEVBSGQ7QUFJSEMsNkJBQVlybkIsT0FBT3NuQixZQUFQLEVBSlQ7QUFLSG5DLDBCQUFTbmxCLE9BQU9tbEIsT0FBUDtBQUxOO0FBSCtCLFVBQTFDO0FBWUgsTUF4S0QsQ0F3S0UsT0FBT3BXLENBQVAsRUFBVTtBQUNSLGFBQUk3TixPQUFPQSxJQUFJcW1CLEtBQWYsRUFBc0I7QUFDbEJybUIsaUJBQUlxbUIsS0FBSixDQUFVeFksQ0FBVjtBQUNILFVBRkQsTUFFTztBQUNIek4sb0JBQU95RyxPQUFQLENBQWU3RyxHQUFmLENBQW1CNk4sQ0FBbkI7QUFDSDtBQUNKOztBQUVEdk8sa0JBQWEsWUFBWTtBQUNyQixhQUFJO0FBQ0EsaUJBQUlvUSxDQUFKO0FBQUEsaUJBQU80VyxNQUFNckQsV0FBV3NELE1BQVgsRUFBYjtBQUNBLGtCQUFLam1CLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxpQkFBSSxDQUFDeEIsT0FBT21sQixPQUFQLEVBQUwsRUFBdUI7QUFDbkIsc0JBQUt2VSxDQUFMLElBQVU0VyxHQUFWLEVBQWU7QUFDWCx5QkFBSUEsSUFBSWxYLGNBQUosQ0FBbUJNLENBQW5CLENBQUosRUFBMkI7QUFDdkI0Vyw2QkFBSTVXLENBQUosRUFBTzhXLCtCQUFQO0FBQ0g7QUFDSjtBQUNKLGNBTkQsTUFNTztBQUNILHNCQUFLeFAsS0FBTDtBQUNIO0FBQ0osVUFaRCxDQVlFLE9BQU1uSixDQUFOLEVBQVM7QUFDUHROLG1CQUFNUCxHQUFOLENBQVU2TixDQUFWO0FBQ0g7QUFDSixNQWhCWSxDQWdCWGxOLElBaEJXLENBZ0JOLElBaEJNLENBQWI7QUFpQkgsRUFwTUQsQzs7Ozs7Ozs7Ozs7O3NqQkMvQkE7Ozs7O0FBR0E7O0FBQ0E7Ozs7Ozs7O0FBRUEsS0FBTThsQix5QkFBeUIsYUFBL0I7QUFDQSxLQUFNQyxZQUFZO0FBQ2RDLGVBQVU7QUFDTkMsZUFBTSxrQ0FEQTtBQUVOQyxnQkFBTyxvQ0FGRDtBQUdOQyw2QkFBb0IsS0FIZDtBQUlOQyw2QkFBb0IsaUJBSmQ7QUFLTkMseUJBQWdCLEtBTFY7QUFNTkMseUJBQWdCLGlCQU5WO0FBT05DLDJCQUFrQixRQVBaO0FBUU5DLDJCQUFrQjtBQVJaLE1BREk7QUFXZEMsVUFBSztBQUNEUixlQUFNLHdCQURMO0FBRURDLGdCQUFPO0FBRk47QUFYUyxFQUFsQjs7QUFpQkE7Ozs7QUFJQSxLQUFJUSxVQUFVO0FBQ1Y3WCxlQUFVLEVBREE7QUFFVjNFLHFCQUFnQnljLFdBRk47QUFHVjdELHFCQUFnQjhELFdBSE47QUFJVkMsZUFBVTtBQUNObEIsY0FBSyxJQURDO0FBRU50bkIsb0JBQVcsSUFGTCxFQUVnQjtBQUN0QndPLG1CQUFVLElBSEosQ0FHYztBQUhkLE1BSkE7QUFTVnJPLGVBQVUsRUFUQTtBQVVWMG1CLGVBQVUsRUFWQTtBQVdWNEIsZUFBVSxFQVhBO0FBWVZDLFlBQU8sS0FaRztBQWFWQyw0QkFBdUIsS0FiYjtBQWNWQyxzQkFBaUIsQ0FDYixZQURhLENBZFA7QUFpQlZDLHNCQUFpQixJQWpCUDtBQWtCVkMsa0JBQWEsSUFsQkg7QUFtQlZDLHlCQUFvQixLQW5CVjtBQW9CVkMsdUJBQWtCLEtBcEJSO0FBcUJWQyxnQkFBVztBQUNQQyxjQUFLLEtBREU7QUFFUEMsY0FBSyxLQUZFO0FBR1BDLGNBQUs7QUFIRSxNQXJCRDtBQTBCVjNULGNBQVMsRUExQkM7QUEyQlY0VCxlQUFVO0FBQ05DLHNCQUFhLEVBRFA7QUFFTkMsbUJBQVUsRUFGSjtBQUdOQyxvQkFBVyxFQUhMO0FBSU5DLG9CQUFXO0FBSkwsTUEzQkE7QUFpQ1ZDLGVBQVUsRUFqQ0E7QUFrQ1ZDLGlDQWxDVTtBQW1DVnRYLGNBQVM7QUFuQ0MsRUFBZDs7S0FzQ011WCxNOzs7Ozs7OzhCQUVHQyxVLEVBQVlDLEksRUFBTWptQixRLEVBQVViLFEsRUFBVTtBQUN2QztBQUNBLGlCQUFJLG1CQUFNK0gsU0FBTixDQUFnQixZQUFoQixNQUFrQzNCLFNBQXRDLEVBQWlEO0FBQzdDLHFCQUFJbUMsS0FBS0UsTUFBTCxNQUFpQixHQUFyQixFQUEwQjtBQUN0Qix3Q0FBTXBCLFNBQU4sQ0FBZ0IsWUFBaEIsRUFBOEIsR0FBOUI7QUFDSCxrQkFGRCxNQUVPO0FBQ0gsd0NBQU1BLFNBQU4sQ0FBZ0IsWUFBaEIsRUFBOEIsR0FBOUI7QUFDSDtBQUNKO0FBQ0Q7QUFDQSxpQkFBSyxtQkFBTVUsU0FBTixDQUFnQixZQUFoQixNQUFrQyxHQUFsQyxJQUF5QzFKLFVBQVVsQixRQUFWLENBQW1CcW1CLFdBQW5CLEdBQWlDLENBQWpDLE1BQXdDLGNBQWxGLElBQXFHLGdCQUFnQnJmLElBQWhCLENBQXFCa2hCLFFBQVF4YyxjQUE3QixDQUF6RyxFQUF1SjtBQUNuSnhLLDJCQUFVRSxLQUFWLENBQWdCVyxlQUFoQixDQUFnQ2IsVUFBVVosT0FBVixDQUFrQm9rQixVQUFsQixDQUE2QixNQUE3QixDQUFoQztBQUNIO0FBQ0QsaUJBQUksNEJBQTRCMWQsSUFBNUIsQ0FBaUNraEIsUUFBUXhjLGNBQVIsQ0FBdUJNLFFBQXhELENBQUosRUFBdUU7QUFDbkU5SywyQkFBVUUsS0FBVixDQUFnQlcsZUFBaEIsQ0FBZ0NiLFVBQVVaLE9BQVYsQ0FBa0Jva0IsVUFBbEIsQ0FBNkIsc0JBQTdCLENBQWhDO0FBQ0g7QUFDRCxpQkFBSSxPQUFPZ0YsVUFBUCxLQUFzQixXQUExQixFQUF1QztBQUNuQyxzQkFBS0UsU0FBTCxDQUFlRixVQUFmO0FBQ0g7QUFDRCxrQkFBS0csT0FBTCxDQUFhRixJQUFiO0FBQ0EsaUJBQUksT0FBT2ptQixRQUFQLEtBQW9CLFdBQXhCLEVBQXFDO0FBQ2pDLHNCQUFLb21CLGlCQUFMLENBQXVCcG1CLFFBQXZCO0FBQ0g7QUFDRCxpQkFBSSxPQUFPYixRQUFQLEtBQW9CLFdBQXhCLEVBQXFDO0FBQ2pDLHNCQUFLa25CLGlCQUFMLENBQXVCbG5CLFFBQXZCO0FBQ0g7QUFDRCxpQkFBSSxLQUFLb2tCLFlBQUwsRUFBSixFQUF5QjtBQUNyQi9sQiwyQkFBVUUsS0FBVixDQUFnQlcsZUFBaEIsQ0FBZ0N1bEIsc0JBQWhDO0FBQ0g7O0FBRUQsaUJBQUlqWCxXQUFZLE9BQU9wUCxPQUFPK29CLEdBQWQsS0FBc0IsV0FBdEIsSUFBcUMsT0FBTy9vQixPQUFPK29CLEdBQVAsQ0FBVzNaLFFBQWxCLEtBQStCLFdBQXBFLEdBQ1pwUCxPQUFPK29CLEdBQVAsQ0FBVzNaLFFBREMsR0FDVTZYLFFBQVE1RCxjQUFSLENBQXVCalUsUUFEakQ7QUFFQSxrQkFBSzRaLFdBQUwsQ0FBaUI1WixRQUFqQjtBQUNIOztBQUVEOzs7Ozs7Ozs7bUNBTVU2WixJLEVBQU07QUFDWixpQkFBSSxPQUFPQSxJQUFQLEtBQWdCLFdBQXBCLEVBQWlDO0FBQzdCO0FBQ0g7QUFDRDtBQUNBLGlCQUFJLE9BQU9BLEtBQUtscUIsUUFBWixLQUF5QixXQUE3QixFQUEwQztBQUN0QyxzQkFBS21xQixXQUFMLENBQWlCRCxLQUFLbHFCLFFBQXRCO0FBQ0g7QUFDRDtBQUNBLGlCQUFJLE9BQU9rcUIsS0FBS25sQixJQUFaLEtBQXFCLFdBQXpCLEVBQXNDO0FBQ2xDLHNCQUFLcWxCLE9BQUwsQ0FBYUYsS0FBS25sQixJQUFsQjtBQUNIO0FBQ0Q7QUFDQSxpQkFBSSxPQUFPbWxCLEtBQUs1QixRQUFaLEtBQXlCLFdBQTdCLEVBQTBDO0FBQ3RDLHNCQUFLK0IsV0FBTCxDQUFpQkgsS0FBSzVCLFFBQXRCO0FBQ0g7QUFDRDtBQUNBLGlCQUFJLE9BQU80QixLQUFLbEQsVUFBWixLQUEyQixXQUEvQixFQUE0QztBQUN4QyxzQkFBS3NELGFBQUwsQ0FBbUJKLEtBQUtsRCxVQUF4QjtBQUNIO0FBQ0Q7QUFDQSxpQkFBSSxPQUFPa0QsS0FBS0ssZ0JBQVosS0FBaUMsV0FBckMsRUFBa0Q7QUFDOUMsc0JBQUtELGFBQUwsQ0FBbUJKLEtBQUtLLGdCQUF4QjtBQUNIO0FBQ0Q7QUFDQSxpQkFBSSxPQUFPTCxLQUFLeEIsZUFBWixLQUFnQyxXQUFwQyxFQUFpRDtBQUM3QyxzQkFBSzhCLGtCQUFMLENBQXdCTixLQUFLeEIsZUFBN0I7QUFDSDtBQUNEO0FBQ0EsaUJBQUksT0FBT3dCLEtBQUt2QixXQUFaLEtBQTRCLFdBQWhDLEVBQTZDO0FBQ3pDLHNCQUFLOEIsY0FBTCxDQUFvQlAsS0FBS3ZCLFdBQXpCO0FBQ0g7QUFDRDtBQUNBLGlCQUFJLE9BQU91QixLQUFLUSxnQkFBWixLQUFpQyxXQUFyQyxFQUFrRDtBQUM5QyxzQkFBS0MsbUJBQUwsQ0FBeUJULEtBQUtRLGdCQUE5QjtBQUNIO0FBQ0Q7QUFDQSxpQkFBSSxPQUFPUixLQUFLVSxlQUFaLEtBQWdDLFdBQXBDLEVBQWlEO0FBQzdDLHNCQUFLQyxrQkFBTCxDQUF3QlgsS0FBS1UsZUFBN0I7QUFDSDtBQUNEO0FBQ0EsaUJBQUksT0FBT1YsS0FBS1ksWUFBWixLQUE2QixXQUFqQyxFQUE4QztBQUMxQyxzQkFBS0MsUUFBTCxDQUFjYixLQUFLWSxZQUFuQjtBQUNIO0FBQ0QsaUJBQUksa0JBQWtCOWpCLElBQWxCLENBQXVCa2hCLFFBQVF4YyxjQUFSLENBQXVCTSxRQUE5QyxDQUFKLEVBQTZEO0FBQ3pELHNCQUFLK2UsUUFBTCxDQUFjLElBQWQ7QUFDSDtBQUNEO0FBQ0EsaUJBQUksT0FBT2IsS0FBS2Msa0JBQVosS0FBbUMsV0FBdkMsRUFBb0Q7QUFDaEQsc0JBQUtDLHFCQUFMLENBQTJCZixLQUFLYyxrQkFBaEM7QUFDSDtBQUNEO0FBQ0EsaUJBQUlFLFVBQVcsT0FBT2hCLEtBQUtpQixTQUFaLEtBQTBCLFdBQTNCLEdBQTBDakIsS0FBS2lCLFNBQS9DLEdBQTJEakIsS0FBS2tCLGlCQUE5RTtBQUNBLGlCQUFJLE9BQU9GLE9BQVAsS0FBbUIsV0FBdkIsRUFBb0M7QUFDaENocUIsMkJBQVV0QixPQUFWLENBQWtCb2tCLFNBQWxCLENBQTRCdFIsR0FBNUIsQ0FBZ0MsU0FBaEMsRUFBMkN3WSxPQUEzQztBQUNIO0FBQ0Q7QUFDQSxpQkFBSSxPQUFPaEIsS0FBS3ZsQixHQUFaLEtBQW9CLFdBQXhCLEVBQXFDO0FBQ2pDLHNCQUFLbWxCLGlCQUFMLENBQXVCNW9CLFVBQVVFLEtBQVYsQ0FBZ0JxSyxvQkFBaEIsQ0FBcUN5ZSxLQUFLdmxCLEdBQTFDLENBQXZCO0FBQ0g7QUFDRDtBQUNBLGlCQUFJLE9BQU91bEIsS0FBS1gsUUFBWixLQUF5QixXQUE3QixFQUEwQztBQUN0QyxzQkFBSzhCLFdBQUwsQ0FBaUJuQixLQUFLWCxRQUF0QjtBQUNIO0FBQ0Q7QUFDQSxpQkFBSSxPQUFPVyxLQUFLVixNQUFaLEtBQXVCLFdBQTNCLEVBQXdDO0FBQ3BDLHNCQUFLOEIsU0FBTCxDQUFlcEIsS0FBS1YsTUFBcEI7QUFDSDtBQUNEO0FBQ0EsaUJBQUl0b0IsVUFBVWpCLE1BQWQsRUFBc0I7QUFDbEIscUJBQUksT0FBT2lxQixLQUFLcUIsaUJBQVosS0FBa0MsV0FBdEMsRUFBbUQ7QUFDL0NycUIsK0JBQVVqQixNQUFWLENBQWlCeVMsR0FBakIsQ0FBcUIsbUJBQXJCLEVBQTBDd1gsS0FBS3FCLGlCQUEvQztBQUNIO0FBQ0QscUJBQUksT0FBT3JCLEtBQUtzQixpQkFBWixLQUFrQyxXQUF0QyxFQUFtRDtBQUMvQ3RxQiwrQkFBVWpCLE1BQVYsQ0FBaUJ5UyxHQUFqQixDQUFxQixtQkFBckIsRUFBMEN3WCxLQUFLc0IsaUJBQS9DO0FBQ0g7QUFDRCxxQkFBSSxPQUFPdEIsS0FBS3VCLHFCQUFaLEtBQXNDLFdBQTFDLEVBQXVEO0FBQ25EdnFCLCtCQUFVakIsTUFBVixDQUFpQnlTLEdBQWpCLENBQXFCLHVCQUFyQixFQUE4Q3dYLEtBQUt1QixxQkFBbkQ7QUFDSDtBQUNELHFCQUFJLE9BQU92QixLQUFLd0IsZUFBWixLQUFnQyxXQUFwQyxFQUFpRDtBQUM3Q3hxQiwrQkFBVWpCLE1BQVYsQ0FBaUJ5UyxHQUFqQixDQUFxQixpQkFBckIsRUFBd0N3WCxLQUFLd0IsZUFBN0M7QUFDSDtBQUNELHFCQUFJLE9BQU94QixLQUFLeUIsZUFBWixLQUFnQyxXQUFwQyxFQUFpRDtBQUM3Q3pxQiwrQkFBVWpCLE1BQVYsQ0FBaUJ5UyxHQUFqQixDQUFxQixpQkFBckIsRUFBd0N3WCxLQUFLeUIsZUFBN0M7QUFDSDtBQUNKO0FBQ0Q7QUFDQSxpQkFBSSxPQUFPekIsS0FBSzBCLG9CQUFaLEtBQXFDLFdBQXpDLEVBQXNEO0FBQ2xELHNCQUFLQyxxQkFBTCxDQUEyQjNCLEtBQUswQixvQkFBaEM7QUFDSDtBQUNEO0FBQ0EsaUJBQUksT0FBTzFCLEtBQUs0QixrQkFBWixLQUFtQyxXQUF2QyxFQUFvRDtBQUNoRCxzQkFBS0MsbUJBQUwsQ0FBeUI3QixLQUFLNEIsa0JBQTlCO0FBQ0g7QUFDSjs7O3FDQUVXO0FBQ1Isb0JBQU81RCxPQUFQO0FBQ0g7OztpQ0FFT3lCLEksRUFBTTtBQUNWLGlCQUFJLE9BQU9BLElBQVAsS0FBZ0IsV0FBaEIsSUFDQSxPQUFPQSxLQUFLeEMsR0FBWixLQUFvQixXQURwQixJQUVBLE9BQU93QyxLQUFLdG9CLEtBQVosS0FBc0IsV0FGdEIsSUFHQSxPQUFPc29CLEtBQUtxQyxhQUFaLEtBQThCLFdBSGxDLEVBRytDO0FBQzNDLHFCQUFJQyxlQUFlLENBQW5CO0FBQUEscUJBQ0lDLFlBQVk1WixTQUFTcVgsS0FBS3FDLGFBQWQsRUFBNkIsRUFBN0IsRUFBaUN4Z0IsUUFBakMsQ0FBMEMsQ0FBMUMsQ0FEaEI7QUFFQSxxQkFBSTBnQixVQUFVem1CLE1BQVYsS0FBcUJ3bUIsWUFBekIsRUFBdUM7QUFDbkM7QUFDQTtBQUNBLDRCQUFPQyxVQUFVem1CLE1BQVYsR0FBbUJ3bUIsWUFBMUIsRUFBd0M7QUFDcENDLHFDQUFZLE1BQU1BLFNBQWxCO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7Ozs7QUFRQWhFLHlCQUFRRyxRQUFSLEdBQW1CO0FBQ2YsNEJBQVFzQixLQUFLeEMsR0FBTCxLQUFhLENBQWIsSUFBa0JlLFFBQVFHLFFBQVIsQ0FBaUJsQixHQUFqQixLQUF5QixLQURwQztBQUVmLGtDQUFjd0MsS0FBS3RvQixLQUFMLEtBQWUsQ0FBZixJQUFvQjZtQixRQUFRRyxRQUFSLENBQWlCeG9CLFNBQWpCLEtBQStCLEtBRmxEO0FBR2Y7QUFDQSxtQ0FBZThwQixLQUFLdG9CLEtBQUwsS0FBZSxDQUFmLElBQW9CaVIsU0FBUzRaLFVBQVV0bUIsTUFBVixDQUFpQixDQUFqQixFQUFvQixDQUFwQixDQUFULEVBQWlDLEVBQWpDLENBSnBCO0FBS2YsbUNBQWUrakIsS0FBS3RvQixLQUFMLEtBQWUsQ0FBZixJQUFvQmlSLFNBQVM0WixVQUFVdG1CLE1BQVYsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsQ0FBVCxFQUFpQyxFQUFqQyxDQUxwQjtBQU1mLG1DQUFlK2pCLEtBQUt0b0IsS0FBTCxLQUFlLENBQWYsSUFBb0JpUixTQUFTNFosVUFBVXRtQixNQUFWLENBQWlCLENBQWpCLEVBQW9CLENBQXBCLENBQVQsRUFBaUMsRUFBakMsQ0FOcEI7QUFPZixpQ0FBWSxDQVBHLEVBT0M7QUFDaEIsNkJBQVEsQ0FSTyxFQVFIO0FBQ1o7QUFDQSxpQ0FBWXNpQixRQUFRRyxRQUFSLENBQWlCaGE7QUFWZCxrQkFBbkI7QUFZSDtBQUNKOztBQUVEOzs7Ozs7O3FDQUlZOGQsSyxFQUFPO0FBQ2YsaUJBQUksT0FBT0EsS0FBUCxLQUFpQixXQUFyQixFQUFrQztBQUM5QixxQkFBSUEsaUJBQWlCQyxLQUFyQixFQUE0QjtBQUN4QmxFLDZCQUFRbG9CLFFBQVIsR0FBbUJtc0IsS0FBbkI7QUFDSCxrQkFGRCxNQUVPO0FBQ0hqRSw2QkFBUWxvQixRQUFSLEdBQW1CbXNCLE1BQU0zbUIsS0FBTixDQUFZLEdBQVosQ0FBbkI7QUFDSDtBQUNKLGNBTkQsTUFNTztBQUNIMGlCLHlCQUFRbG9CLFFBQVIsR0FBbUIsRUFBbkI7QUFDSDtBQUNKOzs7dUNBRWE7QUFDVixvQkFBT2tvQixRQUFRbG9CLFFBQWY7QUFDSDs7QUFHRDs7Ozs7O2lDQUdRK0UsSSxFQUFNO0FBQ1ZtakIscUJBQVF4QixRQUFSLEdBQW1CM2hCLEtBQUtZLFdBQUwsRUFBbkI7QUFDSDs7O21DQUVTO0FBQ04sb0JBQU91aUIsUUFBUXhCLFFBQWY7QUFDSDs7QUFFRDs7Ozs7O3FDQUdZNkMsUSxFQUFVO0FBQ2xCckIscUJBQVFxQixRQUFSLEdBQW1CQSxRQUFuQjtBQUNBLG9CQUFPLElBQVA7QUFDSDs7O3VDQUVhO0FBQ1Ysb0JBQU9yQixRQUFRcUIsUUFBZjtBQUNIOztBQUVEOzs7Ozs7bUNBR1VDLE0sRUFBUTtBQUNkdEIscUJBQVFzQixNQUFSLEdBQWlCQSxNQUFqQjtBQUNBLG9CQUFPLElBQVA7QUFDSDs7O3FDQUVXO0FBQ1Isb0JBQU90QixRQUFRc0IsTUFBZjtBQUNIOztBQUVEOzs7Ozs7cUNBR1k5ZixHLEVBQUs7QUFDYndlLHFCQUFRSSxRQUFSLEdBQW1CNWUsR0FBbkI7QUFDSDs7O3VDQUVhO0FBQ1Ysb0JBQU93ZSxRQUFRSSxRQUFmO0FBQ0g7Ozs7O0FBRUQ7Ozs7a0NBSVN4RCxPLEVBQVM7QUFDZG9ELHFCQUFRSyxLQUFSLEdBQWdCekQsT0FBaEI7QUFDSDs7O21DQUVTO0FBQ04sb0JBQU9vRCxRQUFRSyxLQUFmO0FBQ0g7O0FBRUQ7Ozs7Ozs7K0NBSXNCOEQsdUIsRUFBeUI7QUFDM0NuRSxxQkFBUU0scUJBQVIsR0FBZ0M2RCx1QkFBaEM7QUFDSDs7O2dEQUVzQjtBQUNuQixvQkFBT25FLFFBQVFNLHFCQUFmO0FBQ0g7Ozt3Q0FHYzhELEksRUFBTTtBQUNqQixpQkFBSXRnQixXQUFXa2MsUUFBUXhjLGNBQVIsQ0FBdUJNLFFBQXRDO0FBQ0Esb0JBQVEsT0FBT0EsUUFBUCxLQUFvQixXQUFwQixJQUFtQ0EsU0FBU3BJLE9BQVQsQ0FBaUIsTUFBTTBvQixJQUF2QixNQUFpQyxDQUE1RTtBQUNIOzs7c0NBRVk7QUFDVCxpQkFBSXRnQixXQUFXa2MsUUFBUXhjLGNBQVIsQ0FBdUJNLFFBQXRDO0FBQUEsaUJBQ0kvRyxPQUFPaWpCLFFBQVF4YyxjQUFSLENBQXVCekcsSUFEbEM7QUFFQSxvQkFBUSxPQUFPK0csUUFBUCxLQUFvQixXQUFwQixLQUNQQSxTQUFTcEksT0FBVCxDQUFpQixNQUFqQixNQUE2QixDQUFDLENBQTlCLElBQW9DLE9BQU9xQixJQUFQLEtBQWdCLFdBQWhCLElBQWdDQSxLQUFLckIsT0FBTCxDQUFhLE1BQWIsTUFBeUIsQ0FBQyxDQUR2RixNQUVQb0ksU0FBU3BJLE9BQVQsQ0FBaUIsUUFBakIsTUFBK0IsQ0FBL0IsSUFBcUMsT0FBT3FCLElBQVAsS0FBZ0IsV0FBaEIsSUFBZ0NBLEtBQUtyQixPQUFMLENBQWEsaUJBQWIsTUFBb0MsQ0FBQyxDQUZuRyxDQUFSO0FBR0g7OztrQ0FHUTJvQixHLEVBQUs7QUFDVixvQkFBUSxPQUFPckUsUUFBUUcsUUFBUixDQUFpQmtFLEdBQWpCLENBQVAsS0FBaUMsV0FBakMsR0FBK0NyRSxRQUFRRyxRQUFSLENBQWlCa0UsR0FBakIsQ0FBL0MsR0FBdUUsS0FBL0U7QUFDSDs7O3dDQUVjO0FBQ1gsb0JBQU8sS0FBSzVILFFBQUwsQ0FBYyxLQUFkLENBQVA7QUFDSDs7O3VDQUVhMVcsTyxFQUFTO0FBQ25CaWEscUJBQVFHLFFBQVIsQ0FBaUJsQixHQUFqQixHQUF1QmxaLE9BQXZCO0FBQ0g7Ozs2Q0FHbUJBLE8sRUFBUztBQUN6QjtBQUNBaWEscUJBQVFHLFFBQVIsQ0FBaUJ4b0IsU0FBakIsR0FBOEJxb0IsUUFBUUcsUUFBUixDQUFpQnhvQixTQUFqQixLQUErQixDQUEvQixJQUFvQ3FvQixRQUFRRyxRQUFSLENBQWlCeG9CLFNBQWpCLEtBQStCLEtBQW5FLEdBQTJFb08sT0FBM0UsR0FBcUYsQ0FBbkg7QUFDSDs7OzhDQUVvQjtBQUNqQixvQkFBTyxLQUFLMFcsUUFBTCxDQUFjLFdBQWQsQ0FBUDtBQUNIOzs7NENBR2tCMVcsTyxFQUFTO0FBQ3hCO0FBQ0FpYSxxQkFBUUcsUUFBUixDQUFpQmhhLFFBQWpCLEdBQTZCNlosUUFBUUcsUUFBUixDQUFpQmhhLFFBQWpCLEtBQThCLENBQTlCLElBQW1DNlosUUFBUUcsUUFBUixDQUFpQmhhLFFBQWpCLEtBQThCLEtBQWpFLEdBQXlFSixPQUF6RSxHQUFtRixDQUFoSDtBQUNIOzs7NkNBRW1CO0FBQ2hCLG9CQUFPLEtBQUswVyxRQUFMLENBQWMsVUFBZCxLQUE2QixLQUFLQSxRQUFMLENBQWMsV0FBZCxDQUFwQztBQUNIOzs7NENBRWtCMVcsTyxFQUFTO0FBQ3hCaWEscUJBQVFRLGVBQVIsR0FBMEJ6YSxPQUExQjtBQUNIOzs7NkNBRW1CO0FBQ2hCLG9CQUFPaWEsUUFBUVEsZUFBZjtBQUNIOzs7d0NBRWN6YSxPLEVBQVM7QUFDcEJpYSxxQkFBUVMsV0FBUixHQUFzQjFhLE9BQXRCO0FBQ0g7Ozt5Q0FFZTtBQUNaLG9CQUFPaWEsUUFBUVMsV0FBZjtBQUNIOzs7K0NBRXFCeGUsSyxFQUFPO0FBQ3pCK2QscUJBQVFVLGtCQUFSLEdBQThCemUsVUFBVSxJQUF4QztBQUNIOzs7Z0RBRXNCO0FBQ25CLG9CQUFPK2QsUUFBUVUsa0JBQWY7QUFDSDs7OzZDQUVtQnplLEssRUFBTztBQUN2QitkLHFCQUFRVyxnQkFBUixHQUE0QjFlLFVBQVUsSUFBdEM7QUFDSDs7OzhDQUVvQjtBQUNqQixvQkFBTytkLFFBQVFXLGdCQUFmO0FBQ0g7OztnQ0FFTTFlLEssRUFBTztBQUNWK2QscUJBQVFZLFNBQVIsQ0FBa0JDLEdBQWxCLEdBQXdCNWUsS0FBeEI7QUFDSDs7O2lDQUVPO0FBQ0osb0JBQU8rZCxRQUFRWSxTQUFSLENBQWtCQyxHQUF6QjtBQUNIOzs7Z0NBRU01ZSxLLEVBQU87QUFDVitkLHFCQUFRWSxTQUFSLENBQWtCRSxHQUFsQixHQUF3QjdlLEtBQXhCO0FBQ0g7OztpQ0FFTztBQUNKLG9CQUFPK2QsUUFBUVksU0FBUixDQUFrQkUsR0FBekI7QUFDSDs7O2dDQUVNN2UsSyxFQUFPO0FBQ1YrZCxxQkFBUVksU0FBUixDQUFrQkcsR0FBbEIsR0FBd0I5ZSxLQUF4QjtBQUNIOzs7aUNBRU87QUFDSixvQkFBTytkLFFBQVFZLFNBQVIsQ0FBa0JHLEdBQXpCO0FBQ0g7O0FBRUQ7Ozs7d0NBQ2V1RCxNLEVBQVE7QUFDbkJ0RSxxQkFBUWdCLFFBQVIsQ0FBaUJDLFdBQWpCLEdBQStCcUQsTUFBL0I7QUFDSDs7OzBDQUVnQjtBQUNiLG9CQUFPdEUsUUFBUWdCLFFBQVIsQ0FBaUJDLFdBQXhCO0FBQ0g7OztvQ0FFVWpYLE8sRUFBUztBQUNoQmdXLHFCQUFRaFcsT0FBUixHQUFrQkEsT0FBbEI7QUFDQSxvQkFBTyxJQUFQO0FBQ0g7OztzQ0FFWTtBQUNULG9CQUFPZ1csUUFBUWhXLE9BQWY7QUFDSDs7QUFFRDs7Ozs7OztxQ0FJWXNhLE0sRUFBUTtBQUNoQnRFLHFCQUFRZ0IsUUFBUixDQUFpQkUsUUFBakIsR0FBNEJvRCxNQUE1QjtBQUNIOzs7dUNBRWE7QUFDVixvQkFBUXRFLFFBQVFnQixRQUFSLENBQWlCRSxRQUFqQixLQUE4QixFQUE5QixHQUFtQ2xCLFFBQVFnQixRQUFSLENBQWlCRSxRQUFwRCxHQUErRCxLQUFLckUsY0FBTCxLQUF3QixRQUEvRjtBQUNIOzs7c0NBRVl5SCxNLEVBQVE7QUFDakJ0RSxxQkFBUWdCLFFBQVIsQ0FBaUJHLFNBQWpCLEdBQTZCbUQsTUFBN0I7QUFDSDs7O3dDQUVjO0FBQ1gsb0JBQVF0RSxRQUFRZ0IsUUFBUixDQUFpQkcsU0FBakIsS0FBK0IsRUFBL0IsR0FBb0NuQixRQUFRZ0IsUUFBUixDQUFpQkcsU0FBckQsR0FBaUUsS0FBS3RFLGNBQUwsS0FBd0IsS0FBakc7QUFDSDs7O3NDQUVZeUgsTSxFQUFRO0FBQ2pCdEUscUJBQVFnQixRQUFSLENBQWlCSSxTQUFqQixHQUE2QmtELE1BQTdCO0FBQ0g7Ozt3Q0FFYztBQUNYLG9CQUFRdEUsUUFBUWdCLFFBQVIsQ0FBaUJJLFNBQWpCLEtBQStCLEVBQS9CLEdBQW9DcEIsUUFBUWdCLFFBQVIsQ0FBaUJJLFNBQXJELEdBQWlFLEtBQUt2RSxjQUFMLEtBQXdCLE9BQWpHO0FBQ0g7O0FBRUQ7Ozs7OztvQ0FJV3haLEMsRUFBRztBQUNWMmMscUJBQVE1UyxPQUFSLEdBQWtCL0osQ0FBbEI7QUFDQSxvQkFBTyxJQUFQO0FBQ0g7OztzQ0FFWTtBQUNULG9CQUFPMmMsUUFBUTVTLE9BQWY7QUFDSDs7OzJDQUVpQjVSLFEsRUFBVTtBQUN4QndrQixxQkFBUXhjLGNBQVIsR0FBeUJoSSxRQUF6QjtBQUNBLG9CQUFPLElBQVA7QUFDSDs7OzZDQUVtQjtBQUNoQixvQkFBT3drQixRQUFReGMsY0FBZjtBQUNIOzs7MkNBRWlCN0ksUSxFQUFVO0FBQ3hCcWxCLHFCQUFRNUQsY0FBUixHQUF5QnpoQixRQUF6QjtBQUNBLG9CQUFPLElBQVA7QUFDSDs7OzZDQUVtQjtBQUNoQixvQkFBT3FsQixRQUFRNUQsY0FBZjtBQUNIOzs7cUNBRVdtSSxHLEVBQUs7QUFDYnZFLHFCQUFRN1gsUUFBUixHQUFtQm9jLEdBQW5CO0FBQ0Esb0JBQU8sSUFBUDtBQUNIOzs7dUNBRWE7QUFDVixvQkFBT3ZFLFFBQVE3WCxRQUFmO0FBQ0g7Ozs4Q0FFb0I7QUFDakIsb0JBQU9rWCxTQUFQO0FBQ0g7Ozt5Q0FFZW1GLE0sRUFBUTtBQUNwQixvQkFBT3hyQixVQUFVckIsU0FBVixDQUFvQndPLFFBQXBCLENBQTZCc2UsU0FBN0IsQ0FBdUNDLG9CQUF2QyxFQUFQO0FBQ0g7Ozs4Q0FFd0M7QUFBQSxpQkFBdEJuRSxlQUFzQix5REFBSixFQUFJOztBQUNyQ1AscUJBQVFPLGVBQVIsR0FBMEJBLGVBQTFCO0FBQ0Esb0JBQU8sSUFBUDtBQUNIOzs7OENBRW9CO0FBQ2pCLG9CQUFPUCxRQUFRTyxlQUFmO0FBQ0g7OzsyQ0FFaUJpRSxNLEVBQVE7QUFDdEIsaUJBQUlHLFVBQVV2bEIsVUFBVTRnQixRQUFReGMsY0FBUixDQUF1QnpHLElBQWpDLENBQWQ7QUFDQSxpQkFBSSxLQUFLMmYsVUFBTCxFQUFKLEVBQXVCO0FBQ25CLHdCQUFRaUksVUFBVXRGLFVBQVVDLFFBQVYsQ0FBbUJNLGNBQTdCLEdBQThDUCxVQUFVQyxRQUFWLENBQW1CSyxjQUF6RTtBQUNIO0FBQ0Qsb0JBQVFnRixVQUFVdEYsVUFBVUMsUUFBVixDQUFtQkksa0JBQTdCLEdBQWtETCxVQUFVQyxRQUFWLENBQW1CRyxrQkFBN0U7QUFDSDs7OzhDQUVvQjtBQUNqQixvQkFBUXJnQixVQUFVNGdCLFFBQVF4YyxjQUFSLENBQXVCekcsSUFBakMsSUFBeUNzaUIsVUFBVUMsUUFBVixDQUFtQlEsZ0JBQTVELEdBQStFVCxVQUFVQyxRQUFWLENBQW1CTyxnQkFBMUc7QUFDSDs7QUFFRDs7Ozs7OzZCQUdJO0FBQ0Esa0JBQUsrQixpQkFBTCxDQUF1QjNCLFdBQXZCO0FBQ0Esa0JBQUs0QixpQkFBTCxDQUF1QjNCLFdBQXZCO0FBQ0Esa0JBQUs2QixXQUFMLENBQWlCLEVBQWpCO0FBQ0Esa0JBQUtFLFdBQUwsQ0FBaUIsRUFBakI7QUFDQWpDLHFCQUFRRyxRQUFSLEdBQW1CO0FBQ2ZsQixzQkFBSyxJQURVO0FBRWZ0bkIsNEJBQVcsSUFGSTtBQUdmd08sMkJBQVU7QUFISyxjQUFuQjtBQUtBLGtCQUFLeWUsTUFBTCxDQUFZLEtBQVo7QUFDQSxrQkFBS0MsTUFBTCxDQUFZLEtBQVo7QUFDQSxrQkFBS0MsY0FBTCxDQUFvQixFQUFwQjtBQUNBLGtCQUFLeEMsa0JBQUwsQ0FBd0IsSUFBeEI7QUFDQSxrQkFBS0MsY0FBTCxDQUFvQixJQUFwQjtBQUNBLGtCQUFLc0IsbUJBQUwsQ0FBeUIsS0FBekI7QUFDQSxrQkFBS0YscUJBQUwsQ0FBMkIsS0FBM0I7QUFDQSxrQkFBS3hCLFdBQUwsQ0FBaUIsRUFBakI7QUFDQSxrQkFBS0QsT0FBTCxDQUFhLEVBQWI7QUFDSDs7Ozs7O3NCQUlVLElBQUlYLE1BQUosRTs7O0FBRWYsVUFBU3RCLFNBQVQsR0FBcUI7QUFDakIsWUFBT2xuQixPQUFPeUMsUUFBZDtBQUNIOztBQUVELFVBQVMwa0IsU0FBVCxHQUFxQjtBQUNqQixZQUFPbm5CLE9BQU80QixRQUFkO0FBQ0g7O0FBRUQsVUFBU3lFLFNBQVQsQ0FBbUJyQyxJQUFuQixFQUF5QjtBQUNyQixZQUFRLDBDQUFELENBQTRDK0IsSUFBNUMsQ0FBaUQvQixJQUFqRDtBQUFQO0FBQ0g7Ozs7Ozs7Ozs7OztBQ2xsQk0sS0FBTWdvQixzQ0FBZSxNQUFyQjtBQUNBLEtBQU1DLHdDQUFnQixPQUF0QjtBQUNBLEtBQU1DLHNDQUFlLE1BQXJCO0FBQ0EsS0FBTUMsb0NBQWMsS0FBcEI7QUFDQSxLQUFNQyw0Q0FBa0IsU0FBeEIsQzs7Ozs7Ozs7QUNKUDs7OztBQUlBOzs7OztBQUtBLEtBQUkxdEIsU0FBUyxtQkFBQUosQ0FBUSxHQUFSLENBQWI7QUFDQSxLQUFJUyxXQUFXLEVBQWY7QUFDQSxLQUFJc3RCLGlCQUFpQixFQUFyQjtBQUNBLEtBQUlDLG9CQUFvQixFQUF4Qjs7QUFFQTs7O0FBR0EsS0FBSUMsY0FBYyxTQUFkQSxXQUFjLENBQVNDLElBQVQsRUFBZTtBQUM3QixTQUFJQyxTQUFTLElBQUlwckIsTUFBSixDQUFXLDhGQUNsQixxR0FEa0IsR0FFbEIsMkRBRk8sQ0FBYjtBQUdBLFlBQU9tckIsS0FDRnZuQixPQURFLENBQ00sT0FETixFQUNlLEVBRGYsRUFDMEM7QUFEMUMsTUFFRkEsT0FGRSxDQUVNLE9BRk4sRUFFZSxFQUZmLEVBRTBDO0FBRjFDLE1BR0ZBLE9BSEUsQ0FHTSwwQ0FITixFQUdrRCxTQUhsRCxFQUc0RDtBQUg1RCxNQUlGQSxPQUpFLENBSU0sMEJBSk4sRUFJa0MsRUFKbEMsRUFJMEM7QUFKMUMsTUFLRkEsT0FMRSxDQUtNLGtCQUxOLEVBSzBCLEVBTDFCLEVBSzBDO0FBTDFDLE1BTUZBLE9BTkUsQ0FNTSxPQU5OLEVBTWUsR0FOZixFQU0wQztBQU4xQyxNQU9GQSxPQVBFLENBT00sSUFQTixFQU9ZLEdBUFosRUFPMEM7QUFQMUMsTUFRRkEsT0FSRSxDQVFNLDBEQVJOLEVBUWtFLGNBUmxFLEVBUW9GO0FBUnBGLE1BU0ZBLE9BVEUsQ0FTTSxnQ0FUTixFQVN3QyxlQVR4QyxFQVMwRDtBQVQxRCxNQVVGQSxPQVZFLENBVU0saURBVk4sRUFVeUQsZUFWekQsRUFVMkU7QUFWM0UsTUFXRkEsT0FYRSxDQVdNLDJCQVhOLEVBV21DLGFBWG5DLEVBV21EO0FBWG5ELE1BWUZBLE9BWkUsQ0FZTSxxQkFaTixFQVk2QixXQVo3QixFQVk4QztBQVo5QyxNQWFGQSxPQWJFLENBYU0sV0FiTixFQWFtQixPQWJuQixFQWEwQztBQWIxQyxNQWNGQSxPQWRFLENBY00sY0FkTixFQWNzQixPQWR0QixFQWMwQztBQWQxQyxNQWVGQSxPQWZFLENBZU0sNEJBZk4sRUFlb0MsWUFmcEMsRUFla0Q7QUFmbEQsTUFnQkZBLE9BaEJFLENBZ0JNLHVCQWhCTixFQWdCK0IsYUFoQi9CLEVBZ0IrQztBQWhCL0MsTUFpQkZBLE9BakJFLENBaUJNLGVBakJOLEVBaUJ1QixTQWpCdkIsRUFpQjBDO0FBakIxQyxNQWtCRkEsT0FsQkUsQ0FrQk13bkIsTUFsQk4sRUFrQmMsaUJBbEJkLEVBa0IwQztBQWxCMUMsTUFtQkZ4bkIsT0FuQkUsQ0FtQk0sT0FuQk4sRUFtQmUsRUFuQmYsRUFtQjBDO0FBbkIxQyxNQW9CRkEsT0FwQkUsQ0FvQk0sUUFwQk4sRUFvQmdCLEVBcEJoQixFQW9CMEM7QUFwQjFDLE1BcUJGQSxPQXJCRSxDQXFCTSxNQXJCTixFQXFCYyxFQXJCZCxDQUFQLENBSjZCLENBeUJvQjtBQUNwRCxFQTFCRDs7QUE0QkE7OztBQUdBLEtBQUl5bkIsc0JBQXNCLFNBQXRCQSxtQkFBc0IsQ0FBU0YsSUFBVCxFQUFlO0FBQ3JDQSxZQUFPQSxLQUNGdm5CLE9BREUsQ0FDTSxvQ0FETixFQUM0QyxnQkFENUMsRUFDZ0U7QUFEaEUsTUFFRkEsT0FGRSxDQUVNLGdDQUZOLEVBRXdDLGNBRnhDLEVBRWdFO0FBRmhFLE1BR0ZBLE9BSEUsQ0FHTSxvQkFITixFQUc0QixhQUg1QixFQUdnRTtBQUhoRSxNQUlGQSxPQUpFLENBSU0sZ0JBSk4sRUFJd0IsRUFKeEIsQ0FBUCxDQURxQyxDQUtrQztBQUN2RSxZQUFPdW5CLEtBQUtqb0IsS0FBTCxDQUFXLEdBQVgsQ0FBUDtBQUNILEVBUEQ7O0FBU0E7OztBQUdBLEtBQUlvb0IseUJBQXlCLFNBQXpCQSxzQkFBeUIsQ0FBU0gsSUFBVCxFQUFlO0FBQ3hDQSxZQUFPQSxLQUNGdm5CLE9BREUsQ0FDTSxrQkFETixFQUMwQixzQkFEMUIsRUFDbUQ7QUFEbkQsTUFFRkEsT0FGRSxDQUVNLGtDQUZOLEVBRTBDLGVBRjFDLENBQVAsQ0FEd0MsQ0FHNEI7QUFDcEUsWUFBT3VuQixLQUFLam9CLEtBQUwsQ0FBVyxHQUFYLENBQVA7QUFDSCxFQUxEOztBQU9BOzs7QUFHQSxLQUFJMmYsUUFBUSxTQUFSQSxLQUFRLENBQVMwSSxZQUFULEVBQXVCNW9CLElBQXZCLEVBQTZCO0FBQ3JDLFNBQUl3b0IsT0FBTyxFQUFYO0FBQUEsU0FDSUssWUFBWSxFQURoQjtBQUFBLFNBRUlDLGtCQUFrQixFQUZ0QjtBQUFBLFNBR0lDLHFCQUFxQixFQUh6QjtBQUFBLFNBSUlDLFVBQVUsU0FKZDtBQUFBLFNBS0k1cUIsTUFMSjtBQU1BLFNBQUksT0FBTzRCLElBQVAsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDN0I1QixrQkFBUzRCLEtBQUsxQyxLQUFMLENBQVcsdURBQVgsQ0FBVDtBQUNBLGFBQUljLE1BQUosRUFBWTtBQUFhO0FBQ3JCb3FCLG9CQUFPcHFCLE9BQU9BLE9BQU9vQyxNQUFQLEdBQWMsQ0FBckIsQ0FBUDtBQUNILFVBRkQsTUFFTztBQUNIcEMsc0JBQVM0QixLQUFLMUMsS0FBTCxDQUFXLFVBQVgsQ0FBVDtBQUNBLGlCQUFJYyxNQUFKLEVBQVk7QUFDUjtBQUNBO0FBQ0FvcUIsd0JBQU9wcUIsT0FBT0EsT0FBT29DLE1BQVAsR0FBYyxDQUFyQixDQUFQO0FBQ0gsY0FKRCxNQUlPO0FBQ0hnb0Isd0JBQU9RLE9BQVA7QUFDSDtBQUNKO0FBRUosTUFmRCxNQWVPLElBQUl0dUIsT0FBTzBtQixXQUFQLEdBQXFCNWdCLE1BQXJCLEtBQWdDLENBQXBDLEVBQXVDO0FBQzFDO0FBQ0EsYUFBSW1FLE1BQU0xSSxVQUFVcEIsZUFBVixDQUEwQm91QixpQkFBMUIsRUFBVjtBQUNBLGFBQUksT0FBT3RrQixHQUFQLEtBQWUsV0FBZixJQUE4QkEsUUFBUSxFQUF0QyxJQUE0Q0EsUUFBUSxJQUFwRCxJQUE0REEsSUFBSWhHLE9BQUosQ0FBWSxNQUFaLE1BQXdCLENBQXhGLEVBQTJGO0FBQ3ZGO0FBQ0E2cEIsb0JBQU9RLE9BQVA7QUFDSCxVQUhELE1BR087QUFDSDVxQixzQkFBU3VHLElBQUlySCxLQUFKLENBQVUsdURBQVYsQ0FBVDtBQUNBLGlCQUFJYyxNQUFKLEVBQVk7QUFDUm9xQix3QkFBT3BxQixPQUFPQSxPQUFPb0MsTUFBUCxHQUFjLENBQXJCLENBQVA7QUFDSCxjQUZELE1BRU87QUFDSGdvQix3QkFBT1EsT0FBUDtBQUNIO0FBQ0o7QUFDSixNQWRNLE1BY0E7QUFDSDtBQUNBO0FBQ0FSLGdCQUFPOXRCLE9BQU8wbUIsV0FBUCxHQUFxQnhnQixJQUFyQixDQUEwQixHQUExQixDQUFQO0FBQ0g7QUFDRDRuQixZQUFPQSxRQUFRLEVBQWY7QUFDQUEsWUFBT0QsWUFBWUMsSUFBWixDQUFQO0FBQ0EsU0FBSUEsU0FBUyxFQUFiLEVBQWlCO0FBQ2I7QUFDQUsscUJBQVlDLGtCQUFrQkMscUJBQXFCLENBQUMsVUFBRCxDQUFuRDtBQUNILE1BSEQsTUFHTztBQUNIRixxQkFBWUwsS0FBS2pvQixLQUFMLENBQVcsR0FBWCxDQUFaO0FBQ0F1b0IsMkJBQWtCSixvQkFBb0JGLElBQXBCLENBQWxCO0FBQ0FPLDhCQUFxQkosdUJBQXVCSCxJQUF2QixDQUFyQjtBQUNIO0FBQ0QsU0FBSUksWUFBSixFQUFrQjtBQUNkO0FBQ0E3dEIsb0JBQVc4dEIsU0FBWDtBQUNBUiwwQkFBaUJTLGVBQWpCO0FBQ0FSLDZCQUFvQlMsa0JBQXBCO0FBQ0g7QUFDRCxZQUFPLENBQUNGLFNBQUQsRUFBWUMsZUFBWixFQUE2QkMsa0JBQTdCLENBQVA7QUFDSCxFQTFERDs7QUE0REE7OztBQUdBLEtBQUlHLFdBQVcsU0FBWEEsUUFBVyxDQUFTcHBCLElBQVQsRUFBZTtBQUMxQkEsWUFBUSxPQUFPQSxJQUFQLEtBQWdCLFdBQWhCLEdBQThCLEVBQTlCLEdBQW1DQSxJQUEzQztBQUNBLFlBQVFBLFNBQVMsUUFBVCxHQUFvQnVvQixjQUFwQixHQUFzQ3ZvQixTQUFTLFdBQVQsR0FBdUJ3b0IsaUJBQXZCLEdBQTJDdnRCLFFBQXpGO0FBQ0gsRUFIRDs7QUFLQXlCLFFBQU9DLE9BQVAsR0FBaUI7QUFDYnlqQixZQUFPQSxLQURNO0FBRWI7Ozs7Ozs7Ozs7Ozs7QUFhQUMsaUJBQVksb0JBQVNnSixNQUFULEVBQWlCcnBCLElBQWpCLEVBQXVCc3BCLFVBQXZCLEVBQW1DO0FBQzNDLGFBQUksT0FBT0QsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUMvQixpQkFBSyxPQUFPQyxVQUFQLEtBQXNCLFdBQXRCLElBQXFDQSxlQUFlLElBQXpELEVBQWdFO0FBQzVEbEosdUJBQU0sSUFBTjtBQUNIO0FBQ0RpSixzQkFBUzliLFNBQVM4YixNQUFULEVBQWlCLEVBQWpCLENBQVQ7QUFDQSxpQkFBSSxPQUFPRCxTQUFTcHBCLElBQVQsQ0FBUCxLQUEwQixXQUExQixJQUNHLE9BQU9vcEIsU0FBU3BwQixJQUFULEVBQWVxcEIsTUFBZixDQUFQLEtBQWtDLFdBRHJDLElBRUdELFNBQVNwcEIsSUFBVCxFQUFlcXBCLE1BQWYsTUFBMkIsRUFGbEMsRUFFc0M7QUFDbEMsd0JBQU9ELFNBQVNwcEIsSUFBVCxFQUFlcXBCLE1BQWYsQ0FBUDtBQUNIO0FBQ0o7QUFDRCxnQkFBTyxLQUFQO0FBQ0gsTUE1Qlk7QUE2QmI7Ozs7Ozs7Ozs7Ozs7QUFhQS9ILGtCQUFhLHFCQUFTdGhCLElBQVQsRUFBZXNwQixVQUFmLEVBQTJCO0FBQ3BDLGFBQUssT0FBT0EsVUFBUCxLQUFzQixXQUF0QixJQUFxQ0EsZUFBZSxJQUF6RCxFQUFnRTtBQUM1RGxKLG1CQUFNLElBQU47QUFDSDtBQUNELGdCQUFPZ0osU0FBU3BwQixJQUFULENBQVA7QUFDSCxNQS9DWTtBQWdEYjs7Ozs7Ozs7QUFRQXVwQix3QkFBbUIsMkJBQVMxa0IsR0FBVCxFQUFjN0UsSUFBZCxFQUFvQjtBQUNuQzZFLGVBQU8sT0FBT0EsR0FBUCxLQUFlLFdBQWYsSUFBOEJBLFFBQVEsSUFBdEMsR0FBNkMsRUFBN0MsR0FBa0RBLEdBQXpEO0FBQ0E3RSxnQkFBUSxPQUFPQSxJQUFQLEtBQWdCLFdBQWhCLEdBQThCLEVBQTlCLEdBQW1DQSxJQUEzQztBQUNBLGFBQUk0a0IsT0FBT3hFLE1BQU0sS0FBTixFQUFhdmIsR0FBYixDQUFYO0FBQ0EsZ0JBQVE3RSxTQUFTLFFBQVQsR0FBb0I0a0IsS0FBSyxDQUFMLENBQXBCLEdBQStCNWtCLFNBQVMsV0FBVCxHQUF1QjRrQixLQUFLLENBQUwsQ0FBdkIsR0FBaUNBLEtBQUssQ0FBTCxDQUF4RTtBQUNILE1BN0RZO0FBOERiOzs7QUFHQXhlLFFBQUcsYUFBVztBQUNWbkwsb0JBQVcsRUFBWDtBQUNBc3RCLDBCQUFpQixFQUFqQjtBQUNBQyw2QkFBb0IsRUFBcEI7QUFDSDtBQXJFWSxFQUFqQixDOzs7Ozs7OztBQzFJQSxLQUFJNUQsT0FBTztBQUNQNEIsd0JBQTRCLGVBRHJCO0FBRVBFLDRCQUE0QixxQkFGckI7QUFHUEMsc0JBQTRCLGlCQUhyQjtBQUlQNkMsOEJBQTRCLHNCQUpyQjtBQUtQNUMsc0JBQTRCLGVBTHJCO0FBTVBILHdCQUE0QixtREFOckI7QUFPUGdELDZCQUE0QiwwRUFQckI7QUFRUEMsdUJBQTRCO0FBUnJCLEVBQVg7O0FBV0FodEIsUUFBT0MsT0FBUCxHQUFpQjtBQUNiK1EsVUFBSyxhQUFVaWMsS0FBVixFQUFpQjtBQUNsQixnQkFBTy9FLEtBQUsrRSxLQUFMLENBQVA7QUFDSCxNQUhZO0FBSWJoYyxVQUFLLGFBQVVnYyxLQUFWLEVBQWlCQyxJQUFqQixFQUF1QjtBQUN4QmhGLGNBQUsrRSxLQUFMLElBQWNDLElBQWQ7QUFDSCxNQU5ZO0FBT2JDLGNBQVMsbUJBQVk7QUFDakIsZ0JBQU9qRixJQUFQO0FBQ0g7QUFUWSxFQUFqQixDOzs7Ozs7OztBQ1hBbG9CLFFBQU9DLE9BQVAsR0FBaUI7QUFDYndxQixnQkFBVztBQUNQMkMsMkJBQWtCO0FBQ2R0QyxrQkFBSyxvQkFEUztBQUVkNW5CLGtCQUFLekQsVUFBVWlvQixXQUFWLEdBQXdCO0FBRmY7QUFEWCxNQURFO0FBT2JuQyxpQkFBWSxzQkFBWTtBQUNwQixnQkFBUTlsQixVQUFVeW9CLElBQVYsS0FBbUIxZ0IsU0FBcEIsS0FBb0MvSCxVQUFVeW9CLElBQVYsQ0FBZW5iLENBQWYsS0FBcUJ2RixTQUFyQixJQUFrQy9ILFVBQVV5b0IsSUFBVixDQUFlbmIsQ0FBZixLQUFxQixDQUF4RCxJQUNqQ3ROLFVBQVV5b0IsSUFBVixDQUFleEMsR0FBZixLQUF1QmxlLFNBQXZCLElBQW9DL0gsVUFBVXlvQixJQUFWLENBQWV4QyxHQUFmLEtBQXVCLENBRDdELENBQVA7QUFFSCxNQVZZO0FBV2IySCxvQkFBZSx5QkFBWTtBQUN2QixnQkFBTzV0QixVQUFVNnRCLElBQVYsS0FBbUI5bEIsU0FBbkIsSUFBZ0MvSCxVQUFVNnRCLElBQVYsQ0FBZTVnQixDQUFmLEtBQXFCLENBQTVEO0FBQ0gsTUFiWTtBQWNiek8sV0FBTSxnQkFBWTtBQUNkLGFBQUl3QixVQUFVSSxNQUFWLENBQWlCMGxCLFVBQWpCLE1BQWlDOWxCLFVBQVVJLE1BQVYsQ0FBaUJ3dEIsYUFBakIsRUFBckMsRUFBdUU7QUFDbkUsaUJBQUksT0FBTzd0QixPQUFPK3RCLFNBQWQsS0FBNEIsV0FBaEMsRUFBNkM7QUFDekM5dEIsMkJBQVVJLE1BQVYsQ0FBaUIydEIsVUFBakIsQ0FBNEJwc0IsUUFBNUIsRUFBc0MzQixVQUFVSSxNQUFWLENBQWlCNHFCLFNBQWpCLENBQTJCMkMsZ0JBQTNCLENBQTRDbHFCLEdBQWxGO0FBQ0g7QUFDSjtBQUNKLE1BcEJZO0FBcUJic3FCLGlCQUFZLG9CQUFVQyxHQUFWLEVBQWV6QixJQUFmLEVBQXFCMEIsUUFBckIsRUFBK0I7QUFDdkMsYUFBSWhoQixJQUFJK2dCLElBQUlwcUIsYUFBSixDQUFrQixRQUFsQixDQUFSO0FBQUEsYUFDSTBKLElBQUksT0FEUjtBQUFBLGFBRUlXLElBQUksT0FGUjtBQUdBaEIsV0FBRWloQixZQUFGLENBQWU1Z0IsQ0FBZixFQUFrQkEsQ0FBbEI7QUFDQUwsV0FBRWloQixZQUFGLENBQWVqZ0IsQ0FBZixFQUFrQkEsQ0FBbEI7QUFDQWhCLFdBQUVwSixJQUFGLEdBQVMsaUJBQVQ7QUFDQW9KLFdBQUU0QixHQUFGLEdBQVEwZCxJQUFSO0FBQ0EsYUFBSSxPQUFPMEIsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNoQ2hoQixlQUFFNEUsTUFBRixHQUFXb2MsUUFBWDtBQUNIO0FBQ0RELGFBQUlwc0Isb0JBQUosQ0FBeUIsTUFBekIsRUFBaUMsQ0FBakMsRUFBb0NvQyxXQUFwQyxDQUFnRGlKLENBQWhEO0FBQ0g7QUFqQ1ksRUFBakIsQzs7Ozs7Ozs7QUNBQTs7Ozs7QUFLQSxLQUFJa2hCLGFBQWEsV0FBakI7QUFDQSxLQUFJQyxZQUFZLEdBQWhCOztBQUVBLEtBQUlsdUIsUUFBUSxtQkFBQTdCLENBQVEsR0FBUixDQUFaOztBQUVBOzs7Ozs7QUFNQSxVQUFTeUcsU0FBVCxHQUFxQjtBQUNqQixZQUFPLENBQUNxcEIsVUFBRCxFQUFhRSxNQUFiLENBQW9CbkQsTUFBTXhlLFNBQU4sQ0FBZ0I0aEIsS0FBaEIsQ0FBc0IzaEIsSUFBdEIsQ0FBMkJ6SixTQUEzQixDQUFwQixFQUEyRHlCLElBQTNELENBQWdFeXBCLFNBQWhFLENBQVA7QUFDSDs7QUFFRDs7Ozs7O0FBTUEsVUFBUzVLLFVBQVQsR0FBc0I7QUFDbEIsU0FBSXJmLENBQUo7QUFBQSxTQUFPL0UsVUFBVSxFQUFqQjtBQUFBLFNBQXFCbXZCLE1BQU1yRCxNQUFNeGUsU0FBTixDQUFnQjRoQixLQUFoQixDQUFzQjNoQixJQUF0QixDQUEyQnpKLFNBQTNCLENBQTNCO0FBQ0EsVUFBS2lCLElBQUksQ0FBVCxFQUFZQSxJQUFJb3FCLElBQUlocUIsTUFBcEIsRUFBNEJKLEdBQTVCLEVBQWlDO0FBQzdCL0UsaUJBQVFxSyxJQUFSLENBQWEzRSxVQUFVMUIsS0FBVixDQUFnQixJQUFoQixFQUFzQmxELE1BQU1vTCxRQUFOLENBQWVpakIsSUFBSXBxQixDQUFKLENBQWYsSUFBeUIsQ0FBQ29xQixJQUFJcHFCLENBQUosQ0FBRCxDQUF6QixHQUFvQ29xQixJQUFJcHFCLENBQUosQ0FBMUQsQ0FBYjtBQUNIO0FBQ0QsWUFBTy9FLFFBQVF1RixJQUFSLENBQWEsR0FBYixDQUFQO0FBQ0g7O0FBRURwRSxRQUFPQyxPQUFQLEdBQWlCO0FBQ2JzRSxnQkFBV0EsU0FERTs7QUFHYjBlLGlCQUFZQSxVQUhDOztBQUtiOzs7Ozs7OztBQVFBRyxpQkFBWSxvQkFBVWxsQixNQUFWLEVBQWtCK3ZCLFlBQWxCLEVBQWdDO0FBQ3hDLGFBQUlDLFlBQVlELGdCQUFnQnp1QixNQUFoQztBQUNBLGFBQUlYLFVBQVUsRUFBZDs7QUFFQSxhQUFJWCxPQUFPbWxCLE9BQVAsRUFBSixFQUFzQjtBQUNsQnhrQixxQkFBUXFLLElBQVIsQ0FBYSxPQUFiO0FBQ0g7O0FBRUQsYUFBSWhMLE9BQU9zbkIsWUFBUCxFQUFKLEVBQTJCO0FBQ3ZCM21CLHFCQUFRcUssSUFBUixDQUFhLGFBQWI7QUFDSDs7QUFFRCxhQUFJZ2xCLFVBQVVod0IsTUFBVixJQUFvQmd3QixVQUFVaHdCLE1BQVYsQ0FBaUJpd0IsT0FBekMsRUFBa0Q7QUFDOUN0dkIscUJBQVFxSyxJQUFSLENBQWEsQ0FBQyxTQUFELEVBQVlnbEIsVUFBVWh3QixNQUFWLENBQWlCaXdCLE9BQTdCLENBQWI7QUFDSDs7QUFFRCxnQkFBT2xMLFdBQVdwZ0IsS0FBWCxDQUFpQixJQUFqQixFQUF1QmhFLE9BQXZCLENBQVA7QUFDSDtBQTlCWSxFQUFqQixDOzs7Ozs7OztBQ2xDQSxLQUFJTixXQUFXLG1CQUFBVCxDQUFRLEdBQVIsQ0FBZjtBQUNBLEtBQUlJLFNBQVMsbUJBQUFKLENBQVEsR0FBUixDQUFiOztBQUVBLEtBQUlpQixPQUFPLFNBQVBBLElBQU8sR0FBWTtBQUNuQjs7QUFFQTs7OztBQUlBLFVBQUtxdkIsU0FBTCxHQUFpQjtBQUNiLHNCQUFhLFVBREE7QUFFYixrQkFBUyxVQUZJO0FBR2IscUJBQVksVUFIQztBQUliLGlCQUFRLFVBSks7QUFLYixrQkFBUyxVQUxJO0FBTWIsb0JBQVcsVUFORTtBQU9iLG9CQUFXLFVBUEU7QUFRYixvQkFBVyxVQVJFO0FBU2Isa0JBQVMsVUFUSTtBQVViLG1CQUFVLFVBVkc7QUFXYixtQkFBVSxVQVhHO0FBWWIseUJBQWdCO0FBQ1osd0JBQVcsVUFEQztBQUVaLHVCQUFVLFVBRkU7QUFHWix1QkFBVSxVQUhFO0FBSVosd0JBQVcsVUFKQztBQUtaLHNCQUFTLFVBTEc7QUFNWix3QkFBVyxVQU5DO0FBT1oseUJBQVksVUFQQTtBQVFaLHVCQUFVLFVBUkU7QUFTWixzQkFBUyxVQVRHO0FBVVosc0JBQVMsVUFWRztBQVdaLDBCQUFhLFVBWEQ7QUFZWix3QkFBVyxVQVpDO0FBYVosdUJBQVUsVUFiRTtBQWNaLHNCQUFTLFVBZEc7QUFlWix3QkFBVyxVQWZDO0FBZ0JaLHVCQUFVLFVBaEJFO0FBaUJaLDJCQUFjLFVBakJGO0FBa0JaLHdCQUFXLFVBbEJDO0FBbUJaLHNCQUFTLFVBbkJHO0FBb0JaLHNCQUFTLFVBcEJHO0FBcUJaLHVCQUFVLFVBckJFO0FBc0JaLHVCQUFVLFVBdEJFO0FBdUJaLHdCQUFXLFVBdkJDO0FBd0JaLHFCQUFRLFVBeEJJO0FBeUJaLHdCQUFXO0FBQ1AseUJBQVEsVUFERDtBQUVQLHlCQUFRO0FBRkQsY0F6QkM7QUE2QlosMkJBQWMsVUE3QkY7QUE4QloseUJBQVk7QUFDUix5QkFBUSxVQURBO0FBRVIseUJBQVE7QUFGQTtBQTlCQTtBQVpILE1BQWpCO0FBZ0RILEVBdkREOztBQXlEQXJ2QixNQUFLb04sU0FBTCxDQUFla2lCLFNBQWYsR0FBMkIsVUFBU0MsYUFBVCxFQUF3QjtBQUMvQyxTQUFJRixZQUFZLEtBQUtBLFNBQXJCO0FBQ0EsU0FBSSxDQUFDRSxhQUFELElBQWtCQSxjQUFjdHFCLE1BQWQsS0FBeUIsQ0FBL0MsRUFBa0Q7QUFDOUMsZ0JBQU8sS0FBUDtBQUNIOztBQUVEO0FBQ0EsU0FBSTtBQUNBLGFBQUlKLENBQUosRUFBT0MsQ0FBUDtBQUNBLGNBQUtELElBQUksQ0FBSixFQUFPQyxJQUFJeXFCLGNBQWN0cUIsTUFBOUIsRUFBc0NKLElBQUlDLENBQTFDLEVBQTZDLEVBQUVELENBQS9DLEVBQWtEO0FBQzlDLGlCQUFJMlYsSUFBSStVLGNBQWMxcUIsQ0FBZCxDQUFSO0FBQ0EsaUJBQUl3cUIsVUFBVTVmLGNBQVYsQ0FBeUIrSyxDQUF6QixDQUFKLEVBQWlDO0FBQzdCNlUsNkJBQVlBLFVBQVU3VSxDQUFWLENBQVo7QUFDSCxjQUZELE1BRU87QUFDSDtBQUNIO0FBQ0o7QUFDSixNQVZELENBVUUsT0FBT3RNLENBQVAsRUFBVTtBQUNSO0FBQ0EsZ0JBQU8sS0FBS3NoQixnQkFBTCxDQUFzQkQsYUFBdEIsQ0FBUDtBQUNIOztBQUVELFNBQUlGLGNBQWMsT0FBT0EsU0FBUCxLQUFxQixRQUFyQixJQUFpQ0EscUJBQXFCbmpCLE1BQXBFLENBQUosRUFBaUY7QUFDN0UsZ0JBQU9takIsU0FBUCxDQUQ2RSxDQUMzRDtBQUNyQjs7QUFFRDtBQUNBLFlBQU8sS0FBS0csZ0JBQUwsQ0FBc0JELGFBQXRCLENBQVA7QUFDSCxFQTVCRDs7QUE4QkF2dkIsTUFBS29OLFNBQUwsQ0FBZW9pQixnQkFBZixHQUFrQyxVQUFVRCxhQUFWLEVBQXlCO0FBQ3ZELFNBQUlFLE1BQUo7QUFDQSxTQUFJLE9BQU8sS0FBS0osU0FBTCxDQUFlRSxjQUFjLENBQWQsQ0FBZixDQUFQLEtBQTRDLFdBQWhELEVBQTZEO0FBQ3pERSxrQkFBUyxLQUFLSixTQUFMLENBQWVFLGNBQWMsQ0FBZCxDQUFmLENBQVQ7QUFDSCxNQUZELE1BRU8sSUFBSSxPQUFPLEtBQUtGLFNBQUwsQ0FBZUUsY0FBYyxDQUFkLENBQWYsQ0FBUCxLQUE0QyxXQUFoRCxFQUE2RDtBQUNoRUUsa0JBQVMsS0FBS0osU0FBTCxDQUFlRSxjQUFjLENBQWQsQ0FBZixDQUFUO0FBQ0g7O0FBRUQsU0FBSUUsV0FBVyxPQUFPQSxNQUFQLEtBQWtCLFFBQWxCLElBQThCQSxrQkFBa0J2akIsTUFBM0QsQ0FBSixFQUF3RTtBQUNwRSxnQkFBT3VqQixNQUFQLENBRG9FLENBQ3JEO0FBQ2xCOztBQUVELFlBQU8sS0FBUDtBQUNILEVBYkQ7O0FBZUF6dkIsTUFBS29OLFNBQUwsQ0FBZXNZLFNBQWYsR0FBMkIsVUFBU2dLLGNBQVQsRUFBeUI7QUFDaEQsU0FBSWp2QixPQUFPQyxTQUFQLElBQW9CQSxVQUFVeW9CLElBQVYsQ0FBZXRvQixLQUFmLEtBQXlCLENBQTdDLElBQWtELENBQUMxQixPQUFPaWxCLFVBQVAsRUFBdkQsRUFBNEU7QUFDeEUsYUFBSXFMLFNBQVNDLGtCQUFrQixLQUFLSixTQUFMLENBQWU5dkIsU0FBU3FtQixXQUFULEVBQWYsQ0FBL0I7O0FBRUEsYUFBSTRKLE1BQUosRUFBWTtBQUNScHRCLHNCQUFTc1EsS0FBVCxDQUFlLG1DQUFtQzhjLE1BQW5DLEdBQTRDLGtFQUE1QyxHQUNULG1GQURTLEdBRVQsb0VBRlMsR0FHVCxrQkFIUyxHQUlULHVGQUpTLEdBS1QsMEZBTFMsR0FNVCwrRkFOUyxHQU9ULDJDQVBTLEdBUVQsNEZBUlMsR0FRc0ZBLE1BUnRGLEdBUStGLElBUi9GLEdBU1QsMEZBVFMsR0FVVCxXQVZTLEdBV1QsR0FYUyxHQVlUbnBCLG1CQUFtQixLQUFuQixDQVpTLEdBWW1CLFVBWmxDO0FBYUFqRSxzQkFBU3NRLEtBQVQsQ0FBZSxvQ0FDVCx1RkFEUyxHQUVULHlFQUZTLEdBR1Qsc0JBSFMsR0FJVCxvQ0FKUyxHQUtULG9DQUxTLEdBTVQsOENBTlMsR0FPVCw2REFQUyxHQVFULDJEQVJTLEdBU1QsZ0VBVFMsR0FVVCw4REFWUyxHQVdULDRCQVhTLEdBWVQsaUNBWlMsR0FhVCxtQkFiUyxHQWNULGVBZFMsR0FlVCw2Q0FmUyxHQWdCVCwwRkFoQlMsR0FpQlQsZUFqQlMsR0FrQlQsT0FsQlMsR0FtQlRyTSxtQkFBbUIsS0FBbkIsQ0FuQlMsR0FtQm1CLFVBbkJsQztBQW9CSDtBQUNKO0FBQ0osRUF4Q0Q7O0FBMENBckYsUUFBT0MsT0FBUCxHQUFpQmxCLElBQWpCLEM7Ozs7Ozs7O0FDbkpBLEtBQUl3akIsWUFBWSxtQkFBQXprQixDQUFRLEdBQVIsQ0FBaEI7QUFDQSxLQUFJMmtCLGNBQWMsbUJBQUEza0IsQ0FBUSxHQUFSLENBQWxCOztBQUVBLEtBQUlrQixZQUFZLFNBQVNBLFNBQVQsR0FBc0I7O0FBRWxDOztBQUVBLFVBQUswdkIsVUFBTCxHQUFrQixFQUFsQjtBQUNBLFVBQUtDLFVBQUwsR0FBa0IsRUFBbEI7QUFDQSxVQUFLQyxVQUFMLEdBQWtCO0FBQ2RDLGtCQUFRO0FBQ0pDLG9CQUFNO0FBQ0Ysb0JBQUUsRUFBRTtBQUNBaHVCLDRCQUFNO0FBQ0YsNEJBQUUsQ0FBQyxLQUFELEVBQU8sT0FBUCxFQUFlLFFBQWYsRUFBd0IsS0FBeEIsRUFBOEIsVUFBOUIsQ0FEQSxFQUM4QztBQUNoRCw0QkFBRSxDQUFDLEtBQUQsRUFBTyxNQUFQLEVBQWMsT0FBZCxFQUFzQixNQUF0QixFQUE2QixTQUE3QixFQUF1QyxVQUF2QyxFQUFrRCxTQUFsRCxFQUE0RCxVQUE1RCxFQUF1RSxNQUF2RSxFQUNFLFVBREYsRUFDYSxPQURiLEVBQ3FCLE1BRHJCLEVBQzRCLFNBRDVCLEVBQ3NDLFNBRHRDLEVBQ2dELFdBRGhELEVBQzRELE1BRDVELEVBQ21FLFFBRG5FLEVBRUUsT0FGRixFQUVVLFFBRlYsRUFFbUIsUUFGbkIsRUFFNEIsUUFGNUIsRUFFcUMsT0FGckMsQ0FGQSxDQUk4QztBQUo5QyxzQkFEUjtBQU9FNEgsNEJBQU07QUFQUixrQkFEQTtBQVVGLG9CQUFFO0FBQ0U1SCw0QkFBTTtBQUNGLDRCQUFFLENBQUMsT0FBRCxFQUFTLFdBQVQsRUFBcUIsYUFBckIsRUFBbUMsb0JBQW5DLEVBQXdELGNBQXhELEVBQ0UsVUFERixFQUNhLFVBRGI7QUFEQSxzQkFEUjtBQUtFNEgsNEJBQU07QUFMUjtBQVZBO0FBREYsVUFETTtBQXFCZHFtQixtQkFBUztBQUNMRCxvQkFBTTtBQUNGLG9CQUFFO0FBQ0VodUIsNEJBQU07QUFDRiw0QkFBRSxDQUFDLE1BQUQsRUFBUSxRQUFSLEVBQWlCLE1BQWpCLEVBQXdCLFFBQXhCLEVBQWlDLFFBQWpDLEVBQTBDLFFBQTFDLEVBQW1ELGFBQW5ELEVBQWlFLE1BQWpFLEVBQXdFLFVBQXhFLEVBQ0UsUUFERixFQUNXLFNBRFgsRUFDcUIsT0FEckIsRUFDNkIsWUFEN0IsRUFDMEMsVUFEMUMsRUFDcUQsVUFEckQsRUFDZ0UsUUFEaEUsRUFDeUUsT0FEekUsRUFFRSxPQUZGLEVBRVUsT0FGVixFQUVrQixRQUZsQixFQUUyQixVQUYzQixFQUVzQyxTQUZ0QyxFQUVnRCxhQUZoRCxFQUU4RCxVQUY5RCxFQUV5RSxRQUZ6RSxFQUdFLE1BSEYsRUFHUyxRQUhULEVBR2tCLE9BSGxCLEVBRzBCLE1BSDFCO0FBREEsc0JBRFI7QUFPRTRILDRCQUFNO0FBUFI7QUFEQTtBQURELFVBckJLO0FBa0Nkc21CLG9CQUFVO0FBQ05GLG9CQUFNO0FBQ0Ysb0JBQUU7QUFDRWh1Qiw0QkFBTTtBQUNGLDRCQUFFLENBQUMsVUFBRCxFQUFhLFVBQWIsRUFBeUIsTUFBekIsRUFBaUMsU0FBakMsRUFBNEMsU0FBNUMsRUFBdUQsU0FBdkQsRUFBa0UsTUFBbEUsRUFDRSxTQURGLEVBQ2EsU0FEYixFQUN3QixPQUR4QixFQUNpQyxZQURqQyxFQUMrQyxRQUQvQyxFQUN5RCxVQUR6RDtBQURBLHNCQURSO0FBS0U0SCw0QkFBTTtBQUxSO0FBREE7QUFEQTtBQWxDSSxNQUFsQjs7QUErQ0E7OztBQUdBLFVBQUt1bUIsY0FBTCxHQUFzQixVQUFTUCxVQUFULEVBQXFCO0FBQ3ZDLGFBQUksT0FBT0EsVUFBUCxLQUFzQixXQUF0QixJQUFxQ0EsZUFBZSxFQUF4RCxFQUE0RDtBQUN4RDtBQUNIO0FBQ0QsYUFBSXpoQixDQUFKO0FBQ0EsY0FBS0EsQ0FBTCxJQUFVeWhCLFVBQVYsRUFBc0I7QUFDbEIsaUJBQUlBLFdBQVdsZ0IsY0FBWCxDQUEwQnZCLENBQTFCLENBQUosRUFBa0M7QUFDOUJ3Viw2QkFBWXlNLFlBQVosQ0FBeUJSLFdBQVd6aEIsQ0FBWCxDQUF6QjtBQUNBO0FBQ0FzViwyQkFBVXRSLEdBQVYsQ0FBYyxVQUFkLEVBQTBCeWQsV0FBV3RxQixJQUFYLENBQWdCLEdBQWhCLENBQTFCO0FBQ0g7QUFDSjtBQUNEbWUsbUJBQVV0UixHQUFWLENBQWMsSUFBZCxFQUFvQnlkLFdBQVd0cUIsSUFBWCxDQUFnQixHQUFoQixDQUFwQjtBQUNILE1BYkQ7QUFlSCxFQXZFRDs7QUF5RUFwRixXQUFVbU4sU0FBVixDQUFvQmdqQixhQUFwQixHQUFvQyxZQUFXO0FBQzNDLFlBQU8sS0FBS1QsVUFBWjtBQUNILEVBRkQ7O0FBSUExdkIsV0FBVW1OLFNBQVYsQ0FBb0JpakIsYUFBcEIsR0FBb0MsWUFBVztBQUMzQyxZQUFPLEtBQUtULFVBQVo7QUFDSCxFQUZEOztBQUlBM3ZCLFdBQVVtTixTQUFWLENBQW9COEUsR0FBcEIsR0FBMEIsVUFBU29lLGVBQVQsRUFBMEI7QUFDaEQsU0FBSXZnQixDQUFKLEVBQ0lqTCxDQURKLEVBRUlpbkIsR0FGSixFQUdJd0UsYUFISixFQUlJQyxhQUpKO0FBS0FGLHVCQUFrQkEsZ0JBQWdCL29CLFdBQWhCLEVBQWxCO0FBQ0EsVUFBSXdrQixHQUFKLElBQVcsS0FBSzhELFVBQWhCLEVBQTRCO0FBQ3hCLGNBQUk5ZixDQUFKLElBQVMsS0FBSzhmLFVBQUwsQ0FBZ0I5RCxHQUFoQixFQUFxQmdFLEtBQTlCLEVBQXFDO0FBQ2pDUSw2QkFBZ0IsQ0FBaEI7QUFDQUMsNkJBQWdCLENBQWhCO0FBQ0Esa0JBQUkxckIsQ0FBSixJQUFTLEtBQUsrcUIsVUFBTCxDQUFnQjlELEdBQWhCLEVBQXFCZ0UsS0FBckIsQ0FBMkJoZ0IsQ0FBM0IsRUFBOEJoTyxLQUF2QyxFQUE4QztBQUMxQ3d1QjtBQUNBLHFCQUFJRSxNQUFNLElBQUkzdUIsTUFBSixDQUFXLEtBQUsrdEIsVUFBTCxDQUFnQjlELEdBQWhCLEVBQXFCZ0UsS0FBckIsQ0FBMkJoZ0IsQ0FBM0IsRUFBOEJoTyxLQUE5QixDQUFvQytDLENBQXBDLEVBQXVDTyxJQUF2QyxDQUE0QyxHQUE1QyxDQUFYLENBQVY7QUFDQSxxQkFBSW9yQixJQUFJanFCLElBQUosQ0FBUzhwQixlQUFULENBQUosRUFBK0I7QUFDM0JFO0FBQ0gsa0JBRkQsTUFFTztBQUNIO0FBQ0E7QUFDSDtBQUNKO0FBQ0QsaUJBQUksTUFBTUEsYUFBTixJQUF1QkQsa0JBQWtCQyxhQUE3QyxFQUE0RDtBQUN4RCxxQkFBRyxTQUFTLEtBQUtYLFVBQUwsQ0FBZ0I5RCxHQUFoQixFQUFxQmdFLEtBQXJCLENBQTJCaGdCLENBQTNCLEVBQThCcEcsS0FBMUMsRUFBaUQ7QUFDN0M7QUFDQSwwQkFBS2dtQixVQUFMLENBQWdCeGxCLElBQWhCLENBQXFCNGhCLEdBQXJCO0FBQ0gsa0JBSEQsTUFHTztBQUNIO0FBQ0EsMEJBQUs2RCxVQUFMLENBQWdCemxCLElBQWhCLENBQXFCNGhCLEdBQXJCO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7QUFDRCxVQUFLbUUsY0FBTCxDQUFvQixLQUFLUCxVQUF6QjtBQUNBLFlBQU8sSUFBUDtBQUNILEVBbENEOztBQW9DQTF1QixRQUFPQyxPQUFQLEdBQWlCakIsU0FBakIsQzs7Ozs7Ozs7QUN4SEEsS0FBSVQsV0FBVyxtQkFBQVQsQ0FBUSxHQUFSLENBQWY7QUFDQSxLQUFJNkIsUUFBUSxtQkFBQTdCLENBQVEsR0FBUixDQUFaOztBQUVBLEtBQUl5a0IsWUFBWSxFQUFoQjtBQUFBLEtBQ0lrTixhQUFhLEtBRGpCO0FBQUEsS0FFSUMsZUFBZTtBQUNYLFdBQVUsYUFEQztBQUVYLGNBQVU7QUFGQyxFQUZuQjs7QUFPQSxLQUFJQyxhQUFhLFNBQWJBLFVBQWEsQ0FBVUMsa0JBQVYsRUFBOEI7QUFDM0MsU0FBSSxnQkFBZ0JycUIsSUFBaEIsQ0FBcUJxcUIsbUJBQW1CN3JCLEtBQW5CLENBQXlCLEdBQXpCLEVBQThCLENBQTlCLEVBQWlDQSxLQUFqQyxDQUF1QyxHQUF2QyxFQUE0QyxDQUE1QyxDQUFyQixDQUFKLEVBQTBFO0FBQ3RFd2UsbUJBQVUsVUFBVixJQUF3QjFoQixPQUFPK1AsRUFBL0I7QUFDSDtBQUNKLEVBSkQ7O0FBTUEsS0FBSWlmLFdBQVcsU0FBWEEsUUFBVyxDQUFVRCxrQkFBVixFQUE4QjtBQUN6Q0EsMEJBQXFCQSxtQkFBbUI3ckIsS0FBbkIsQ0FBeUIsR0FBekIsRUFBOEIsQ0FBOUIsRUFBaUNBLEtBQWpDLENBQXVDLEdBQXZDLEVBQTRDLENBQTVDLENBQXJCO0FBQ0F3ZSxlQUFVLE9BQVYsSUFBc0IsY0FBY2hkLElBQWQsQ0FBbUJxcUIsa0JBQW5CLENBQUQsR0FBMkMsU0FBM0MsR0FBdUQsT0FBNUU7QUFDSCxFQUhEOztBQUtBLEtBQUlFLGVBQWUsU0FBZkEsWUFBZSxDQUFVRixrQkFBVixFQUE4QkcsU0FBOUIsRUFBeUM7QUFDeEQsU0FBSSxPQUFPeE4sVUFBVSxZQUFWLENBQVAsS0FBbUMsV0FBdkMsRUFBb0Q7QUFDaEQ7QUFDQSxhQUFJd04sYUFBYSxPQUFPQSxTQUFQLEtBQXFCLFFBQWxDLElBQThDTCxhQUFhSyxTQUFiLENBQWxELEVBQTJFO0FBQ3ZFeE4sdUJBQVUsWUFBVixJQUEwQm1OLGFBQWFLLFNBQWIsQ0FBMUI7QUFDSCxVQUZELE1BRU87QUFBRTtBQUNMSCxrQ0FBcUJBLG1CQUFtQjdyQixLQUFuQixDQUF5QixHQUF6QixFQUE4QixDQUE5QixFQUFpQ0EsS0FBakMsQ0FBdUMsR0FBdkMsRUFBNEMsQ0FBNUMsQ0FBckI7QUFDQXdlLHVCQUFVLFlBQVYsSUFBMkIsY0FBY2hkLElBQWQsQ0FBbUJxcUIsa0JBQW5CLENBQUQsR0FBMkMsT0FBM0MsR0FBcUQsT0FBL0U7QUFDSDtBQUNEO0FBQ0EsYUFBSSx5QkFBeUJycUIsSUFBekIsQ0FBOEJxcUIsa0JBQTlCLENBQUosRUFBdUQ7QUFDbkRyTix1QkFBVSxZQUFWLElBQTBCLFlBQTFCO0FBQ0g7QUFDSjtBQUNKLEVBZEQ7O0FBZ0JBLEtBQUlpRyxjQUFjLFNBQWRBLFdBQWMsQ0FBUzVaLFFBQVQsRUFBbUI7QUFDakM7QUFDQSxTQUFJb2hCLFdBQVdwaEIsU0FBUzlOLEtBQVQsQ0FBZSxtREFBZixDQUFmO0FBQ0EsU0FBR2t2QixRQUFILEVBQWE7QUFDVDtBQUNBLGFBQUlDLFNBQUo7QUFDQUEscUJBQVlELFNBQVMsQ0FBVCxFQUFZdnJCLE9BQVosQ0FBb0IsdUJBQXBCLEVBQTRDLEVBQTVDLENBQVo7QUFDQSxhQUFHd3JCLFVBQVVqc0IsTUFBVixHQUFtQixDQUFuQixJQUF3QmlzQixVQUFVanNCLE1BQVYsSUFBb0IsRUFBL0MsRUFBbUQ7QUFDL0N1ZSx1QkFBVSxVQUFWLElBQXdCMVUsT0FBT29pQixTQUFQLENBQXhCO0FBQ0gsVUFGRCxNQUVPO0FBQ0gxTix1QkFBVSxVQUFWLElBQXdCLEVBQXhCO0FBQ0g7QUFDSixNQVRELE1BU087QUFDSDtBQUNBQSxtQkFBVSxVQUFWLElBQXdCLFFBQXhCO0FBQ0g7QUFDSixFQWhCRDs7QUFrQkEsS0FBSTJOLG9CQUFvQixTQUFwQkEsaUJBQW9CLENBQVN0aEIsUUFBVCxFQUFtQjtBQUN2QyxTQUFJdWhCLFlBQWF2aEIsU0FBUzlOLEtBQVQsQ0FBZSw4REFBZixDQUFqQjtBQUNBLFNBQUlxdkIsU0FBSixFQUFlO0FBQ1g1TixtQkFBVSxpQkFBVixJQUErQjROLFVBQVUsQ0FBVixDQUEvQjtBQUNILE1BRkQsTUFFTztBQUNINU4sbUJBQVUsaUJBQVYsSUFBK0IsRUFBL0I7QUFDSDtBQUNKLEVBUEQ7O0FBU0E7QUFDQSxLQUFJNk4sU0FBUyxTQUFUQSxNQUFTLENBQVN2TixjQUFULEVBQXlCO0FBQ2xDLFNBQUlqZixDQUFKO0FBQUEsU0FDSXlzQixXQUFXLEVBRGY7QUFBQSxTQUVJQyxRQUZKO0FBQUEsU0FHSUMsUUFISjtBQUlBLFNBQUksT0FBTzFOLGVBQWVyZCxNQUF0QixLQUFpQyxXQUFyQyxFQUFrRDtBQUM5QytxQixvQkFBVzFOLGVBQWVyZCxNQUFmLENBQXNCckQsT0FBdEIsQ0FBOEIsV0FBOUIsQ0FBWDtBQUNBb2dCLG1CQUFVLEtBQVYsSUFBbUIsRUFBbkI7QUFDQSxhQUFJZ08sWUFBWSxDQUFoQixFQUFtQjtBQUNmQSx3QkFBVzFOLGVBQWVyZCxNQUFmLENBQXNCckQsT0FBdEIsQ0FBOEIsR0FBOUIsRUFBa0NvdUIsUUFBbEMsSUFBOEMsQ0FBekQ7QUFDQSxpQkFBSUEsV0FBVyxDQUFmLEVBQWtCO0FBQ2RELDRCQUFXek4sZUFBZXJkLE1BQWYsQ0FBc0JyRCxPQUF0QixDQUE4QixHQUE5QixFQUFrQ291QixRQUFsQyxDQUFYO0FBQ0EscUJBQUlELGFBQWEsQ0FBQyxDQUFsQixFQUFxQjtBQUNqQkEsZ0NBQVd6TixlQUFlcmQsTUFBZixDQUFzQnhCLE1BQWpDO0FBQ0g7QUFDRHFzQiw0QkFBV3hOLGVBQWVyZCxNQUFmLENBQXNCMEksU0FBdEIsQ0FBZ0NxaUIsUUFBaEMsRUFBeUNELFFBQXpDLEVBQW1EdnNCLEtBQW5ELENBQXlELEdBQXpELENBQVg7QUFDSDtBQUNKO0FBQ0QsY0FBS0gsSUFBSSxDQUFULEVBQVlBLElBQUl5c0IsU0FBU3JzQixNQUFiLElBQXVCSixJQUFJLEVBQXZDLEVBQTJDQSxHQUEzQyxFQUFnRDtBQUM1QzJlLHVCQUFVLEtBQVYsRUFBaUJyWixJQUFqQixDQUFzQm1uQixTQUFTenNCLENBQVQsQ0FBdEI7QUFDSDtBQUNKO0FBQ0osRUF0QkQ7O0FBd0JBLEtBQUk0c0IsdUJBQXVCLFNBQXZCQSxvQkFBdUIsQ0FBU0Msc0JBQVQsRUFBaUM7QUFDeEQsU0FBSS9oQixLQUFKO0FBQ0EsU0FBSW5RLFNBQVNvbEIsVUFBVCxDQUFvQixDQUFwQixNQUEyQixjQUEvQixFQUErQztBQUMzQ2pWLGlCQUFRK2hCLHVCQUF1QjFzQixLQUF2QixDQUE2QixHQUE3QixFQUFrQ3NGLEdBQWxDLEdBQXdDdEYsS0FBeEMsQ0FBOEMsR0FBOUMsQ0FBUjtBQUNBLGFBQUksT0FBTzJLLE1BQU0sQ0FBTixDQUFQLEtBQW9CLFdBQXhCLEVBQXFDO0FBQ2pDNlQsdUJBQVUsU0FBVixJQUF1QjdULE1BQU0sQ0FBTixLQUFZLE9BQU9BLE1BQU0sQ0FBTixDQUFQLEtBQW9CLFdBQXBCLEdBQWtDLE1BQUlBLE1BQU0sQ0FBTixDQUF0QyxHQUFpRCxFQUE3RCxDQUF2QjtBQUNIO0FBQ0RBLGVBQU1wRixLQUFOO0FBQ0FpWixtQkFBVSxPQUFWLElBQXFCN1QsTUFBTXRLLElBQU4sQ0FBVyxHQUFYLENBQXJCO0FBQ0g7QUFDSixFQVZEOztBQWFBLEtBQUlzc0Isa0JBQWtCLFNBQWxCQSxlQUFrQixDQUFTakgsT0FBVCxFQUFrQjtBQUNwQyxTQUFJa0gsZUFBZWxILFFBQVEzb0IsS0FBUixDQUFjLDhDQUFkLENBQW5CO0FBQ0EsU0FBSTZ2QixpQkFBaUIsSUFBakIsSUFDQSxPQUFPQSxhQUFhLENBQWIsQ0FBUCxLQUEyQixXQUQzQixJQUMwQ0EsYUFBYSxDQUFiLE1BQW9CLEVBRDlELElBRUEsT0FBT0EsYUFBYSxDQUFiLENBQVAsS0FBMkIsV0FGM0IsSUFFMENBLGFBQWEsQ0FBYixNQUFvQixFQUZsRSxFQUVzRTtBQUNsRWxCLHNCQUFhO0FBQ1Rqc0IsbUJBQU1tdEIsYUFBYSxDQUFiLENBREc7QUFFVGppQixvQkFBTy9PLE1BQU0rRCxVQUFOLENBQWlCaXRCLGFBQWEsQ0FBYixDQUFqQjtBQUZFLFVBQWI7QUFJQXBPLG1CQUFVLFNBQVYsSUFBdUJvTyxhQUFhLENBQWIsRUFBZ0Jsc0IsT0FBaEIsQ0FBd0IsSUFBeEIsRUFBOEIsRUFBOUIsQ0FBdkI7QUFDSCxNQVJELE1BUU87QUFDSDhkLG1CQUFVLFNBQVYsSUFBdUJrSCxPQUF2QjtBQUNIO0FBQ0osRUFiRDs7QUFlQXpwQixRQUFPQyxPQUFQLEdBQWlCO0FBQ2JoQyxXQUFNLGNBQVNnTSxjQUFULEVBQXlCNFksY0FBekIsRUFBeUNrTixTQUF6QyxFQUFvRDtBQUN0RHhOLG1CQUFVLFFBQVYsSUFBc0J0WSxlQUFlL0gsUUFBckM7QUFDQXl0QixvQkFBVzFsQixlQUFlekcsSUFBMUI7QUFDQXFzQixrQkFBUzVsQixlQUFlekcsSUFBeEI7QUFDQXNzQixzQkFBYTdsQixlQUFlekcsSUFBNUIsRUFBa0N1c0IsU0FBbEM7QUFDQXZILHFCQUFZM0YsZUFBZWpVLFFBQTNCO0FBQ0FzaEIsMkJBQWtCck4sZUFBZWpVLFFBQWpDO0FBQ0F3aEIsZ0JBQU92TixjQUFQO0FBQ0EyTiw4QkFBcUJ2bUIsZUFBZU0sUUFBcEM7QUFDSCxNQVZZO0FBV2JxbUIsYUFBUSxrQkFBVztBQUNmLGdCQUFPck8sU0FBUDtBQUNILE1BYlk7QUFjYnZSLFVBQUssYUFBVThaLEdBQVYsRUFBZTtBQUNoQixnQkFBUSxPQUFPdkksVUFBVXVJLEdBQVYsQ0FBUCxLQUEwQixXQUEzQixHQUEwQ3ZJLFVBQVV1SSxHQUFWLENBQTFDLEdBQTJELEtBQWxFO0FBQ0gsTUFoQlk7QUFpQmI3WixVQUFLLGFBQVM2WixHQUFULEVBQWNwaUIsS0FBZCxFQUFxQjtBQUN0QixhQUFJLE9BQU9vaUIsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQ3pCLGlCQUFJLE9BQU9BLEdBQVAsS0FBZSxXQUFmLElBQThCLE9BQU9waUIsS0FBUCxLQUFpQixXQUEvQyxJQUE4REEsVUFBVSxFQUE1RSxFQUFnRjtBQUM1RSxxQkFBSW9pQixRQUFRLFNBQVosRUFBdUI7QUFDbkI0RixxQ0FBZ0Job0IsS0FBaEI7QUFDSCxrQkFGRCxNQUVPO0FBQ0g2WiwrQkFBVXVJLEdBQVYsSUFBaUJwaUIsS0FBakI7QUFDSDtBQUNKO0FBQ0o7QUFDSixNQTNCWTtBQTRCYm1vQixlQUFVLGtCQUFTL0YsR0FBVCxFQUFjcGlCLEtBQWQsRUFBcUI7QUFDM0IsYUFBSSxPQUFPb2lCLEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUN6QixpQkFBSSxPQUFPdkksVUFBVXVJLEdBQVYsQ0FBUCxLQUEwQixXQUE5QixFQUEyQztBQUN2Q3ZJLDJCQUFVdUksR0FBVixJQUFpQixFQUFqQjtBQUNIO0FBQ0QsaUJBQUksT0FBT0EsR0FBUCxLQUFlLFdBQWYsSUFBOEIsT0FBT3BpQixLQUFQLEtBQWlCLFdBQS9DLElBQThEQSxVQUFVLEVBQTVFLEVBQWdGO0FBQzVFNlosMkJBQVV1SSxHQUFWLEVBQWU1aEIsSUFBZixDQUFvQlIsS0FBcEI7QUFDSDtBQUNKO0FBQ0osTUFyQ1k7QUFzQ2Jvb0Isc0JBQWlCLDJCQUFXO0FBQ3hCLGdCQUFPckIsVUFBUDtBQUNILE1BeENZO0FBeUNiL2xCLFFBQUcsYUFBVztBQUNWNlkscUJBQVksRUFBWjtBQUNBa04sc0JBQWEsS0FBYjtBQUNIO0FBNUNZLEVBQWpCLEM7Ozs7Ozs7O0FDckhBLEtBQUlzQixNQUFNLG1CQUFBanpCLENBQVEsR0FBUixFQUFrQixxQkFBbEIsQ0FBVjtBQUNBLEtBQUlrekIsU0FBUyxtQkFBQWx6QixDQUFRLEdBQVIsQ0FBYjtBQUNBLEtBQUltekIsVUFBVSxtQkFBQW56QixDQUFRLEdBQVIsQ0FBZDtBQUNBLEtBQUlvekIsWUFBWSxtQkFBQXB6QixDQUFRLEdBQVIsQ0FBaEI7QUFDQSxLQUFJcXpCLGFBQWEsbUJBQUFyekIsQ0FBUSxHQUFSLENBQWpCO0FBQ0EsS0FBSXN6QixTQUFTLG1CQUFBdHpCLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSXV6QixTQUFTLG1CQUFBdnpCLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSWtxQixTQUFTLG1CQUFBbHFCLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSXd6QixXQUFXLG1CQUFBeHpCLENBQVEsR0FBUixDQUFmO0FBQ0EsS0FBSVEsUUFBUSxtQkFBQVIsQ0FBUSxHQUFSLENBQVo7QUFDQSxLQUFJeXpCLGVBQWUsbUJBQUF6ekIsQ0FBUSxHQUFSLENBQW5COztBQUVBLEtBQUkwekIsZUFBZSxTQUFuQjs7QUFFQSxLQUFJQyxjQUFjLFNBQWRBLFdBQWMsR0FBWTtBQUMxQixTQUFJLE9BQU8xeUIsSUFBUCxLQUFnQixXQUFwQixFQUFpQztBQUM3QixhQUFJLE9BQU9BLEtBQUsyeUIsUUFBWixLQUF5QixXQUE3QixFQUEwQztBQUN0Q0MsdUJBQVVDLE1BQVYsR0FBbUJDLFlBQW5CLENBQWdDLEtBQWhDLEVBQXVDOXlCLEtBQUsyeUIsUUFBNUM7QUFDSDtBQUNELGFBQUksT0FBTzN5QixLQUFLK3lCLElBQVosS0FBcUIsV0FBekIsRUFBc0M7QUFDbENILHVCQUFVQyxNQUFWLEdBQW1CQyxZQUFuQixDQUFnQyxNQUFoQyxFQUF3Qzl5QixLQUFLK3lCLElBQTdDO0FBQ0g7QUFDREgsbUJBQVVDLE1BQVYsR0FBbUJDLFlBQW5CLENBQWdDLE9BQWhDLEVBQXlDN29CLG1CQUFtQi9HLFNBQVNDLFFBQTVCLENBQXpDO0FBQ0g7QUFDSixFQVZEOztBQVlBLEtBQUk2dkIsWUFBWSxTQUFaQSxTQUFZLENBQVVDLE1BQVYsRUFBa0I7QUFDOUIsU0FBSUMsS0FBSztBQUNMQyxrQkFBU2xCLE9BQU9tQixzQkFBUCxDQUE4QkgsTUFBOUI7QUFESixNQUFUO0FBR0E7QUFDQUMsUUFBR0csS0FBSCxHQUFZbkIsUUFBUSwwQkFBUixDQUFELEdBQXdDTyxlQUFlUSxNQUF2RCxHQUFnRUEsTUFBM0U7QUFDQSxZQUFPQyxFQUFQO0FBQ0gsRUFQRDs7QUFTQSxLQUFJSSwyQkFBMkIsU0FBM0JBLHdCQUEyQixHQUFZO0FBQ3ZDVixlQUFVVyxHQUFWLENBQWNwcEIsSUFBZCxDQUFtQixZQUFZO0FBQzNCeW9CLG1CQUFVQyxNQUFWLEdBQW1CMXFCLGdCQUFuQixDQUFvQyxpQkFBcEMsRUFBdUQsVUFBVUQsS0FBVixFQUFpQjtBQUNwRSxpQkFBSXNyQixPQUFPdHJCLE1BQU11ckIsSUFBTixDQUFXQyxZQUFYLENBQXdCLE1BQXhCLENBQVg7QUFDQUYsb0JBQU9BLEtBQUssQ0FBTCxFQUFROXRCLE9BQVIsQ0FBZ0IsU0FBaEIsRUFBMkIsRUFBM0IsQ0FBUDtBQUNBLGlCQUFJd3RCLEtBQUtkLFdBQVd1QixLQUFYLENBQWlCSCxJQUFqQixDQUFUO0FBQ0EsaUJBQUlJLGdCQUFnQjFyQixNQUFNdXJCLElBQU4sQ0FBV0ksZ0JBQVgsRUFBcEI7O0FBRUE3QixpQkFBSXdCLElBQUosRUFBVUksYUFBVixFQUF5QixTQUF6QixFQUFvQzFyQixNQUFNbVgsT0FBMUM7QUFDQSxpQkFBSTZULE1BQU1BLEdBQUdZLFVBQUgsRUFBVixFQUEyQjtBQUN2QjtBQUNIO0FBQ0RaLGdCQUFHYSxXQUFILENBQWUsSUFBZjtBQUNBYixnQkFBR2MsWUFBSCxDQUFnQjlyQixNQUFNMkksSUFBdEI7QUFDQXFpQixnQkFBR2UsYUFBSDtBQUNBNUIsb0JBQU9wTSxPQUFQLENBQWUsb0JBQWYsRUFBcUMyTixhQUFyQyxFQUFvRDFyQixNQUFNbVgsT0FBMUQ7QUFDSCxVQWREO0FBZUgsTUFoQkQ7QUFpQkgsRUFsQkQ7O0FBb0JBLEtBQUk2VSxjQUFjLFNBQWRBLFdBQWMsR0FBWTtBQUMxQixVQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNILEVBRkQ7O0FBSUFELGFBQVk5bUIsU0FBWixDQUFzQmxPLElBQXRCLEdBQTZCLFlBQVk7QUFDckMsU0FBSTtBQUNBLGFBQ0krcEIsT0FBT3hDLFlBQVAsTUFDQSxPQUFPbU0sU0FBUCxLQUFxQixXQUZ6QixFQUdFO0FBQ0VBLHVCQUFVVyxHQUFWLENBQWNwcEIsSUFBZCxDQUFtQixZQUFZO0FBQzNCLHFCQUFJcVosWUFBWTJPLFVBQVVOLE1BQVYsRUFBaEI7QUFDQSxxQkFBSTlGLEdBQUo7O0FBRUE2RywyQkFBVUMsTUFBVixHQUFtQkMsWUFBbkIsQ0FBZ0MsS0FBaEMsRUFBdUMsR0FBdkM7O0FBRUEscUJBQUlSLE9BQU84QixhQUFQLEVBQUosRUFBNEI7QUFDeEJ4QiwrQkFBVUMsTUFBVixHQUFtQkMsWUFBbkIsQ0FBZ0MsS0FBaEMsRUFBdUNSLE9BQU84QixhQUFQLEVBQXZDO0FBQ0g7QUFDRCxzQkFBS3JJLEdBQUwsSUFBWXZJLFNBQVosRUFBdUI7QUFDbkIseUJBQUlBLFVBQVUvVCxjQUFWLENBQXlCc2MsR0FBekIsS0FBaUN2SSxVQUFVdUksR0FBVixNQUFtQixFQUF4RCxFQUE0RDtBQUN4RDZHLG1DQUFVQyxNQUFWLEdBQW1CQyxZQUFuQixDQUFnQy9HLEdBQWhDLEVBQXFDdkksVUFBVXVJLEdBQVYsQ0FBckM7QUFDSDtBQUNKO0FBQ0Q2RywyQkFBVUMsTUFBVixHQUFtQkMsWUFBbkIsQ0FBZ0MsS0FBaEMsRUFBdUMsR0FBdkM7O0FBRUE7OztBQUdBSjs7QUFFQTtBQUNBLHFCQUFJSCxTQUFTM04sVUFBVCxDQUFvQixDQUFwQixNQUEyQixTQUEvQixFQUEwQztBQUN0Q2dPLCtCQUFVQyxNQUFWLEdBQW1CMXFCLGdCQUFuQixDQUFvQyxvQkFBcEMsRUFBMEQsVUFBVUQsS0FBVixFQUFpQjtBQUN2RSw2QkFBSW1zQixRQUFKLEVBQWNDLEVBQWQ7QUFDQSw2QkFBSXBzQixNQUFNdXJCLElBQU4sQ0FBV0ksZ0JBQVgsT0FBa0MsS0FBdEMsRUFBNkM7QUFDekNRLHdDQUFXaHlCLFNBQVNreUIsY0FBVCxDQUF3QixZQUF4QixFQUFzQ0YsUUFBakQ7QUFDQSxpQ0FBSUEsU0FBU0EsU0FBU3B2QixNQUFULEdBQWtCLENBQTNCLEVBQThCaEQsT0FBOUIsS0FBMEMsUUFBOUMsRUFBd0Q7QUFDcERxeUIsc0NBQUtELFNBQVNBLFNBQVNwdkIsTUFBVCxHQUFrQixDQUEzQixDQUFMO0FBQ0gsOEJBRkQsTUFFTztBQUNIcXZCLHNDQUFLRCxTQUFTQSxTQUFTcHZCLE1BQVQsR0FBa0IsQ0FBM0IsQ0FBTDtBQUNIO0FBQ0QxRixtQ0FBTW9HLGVBQU4sQ0FBc0Isb0JBQXFCaUYsS0FBS0MsS0FBTCxDQUFXeXBCLEdBQUdFLFlBQUgsR0FBa0IsR0FBN0IsSUFBb0MsR0FBL0U7QUFDSDtBQUNKLHNCQVhEO0FBWUg7O0FBRUQ7OztBQUdBNUIsMkJBQVVDLE1BQVYsR0FBbUI0QixtQkFBbkI7O0FBRUE7OztBQUdBLHFCQUFJLENBQUN2QyxRQUFRLDBCQUFSLENBQUwsRUFBMEM7QUFDdENVLCtCQUFVQyxNQUFWLEdBQW1CNkIsbUJBQW5CO0FBQ0gsa0JBRkQsTUFFTztBQUNILHlCQUFJeEMsUUFBUSx1Q0FBUixDQUFKLEVBQXNEO0FBQ2xEVSxtQ0FBVUMsTUFBVixHQUFtQnJJLGtCQUFuQjtBQUNIO0FBQ0Q4STtBQUNIO0FBRUosY0F0RGtCLENBc0RqQnR5QixJQXREaUIsQ0FzRFosSUF0RFksQ0FBbkI7QUF1REg7QUFDSixNQTdERCxDQTZERSxPQUFPa04sQ0FBUCxFQUFVO0FBQ1I4akIsYUFBSXRMLEtBQUosQ0FBVSxxQkFBVixFQUFpQ3hZLENBQWpDO0FBQ0g7QUFDSixFQWpFRDs7QUFtRUFnbUIsYUFBWTltQixTQUFaLENBQXNCMlksVUFBdEIsR0FBbUMsWUFBWTtBQUMzQyxTQUFJOztBQUVBLGFBQ0lrRCxPQUFPeEMsWUFBUCxNQUNBLE9BQU9tTSxTQUFQLEtBQXFCLFdBRHJCLElBRUFWLFFBQVEsWUFBUixFQUFzQnh4QixVQUFVdEIsT0FBaEMsQ0FISixFQUlFOztBQUVFLGlCQUFJZ3pCLFdBQVd1QyxVQUFYLE9BQTRCLENBQWhDLEVBQW1DO0FBQy9CO0FBQ0E7QUFDQS9CLDJCQUFVVyxHQUFWLENBQWNwcEIsSUFBZCxDQUFtQixZQUFZO0FBQzNCeW9CLCtCQUFVZ0MsY0FBVjtBQUNILGtCQUZEO0FBR0E7QUFDSDs7QUFFRGhDLHVCQUFVVyxHQUFWLENBQWNwcEIsSUFBZCxDQUFtQixZQUFZO0FBQzNCLHFCQUFJdEYsQ0FBSjtBQUFBLHFCQUNJZ3dCLE1BREo7QUFBQSxxQkFFSXRSLFNBQVMyTyxRQUFRLFlBQVIsRUFBc0J4eEIsVUFBVXRCLE9BQWhDLENBRmI7QUFBQSxxQkFHSXVuQixNQUFNeUwsV0FBV3hMLE1BQVgsRUFIVjs7QUFLQSxzQkFBSy9oQixDQUFMLElBQVU4aEIsR0FBVixFQUFlO0FBQ1gseUJBQUlBLElBQUlsWCxjQUFKLENBQW1CNUssQ0FBbkIsQ0FBSixFQUEyQjtBQUN2Qmd3QixrQ0FBUzdCLFVBQVVyTSxJQUFJOWhCLENBQUosRUFBT2l3QixPQUFQLEdBQWlCcHZCLE9BQWpCLENBQXlCK3NCLFlBQXpCLEVBQXVDLEVBQXZDLENBQVYsQ0FBVDtBQUNBLDZCQUFJb0MsVUFBVUEsT0FBT3hCLEtBQVAsQ0FBYWp3QixPQUFiLENBQXFCLFNBQXJCLE1BQW9DLENBQUMsQ0FBL0MsSUFBb0R5eEIsT0FBTzFCLE9BQVAsQ0FBZWx1QixNQUFmLEdBQXdCLENBQWhGLEVBQW1GO0FBQy9FLGtDQUFLa3ZCLEtBQUwsQ0FBV1UsT0FBT3hCLEtBQWxCLElBQTJCVCxVQUFVbUMsVUFBVixDQUN2QnhSLE1BRHVCLEVBRXZCc1IsT0FBTzFCLE9BRmdCLEVBR3ZCMEIsT0FBT3hCLEtBSGdCLEVBS3RCMkIsVUFMc0IsQ0FLWHBDLFVBQVVDLE1BQVYsRUFMVyxDQUEzQjtBQU1BLGtDQUFLc0IsS0FBTCxDQUFXVSxPQUFPeEIsS0FBbEIsRUFBeUJQLFlBQXpCLENBQXNDLE1BQXRDLEVBQThDK0IsT0FBT3hCLEtBQVAsQ0FBYTN0QixPQUFiLENBQXFCK3NCLFlBQXJCLEVBQW1DLEVBQW5DLENBQTlDO0FBQ0g7QUFDSjtBQUNKOztBQUVEOzs7QUFHQUwsNEJBQVc3TSxVQUFYLENBQXNCLGNBQXRCO0FBQ0FxTiwyQkFBVXFDLG1CQUFWLENBQThCL0MsUUFBUSxZQUFSLEVBQXNCeHhCLFVBQVV0QixPQUFoQyxDQUE5QixFQUF3RSxxQkFBeEUsRUFDSzQxQixVQURMLENBQ2dCcEMsVUFBVUMsTUFBVixFQURoQixFQUVLQyxZQUZMLENBRWtCLE1BRmxCLEVBRTBCLGNBRjFCOztBQUlBLHFCQUFJb0MsV0FBVzMwQixPQUFPNDBCLElBQVAsQ0FBWSxLQUFLaEIsS0FBakIsQ0FBZjtBQUNBZSwwQkFBUy9xQixJQUFULENBQWMscUJBQWQ7O0FBRUF5b0IsMkJBQVVnQyxjQUFWOztBQUVBdkMsd0JBQU9wTSxPQUFQLENBQWUsZUFBZixFQUFnQ2lQLFFBQWhDO0FBRUgsY0FwQ2tCLENBb0NqQmwwQixJQXBDaUIsQ0FvQ1osSUFwQ1ksQ0FBbkI7QUFxQ0g7QUFDSixNQXZERCxDQXVERSxPQUFPa04sQ0FBUCxFQUFVO0FBQ1I4akIsYUFBSXRMLEtBQUosQ0FBVSx1QkFBVixFQUFtQ3hZLENBQW5DO0FBQ0g7QUFDSixFQTNERDs7QUE2REE7Ozs7QUFJQWdtQixhQUFZOW1CLFNBQVosQ0FBc0Jnb0IsU0FBdEIsR0FBa0MsVUFBVS9CLEtBQVYsRUFBaUI7QUFDL0MsU0FBSUgsS0FBS2QsV0FBV3VCLEtBQVgsQ0FBaUJOLE1BQU0zdEIsT0FBTixDQUFjLFNBQWQsRUFBeUIsRUFBekIsQ0FBakIsQ0FBVDtBQUNBLFNBQUl3dEIsRUFBSixFQUFRO0FBQ0pOLG1CQUFVQyxNQUFWLEdBQW1Cd0MsT0FBbkIsQ0FBMkIsQ0FBQyxLQUFLbEIsS0FBTCxDQUFXZCxLQUFYLENBQUQsQ0FBM0I7QUFDQUgsWUFBR29DLHVCQUFIO0FBQ0gsTUFIRCxNQUdPO0FBQ0h0RCxhQUFJMXNCLElBQUosQ0FBUyxRQUFRK3RCLE1BQU0zdEIsT0FBTixDQUFjLFNBQWQsRUFBeUIsRUFBekIsQ0FBUixHQUF1QyxzQkFBaEQ7QUFDSDtBQUNKLEVBUkQ7O0FBVUE7OztBQUdBd3VCLGFBQVk5bUIsU0FBWixDQUFzQm1ZLFVBQXRCLEdBQW1DLFVBQVU4TixLQUFWLEVBQWlCa0MsTUFBakIsRUFBeUI7QUFDeEQsU0FBSXJDLEtBQUtkLFdBQVc3TSxVQUFYLENBQXNCOE4sS0FBdEIsQ0FBVDtBQUFBLFNBQ0ltQyxpQkFBaUJ2RCxPQUFPd0QsaUJBQVAsRUFEckI7O0FBR0EsU0FBSXZDLE1BQU0sQ0FBQ0EsR0FBR3dDLGdDQUFILENBQW9DLENBQUNILE1BQUQsQ0FBcEMsQ0FBUCxJQUF3REEsT0FBT255QixPQUFQLENBQWVveUIsY0FBZixLQUFrQyxDQUE5RixFQUFpRzs7QUFFN0Z4RCxhQUFJLHFCQUFxQnFCLEtBQXJCLEdBQTZCLGNBQTdCLEdBQThDa0MsTUFBbEQ7QUFDQTNDLG1CQUFVVyxHQUFWLENBQWNwcEIsSUFBZCxDQUFtQixZQUFZO0FBQzNCLGlCQUFJb1osU0FBUzJPLFFBQVEsWUFBUixFQUFzQnh4QixVQUFVdEIsT0FBaEMsQ0FBYjtBQUFBLGlCQUNJeTFCLFNBQVM3QixVQUFVRSxHQUFHNEIsT0FBSCxHQUFhcHZCLE9BQWIsQ0FBcUIrc0IsWUFBckIsRUFBbUMsRUFBbkMsQ0FBVixDQURiOztBQUdBLGtCQUFLMEIsS0FBTCxDQUFXVSxPQUFPeEIsS0FBbEIsSUFBMkJULFVBQVVtQyxVQUFWLENBQ3ZCeFIsTUFEdUIsRUFFdkJzUixPQUFPMUIsT0FGZ0IsRUFHdkIwQixPQUFPeEIsS0FIZ0IsRUFLdEIyQixVQUxzQixDQUtYcEMsVUFBVUMsTUFBVixFQUxXLENBQTNCO0FBTUEsa0JBQUtzQixLQUFMLENBQVdVLE9BQU94QixLQUFsQixFQUF5QlAsWUFBekIsQ0FBc0MsTUFBdEMsRUFBOEMrQixPQUFPeEIsS0FBUCxDQUFhM3RCLE9BQWIsQ0FBcUIrc0IsWUFBckIsRUFBbUMsRUFBbkMsQ0FBOUM7O0FBRUFELDBCQUFhYSxLQUFiLEVBQW9Ca0MsTUFBcEI7QUFDQTNDLHVCQUFVQyxNQUFWLEdBQW1Cd0MsT0FBbkIsQ0FBMkIsQ0FBQyxLQUFLbEIsS0FBTCxDQUFXVSxPQUFPeEIsS0FBbEIsQ0FBRCxDQUEzQjtBQUNBVCx1QkFBVStDLE9BQVYsQ0FBa0IsWUFBWXpDLEdBQUc0QixPQUFILEVBQTlCO0FBQ0E1QixnQkFBR29DLHVCQUFIOztBQUVBakQsb0JBQU9wTSxPQUFQLENBQWUsZUFBZixFQUFnQ29OLEtBQWhDO0FBQ0gsVUFsQmtCLENBa0JqQnJ5QixJQWxCaUIsQ0FrQlosSUFsQlksQ0FBbkI7QUFtQkgsTUF0QkQsTUFzQk87QUFDSGd4QixhQUFJMXNCLElBQUosQ0FBUyxRQUFRK3RCLE1BQU0zdEIsT0FBTixDQUFjLFNBQWQsRUFBeUIsRUFBekIsQ0FBUixHQUF1QyxvQ0FBdkMsR0FBOEU2dkIsTUFBOUUsR0FBdUYsSUFBaEc7QUFDSDtBQUNKLEVBN0JEOztBQStCQXJCLGFBQVk5bUIsU0FBWixDQUFzQitpQixZQUF0QixHQUFxQyxVQUFVcEUsR0FBVixFQUFlO0FBQ2hENkcsZUFBVVcsR0FBVixDQUFjcHBCLElBQWQsQ0FBbUIsWUFBWTtBQUMzQnlvQixtQkFBVUMsTUFBVixHQUFtQitDLG9CQUFuQixDQUF3QzdKLEdBQXhDO0FBQ0gsTUFGRDtBQUdILEVBSkQ7O0FBTUE5cUIsUUFBT0MsT0FBUCxHQUFpQixJQUFJZ3pCLFdBQUosRUFBakIsQzs7Ozs7Ozs7QUNqUEEsS0FBSS9PLFdBQUo7QUFBQSxLQUNJMFEsOEJBQThCLEVBRGxDO0FBQUEsS0FFSUMsMENBQTBDLEVBRjlDO0FBQUEsS0FHSUMsZUFBZSxLQUhuQjtBQUFBLEtBSUlDLGlCQUFpQixLQUpyQjtBQUFBLEtBS0lDLFlBTEo7QUFBQSxLQU1JVCxjQU5KO0FBQUEsS0FPSVUsb0JBQW9CLEVBUHhCO0FBQUEsS0FRSUMscUJBQXFCLEtBUnpCOztBQVVBLEtBQUk5MUIsTUFBTSxtQkFBQXRCLENBQVEsR0FBUixFQUFrQixnQkFBbEIsQ0FBVjtBQUNBLEtBQUllLFVBQVUsbUJBQUFmLENBQVEsR0FBUixDQUFkO0FBQ0EsS0FBSTZCLFFBQVEsbUJBQUE3QixDQUFRLEdBQVIsQ0FBWjs7QUFFQTs7O0FBR0EsVUFBU3EzQiw2QkFBVCxDQUF3Q2IsTUFBeEMsRUFBaUQ7QUFDN0MsU0FBSXhsQixDQUFKLEVBQ0kwakIsSUFESixFQUVJNEMsU0FGSjtBQUdBLFVBQUt0bUIsQ0FBTCxJQUFVd2xCLE1BQVYsRUFBa0I7QUFDZDMwQixlQUFNaUYsa0JBQU4sQ0FBeUIvRixRQUFRMEYsU0FBUixDQUFrQixPQUFsQixFQUEyQnVLLENBQTNCLENBQXpCO0FBQ0EsYUFBSSxDQUFDLE9BQU93bEIsT0FBT3hsQixDQUFQLEVBQVU5QixDQUFqQixLQUF1QixXQUF2QixJQUFzQ2tYLGVBQWVvUSxPQUFPeGxCLENBQVAsRUFBVTlCLENBQWhFLEtBQ0FrWCxlQUFlb1EsT0FBT3hsQixDQUFQLEVBQVVwQyxDQUQ3QixFQUVFO0FBQ0U2bkIsOEJBQWlCLENBQUV6bEIsQ0FBbkI7QUFDQWttQiw0QkFBZVYsT0FBT3hsQixDQUFQLENBQWY7O0FBRUEsaUJBQUksQ0FBQ2dtQixZQUFELElBQWlCLENBQUNDLGNBQXRCLEVBQXNDO0FBQ2xDRCxnQ0FBZUUsWUFBZjtBQUNBRCxrQ0FBaUJSLGNBQWpCO0FBQ0g7O0FBRUQ1MEIsbUJBQU1XLGVBQU4sQ0FBc0J6QixRQUFRMEYsU0FBUixDQUFrQixPQUFsQixFQUEyQmd3QixjQUEzQixDQUF0Qjs7QUFFQTtBQUNBLGtCQUFLL0IsSUFBTCxJQUFhd0MsYUFBYTlCLEtBQTFCLEVBQWlDO0FBQzdCK0IsbUNBQWtCekMsSUFBbEIsSUFBMEIsRUFBMUI7QUFDQSxzQkFBSzRDLFNBQUwsSUFBa0JKLGFBQWE5QixLQUFiLENBQW1CVixJQUFuQixDQUFsQixFQUE0QztBQUN4Qyx5QkFBS3RPLFdBQUQsSUFBaUI4USxhQUFhOUIsS0FBYixDQUFtQlYsSUFBbkIsRUFBeUI0QyxTQUF6QixFQUFvQyxDQUFwQyxDQUFyQixFQUE2RDtBQUN6REgsMkNBQWtCekMsSUFBbEIsRUFBd0J0cEIsSUFBeEIsQ0FBNkI4ckIsYUFBYTlCLEtBQWIsQ0FBbUJWLElBQW5CLEVBQXlCNEMsU0FBekIsQ0FBN0I7QUFDSDtBQUNKO0FBQ0o7QUFDSjtBQUNKO0FBQ0o7O0FBRUQsVUFBU0MsK0JBQVQsQ0FBMENwRCxFQUExQyxFQUE4QztBQUMxQyxTQUFJcUQsU0FBSjtBQUFBLFNBQ0lGLFlBQVkzMUIsVUFBVXRCLE9BQVYsQ0FBa0Jna0IsTUFBbEIsQ0FBeUJnUSxzQkFBekIsQ0FBZ0RGLEdBQUdzRCxTQUFILEVBQWhELENBRGhCO0FBQUEsU0FFSUMsU0FBVSxPQUFPdkQsR0FBR3dELE1BQVYsS0FBcUIsV0FBckIsS0FBcUN4RCxHQUFHd0QsTUFBSCxLQUFjLE9BQWQsSUFBeUJ4RCxHQUFHd0QsTUFBSCxLQUFjLFNBQTVFLENBQUQsR0FDSFosdUNBREcsR0FFSEQsMkJBSlY7O0FBTUEsVUFBS1UsWUFBWSxDQUFqQixFQUFvQkEsWUFBWUYsVUFBVXB4QixNQUExQyxFQUFrRHN4QixXQUFsRCxFQUErRDtBQUMzRDs7Ozs7QUFLQSxhQUFJM3JCLEtBQUsrckIsR0FBTCxDQUFTTixVQUFVRSxTQUFWLEVBQXFCLENBQXJCLElBQTBCckQsR0FBRzBELFFBQUgsRUFBbkMsS0FBcURILE1BQXJELElBQ0E3ckIsS0FBSytyQixHQUFMLENBQVNOLFVBQVVFLFNBQVYsRUFBcUIsQ0FBckIsSUFBMEJyRCxHQUFHMkQsaUJBQUgsRUFBbkMsS0FBOERKLE1BRGxFLEVBQzBFO0FBQ3RFLG9CQUFPLElBQVA7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsVUFBU0ssWUFBVCxDQUF1QjVELEVBQXZCLEVBQTJCO0FBQ3ZCLFlBQU9BLEdBQUc2RCxtQkFBSCxDQUF1QnZCLGNBQXZCLEtBQTBDYyxnQ0FBZ0NwRCxFQUFoQyxDQUFqRDtBQUNIOztBQUVELEtBQUk4RCw4QkFBOEIsU0FBOUJBLDJCQUE4QixDQUFVOUQsRUFBVixFQUFjO0FBQzVDLFNBQUl4eUIsVUFBVUMsU0FBVixJQUF1QixDQUFDdXlCLEdBQUcrRCxZQUEvQixFQUE2QztBQUN6QyxhQUFJSCxhQUFhNUQsRUFBYixDQUFKLEVBQXNCO0FBQ2xCN3lCLGlCQUFJc00sS0FBSixDQUFVLGlCQUFpQnVtQixHQUFHNEIsT0FBSCxFQUFqQixHQUFnQyx1QkFBMUM7QUFDQTVCLGdCQUFHZ0UsSUFBSDtBQUNILFVBSEQsTUFHTztBQUNINzJCLGlCQUFJc00sS0FBSixDQUFVLGtCQUFrQnVtQixHQUFHNEIsT0FBSCxFQUFsQixHQUFpQyx1QkFBM0M7QUFDQTVCLGdCQUFHaUUsSUFBSDtBQUNIO0FBQ0o7QUFDSixFQVZEOztBQVlBbDJCLFFBQU9DLE9BQVAsR0FBaUI7QUFDYmhDLFdBQU0sY0FBVXEyQixNQUFWLEVBQWtCO0FBQ3BCcFEsdUJBQWM5aUIsU0FBUyswQixlQUFULENBQXlCalMsV0FBdkMsQ0FEb0IsQ0FDZ0M7QUFDcERpUix1Q0FBOEJiLE1BQTlCO0FBQ0gsTUFKWTtBQUtiOzs7QUFHQThCLGFBQVEsZ0JBQVVDLElBQVYsRUFBZ0JDLEVBQWhCLEVBQW9CO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0gsTUE1Qlk7QUE2QmJuUyxxQkFBZ0Isd0JBQVVsUSxLQUFWLEVBQWlCO0FBQzdCaVEsdUJBQWNqUSxLQUFkO0FBQ0gsTUEvQlk7QUFnQ2J5USxxQkFBZ0IsMEJBQVk7QUFDeEIsZ0JBQU9SLFdBQVA7QUFDSCxNQWxDWTtBQW1DYnFTLHNCQUFpQiwyQkFBWTtBQUN6QixnQkFBT3ZCLFlBQVA7QUFDSCxNQXJDWTtBQXNDYlIsd0JBQW1CLDZCQUFZO0FBQzNCLGdCQUFPRCxjQUFQO0FBQ0gsTUF4Q1k7QUF5Q2I7OztBQUdBaUMsd0JBQW1CLDJCQUFVQyxPQUFWLEVBQW1CO0FBQ2xDbEMsMEJBQWlCa0MsT0FBakI7QUFDSCxNQTlDWTtBQStDYjs7OztBQUlBQywyQkFBc0IsZ0NBQVk7QUFDOUIsZ0JBQU96QixpQkFBUDtBQUNILE1BckRZO0FBc0RiOzs7OztBQUtBOUMsNkJBQXdCLGdDQUFVSSxJQUFWLEVBQWdCO0FBQ3BDLGFBQUksT0FBTzBDLGtCQUFrQjFDLElBQWxCLENBQVAsS0FBbUMsV0FBdkMsRUFBb0Q7QUFDaEQsb0JBQU8wQyxrQkFBa0IxQyxJQUFsQixDQUFQO0FBQ0gsVUFGRCxNQUVPLElBQUksT0FBTzBDLGtCQUFrQjFDLEtBQUt4RSxLQUFMLENBQVcsQ0FBWCxFQUFjd0UsS0FBS3B3QixPQUFMLENBQWEsR0FBYixDQUFkLENBQWxCLENBQVAsS0FBK0QsV0FBbkUsRUFBZ0Y7QUFDbkYsb0JBQU84eUIsa0JBQWtCMUMsS0FBS3hFLEtBQUwsQ0FBVyxDQUFYLEVBQWN3RSxLQUFLcHdCLE9BQUwsQ0FBYSxHQUFiLENBQWQsQ0FBbEIsQ0FBUDtBQUNIO0FBQ0QsZ0JBQU8sRUFBUDtBQUNILE1BbEVZO0FBbUVidzBCLHlCQUFvQiw0QkFBVXpELEtBQVYsRUFBaUI7QUFDakMsYUFBSVYsSUFBSjtBQUNBeUMsNkJBQW9CLEVBQXBCO0FBQ0EsY0FBS3pDLElBQUwsSUFBYVUsS0FBYixFQUFvQjtBQUNoQitCLCtCQUFrQnpDLElBQWxCLElBQTBCVSxNQUFNVixJQUFOLENBQTFCO0FBQ0g7QUFDSixNQXpFWTtBQTBFYmhQLG1CQUFjLHdCQUFZO0FBQ3RCMFIsOEJBQXFCLElBQXJCO0FBQ0gsTUE1RVk7QUE2RWI5ZSxZQUFPLGlCQUFZO0FBQ2YsYUFBSThlLGtCQUFKLEVBQXdCO0FBQ3BCOTFCLGlCQUFJc00sS0FBSixDQUFVLDhCQUFWLEVBQTBDLElBQTFDO0FBQ0E7QUFDSDs7QUFFRCxhQUFJO0FBQ0EsaUJBQUl1bUIsRUFBSjtBQUFBLGlCQUNJdk0sTUFBTWptQixVQUFVdEIsT0FBVixDQUFrQmtrQixVQUFsQixDQUE2QnNELE1BQTdCLEVBRFY7O0FBR0FsbUIsdUJBQVV0QixPQUFWLENBQWtCZ2tCLE1BQWxCLENBQXlCbGtCLElBQXpCLENBQThCd0IsVUFBVXRCLE9BQVYsQ0FBa0Jpa0IsV0FBbEIsQ0FBOEI2QixTQUE5QixFQUE5Qjs7QUFFQSxrQkFBS2dPLEVBQUwsSUFBV3ZNLEdBQVgsRUFBZ0I7QUFDWixxQkFBSUEsSUFBSWxYLGNBQUosQ0FBbUJ5akIsRUFBbkIsQ0FBSixFQUE0QjtBQUN4QjtBQUNBOEQsaURBQTRCclEsSUFBSXVNLEVBQUosQ0FBNUI7QUFDSDtBQUNKO0FBQ0osVUFaRCxDQVlFLE9BQU9obEIsQ0FBUCxFQUFVO0FBQ1I3TixpQkFBSXFtQixLQUFKLENBQVV4WSxDQUFWO0FBQ0g7QUFDSixNQWxHWTtBQW1HYjs7O0FBR0F2RCxRQUFHLGFBQVk7QUFDWHdyQiw4QkFBcUIsS0FBckI7QUFDQUYsd0JBQWUsRUFBZjtBQUNBVCwwQkFBaUIsQ0FBakI7QUFDQVUsNkJBQW9CLEVBQXBCO0FBQ0g7QUEzR1ksRUFBakIsQzs7Ozs7Ozs7OztBQ3JGQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQWoxQixRQUFPQyxPQUFQLEdBQWlCLFVBQVUyMkIsT0FBVixFQUFtQjtBQUNoQyxTQUFJaHpCLENBQUo7QUFBQSxTQUNJZ2YsR0FESjtBQUFBLFNBRUlsZ0IsT0FBT0MsU0FGWDtBQUFBLFNBR0lrMEIsWUFBWUQsUUFBUTd5QixLQUFSLENBQWMsR0FBZCxDQUhoQjtBQUFBLFNBSUkrQyxNQUFPcEUsS0FBSyxDQUFMLE1BQVksSUFBWixJQUFvQixRQUFPQSxLQUFLLENBQUwsQ0FBUCxNQUFtQixRQUF4QyxHQUFvREEsS0FBSyxDQUFMLENBQXBELEdBQThEbEQsTUFKeEU7QUFLQSxVQUFLb0UsSUFBSSxDQUFKLEVBQU9nZixNQUFNaVUsVUFBVTd5QixNQUE1QixFQUFvQ0osSUFBSWdmLEdBQXhDLEVBQTZDaGYsR0FBN0MsRUFBa0Q7QUFDOUMsYUFBSWtELElBQUkrdkIsVUFBVWp6QixDQUFWLENBQUosTUFBc0I0RCxTQUExQixFQUFxQztBQUNqQyxpQkFBSSxPQUFPOUUsS0FBSyxDQUFMLENBQVAsS0FBbUIsUUFBbkIsSUFBK0JBLEtBQUssQ0FBTCxNQUFZLFFBQS9DLEVBQXlEO0FBQ3JEb0UscUJBQUkrdkIsVUFBVWp6QixDQUFWLENBQUosSUFBb0IsRUFBcEI7QUFDSCxjQUZELE1BRU87QUFDSCx3QkFBTyxLQUFQLENBREcsQ0FDVztBQUNqQjtBQUNKLFVBTkQsTUFNTyxJQUFJLE9BQU9rRCxJQUFJK3ZCLFVBQVVqekIsQ0FBVixDQUFKLENBQVAsS0FBNkIsVUFBakMsRUFBNkM7QUFDaEQsaUJBQUksT0FBT2xCLEtBQUssQ0FBTCxDQUFQLEtBQW1CLFdBQW5CLElBQWtDQSxLQUFLLENBQUwsTUFBWSxJQUE5QyxJQUFzRG9FLElBQUkrdkIsVUFBVWp6QixDQUFWLENBQUosRUFBa0JsQixLQUFLLENBQUwsQ0FBbEIsTUFBK0I4RSxTQUF6RixFQUFvRztBQUNoRyx3QkFBT1YsSUFBSSt2QixVQUFVanpCLENBQVYsQ0FBSixFQUFrQmxCLEtBQUssQ0FBTCxDQUFsQixDQUFQO0FBQ0gsY0FGRCxNQUVPLElBQUlvRSxJQUFJK3ZCLFVBQVVqekIsQ0FBVixDQUFKLFFBQXdCNEQsU0FBNUIsRUFBdUM7QUFDMUMsd0JBQU9WLElBQUkrdkIsVUFBVWp6QixDQUFWLENBQUosR0FBUDtBQUNIO0FBQ0o7QUFDRGtELGVBQU1BLElBQUkrdkIsVUFBVWp6QixDQUFWLENBQUosQ0FBTjtBQUNIO0FBQ0QsWUFBT2tELEdBQVA7QUFDSCxFQXZCRCxDOzs7Ozs7OztBQ3RCQSxLQUFJZ3dCLFdBQVcsRUFBZjtBQUFBLEtBQ0lDLE9BREo7QUFBQSxLQUVJQyxXQUZKO0FBQUEsS0FHSUMsb0JBQW9CLEVBQUU7QUFDbEIsYUFBUztBQUNMLHFCQUFhLElBRFI7QUFFTCx1QkFBZSxJQUZWO0FBR0wsY0FBSztBQUhBLE1BRE87QUFNaEIsY0FBVTtBQUNOLGlCQUFTLElBREg7QUFFTixtQkFBVyxJQUZMO0FBR04scUJBQWEsSUFIUDtBQUlOLHFCQUFhLElBSlA7QUFLTix1QkFBZSxJQUxUO0FBTU4seUJBQWlCLElBTlg7QUFPTixxQkFBYSxJQVBQO0FBUU4sbUNBQTBCLElBUnBCO0FBU04sK0NBQXNDLElBVGhDO0FBVU4sY0FBSztBQVZDLE1BTk07QUFrQmhCLFVBQU07QUFDRixjQUFNO0FBREo7QUFsQlUsRUFIeEI7O0FBeUJJOzs7Ozs7Ozs7Ozs7QUFZQUMsWUFBVztBQUNQLGtCQUFhO0FBQ1QseUJBQWdCO0FBRFAsTUFETjtBQUlQLHFCQUFnQjtBQUNaLHlCQUFnQjtBQURKLE1BSlQ7QUFPUCxlQUFVO0FBQ04sOEJBQXFCLElBRGY7QUFFTix5QkFBZ0IsSUFGVjtBQUdOLHNCQUFhO0FBSFAsTUFQSDtBQVlQLGdCQUFXO0FBQ1AsbUJBQVUsU0FESDtBQUVQLHlCQUFnQixJQUZUO0FBR1AsMEJBQWlCLEtBSFY7QUFJUCxxQkFBWTtBQUpMLE1BWko7QUFrQlAsaUJBQVk7QUFDUixtQkFBVSxVQURGO0FBRVIseUJBQWdCLElBRlI7QUFHUiwwQkFBaUI7QUFIVCxNQWxCTDtBQXVCUCxjQUFTO0FBQ0w7QUFDQSxtQkFBVSxPQUZMO0FBR0wsc0JBQWE7QUFIUixNQXZCRjtBQTRCUCxlQUFVO0FBQ04sbUJBQVUsUUFESjtBQUVOLHlCQUFnQixJQUZWO0FBR04sc0JBQWE7QUFIUCxNQTVCSDtBQWlDUCxnQkFBVztBQUNQLG1CQUFVLFNBREg7QUFFUCx5QkFBZ0IsSUFGVDtBQUdQLGlCQUFRLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FIRDtBQUlQLHFCQUFZRDtBQUpMLE1BakNKO0FBdUNQLGVBQVU7QUFDTixtQkFBVSxRQURKO0FBRU4seUJBQWdCLElBRlY7QUFHTixpQkFBUSxDQUFDLEVBQUQsRUFBSSxFQUFKLENBSEY7QUFJTixvQkFBV0E7QUFKTCxNQXZDSDtBQTZDUCwrQkFBMEI7QUFDdEIsbUJBQVUsd0JBRFk7QUFFdEIseUJBQWdCO0FBRk0sTUE3Q25CO0FBaURQLHdCQUFtQjtBQUNmLG1CQUFVLGlCQURLO0FBRWYseUJBQWdCLEtBRkQ7QUFHZixpQkFBUSxDQUFDLEVBQUQsRUFBSSxFQUFKLENBSE87QUFJZixxQkFBWUE7QUFKRyxNQWpEWjtBQXVEUCxzQkFBaUI7QUFDYixtQkFBVSxTQURHO0FBRWIsc0JBQWE7QUFGQSxNQXZEVjtBQTJEUCx1QkFBa0I7QUFDZCxtQkFBVSxnQkFESTtBQUVkLHlCQUFnQixLQUZGO0FBR2QsaUJBQVEsQ0FBQyxFQUFELEVBQUksRUFBSixDQUhNO0FBSWQscUJBQVlBO0FBSkU7QUEzRFgsRUFyQ2Y7O0FBd0dBajNCLFFBQU9DLE9BQVAsR0FBaUI7QUFDYmszQixtQkFBYyxzQkFBVUMsU0FBVixFQUFxQjtBQUMvQkwsbUJBQVVLLFNBQVY7QUFDSCxNQUhZO0FBSWI7OztBQUdBOVMsaUJBQVksb0JBQVVpTyxJQUFWLEVBQWdCO0FBQ3hCLGFBQUk4RSxVQUFVNTNCLFVBQVVsQixRQUFWLENBQW1Cb2xCLFVBQW5CLENBQThCLENBQTlCLEtBQWtDLEdBQWhEO0FBQUEsYUFDSTJULGNBQWM3M0IsVUFBVWxCLFFBQVYsQ0FBbUJvbEIsVUFBbkIsQ0FBOEIsQ0FBOUIsS0FBa0MsR0FEcEQ7QUFBQSxhQUVJNFQsV0FBV0wsU0FBUzNFLElBQVQsS0FBa0IyRSxTQUFTM0UsSUFBVCxFQUFlLFVBQWYsQ0FBbEIsR0FBOEMyRSxTQUFTM0UsSUFBVCxFQUFlLFVBQWYsQ0FBOUMsR0FBMkUsS0FGMUY7QUFHQSxhQUFJZ0YsWUFBWUEsU0FBU0YsT0FBVCxDQUFaLElBQWlDLENBQUNFLFNBQVNGLE9BQVQsRUFBa0JDLFdBQWxCLENBQXRDLEVBQXFFO0FBQ2pFLG9CQUFPLEtBQVA7QUFDSDtBQUNELGFBQUkvRSxTQUFTLEVBQVQsSUFBZSxPQUFPdUUsU0FBU3ZFLElBQVQsQ0FBUCxLQUEwQixXQUE3QyxFQUEwRDtBQUN0RHVFLHNCQUFTdkUsSUFBVCxJQUFpQixJQUFJOXlCLFVBQVV0QixPQUFWLENBQWtCOHpCLEVBQXRCLENBQXlCTSxJQUF6QixDQUFqQjtBQUNBLGlCQUFJLE9BQU8yRSxTQUFTM0UsSUFBVCxDQUFQLEtBQTBCLFdBQTlCLEVBQTJDO0FBQ3ZDdUUsMEJBQVN2RSxJQUFULEVBQWVpRixTQUFmLENBQXlCTixTQUFTM0UsSUFBVCxDQUF6QjtBQUNILGNBRkQsTUFFTyxJQUFJLE9BQU8yRSxTQUFTM0UsS0FBS3hFLEtBQUwsQ0FBVyxDQUFYLEVBQWN3RSxLQUFLcHdCLE9BQUwsQ0FBYSxHQUFiLENBQWQsQ0FBVCxDQUFQLEtBQXNELFdBQTFELEVBQXVFO0FBQzFFMjBCLDBCQUFTdkUsSUFBVCxFQUFlaUYsU0FBZixDQUF5Qk4sU0FBUzNFLEtBQUt4RSxLQUFMLENBQVcsQ0FBWCxFQUFjd0UsS0FBS3B3QixPQUFMLENBQWEsR0FBYixDQUFkLENBQVQsQ0FBekI7QUFDSDtBQUNKO0FBQ0QsZ0JBQU8yMEIsU0FBU3ZFLElBQVQsQ0FBUDtBQUNILE1BdkJZO0FBd0Jia0YscUJBQWdCLHdCQUFVbEYsSUFBVixFQUFnQjtBQUM1QnlFLHVCQUFjekUsSUFBZDtBQUNILE1BMUJZO0FBMkJibUYscUJBQWdCLDBCQUFZO0FBQ3hCLGdCQUFPVixXQUFQO0FBQ0gsTUE3Qlk7QUE4QmJXLG1CQUFjLHdCQUFZO0FBQ3RCO0FBQ0EsYUFBSWw0QixVQUFVdkIsTUFBVixDQUFpQmdsQixRQUFqQixDQUEwQixLQUExQixDQUFKLEVBQXNDO0FBQ2xDLGlCQUFJLE9BQU84VCxXQUFQLEtBQXVCLFdBQXZCLElBQXNDRixTQUFTRSxXQUFULENBQTFDLEVBQWlFO0FBQzdELHdCQUFPRixTQUFTRSxXQUFULENBQVA7QUFDSDtBQUNELG9CQUFPO0FBQ0hZLGlDQUFnQiwwQkFBWSxDQUFFLENBRDNCO0FBRUhDLHVCQUFNLGdCQUFZLENBQUUsQ0FGakI7QUFHSEMsd0JBQU8saUJBQVksQ0FBRTtBQUhsQixjQUFQO0FBS0gsVUFURCxNQVNPO0FBQ0gsb0JBQU87QUFDSEQsdUJBQU0sZ0JBQVksQ0FBRSxDQURqQjtBQUVIQyx3QkFBTyxpQkFBWSxDQUFFO0FBRmxCLGNBQVA7QUFJSDtBQUNKLE1BL0NZO0FBZ0RicEYsWUFBTyxlQUFVSCxJQUFWLEVBQWdCO0FBQ25CLGFBQUksT0FBT3VFLFNBQVN2RSxJQUFULENBQVAsS0FBMEIsV0FBOUIsRUFBMkM7QUFDdkMsb0JBQU91RSxTQUFTdkUsSUFBVCxDQUFQO0FBQ0g7QUFDSixNQXBEWTtBQXFEYjVNLGFBQVEsa0JBQVk7QUFDaEIsZ0JBQU9tUixRQUFQO0FBQ0gsTUF2RFk7QUF3RGJwRCxpQkFBWSxzQkFBWTtBQUNwQixhQUFJbmEsQ0FBSjtBQUNBLGFBQUl3ZSxRQUFRLENBQVo7QUFDQSxjQUFLeGUsQ0FBTCxJQUFVdWQsUUFBVixFQUFvQjtBQUNoQixpQkFBSUEsU0FBU3RvQixjQUFULENBQXdCK0ssQ0FBeEIsQ0FBSixFQUFnQztBQUM1QndlO0FBQ0g7QUFDSjtBQUNELGdCQUFPQSxLQUFQO0FBQ0gsTUFqRVk7QUFrRWI7QUFDQXJ1QixRQUFHLGFBQVk7QUFDWG90QixvQkFBVyxFQUFYO0FBQ0FFLHVCQUFjeHZCLFNBQWQ7QUFDSDtBQXRFWSxFQUFqQixDOzs7Ozs7OztBQ3hHQTs7Ozs7O0FBTUEsS0FBSXd3QixZQUFZLEVBQWhCOztBQUVBaDRCLFFBQU9DLE9BQVAsR0FBaUI7O0FBRWI7Ozs7OztBQU1BZzRCLFNBQUksWUFBVWh4QixLQUFWLEVBQWlCaXhCLFFBQWpCLEVBQTJCO0FBQzNCLGFBQUl0MEIsQ0FBSjs7QUFFQSxhQUFJLE9BQU9zMEIsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNoQyxtQkFBTSxJQUFJQyxTQUFKLENBQWMsa0NBQWQsQ0FBTjtBQUNIOztBQUVELGFBQUlDLFNBQVNueEIsTUFBTWxELEtBQU4sQ0FBWSxHQUFaLENBQWI7QUFDQSxjQUFLSCxJQUFJLENBQVQsRUFBWUEsSUFBSXcwQixPQUFPcDBCLE1BQXZCLEVBQStCSixHQUEvQixFQUFvQztBQUNoQ28wQix1QkFBVUksT0FBT3gwQixDQUFQLENBQVYsSUFBdUJvMEIsVUFBVUksT0FBT3gwQixDQUFQLENBQVYsS0FBd0IsRUFBL0M7QUFDQW8wQix1QkFBVUksT0FBT3gwQixDQUFQLENBQVYsRUFBcUJzRixJQUFyQixDQUEwQmd2QixRQUExQjtBQUNIOztBQUVELGdCQUFPLElBQVA7QUFDSCxNQXRCWTs7QUF3QmI7Ozs7OztBQU1BbFQsY0FBUyxpQkFBVS9kLEtBQVYsRUFBaUI7QUFDdEIsYUFBSXJELENBQUo7O0FBRUEsYUFBSSxDQUFDbzBCLFVBQVV4cEIsY0FBVixDQUF5QnZILEtBQXpCLENBQUwsRUFBc0M7QUFDbEMsb0JBQU8sSUFBUDtBQUNIOztBQUVELGNBQUtyRCxJQUFJLENBQVQsRUFBWUEsSUFBSW8wQixVQUFVL3dCLEtBQVYsRUFBaUJqRCxNQUFqQyxFQUF5Q0osR0FBekMsRUFBOEM7QUFDMUNvMEIsdUJBQVUvd0IsS0FBVixFQUFpQnJELENBQWpCLEVBQW9CZixLQUFwQixDQUEwQixJQUExQixFQUFnQzhuQixNQUFNeGUsU0FBTixDQUFnQjRoQixLQUFoQixDQUFzQjNoQixJQUF0QixDQUEyQnpKLFNBQTNCLEVBQXNDLENBQXRDLENBQWhDO0FBQ0g7O0FBRUQsZ0JBQU8sSUFBUDtBQUNILE1BMUNZOztBQTRDYjs7Ozs7OztBQU9BMDFCLFVBQUssYUFBVXB4QixLQUFWLEVBQWlCaXhCLFFBQWpCLEVBQTJCO0FBQzVCLGFBQUksQ0FBQ0YsVUFBVXhwQixjQUFWLENBQXlCdkgsS0FBekIsQ0FBTCxFQUFzQztBQUNsQyxvQkFBTyxJQUFQO0FBQ0g7O0FBRUQsYUFBSSxPQUFPaXhCLFFBQVAsS0FBb0IsV0FBeEIsRUFBcUM7QUFDakMsb0JBQU9GLFVBQVUvd0IsS0FBVixDQUFQO0FBQ0Esb0JBQU8sSUFBUDtBQUNIOztBQUVELGdCQUFPK3dCLFVBQVUvd0IsS0FBVixFQUFpQjlFLE9BQWpCLENBQXlCKzFCLFFBQXpCLEtBQXNDLENBQTdDLEVBQWdEO0FBQzVDRix1QkFBVS93QixLQUFWLEVBQWlCeVksTUFBakIsQ0FBd0JzWSxVQUFVL3dCLEtBQVYsRUFBaUI5RSxPQUFqQixDQUF5QisxQixRQUF6QixDQUF4QixFQUE0RCxDQUE1RDtBQUNIOztBQUVELGFBQUlGLFVBQVUvd0IsS0FBVixFQUFpQmpELE1BQWpCLEtBQTRCLENBQWhDLEVBQW1DO0FBQy9CLG9CQUFPZzBCLFVBQVUvd0IsS0FBVixDQUFQO0FBQ0g7O0FBRUQsZ0JBQU8sSUFBUDtBQUNILE1BdEVZOztBQXdFYjs7O0FBR0FtSyxZQUFPLGlCQUFZO0FBQ2Y0bUIscUJBQVksRUFBWjtBQUNBLGdCQUFPLElBQVA7QUFDSDtBQTlFWSxFQUFqQixDOzs7Ozs7OztBQ1JBOzs7Ozs7OztBQVFBLEtBQUl6VixZQUFZLG1CQUFBemtCLENBQVEsR0FBUixDQUFoQjtBQUNBLEtBQUk2QixRQUFRLG1CQUFBN0IsQ0FBUSxHQUFSLENBQVo7QUFDQSxLQUFJSSxTQUFTLG1CQUFBSixDQUFRLEdBQVIsQ0FBYjtBQUNBLEtBQUl3NkIsbUJBQW1CLG1CQUFBeDZCLENBQVEsR0FBUixDQUF2Qjs7QUFFQSxLQUFJeTZCLFdBQVcsRUFBZjtBQUFBLEtBQ0lDLFNBQVMsUUFEYjtBQUFBLEtBRUlDLG9CQUFvQixTQUZ4QjtBQUFBLEtBR0lDLGdDQUFnQyxHQUhwQztBQUFBLEtBSUlDLGtCQUFrQix3QkFKdEI7QUFBQSxLQUtJQyxvQkFBb0IsVUFMeEI7QUFBQSxLQU1JcE0sVUFBVSxTQU5kO0FBQUEsS0FPSXFNLGNBQWMsU0FQbEI7QUFBQSxLQVFJQyxjQUFjLE9BUmxCO0FBQUEsS0FTSUMsa0JBQWtCLFNBVHRCO0FBQUEsS0FVSXpXLFNBQVNxVyxlQVZiO0FBQUEsS0FXSUssZUFBZSxLQVhuQjtBQUFBLEtBWUlDLFdBQVdSLGlCQVpmO0FBQUEsS0FhSVMsY0FBYyxFQWJsQjtBQUFBLEtBY0lDLGFBQWEsS0FkakI7QUFBQSxLQWVJQyxzQkFBc0IsS0FmMUI7QUFBQSxLQWdCSUMsZUFBZTtBQUNYO0FBQ0FDLFdBQU0sd0JBRks7QUFHWEMsVUFBSyx1QkFITTtBQUlYQyxlQUFVLG1DQUpDO0FBS1hDLGNBQVMsMkJBTEU7QUFNWGwwQixXQUFNLHlCQU5LO0FBT1g7QUFDQW0wQixrQkFBYSwrQkFSRjtBQVNYQyxpQkFBWSw4QkFURDtBQVVYQyxzQkFBaUIsbUNBVk47QUFXWEMscUJBQWdCLGtDQVhMO0FBWVhDLGtCQUFhLDZCQVpGO0FBYVg7QUFDQUMsa0JBQWEsZ0NBZEY7QUFlWEMsbUJBQWMsaUNBZkg7QUFnQlg7QUFDQUMsaUJBQVksZUFqQkQ7QUFrQlhDLGlCQUFZLG9CQWxCRDtBQW1CWDtBQUNBQyxvQkFBZSx1QkFwQko7QUFxQlhDLG9CQUFlO0FBckJKLEVBaEJuQjtBQUFBLEtBdUNJQywrQkFBK0I7QUFDM0JDLG1CQUFjLDRCQURhO0FBRTNCQyxtQkFBYyw0QkFGYTtBQUczQmIsa0JBQWEseUJBSGM7QUFJM0JJLGtCQUFhO0FBSmMsRUF2Q25DO0FBQUEsS0E2Q0lVLG1DQUFtQztBQUMvQkMsZUFBVTtBQURxQixFQTdDdkM7QUFBQSxLQWdESUMsNEJBQTRCO0FBQ3hCcEIsV0FBTSxtQkFEa0I7QUFFeEIvekIsV0FBTTtBQUZrQixFQWhEaEM7QUFBQSxLQW9ESW8xQixzQkFBc0I7QUFDbEIsK0RBQTBELDBCQUR4QztBQUVsQixrQ0FBNkI7QUFGWCxFQXBEMUI7QUFBQSxLQXdESXA4QixRQXhESjtBQUFBLEtBeURJcThCLFVBekRKO0FBQUEsS0EwREkzd0IsaUJBQWlCLEVBMURyQjs7QUE2REE7OztBQUdBLEtBQUk0d0IsaUJBQWlCLFNBQWpCQSxjQUFpQixDQUFVM1csV0FBVixFQUF1QjtBQUN4QyxTQUFJQSxjQUFjd1UsNkJBQWxCLEVBQWlEO0FBQzdDTyxvQkFBVyxRQUFYO0FBQ0gsTUFGRCxNQUVPO0FBQ0hBLG9CQUFXLFNBQVg7QUFDSDtBQUNKLEVBTkQ7O0FBUUE7Ozs7Ozs7O0FBUUEsS0FBSTZCLDhCQUE4QixTQUE5QkEsMkJBQThCLEdBQVk7QUFDMUMsU0FBSUMsZUFBZVAsaUNBQWlDSSxXQUFXLENBQVgsQ0FBakMsS0FBbURBLFdBQVcsQ0FBWCxDQUF0RTtBQUNBLFNBQUlBLFdBQVcsQ0FBWCxNQUFrQixVQUFsQixJQUFnQ0EsV0FBVyxDQUFYLE1BQWtCLFNBQXRELEVBQWlFO0FBQzdERyx5QkFBZ0JILFdBQVcsQ0FBWCxDQUFoQjtBQUNIOztBQUVELFNBQUkzQixhQUFhLFNBQWIsSUFBMEI4QixpQkFBZ0IsU0FBOUMsRUFBeUQ7QUFBRTtBQUN2REEsd0JBQWUsUUFBZjtBQUNIOztBQUVELFlBQU9BLFlBQVA7QUFDSCxFQVhEOztBQWFBOzs7OztBQUtBLEtBQUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBWTtBQUM1QixTQUFJQyxhQUFhLElBQUlwNkIsTUFBSixDQUFXLHNDQUFYLENBQWpCO0FBQUEsU0FDSWdGLFlBQVlsRyxNQUFNa0csU0FBTixFQURoQjtBQUFBLFNBRUlxMUIsaUJBQWlCdjdCLE1BQU1tRixpQkFBTixDQUF3QixTQUF4QixFQUFtQyxLQUFuQyxDQUZyQjtBQUFBLFNBR0lxMkIsZUFBZXg3QixNQUFNbUYsaUJBQU4sQ0FBd0IsTUFBeEIsRUFBZ0MsS0FBaEMsQ0FIbkI7QUFBQSxTQUlJczJCLGNBQWN6N0IsTUFBTW1GLGlCQUFOLENBQXdCLEtBQXhCLEVBQStCLEtBQS9CLENBSmxCOztBQU1BO0FBQ0EsU0FBSXMyQixXQUFKLEVBQWlCO0FBQ2JqQyxzQkFBYWlDLFdBQWI7QUFDSDtBQUNELFNBQUksQ0FBQ3o3QixNQUFNaUcsU0FBTixFQUFELElBQXNCczFCLGNBQTFCLEVBQTBDO0FBQ3RDO0FBQ0E1WSxrQkFBUzRZLGlCQUFpQixHQUExQjtBQUNBOUIsK0JBQXNCLElBQXRCO0FBQ0gsTUFKRCxNQUlPLElBQUkrQixpQkFBaUIsU0FBckIsRUFBZ0M7QUFDbkM3WSxrQkFBUytXLGFBQWFJLE9BQXRCO0FBQ0FMLCtCQUFzQixJQUF0QjtBQUNILE1BSE0sTUFHQSxJQUFJK0IsZ0JBQWdCLE9BQU85QixhQUFhOEIsWUFBYixDQUFQLEtBQXVDLFdBQTNELEVBQXdFO0FBQzNFO0FBQ0E3WSxrQkFBUytXLGFBQWE4QixZQUFiLENBQVQ7QUFDQS9CLCtCQUFzQixJQUF0QjtBQUVILE1BTE0sTUFLQSxJQUFJNzZCLFNBQVMsQ0FBVCxNQUFnQixjQUFoQixJQUFrQyxPQUFPcThCLFdBQVcsQ0FBWCxDQUFQLEtBQXlCLFdBQS9ELEVBQTRFO0FBQy9FO0FBQ0E7QUFDQXRZLGtCQUFTK1gsNkJBQTZCLENBQUN4MEIsWUFBWSxNQUFaLEdBQXFCLE1BQXRCLElBQWdDLEdBQWhDLEdBQXNDb3pCLFFBQW5FLElBQStFNkIsNkJBQS9FLEdBQStHLEdBQXhIO0FBRUgsTUFMTSxNQUtBLElBQUksWUFBWXYxQixJQUFaLENBQWlCcTFCLFdBQVcsQ0FBWCxDQUFqQixDQUFKLEVBQXFDO0FBQ3hDO0FBQ0F0WSxrQkFBVXpjLFlBQVl3ekIsYUFBYWEsVUFBekIsR0FBc0NiLGFBQWFZLFVBQTdEO0FBRUgsTUFKTSxNQUlBLElBQUlwMEIsU0FBSixFQUFlO0FBQ2xCO0FBQ0F5YyxrQkFBVTJXLGFBQWEsU0FBYixHQUF5QkksYUFBYTl6QixJQUF0QyxHQUE2Qzh6QixhQUFhUyxXQUFwRTtBQUVILE1BSk0sTUFJQSxJQUFJdjdCLFNBQVMsQ0FBVCxNQUFnQixVQUFwQixFQUFnQztBQUNuQztBQUNBK2pCLGtCQUFVMlcsYUFBYSxTQUFiLEdBQXlCSSxhQUFhRSxHQUF0QyxHQUE0Q0YsYUFBYU0sVUFBbkU7QUFFSCxNQUpNLE1BSUEsSUFBSSwwQ0FBMENwMEIsSUFBMUMsQ0FBK0NxMUIsV0FBVyxDQUFYLENBQS9DLENBQUosRUFBbUU7QUFDdEU7QUFDQSxhQUFJL1AsT0FBTytQLFdBQVcsQ0FBWCxFQUFjbjJCLE9BQWQsQ0FBc0IsT0FBdEIsRUFBK0IsTUFBL0IsQ0FBWDtBQUNBNmQsa0JBQVNvWSwwQkFBMkI3MEIsWUFBWSxNQUFaLEdBQXFCLE1BQWhELElBQTJEZ2xCLElBQTNELEdBQWtFLEdBQTNFO0FBRUgsTUFMTSxNQUtBLElBQUlvUSxXQUFXMTFCLElBQVgsQ0FBZ0IwRSxlQUFlekcsSUFBL0IsQ0FBSixFQUEwQztBQUM3QztBQUNBOGUsa0JBQVUyVyxhQUFhLFNBQWIsR0FBeUJJLGFBQWFDLElBQXRDLEdBQTZDRCxhQUFhSyxXQUFwRTtBQUVILE1BSk0sTUFJQSxJQUFJLHdDQUF3Q24wQixJQUF4QyxDQUE2QzBFLGVBQWV6RyxJQUE1RCxDQUFKLEVBQXVFO0FBQzFFO0FBQ0E4ZSxrQkFBVTJXLGFBQWEsU0FBYixHQUF5QkksYUFBYUcsUUFBdEMsR0FBaURILGFBQWFPLGVBQXhFO0FBRUgsTUFKTSxNQUlBO0FBQ0g7QUFDQXRYLGtCQUFVMlcsYUFBYSxRQUFiLEdBQXdCSSxhQUFhSyxXQUFyQyxHQUFtRGYsZUFBN0Q7QUFDSDtBQUNKLEVBekREOztBQTJEQTs7OztBQUlBLEtBQUkwQywwQkFBMEIsU0FBMUJBLHVCQUEwQixHQUFZO0FBQ3RDLFNBQUl6M0IsQ0FBSjtBQUFBLFNBQ0kwM0IsT0FESjtBQUFBLFNBRUlDLEVBRko7QUFBQSxTQUdJMXdCLE1BQU0rdEIsaUJBSFY7QUFBQSxTQUlJNEMsVUFBVSxNQUFNWixXQUFXeDJCLElBQVgsQ0FBZ0IsR0FBaEIsQ0FKcEI7O0FBTUEsU0FBSSxPQUFPdzJCLFVBQVAsS0FBc0IsV0FBdEIsSUFBcUNBLFdBQVc1MkIsTUFBWCxLQUFzQixDQUEzRCxJQUFnRTQyQixXQUFXLENBQVgsTUFBa0JwTyxPQUF0RixFQUErRjs7QUFFM0Y7QUFDQSxjQUFLNW9CLElBQUksQ0FBVCxFQUFZQSxJQUFJLENBQWhCLEVBQW1CQSxHQUFuQixFQUF3QjtBQUNwQmczQix3QkFBV2gzQixDQUFYLElBQWlCLE9BQU9nM0IsV0FBV2gzQixDQUFYLENBQVAsS0FBeUIsV0FBekIsR0FBdUMsRUFBdkMsR0FBNENnM0IsV0FBV2gzQixDQUFYLENBQTdEO0FBQ0FyRixzQkFBU3FGLENBQVQsSUFBZSxPQUFPckYsU0FBU3FGLENBQVQsQ0FBUCxLQUF1QixXQUF2QixHQUFxQyxFQUFyQyxHQUEwQ3JGLFNBQVNxRixDQUFULENBQXpEO0FBQ0g7QUFDRDtBQUNBLGNBQUswM0IsT0FBTCxJQUFnQlgsbUJBQWhCLEVBQXFDO0FBQ2pDWSxrQkFBSyxJQUFJMTZCLE1BQUosQ0FBV3k2QixPQUFYLENBQUw7QUFDQSxpQkFBSUMsR0FBR2gyQixJQUFILENBQVFpMkIsT0FBUixDQUFKLEVBQXNCO0FBQ2xCO0FBQ0E7QUFDQTN3Qix1QkFBTTh2QixvQkFBb0JXLE9BQXBCLEVBQTZCNzJCLE9BQTdCLENBQXFDLElBQXJDLEVBQTJDNUQsT0FBTytQLEVBQWxELEVBQXNEbk0sT0FBdEQsQ0FBOEQsSUFBOUQsRUFBb0U1RCxPQUFPNDZCLEVBQTNFLENBQU47QUFDQTtBQUNIO0FBQ0o7QUFDRDtBQUNBLGFBQUk1d0IsUUFBUSt0QixpQkFBWixFQUErQjtBQUMzQixpQkFBSWdDLFdBQVcsQ0FBWCxNQUFrQixVQUF0QixFQUFrQztBQUM5QjtBQUNBL3ZCLHVCQUFNLGtCQUFOO0FBQ0gsY0FIRCxNQUdPLElBQUkrdkIsV0FBVyxDQUFYLE1BQWtCLEVBQXRCLEVBQTBCO0FBQzdCO0FBQ0EvdkIsdUJBQU0rdkIsV0FBVyxDQUFYLElBQWdCLGVBQXRCO0FBQ0FBLDRCQUFXLENBQVgsSUFBZ0IsVUFBaEI7QUFDSCxjQUpNLE1BSUEsSUFBSUEsV0FBVyxDQUFYLE1BQWtCLE1BQWxCLElBQTRCcjhCLFNBQVMsQ0FBVCxNQUFnQixPQUE1QyxJQUF1REEsU0FBUyxDQUFULE1BQWdCLEVBQTNFLEVBQStFO0FBQ2xGO0FBQ0E7QUFDQXNNLHVCQUFNK3ZCLFdBQVcsQ0FBWCxJQUFnQixHQUFoQixHQUFzQnI4QixTQUFTLENBQVQsQ0FBdEIsR0FBb0MsVUFBMUM7QUFDSCxjQUpNLE1BSUEsSUFBSXE4QixXQUFXLENBQVgsTUFBa0IsaUJBQXRCLEVBQXlDO0FBQzVDO0FBQ0E7QUFDQS92Qix1QkFBTSt2QixXQUFXLENBQVgsSUFBZ0IsR0FBaEIsSUFBdUJBLFdBQVcsQ0FBWCxNQUFrQixFQUFsQixHQUF1QixNQUF2QixHQUFnQ0EsV0FBVyxDQUFYLENBQXZELENBQU47QUFDSCxjQUpNLE1BSUEsSUFBSUEsV0FBVyxDQUFYLE1BQWtCLFVBQWxCLElBQWdDQSxXQUFXLENBQVgsTUFBa0IsU0FBdEQsRUFBaUU7QUFDcEU7QUFDQS92Qix1QkFBTSt2QixXQUFXLENBQVgsSUFBZ0JBLFdBQVcsQ0FBWCxDQUFoQixHQUFnQyxHQUFoQyxJQUF1Q0EsV0FBVyxDQUFYLE1BQWtCLEVBQWxCLEdBQXVCLE1BQXZCLEdBQWdDQSxXQUFXLENBQVgsQ0FBdkUsSUFBd0YsVUFBOUY7QUFDSCxjQUhNLE1BR0E7QUFDSDtBQUNBO0FBQ0EvdkIsdUJBQU0rdkIsV0FBVyxDQUFYLElBQWdCLEdBQWhCLEdBQXNCQSxXQUFXLENBQVgsQ0FBdEIsR0FBc0MsVUFBNUM7QUFDSDtBQUNKO0FBQ0RyWSxtQkFBVXRSLEdBQVYsQ0FBYzRuQixXQUFkLEVBQTJCK0IsV0FBVyxDQUFYLENBQTNCO0FBQ0FyWSxtQkFBVXRSLEdBQVYsQ0FBYzZuQixXQUFkLEVBQTJCOEIsV0FBVyxDQUFYLENBQTNCO0FBQ0FyWSxtQkFBVXRSLEdBQVYsQ0FBYzhuQixlQUFkLEVBQStCNkIsV0FBVyxDQUFYLENBQS9CO0FBQ0g7QUFDRCxZQUFPL3ZCLElBQUlwRyxPQUFKLENBQVksR0FBWixFQUFpQixFQUFqQixDQUFQO0FBQ0gsRUF2REQ7O0FBeURBOzs7OztBQUtBLEtBQUlpM0IsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBVS9XLHFCQUFWLEVBQWlDO0FBQ3BELFNBQUksT0FBT0EscUJBQVAsS0FBaUMsV0FBakMsSUFBZ0RBLDBCQUEwQixzQkFBOUUsRUFBc0c7QUFDbEcsYUFBSXVELE9BQU8sS0FBS3lULGVBQUwsQ0FBcUIxeEIsZUFBZU0sUUFBcEMsRUFBOEMrdEIsaUJBQWlCc0QsS0FBL0QsQ0FBWDtBQUNBMUMsdUJBQWNoUixLQUFLMlQsSUFBbkI7QUFDSCxNQUhELE1BR08sSUFBSSxPQUFPbFgscUJBQVAsS0FBaUMsV0FBckMsRUFBa0Q7QUFDckR1VSx1QkFBY3ZVLHFCQUFkO0FBQ0gsTUFGTSxNQUVBO0FBQ0h1VSx1QkFBY21DLHlCQUFkO0FBQ0g7QUFDSixFQVREOztBQVdBcjdCLFFBQU9DLE9BQVAsR0FBaUI7QUFDYmhDLFdBQU0sY0FBVWltQixXQUFWLEVBQXVCUyxxQkFBdkIsRUFBOENtWCxlQUE5QyxFQUErRHhOLGFBQS9ELEVBQThFO0FBQ2hGcmtCLDBCQUFpQi9MLE9BQU9pSCxpQkFBUCxFQUFqQjtBQUNBNUcsb0JBQVcrdkIsYUFBWDtBQUNBc00sc0JBQWFrQixlQUFiO0FBQ0EsYUFBSSxPQUFPNVgsV0FBUCxLQUF1QixRQUEzQixFQUFxQztBQUNqQzJXLDRCQUFlM1csV0FBZjtBQUNIO0FBQ0Q4VztBQUNBVSwwQkFBaUIvVyxxQkFBakI7QUFDSCxNQVZZO0FBV2IzVCxVQUFLLGVBQVk7QUFDYixhQUFJZ29CLGlCQUFpQixLQUFyQixFQUE0QjtBQUN4QixvQkFBT1IsU0FBU2xXLE1BQVQsR0FBa0I0VyxXQUF6QjtBQUNILFVBRkQsTUFFTyxJQUFJRSx3QkFBd0IsSUFBNUIsRUFBa0M7QUFDckMsb0JBQU9aLFNBQVNsVyxNQUFULElBQW1CMFcsYUFBYTcyQixPQUFiLENBQXFCLEdBQXJCLE1BQThCLENBQUMsQ0FBL0IsR0FBbUM2MkIsYUFBYWoxQixLQUFiLENBQW1CLEdBQW5CLEVBQXdCLENBQXhCLENBQW5DLEdBQWdFLE1BQU02MEIsaUJBQXpGLENBQVA7QUFDSCxVQUZNLE1BRUE7QUFDSCxvQkFBT0osU0FBU1EsWUFBVCxJQUF5QkEsYUFBYTcyQixPQUFiLENBQXFCLEdBQXJCLE1BQThCLENBQUMsQ0FBL0IsR0FBbUMsRUFBbkMsR0FBd0MsTUFBTXkyQixpQkFBdkUsQ0FBUDtBQUNIO0FBQ0osTUFuQlk7QUFvQmJtRCxhQUFRLGdCQUFVQyxXQUFWLEVBQXVCO0FBQzNCN0Msc0JBQWE2QyxXQUFiO0FBQ0gsTUF0Qlk7QUF1QmJDLGdCQUFXLG1CQUFVQyxjQUFWLEVBQTBCO0FBQ2pDLGFBQUksT0FBT0EsY0FBUCxLQUEwQixXQUE5QixFQUEyQztBQUN2QyxpQkFBSSxnQkFBZ0IsT0FBTzdDLGFBQWE2QyxjQUFiLENBQTNCLEVBQTBEO0FBQ3RENVosMEJBQVMrVyxhQUFhNkMsY0FBYixDQUFUO0FBQ0g7QUFDRCxpQkFBSSxnRUFBZ0UzMkIsSUFBaEUsQ0FBcUUyMkIsY0FBckUsQ0FBSixFQUEwRjtBQUN0RmxELGdDQUFla0QsY0FBZjtBQUNIO0FBQ0o7QUFDSixNQWhDWTtBQWlDYi9JLG9CQUFlLHlCQUFZO0FBQ3ZCLGdCQUFPZ0csVUFBUDtBQUNILE1BbkNZO0FBb0NiL1QsaUJBQVksc0JBQVk7QUFDcEIsZ0JBQU85QyxPQUFPNlosUUFBUCxDQUFnQixHQUFoQixJQUF1QjdaLE9BQU9uZSxNQUFQLENBQWMsQ0FBZCxFQUFpQm1lLE9BQU90ZSxNQUFQLEdBQWdCLENBQWpDLENBQXZCLEdBQTZEc2UsTUFBcEU7QUFDSCxNQXRDWTtBQXVDYmdELHFCQUFnQiwwQkFBWTtBQUN4QixnQkFBTzRULFdBQVA7QUFDSCxNQXpDWTtBQTBDYjs7OztBQUlBeUMsc0JBQWlCLHlCQUFVbjRCLElBQVYsRUFBZ0JxNEIsSUFBaEIsRUFBc0I7QUFDbkMsYUFBSS9zQixDQUFKLEVBQU9nTCxDQUFQO0FBQ0EsYUFBSSxDQUFDLGdCQUFnQixPQUFPK2hCLEtBQUsxekIsR0FBNUIsSUFBbUMsQ0FBQyxDQUFELEtBQU8zRSxLQUFLckIsT0FBTCxDQUFhMDVCLEtBQUsxekIsR0FBbEIsQ0FBM0MsS0FBc0UsZ0JBQWdCLE9BQU8wekIsS0FBSzNULElBQXRHLEVBQTRHO0FBQ3hHLGtCQUFLcFosQ0FBTCxJQUFVK3NCLEtBQUszVCxJQUFmLEVBQXFCO0FBQ2pCcVEsMEJBQVN6cEIsQ0FBVCxJQUFjK3NCLEtBQUszVCxJQUFMLENBQVVwWixDQUFWLENBQWQ7QUFDQSxxQkFBSSxnQkFBZ0IsT0FBTytzQixLQUFLRCxLQUFoQyxFQUF1QztBQUNuQywwQkFBSzloQixDQUFMLElBQVUraEIsS0FBS0QsS0FBZixFQUFzQjtBQUNsQiw2QkFBSSxnQkFBZ0IsT0FBT0MsS0FBS0QsS0FBTCxDQUFXOWhCLENBQVgsRUFBYzNSLEdBQXpDLEVBQThDO0FBQzFDM0Usb0NBQU9BLEtBQUtpQixPQUFMLENBQWFvM0IsS0FBSzF6QixHQUFsQixFQUF1QixFQUF2QixDQUFQO0FBQ0g7QUFDRCw4QkFBS3d6QixlQUFMLENBQXFCbjRCLElBQXJCLEVBQTJCcTRCLEtBQUtELEtBQUwsQ0FBVzloQixDQUFYLENBQTNCO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7QUFDRCxnQkFBT3llLFFBQVA7QUFDSCxNQTlEWTtBQStEYjs7O0FBR0E3dUIsUUFBRyxhQUFZO0FBQ1hPLDBCQUFpQixFQUFqQjtBQUNBcVksa0JBQVNxVyxlQUFUO0FBQ0FPLHVCQUFjTixpQkFBZDtBQUNBSyxvQkFBV1IsaUJBQVg7QUFDQU8sd0JBQWUsS0FBZjtBQUNBRyxzQkFBYSxLQUFiO0FBQ0FDLCtCQUFzQixLQUF0QjtBQUNIO0FBMUVZLEVBQWpCLEM7Ozs7Ozs7O0FDdlBBcDVCLFFBQU9DLE9BQVAsR0FBaUI7QUFDYjI3QixZQUFNO0FBQ0YxVCxlQUFLO0FBQ0QvZixrQkFBSSxHQURIO0FBRUQwaUIsbUJBQUssOEJBRko7QUFHRGdSLG1CQUFLO0FBSEosVUFESDtBQU1GRCxnQkFBTSxDQUNGO0FBQ0l6ekIsa0JBQUksa0JBRFI7QUFFSStmLG1CQUFLO0FBQ0QyVCx1QkFBSztBQURKLGNBRlQ7QUFLSUQsb0JBQU8sQ0FDSDtBQUNJenpCLHNCQUFJLGtCQURSO0FBRUkrZix1QkFBSztBQUNEMlQsMkJBQUs7QUFESixrQkFGVDtBQUtJRCx3QkFBTSxDQUNGO0FBQ0l6ekIsMEJBQUksWUFEUjtBQUVJK2YsMkJBQUs7QUFDRDJULCtCQUFLO0FBREo7QUFGVCxrQkFERSxFQU9GO0FBQ0kxekIsMEJBQUksZ0JBRFI7QUFFSStmLDJCQUFLO0FBQ0QyVCwrQkFBSztBQURKO0FBRlQsa0JBUEUsRUFhRjtBQUNJMXpCLDBCQUFJLFdBRFI7QUFFSStmLDJCQUFLO0FBQ0QyVCwrQkFBSztBQURKO0FBRlQsa0JBYkUsRUFtQkY7QUFDSTF6QiwwQkFBSSxVQURSO0FBRUkrZiwyQkFBSztBQUNEMlQsK0JBQUs7QUFESjtBQUZULGtCQW5CRTtBQUxWLGNBREc7QUFMWCxVQURFLEVBeUNGO0FBQ0kxekIsa0JBQUksWUFEUjtBQUVJK2YsbUJBQUs7QUFDRDJULHVCQUFLO0FBREosY0FGVDtBQUtJRCxvQkFBTyxDQUNIO0FBQ0l6ekIsc0JBQUksT0FEUjtBQUVJK2YsdUJBQUs7QUFDRDJULDJCQUFLO0FBREosa0JBRlQ7QUFLSUQsd0JBQU8sQ0FDSDtBQUNJenpCLDBCQUFJLGlCQURSO0FBRUkrZiwyQkFBSztBQUNEMlQsK0JBQUs7QUFESjtBQUZULGtCQURHO0FBTFgsY0FERztBQUxYLFVBekNFO0FBTko7QUFETyxFQUFqQixDOzs7Ozs7OztBQ0FBNzdCLFFBQU9DLE9BQVAsR0FBaUIsVUFBVW04QixJQUFWLEVBQWdCOUgsTUFBaEIsRUFBd0I7O0FBRXJDLFNBQUlyQyxFQUFKLEVBQ0lPLElBREosRUFFSTZKLG1CQUZKOztBQUlBLFNBQUk5SCxpQkFBaUI5MEIsVUFBVXRCLE9BQVYsQ0FBa0Jna0IsTUFBbEIsQ0FBeUJxUyxpQkFBekIsRUFBckI7O0FBRUEsU0FBSWgxQixPQUFPQyxTQUFQLElBQW9CQSxVQUFVd3lCLEVBQWxDLEVBQXNDO0FBQ2xDQSxjQUFLeHlCLFVBQVV3eUIsRUFBVixDQUFhbUssSUFBYixDQUFMO0FBQ0EsYUFBSSxPQUFPbkssRUFBUCxLQUFjLFdBQWQsSUFBNkIsQ0FBQ0EsR0FBR3dDLGdDQUFILENBQW9DLENBQUNILE1BQUQsQ0FBcEMsQ0FBbEMsRUFBaUY7QUFDN0VyQyxnQkFBR3FLLGtCQUFILENBQXNCaEksTUFBdEI7QUFDQSxpQkFBSUEsT0FBT255QixPQUFQLENBQWVveUIsY0FBZixLQUFrQyxDQUF0QyxFQUF5Qzs7QUFFckN0QyxvQkFBR3NLLG9CQUFILENBQXdCakksTUFBeEI7O0FBRUE5Qix3QkFBT3B4QixTQUFTa3lCLGNBQVQsQ0FBd0IsWUFBWXJCLEdBQUc0QixPQUFILEVBQVosR0FBMkIsR0FBM0IsR0FBaUNTLE9BQU9sd0IsSUFBUCxDQUFZLEdBQVosQ0FBekQsQ0FBUDtBQUNBaTRCLHVDQUF1QjdKLEtBQUtnSyxpQkFBTCxJQUEwQmhLLEtBQUtpSyxVQUF0RDtBQUNBLHFCQUFJSixtQkFBSixFQUF5QjtBQUNyQkEseUNBQW9CNW9CLEVBQXBCLEdBQXlCLFlBQVl3ZSxHQUFHNEIsT0FBSCxFQUFyQztBQUNIO0FBQ0RwMEIsMkJBQVVFLEtBQVYsQ0FBZ0IyRSxXQUFoQixDQUE0Qmt1QixJQUE1QixFQUFrQyxZQUFZUCxHQUFHd0QsTUFBZixHQUF3QixPQUExRDtBQUNIO0FBQ0o7QUFDSjtBQUNKLEVBekJELEM7Ozs7Ozs7Ozs7OztBQ0FBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O3NCQUVlbjJCLE9BQU9DLE1BQVAsd0JBQXdCO0FBQ25DbTlCLDBDQURtQztBQUVuQ3hSLHNDQUZtQztBQUduQ3lSO0FBSG1DLEVBQXhCLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNMZjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7QUFHQSxLQUFNdjlCLE1BQU0seUJBQU8sb0JBQVAsQ0FBWjtBQUNBLEtBQU13OUIsd0JBQXdCLFlBQTlCLEMsQ0FBNkM7O0tBRXZDQyxRO0FBRUYseUJBQWM7QUFBQTs7QUFDVixjQUFLQyxhQUFMLEdBQXFCLENBQXJCO0FBQ0EsY0FBS0MsaUJBQUwsR0FBeUIsQ0FBekI7QUFDQSxjQUFLQyxpQkFBTCxHQUF5QixJQUF6QjtBQUNBLGNBQUtDLGlCQUFMLEdBQXlCLEtBQXpCO0FBQ0EsY0FBS0MsdUJBQUwsR0FBK0IsS0FBL0I7QUFDQSxjQUFLQyxnQkFBTCxHQUF3QixFQUFDLFFBQVEsRUFBVCxFQUFhLFVBQVUsRUFBdkIsRUFBeEI7QUFDQSxjQUFLNWEsU0FBTCxHQUFpQixFQUFqQjtBQUNBLGNBQUs2YSxnQkFBTCxHQUF3QixLQUF4QjtBQUNIOztBQUVEOzs7Ozs7OztnQ0FJTztBQUNILGtCQUFLRix1QkFBTCxHQUErQix5Q0FBL0I7QUFDQSxpQ0FBT0csMEJBQVAsQ0FBa0NULHFCQUFsQyxFQUF5RCxLQUFLTyxnQkFBOUQ7O0FBRU1HLDZCQUFOO0FBQ0Esb0JBQU8sSUFBUDtBQUNIOzs7d0NBRWM7QUFBQTs7QUFDWGwrQixpQkFBSSxvQ0FBSjtBQUNBLGtCQUFLZytCLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0Esb0JBQU87QUFDSEcsc0NBQXFCLDZCQUFDQyxRQUFELEVBQVdyMUIsR0FBWCxFQUFnQjhjLFFBQWhCLEVBQTZCO0FBQzlDLDJCQUFLd1ksTUFBTCxDQUFZLEVBQUNELGtCQUFELEVBQVo7QUFDSCxrQkFIRTtBQUlIRSw2QkFBWSw2QkFBVztBQUNuQiwyQkFBS0QsTUFBTCxDQUFZLEVBQUNodEIsZ0JBQUQsRUFBWjtBQUNILGtCQU5FO0FBT0hrdEIsc0NBQXFCLHlDQUFjO0FBQy9CLDJCQUFLRixNQUFMLENBQVksRUFBQzlzQixzQkFBRCxFQUFaO0FBQ0gsa0JBVEU7QUFVSGl0QiwyQkFBVSx5QkFBUztBQUNmLDJCQUFLSCxNQUFMLENBQVksRUFBQ0ksWUFBRCxFQUFaO0FBQ0gsa0JBWkU7QUFhSEMsK0JBQWMsd0JBQU07QUFDaEIsMkJBQUtDLElBQUw7QUFDSDtBQWZFLGNBQVA7QUFpQkg7OztnQ0FFTUMsUSxFQUFVO0FBQ2IsaUJBQUl2VixJQUFKO0FBQ0Esa0JBQUtBLElBQUwsSUFBYXVWLFFBQWIsRUFBdUI7QUFDbkIseUJBQVF2VixJQUFSO0FBQ0ksMEJBQUssU0FBTDtBQUNJLDhCQUFLbEcsU0FBTCxDQUFlMGIsVUFBZixHQUE0QkQsU0FBU3ZWLElBQVQsSUFBaUIsTUFBN0M7QUFDQSw2QkFBSXVWLFNBQVN2VixJQUFULE1BQW1CLFVBQXZCLEVBQW1DO0FBQy9CLGtDQUFLbEcsU0FBTCxDQUFlMmIsY0FBZixHQUFnQyxNQUFoQztBQUNIO0FBQ0Q7QUFDSiwwQkFBSyxZQUFMO0FBQ0ksOEJBQUszYixTQUFMLENBQWU0YixhQUFmLEdBQStCSCxTQUFTdlYsSUFBVCxDQUEvQjtBQUNBO0FBQ0osMEJBQUssT0FBTDtBQUNJLDhCQUFLbEcsU0FBTCxDQUFlNmIsUUFBZixHQUEwQkosU0FBU3ZWLElBQVQsQ0FBMUI7QUFDQTtBQUNKLDBCQUFLLFVBQUw7QUFDSSw4QkFBS2xHLFNBQUwsQ0FBZXhkLElBQWYsR0FBc0JpNUIsU0FBU3ZWLElBQVQsQ0FBdEI7QUFDSjtBQUNJO0FBaEJSO0FBa0JIO0FBQ0o7Ozs4Q0FFb0JqYyxPLEVBQVM7QUFDMUIsa0JBQUt3d0IsaUJBQUwsR0FBMEJ4d0IsVUFBVSxJQUFWLEdBQWlCLEtBQTNDO0FBQ0g7Ozs2Q0FFbUJsSixJLEVBQU07QUFDdEIsaUJBQUksT0FBT0EsSUFBUCxLQUFnQixXQUFoQixJQUFnQ0EsU0FBUyxNQUFULElBQW1CQSxTQUFTLFFBQWhFLEVBQTJFO0FBQ3ZFLHVCQUFNLElBQUkwQyxLQUFKLENBQVUscURBQXFEMUMsSUFBckQsR0FBNEQsR0FBdEUsQ0FBTjtBQUNIO0FBQ0Qsb0JBQU8sS0FBSzY1QixnQkFBTCxDQUFzQjc1QixJQUF0QixDQUFQO0FBQ0g7Ozs0Q0FFa0I7QUFDZixvQkFBTyxFQUFQO0FBQ0g7OzsrQ0FFcUIwSCxHLEVBQUs7QUFDdkIsa0JBQUtreUIsdUJBQUwsR0FBK0JseUIsR0FBL0I7QUFDSDs7O2lEQUV1QjtBQUNwQixvQkFBTyxLQUFLa3lCLHVCQUFaO0FBQ0g7O0FBRUQ7Ozs7Ozs2QkFHSTtBQUNBLGtCQUFLQSx1QkFBTCxHQUErQixLQUEvQjtBQUNBLGtCQUFLRixpQkFBTCxHQUF5QixJQUF6QjtBQUNBLGtCQUFLRyxnQkFBTCxHQUF3QixFQUFDLFFBQVEsRUFBVCxFQUFhLFVBQVUsRUFBdkIsRUFBeEI7QUFDQSxzQ0FBWWtCLFdBQVosR0FBMEIsRUFBMUI7QUFDQSxrQkFBS3BCLGlCQUFMLEdBQXlCLEtBQXpCO0FBQ0EsZ0NBQU0xekIsWUFBTixDQUFtQnF6QixxQkFBbkI7QUFDQSxrQkFBS0csaUJBQUwsR0FBeUIsQ0FBekI7QUFDSDs7QUFFRDs7Ozs7O0FBTUE7Ozs7OztnQ0FHTztBQUNILGlCQUFJLENBQUMsb0JBQU91QixpQkFBUCxFQUFMLEVBQWlDO0FBQzdCbC9CLHFCQUFJLHFEQUFKO0FBQ0Esd0JBQU8sS0FBUDtBQUNIO0FBQ0QsaUJBQUk7QUFDQSxxQkFBSW1qQixZQUFZLHdDQUFoQjtBQUNBQSw2QkFBWSw4Q0FBd0JBLFNBQXhCLENBQVo7QUFDQWpqQix3QkFBT0MsTUFBUCxDQUFjZ2pCLFNBQWQsRUFBeUIsS0FBS0EsU0FBOUI7QUFDTWdjLHdCQUFOLFlBQWNoYyxTQUFkLEVBQXlCLE1BQXpCO0FBQ0EscUJBQUksS0FBS3lhLGlCQUFULEVBQTRCO0FBQ3hCLHlDQUFPd0IsK0JBQVAsQ0FBdUMsS0FBS3A3QixJQUFMLENBQVVyRCxJQUFWLENBQWUsSUFBZixDQUF2QyxFQUR3QixDQUN1QztBQUNsRTtBQUNKLGNBUkQsQ0FRRSxPQUFPMCtCLFNBQVAsRUFBa0I7QUFDaEJyL0IscUJBQUlxbUIsS0FBSixDQUFVLDJDQUEyQ2daLFVBQVVDLE9BQXJELEdBQStELEdBQXpFO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs4QkFZS0MsTyxFQUFTMTNCLEssRUFBTztBQUNqQjtBQUNBO0FBQ0EsaUJBQUksQ0FBQyxvQkFBT3EzQixpQkFBUCxFQUFMLEVBQWlDO0FBQzdCLHdCQUFPLEtBQVA7QUFDSDtBQUNELGlCQUFJLE9BQU9LLE9BQVAsS0FBbUIsV0FBbkIsSUFBa0MsT0FBT0EsUUFBUW43QixJQUFmLEtBQXdCLFdBQTlELEVBQTJFO0FBQ3ZFLHdCQUFPLEtBQVA7QUFDSDtBQUNEO0FBQ0EsaUJBQUkrZSxZQUFZLHdDQUFoQjtBQUFBLGlCQUNJcWMsT0FBTyxvQkFBT0MseUJBQVAsQ0FBaUNGLE9BQWpDLENBRFg7QUFBQSxpQkFFSXgyQixNQUFNdzJCLFFBQVFuN0IsSUFGbEIsQ0FWaUIsQ0FZTzs7QUFFeEIsaUJBQUksQ0FBQ283QixJQUFMLEVBQVc7QUFDUCx3QkFBTyxFQUFQO0FBQ0g7O0FBRUQsaUJBQU1FLGlCQUFpQixpQ0FBdkI7O0FBRUEsaUJBQU1DLFdBQVcsb0JBQU9BLFFBQVAsQ0FBZ0I1MkIsR0FBaEIsQ0FBakI7QUFDQTIyQixvQ0FBb0IsTUFBcEIsRUFBNEIsRUFBQ3AyQixPQUFPUCxJQUFJaEUsTUFBSixDQUFXLENBQVgsRUFBYyxHQUFkLENBQVIsRUFBNEI2NkIsY0FBYztBQUFBLDRCQUFNRCxRQUFOO0FBQUEsa0JBQTFDLEVBQTVCO0FBQ0FELG9DQUFvQixlQUFwQixFQUFxQyxFQUFDRyxTQUFTLE1BQVYsRUFBa0J2OEIsTUFBSyxDQUFDeUYsR0FBRCxDQUF2QixFQUE4QjYyQixjQUFjO0FBQUEsNEJBQU0sQ0FBQ0QsUUFBUDtBQUFBLGtCQUE1QyxFQUFyQzs7QUFFQTtBQUNBSCxrQkFBSzNaLFFBQUwsR0FBZ0IsOEJBQVkwWixRQUFRbjdCLElBQXBCLEVBQTBCMEssU0FBMUIsQ0FBb0MsQ0FBcEMsRUFBdUMsQ0FBdkMsRUFBMEN6SixPQUExQyxDQUFrRCxHQUFsRCxFQUF1RCxFQUF2RCxDQUFoQjtBQUNBOGQseUJBQVksaURBQTJCQSxTQUEzQixDQUFaO0FBQ0FBLHVCQUFVMmMsTUFBVixHQUF5QkMscUJBQU4sWUFBNEJQLElBQTVCLENBQW5COztBQUdBcmMseUJBQVlqakIsT0FBT0MsTUFBUCxDQUFjZ2pCLFNBQWQsRUFBeUJ1YyxlQUFlcGIsS0FBZixFQUF6QixDQUFaO0FBQ0EsaUNBQU8wYixTQUFQLENBQXVCYixPQUF2QixNQUFpQixJQUFqQixHQUFnQzNCLHFCQUFoQyxFQUF1RHowQixHQUF2RCxFQUE0RGxCLEtBQTVELEVBQW1Fc2IsU0FBbkUsRUEvQmlCLENBK0IrRDtBQUNuRjs7Ozs7O3NCQUtVLElBQUlzYSxRQUFKLEU7O0FBRWY7Ozs7OztBQU1BLFVBQVNTLGdCQUFULEdBQTRCO0FBQ3hCO0FBQ0EsU0FBSTE1QixDQUFKLEVBQU8rSSxDQUFQO0FBQ0EsU0FBSTB5QixVQUFVLENBQ1YsZUFEVSxFQUVWLFdBRlUsRUFHVixpQkFIVSxFQUlWLGFBSlUsRUFLVixXQUxVLEVBTVYsZ0JBTlUsRUFPVixZQVBVLEVBUVYsVUFSVSxFQVNWLFdBVFUsRUFVVixTQVZVLEVBV1YsY0FYVSxFQVlWLGFBWlUsRUFhVixtQkFiVSxDQUFkO0FBZUEsVUFBS3o3QixJQUFJLENBQUosRUFBTytJLElBQUkweUIsUUFBUXI3QixNQUF4QixFQUFnQ0osSUFBSStJLENBQXBDLEVBQXVDL0ksR0FBdkMsRUFBNEM7QUFDeENpNUIsa0JBQVMxd0IsU0FBVCxDQUFtQmt6QixRQUFRejdCLENBQVIsQ0FBbkIsSUFDSSx5QkFBWXk3QixRQUFRejdCLENBQVIsQ0FBWixFQUF3QjdELElBQXhCLDBCQURKO0FBRUg7O0FBRUQsOEJBQVk5QixJQUFaO0FBQ0g7O0FBRUQ7Ozs7Ozs7OztBQVNBLFVBQVNzZ0MsT0FBVCxDQUFpQmhjLFNBQWpCLEVBQTRCamYsSUFBNUIsRUFBa0NvcUIsUUFBbEMsRUFBNEM0UixnQkFBNUMsRUFBOEQ7QUFDMUQsU0FBSXhVLEdBQUo7QUFDQSxTQUFJLENBQUMsb0JBQU95VSxrQkFBUCxFQUFMLEVBQWtDO0FBQzlCbmdDLGFBQUksc0RBQUo7QUFDQSxhQUFJLE9BQU9zdUIsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNoQ0Esc0JBQVMsS0FBVDtBQUNIO0FBQ0QsZ0JBQU8sS0FBUDtBQUNIOztBQUVELFNBQUksS0FBS3dQLHVCQUFMLEtBQWlDLEtBQXJDLEVBQTRDO0FBQ3hDO0FBQ0EsY0FBS0EsdUJBQUwsR0FBK0IseUNBQS9CO0FBQ0g7O0FBRUQsU0FBTXNDLFlBQVksOEJBQWxCO0FBQ0EsU0FBTUMsWUFBWSxPQUFPbGQsVUFBVW1kLEVBQWpCLEtBQXdCLFdBQXhCLEdBQXNDbmQsVUFBVW1kLEVBQWhELEdBQXFELEVBQXZFOztBQUVBLFNBQUl4OEIsTUFBTSxNQUNKLEtBREksSUFDS0ksU0FBUyxNQUFULEdBQWtCLENBQWxCLEdBQXNCLEVBRDNCLElBRUosTUFGSSxHQUVLLHNCQUFNazhCLFNBQU4sRUFBaUIsSUFBakIsRUFBdUJDLFNBQXZCLENBRmY7O0FBSUEsU0FBSW44QixTQUFTLE9BQWIsRUFBc0I7QUFDbEIsY0FBS3k1QixpQkFBTDtBQUNBeGEsbUJBQVV2RyxRQUFWLEdBQXFCLEtBQUsrZ0IsaUJBQTFCO0FBQ0g7QUFDRDtBQUNBeGEsaUJBQVlqakIsT0FBT0MsTUFBUCxDQUFjZ2pCLFNBQWQsRUFBeUJpZCxTQUF6QixDQUFaOztBQUVBO0FBQ0FqZCxlQUFVckYsRUFBVixHQUFlLG9CQUFPL1gsaUJBQVAsR0FBMkIzQixJQUEzQixDQUFnQ2lCLE9BQWhDLENBQXdDLFFBQXhDLEVBQWtELEVBQWxELENBQWY7QUFDQThkLGVBQVVwRixFQUFWLEdBQWUsb0JBQU8yRixpQkFBUCxHQUEyQnBVLEtBQTFDO0FBQ0E2VCxlQUFVbkYsRUFBVixHQUFlaGMsU0FBU3dOLFFBQXhCO0FBQ0EyVCxpQkFBWSx1Q0FBa0JBLFNBQWxCLENBQVo7QUFDQSxVQUFLdUksR0FBTCxJQUFZdkksU0FBWixFQUF1QjtBQUNuQixhQUFNb2QsV0FBVXYrQixTQUFTaUMsYUFBVCxDQUF1QixLQUF2QixDQUFoQjtBQUNBczhCLGtCQUFRbDBCLFNBQVIsR0FBdUJxZixHQUF2QixVQUErQnZJLFVBQVV1SSxHQUFWLENBQS9COztBQUVBLGFBQUlBLFFBQVEsSUFBWixFQUFrQjtBQUNkO0FBQ0E1bkIsb0JBQU8sTUFBTTRuQixHQUFOLEdBQVksR0FBWixHQUFrQixvQkFBTzhVLFdBQVAsQ0FBbUJyZCxVQUFVdUksR0FBVixDQUFuQixDQUF6QjtBQUNIO0FBQ0o7QUFDRCxTQUFJLE9BQU93VSxnQkFBUCxLQUE0QixXQUE1QixJQUEyQ0EscUJBQXFCLElBQXBFLEVBQTBFO0FBQ3RFLGNBQUtuQyxnQkFBTCxDQUFzQixNQUF0QixFQUE4QmowQixJQUE5QixDQUFtQ2hHLEdBQW5DO0FBQ0EsNkJBQU8yOEIsaUJBQVAsQ0FBeUIzOEIsR0FBekIsRUFBOEJ3cUIsUUFBOUI7QUFDSCxNQUhELE1BR087QUFDSCxjQUFLeVAsZ0JBQUwsQ0FBc0IsUUFBdEIsRUFBZ0NqMEIsSUFBaEMsQ0FBcUNoRyxHQUFyQztBQUNBLGFBQUksT0FBT3dxQixRQUFQLEtBQW9CLFVBQXhCLEVBQW9DO0FBQ2hDQTtBQUNIO0FBQ0o7QUFDRHR1QixTQUFJLDBCQUEwQjhELEdBQTlCO0FBQ0EsU0FBTXk4QixVQUFVditCLFNBQVNpQyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0FzOEIsYUFBUWwwQixTQUFSLEdBQW9CLGNBQWN2SSxHQUFsQztBQUNBLFlBQU9BLEdBQVA7QUFDSDs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLFVBQVNpOEIscUJBQVQsQ0FBK0JqWCxJQUEvQixFQUFxQztBQUNqQyxTQUFJLE9BQU9BLElBQVAsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDN0IsZ0JBQU8sS0FBUDtBQUNIO0FBQ0QsU0FBSTRYLGlCQUFpQixxQ0FBckI7QUFDQSxTQUFJNUwsT0FBTztBQUNQO0FBQ0EscUJBQVksRUFGTDtBQUdQLG9CQUFXNEwsZUFBZSxDQUFmLENBSEo7QUFJUCx1QkFBYyxFQUpQO0FBS1AscUJBQVksTUFMTDtBQU1QLHFCQUFZLEVBTkw7QUFPUCx5QkFBZ0IsRUFQVDtBQVFQLHVCQUFjLEVBUlA7QUFTUCwwQkFBaUIsRUFUVjtBQVVQLG9CQUFXQSxlQUFlLENBQWYsQ0FWSjtBQVdQLHFCQUFZLEVBWEw7QUFZUCxzQkFBYTtBQUNiO0FBYk8sTUFBWDtBQWVBLFNBQUl2eUIsQ0FBSjtBQUFBLFNBQ0lnTSxDQURKO0FBQUEsU0FFSW5RLFFBQVEsRUFGWjtBQUdBLFVBQUttRSxDQUFMLElBQVUyYSxJQUFWLEVBQWdCO0FBQ1osYUFBSSxPQUFPZ00sS0FBSzNtQixDQUFMLENBQVAsS0FBbUIsV0FBdkIsRUFBb0M7QUFDaEM7QUFDQTJtQixrQkFBSzNtQixDQUFMLElBQVcsT0FBTzJhLEtBQUszYSxDQUFMLENBQVAsS0FBbUIsV0FBbkIsSUFBa0MyYSxLQUFLM2EsQ0FBTCxNQUFZLEVBQTlDLElBQW9EMmEsS0FBSzNhLENBQUwsTUFBWSxLQUFoRSxHQUNMLEVBREssR0FDQSxtQkFBTXZGLElBQU4sQ0FBV2tnQixLQUFLM2EsQ0FBTCxDQUFYLENBRFg7QUFFSDtBQUNKO0FBQ0QsVUFBS2dNLENBQUwsSUFBVTJhLElBQVYsRUFBZ0I7QUFDWjlxQixlQUFNRixJQUFOLENBQVdnckIsS0FBSzNhLENBQUwsQ0FBWDtBQUNIO0FBQ0QsWUFBT25RLE1BQU1oRixJQUFOLENBQVcsR0FBWCxDQUFQO0FBQ0g7Ozs7Ozs7QUN4V0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixZQUFXLGFBQWE7QUFDeEIsWUFBVyxFQUFFO0FBQ2IsY0FBYSxFQUFFO0FBQ2Y7QUFDQTtBQUNBLGtCQUFpQixRQUFRLE9BQU8sU0FBUyxFQUFFO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNoQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxPQUFPO0FBQ2xCLFlBQVcsYUFBYTtBQUN4QixjQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDeEJBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLEVBQUU7QUFDYixjQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsRUFBRTtBQUNiLGNBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUN6QkE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixjQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDtBQUNBLEVBQUM7O0FBRUQ7Ozs7Ozs7QUM5QkE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxTQUFTO0FBQ3BCLFlBQVcsU0FBUztBQUNwQixjQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLGtCQUFpQjtBQUNqQixpQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7Ozs7OztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQy9CQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQy9CQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ2JBOztBQUVBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNMQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxPQUFPO0FBQ2xCLFlBQVcsT0FBTztBQUNsQixjQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBb0M7O0FBRXBDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxFQUFFO0FBQ2IsY0FBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQy9DQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLEVBQUU7QUFDYixjQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLEVBQUU7QUFDYixjQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLGlCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLEVBQUU7QUFDYixjQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNuQkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxTQUFTO0FBQ3BCLGNBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ25CQTs7QUFFQTtBQUNBOztBQUVBOzs7Ozs7O0FDTEE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7Ozs7O0FDUkE7QUFDQTs7QUFFQTs7Ozs7Ozs7QUNIQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLFNBQVM7QUFDcEIsY0FBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEIsWUFBVyxPQUFPO0FBQ2xCLGNBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxPQUFPO0FBQ2xCLFlBQVcsT0FBTztBQUNsQixjQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNkQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEIsY0FBYSxFQUFFO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDN0JBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEIsY0FBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUN0QkE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEIsWUFBVyxFQUFFO0FBQ2IsY0FBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ1hBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEIsY0FBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ2pDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsTUFBTTtBQUNqQixZQUFXLEVBQUU7QUFDYixjQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxFQUFFO0FBQ2IsWUFBVyxFQUFFO0FBQ2IsY0FBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxrQkFBaUI7QUFDakIsaUJBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDcENBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixjQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7Ozs7O0FDbEJBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixjQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNmQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEIsWUFBVyxFQUFFO0FBQ2IsY0FBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUN4QkE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7Ozs7O0FDTkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxPQUFPO0FBQ2xCLGNBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ2ZBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxPQUFPO0FBQ2xCLFlBQVcsT0FBTztBQUNsQixjQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsRUFBRTtBQUNiLGNBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ2RBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixjQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQ2ZBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixjQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNmQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEIsWUFBVyxFQUFFO0FBQ2IsY0FBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUNqQkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsRUFBRTtBQUNiLGNBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDM0JBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsRUFBRTtBQUNiLGNBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUM5QkE7O0FBRUE7QUFDQTs7QUFFQTs7Ozs7OztBQ0xBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLEVBQUU7QUFDYixjQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLEVBQUU7QUFDYixjQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLHFCQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7O0FDNUJBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxFQUFFO0FBQ2IsWUFBVyxPQUFPO0FBQ2xCLGNBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7OztBQzVCQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVyxFQUFFO0FBQ2IsY0FBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7OztBQ3BCQTtBQUNBLEtBQUl6RSxRQUFRLG1CQUFBN0IsQ0FBUSxHQUFSLENBQVo7QUFDQSxLQUFJSSxTQUFTLG1CQUFBSixDQUFRLEdBQVIsQ0FBYjtBQUNBLEtBQUlTLFdBQVcsbUJBQUFULENBQVEsR0FBUixDQUFmO0FBQ0EsS0FBSXNCLE1BQU0sbUJBQUF0QixDQUFRLEdBQVIsRUFBa0Isa0JBQWxCLENBQVY7QUFDQSxLQUFJYyxVQUFVLG1CQUFBZCxDQUFRLEdBQVIsQ0FBZDs7QUFFQSxLQUFJZ2lDLGlCQUFpQixDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVCxFQUFhLEVBQWIsQ0FBckI7QUFBQSxLQUNJQyxnQkFBZ0IsS0FEcEI7QUFBQSxLQUVJQyxhQUZKO0FBQUEsS0FFd0I7QUFDcEJDLG1CQUFrQiwrQ0FIdEI7QUFBQSxLQUlJQyx5QkFBeUIsQ0FBQyxVQUFELEVBQWEsTUFBYixFQUFxQixPQUFyQixFQUE4QixXQUE5QixDQUo3QjtBQUFBLEtBSTBFO0FBQ3RFQyxvQkFBbUIsR0FMdkI7QUFBQSxLQU1JQyxNQUFNLElBTlY7O0FBUUEsS0FBSXJCLFdBQVcsU0FBWEEsUUFBVyxDQUFVNTJCLEdBQVYsRUFBZTtBQUMxQixZQUFRLHFEQUFELENBQXVENUMsSUFBdkQsQ0FBNEQ0QyxHQUE1RDtBQUFQO0FBQ0gsRUFGRDs7QUFJQSxLQUFJazRCLGNBQWMsU0FBZEEsV0FBYyxHQUFZO0FBQzFCO0FBQ0EsU0FBSTlFLEtBQUssc0JBQVQ7QUFDQSxZQUFPQSxHQUFHcjJCLElBQUgsQ0FBUTNHLFNBQVNxbUIsV0FBVCxHQUF1QnhnQixJQUF2QixDQUE0QixHQUE1QixDQUFSLE1BQThDLElBQXJEO0FBQ0gsRUFKRDs7QUFNQTs7Ozs7QUFLQSxLQUFJazhCLDZCQUE2QixTQUE3QkEsMEJBQTZCLENBQVVuNEIsR0FBVixFQUFlO0FBQzVDLFlBQVEsdUNBQUQsQ0FBeUM1QyxJQUF6QyxDQUE4QzRDLEdBQTlDO0FBQVA7QUFDSCxFQUZEOztBQUlBOzs7QUFHQSxLQUFJbzRCLG9CQUFvQixTQUFwQkEsaUJBQW9CLENBQVVDLFNBQVYsRUFBcUI7QUFDekMsU0FBSSxPQUFPQSxTQUFQLEtBQXFCLFdBQXpCLEVBQXNDO0FBQ2xDQSxxQkFBWSxHQUFaO0FBQ0g7QUFDRCxTQUFJOVYsUUFBUW5zQixTQUFTcW1CLFdBQVQsQ0FBcUIsV0FBckIsRUFBa0MsSUFBbEMsQ0FBWjtBQUNBa2Isc0JBQWlCLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxFQUFULEVBQWEsRUFBYixDQUFqQjtBQUNBO0FBQ0FBLG9CQUFlLENBQWYsSUFBb0JwVixNQUFNLENBQU4sQ0FBcEI7QUFDQSxTQUFJLE9BQU9BLE1BQU0sQ0FBTixDQUFQLEtBQW9CLFdBQXBCLElBQW1DQSxNQUFNLENBQU4sQ0FBdkMsRUFBaUQ7QUFDN0MsYUFBSUEsTUFBTSxDQUFOLE1BQWEsTUFBYixLQUF3QkEsTUFBTSxDQUFOLEVBQVN2b0IsT0FBVCxDQUFpQixPQUFqQixNQUE4QixDQUE5QixJQUFtQ3VvQixNQUFNLENBQU4sTUFBYSxpQkFBeEUsQ0FBSixFQUFnRztBQUM1RjtBQUNBO0FBQ0EsaUJBQUksT0FBT0EsTUFBTSxDQUFOLENBQVAsS0FBb0IsV0FBcEIsSUFBbUNBLE1BQU0sQ0FBTixDQUFuQyxJQUErQ0EsTUFBTSxDQUFOLENBQW5ELEVBQTZEO0FBQ3pEO0FBQ0E7QUFDQW9WLGdDQUFlLENBQWYsSUFBb0JwVixNQUFNLENBQU4sSUFBVzhWLFNBQVgsR0FBdUI5VixNQUFNLENBQU4sQ0FBdkIsR0FBa0M4VixTQUFsQyxHQUE4QzlWLE1BQU0sQ0FBTixDQUFsRTtBQUNBb1YsZ0NBQWUsQ0FBZixJQUFvQkEsZUFBZSxDQUFmLElBQW9CVSxTQUFwQixHQUFnQzlWLE1BQU0sQ0FBTixDQUFwRDtBQUNILGNBTEQsTUFLTyxJQUFJLE9BQU9BLE1BQU0sQ0FBTixDQUFQLEtBQW9CLFdBQXBCLElBQW1DQSxNQUFNLENBQU4sQ0FBdkMsRUFBaUQ7QUFDcEQ7QUFDQTtBQUNBb1YsZ0NBQWUsQ0FBZixJQUFvQnBWLE1BQU0sQ0FBTixJQUFXOFYsU0FBWCxHQUF1QjlWLE1BQU0sQ0FBTixDQUF2QixHQUFrQzhWLFNBQWxDLEdBQThDOVYsTUFBTSxDQUFOLENBQWxFO0FBQ0gsY0FKTSxNQUlBO0FBQ0g7QUFDQTtBQUNBb1YsZ0NBQWUsQ0FBZixJQUFvQnBWLE1BQU0sQ0FBTixJQUFXOFYsU0FBWCxHQUF1QjlWLE1BQU0sQ0FBTixDQUEzQztBQUNIO0FBQ0osVUFqQkQsTUFpQk8sSUFBSUEsTUFBTSxDQUFOLE1BQWEsT0FBakIsRUFBMEI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0FvViw0QkFBZSxDQUFmLElBQW9CcFYsTUFBTSxDQUFOLElBQVc4VixTQUFYLEdBQXVCOVYsTUFBTSxDQUFOLENBQTNDO0FBQ0EsaUJBQUksT0FBT0EsTUFBTSxDQUFOLENBQVAsS0FBb0IsV0FBcEIsSUFBbUNBLE1BQU0sQ0FBTixDQUF2QyxFQUFpRDtBQUM3QztBQUNBO0FBQ0FvVixnQ0FBZSxDQUFmLElBQW9CQSxlQUFlLENBQWYsSUFBb0JVLFNBQXBCLEdBQWdDOVYsTUFBTSxDQUFOLENBQXBEO0FBQ0EscUJBQUksT0FBT0EsTUFBTSxDQUFOLENBQVAsS0FBb0IsV0FBcEIsSUFBbUNBLE1BQU0sQ0FBTixDQUFuQyxJQUErQ0EsTUFBTSxDQUFOLENBQS9DLElBQTJEQSxNQUFNLENBQU4sQ0FBL0QsRUFBeUU7QUFDckU7QUFDQW9WLG9DQUFlLENBQWYsSUFBb0JBLGVBQWUsQ0FBZixJQUFvQlUsU0FBcEIsR0FBZ0M5VixNQUFNLENBQU4sQ0FBaEMsR0FBMkM4VixTQUEzQyxHQUF1RDlWLE1BQU0sQ0FBTixDQUEzRTtBQUNILGtCQUhELE1BR08sSUFBSSxPQUFPQSxNQUFNLENBQU4sQ0FBUCxLQUFvQixXQUFwQixJQUFtQ0EsTUFBTSxDQUFOLENBQW5DLElBQStDQSxNQUFNLENBQU4sQ0FBbkQsRUFBNkQ7QUFDaEU7QUFDQTtBQUNBb1Ysb0NBQWUsQ0FBZixJQUFvQkEsZUFBZSxDQUFmLElBQW9CVSxTQUFwQixHQUFnQzlWLE1BQU0sQ0FBTixDQUFwRDtBQUNIO0FBQ0o7QUFDSixVQXBCTSxNQW9CQTtBQUNIO0FBQ0EsaUJBQUksT0FBT0EsTUFBTSxDQUFOLENBQVAsS0FBb0IsV0FBcEIsSUFBbUNBLE1BQU0sQ0FBTixDQUF2QyxFQUFpRDtBQUM3QztBQUNBO0FBQ0FvVixnQ0FBZSxDQUFmLElBQW9CcFYsTUFBTSxDQUFOLElBQVc4VixTQUFYLEdBQXVCOVYsTUFBTSxDQUFOLENBQTNDO0FBQ0FvVixnQ0FBZSxDQUFmLElBQW9CQSxlQUFlLENBQWYsSUFBb0JVLFNBQXBCLEdBQWdDOVYsTUFBTSxDQUFOLENBQXBEO0FBQ0gsY0FMRCxNQUtPO0FBQ0g7QUFDQTtBQUNBb1YsZ0NBQWUsQ0FBZixJQUFvQnBWLE1BQU0sQ0FBTixJQUFXOFYsU0FBWCxHQUF1QjlWLE1BQU0sQ0FBTixDQUEzQztBQUNIO0FBQ0o7QUFDSjtBQUNELFNBQUlvVixlQUFlLENBQWYsTUFBc0IsRUFBMUIsRUFBOEI7QUFDMUJBLHdCQUFlLENBQWYsSUFBb0JBLGVBQWUsQ0FBZixDQUFwQjtBQUNIO0FBQ0QsU0FBSUEsZUFBZSxDQUFmLE1BQXNCLEVBQTFCLEVBQThCO0FBQzFCQSx3QkFBZSxDQUFmLElBQW9CQSxlQUFlLENBQWYsQ0FBcEI7QUFDSDtBQUNELFlBQU9BLGNBQVA7QUFDSCxFQW5FRDs7QUFxRUEsS0FBSVcsbUJBQW1CLFNBQW5CQSxnQkFBbUIsR0FBWTtBQUMvQixTQUFJQyxXQUFKO0FBQUEsU0FDSTdaLFdBQVczb0IsT0FBT3lpQyxXQUFQLEVBRGY7QUFFQSxTQUFJOVosYUFBYSxFQUFqQixFQUFxQjtBQUNqQjtBQUNBLGdCQUFPQSxRQUFQO0FBQ0g7QUFDRCxTQUFJLE9BQU9ybkIsT0FBT3RCLE1BQWQsS0FBeUIsV0FBekIsSUFBd0MsT0FBT3NCLE9BQU90QixNQUFQLENBQWMwaUMsS0FBckIsS0FBK0IsV0FBdkUsSUFDRyxPQUFPcGhDLE9BQU90QixNQUFQLENBQWMwaUMsS0FBZCxDQUFvQi9aLFFBQTNCLEtBQXdDLFdBRDNDLElBQzBEcm5CLE9BQU90QixNQUFQLENBQWMwaUMsS0FBZCxDQUFvQi9aLFFBQXBCLEtBQWlDLEVBRC9GLEVBRUU7QUFDRTtBQUNBLGdCQUFPcm5CLE9BQU90QixNQUFQLENBQWMwaUMsS0FBZCxDQUFvQi9aLFFBQTNCO0FBQ0g7QUFDRDZaLG1CQUFjL2dDLE1BQU15SSxrQkFBTixDQUF5QixVQUF6QixDQUFkO0FBQ0EsU0FBSXM0QixnQkFBZ0IsRUFBcEIsRUFBd0I7QUFDcEI7QUFDQSxnQkFBT0EsV0FBUDtBQUNIO0FBQ0QsWUFBTyxJQUFQO0FBQ0gsRUFuQkQ7O0FBcUJBLEtBQUlHLGlCQUFpQixTQUFqQkEsY0FBaUIsR0FBWTtBQUM3QixTQUFJQyxnQkFBSjs7QUFFQTtBQUNBLFNBQUlDLGtCQUFrQixVQUF0QixFQUFrQztBQUM5QixnQkFBT1gsR0FBUDtBQUNIOztBQUVELFNBQUksT0FBTzVnQyxPQUFPdEIsTUFBZCxLQUF5QixXQUF6QixJQUF3QyxPQUFPc0IsT0FBT3RCLE1BQVAsQ0FBYzBpQyxLQUFyQixLQUErQixXQUF2RSxJQUNHLE9BQU9waEMsT0FBT3RCLE1BQVAsQ0FBYzBpQyxLQUFkLENBQW9CRSxPQUEzQixLQUF1QyxXQUQxQyxJQUN5RHRoQyxPQUFPdEIsTUFBUCxDQUFjMGlDLEtBQWQsQ0FBb0JFLE9BQXBCLEtBQWdDLEVBRDdGLEVBRUU7QUFDRTtBQUNBLGdCQUFPdGhDLE9BQU90QixNQUFQLENBQWMwaUMsS0FBZCxDQUFvQkUsT0FBM0I7QUFDSDtBQUNEQSxlQUFVbmhDLE1BQU15SSxrQkFBTixDQUF5QixjQUF6QixDQUFWO0FBQ0EsU0FBSTA0QixZQUFZLEVBQWhCLEVBQW9CO0FBQ2hCO0FBQ0EsZ0JBQU9BLE9BQVA7QUFDSDtBQUNEQSxlQUFVbmhDLE1BQU00SSxzQkFBTixDQUE2QixjQUE3QixDQUFWO0FBQ0EsU0FBSXU0QixZQUFZLEVBQWhCLEVBQW9CO0FBQ2hCO0FBQ0EsZ0JBQU9BLE9BQVA7QUFDSDtBQUNELFlBQU9WLEdBQVA7QUFDSCxFQXpCRDs7QUEyQkE7Ozs7QUFJQSxLQUFJbGIsY0FBYyxTQUFkQSxXQUFjLENBQVUxaEIsSUFBVixFQUFnQjtBQUM5QkEsWUFBT0EsUUFBUXRGLE9BQU9pSCxpQkFBUCxHQUEyQjNCLElBQTFDO0FBQ0EsU0FBSWtKLElBQUluTyxTQUFTc3VCLGlCQUFULENBQTJCcnBCLElBQTNCLEVBQWlDLFdBQWpDLENBQVI7QUFDQSxTQUFJRixPQUFPcEYsT0FBTzJtQixPQUFQLEVBQVg7O0FBRUEsU0FBSW5ZLEVBQUUsQ0FBRixNQUFTLFVBQWIsRUFBeUI7QUFDckJwSixnQkFBTyxPQUFQO0FBQ0gsTUFGRCxNQUVPLElBQUkrOEIsYUFBSixFQUFtQjtBQUN0Qi84QixnQkFBTyxZQUFQO0FBQ0gsTUFGTSxNQUVBLElBQUlwRixPQUFPbXNCLGtCQUFQLEVBQUosRUFBaUM7QUFDcEMvbUIsZ0JBQU8sY0FBUDtBQUNILE1BRk0sTUFFQSxJQUFJQSxTQUFTLEVBQWIsRUFBaUI7QUFDcEIsYUFBSTlELE9BQU90QixNQUFQLElBQWlCc0IsT0FBT3RCLE1BQVAsQ0FBYzBpQyxLQUEvQixJQUF3Q3BoQyxPQUFPdEIsTUFBUCxDQUFjMGlDLEtBQWQsQ0FBb0J0OUIsSUFBaEUsRUFBc0U7QUFDbEU7QUFDQUEsb0JBQU85RCxPQUFPdEIsTUFBUCxDQUFjMGlDLEtBQWQsQ0FBb0J0OUIsSUFBM0I7QUFFSCxVQUpELE1BSU8sSUFBSTlELE9BQU93aEMsUUFBUCxJQUFtQnhoQyxPQUFPd2hDLFFBQVAsQ0FBZ0I5aUMsTUFBbkMsSUFBNkNzQixPQUFPd2hDLFFBQVAsQ0FBZ0I5aUMsTUFBaEIsQ0FBdUIraUMsaUJBQXhFLEVBQTJGO0FBQzlGO0FBQ0EzOUIsb0JBQU85RCxPQUFPd2hDLFFBQVAsQ0FBZ0I5aUMsTUFBaEIsQ0FBdUIraUMsaUJBQTlCLENBRjhGLENBRTdDO0FBRXBELFVBSk0sTUFJQSxJQUFJemhDLE9BQU8waEMsR0FBUCxJQUFjQSxJQUFJQyxJQUFsQixJQUEwQkQsSUFBSUMsSUFBSixDQUFTcEQsSUFBbkMsSUFBMkNtRCxJQUFJQyxJQUFKLENBQVNwRCxJQUFULENBQWNoTyxTQUE3RCxFQUF3RTtBQUMzRTtBQUNBenNCLG9CQUFPNDlCLElBQUlDLElBQUosQ0FBU3BELElBQVQsQ0FBY2hPLFNBQXJCO0FBQ0g7QUFDSjs7QUFFRDtBQUNBenNCLFlBQU8zRCxNQUFNb0wsUUFBTixDQUFlekgsSUFBZixJQUF1QkEsS0FBS1ksV0FBTCxFQUF2QixHQUE0QyxFQUFuRDs7QUFFQSxhQUFRWixJQUFSO0FBQ0ksY0FBSyxJQUFMO0FBQ0EsY0FBSyxLQUFMO0FBQ0EsY0FBSyxhQUFMO0FBQ0lBLG9CQUFPLE9BQVA7QUFDQTtBQUNKLGNBQUssS0FBTDtBQUNJQSxvQkFBTyxPQUFQO0FBQ0E7QUFDSixjQUFLLEtBQUw7QUFDSUEsb0JBQU8sT0FBUDtBQUNBO0FBQ0osY0FBSyxLQUFMO0FBQ0lBLG9CQUFPLFlBQVA7QUFDQTtBQUNKLGNBQUssWUFBTDtBQUNJQSxvQkFBTyxZQUFQO0FBQ0E7QUFDSjtBQUNJO0FBbkJSOztBQXNCQSxTQUFJQSxTQUFTLE9BQVQsSUFBb0JwRixPQUFPaXNCLG9CQUFQLEVBQXhCLEVBQXVEO0FBQ25EN21CLGdCQUFPLGFBQVA7QUFDSDs7QUFFRCxZQUFPQSxTQUFTLGdCQUFnQmlDLElBQWhCLENBQXFCL0IsSUFBckIsSUFBNkIsT0FBN0IsR0FBdUMsT0FBaEQsQ0FBUDtBQUNILEVBeEREOztBQTBEQSxLQUFJNDlCLG1CQUFtQixTQUFuQkEsZ0JBQW1CLENBQVU1RCxRQUFWLEVBQW9CO0FBQ3ZDQSxnQkFBV0EsU0FBUy80QixPQUFULENBQWlCLElBQWpCLEVBQXVCLEdBQXZCLENBQVgsQ0FEdUMsQ0FDQztBQUN4Qys0QixnQkFBV0EsU0FBUy80QixPQUFULENBQWlCLDBCQUFqQixFQUE2QyxFQUE3QyxDQUFYLENBRnVDLENBRXNCO0FBQzdEKzRCLGdCQUFXQSxTQUFTLzRCLE9BQVQsQ0FBaUIsMEJBQWpCLEVBQTZDLEVBQTdDLENBQVgsQ0FIdUMsQ0FHc0I7QUFDN0QrNEIsZ0JBQVdBLFNBQVMvNEIsT0FBVCxDQUFpQixpQkFBakIsRUFBb0MsRUFBcEMsQ0FBWCxDQUp1QyxDQUlhO0FBQ3BELFlBQU8rNEIsU0FBU2wzQixXQUFULEVBQVA7QUFDSCxFQU5EOztBQVFBOzs7QUFHQSxLQUFJKzZCLGNBQWMsU0FBZEEsV0FBYyxHQUFXO0FBQ3pCLFNBQUksT0FBT25qQyxPQUFPNGtCLGlCQUFQLEdBQTJCcFUsS0FBbEMsS0FBNEMsV0FBaEQsRUFBNkQ7QUFDekQsZ0JBQU8sRUFBUDtBQUNILE1BRkQsTUFFTztBQUNILGdCQUFPMHlCLGlCQUFpQmxqQyxPQUFPNGtCLGlCQUFQLEdBQTJCcFUsS0FBNUMsQ0FBUDtBQUNIO0FBQ0osRUFORDs7QUFRQTs7O0FBR0EsS0FBSTR5QixzQkFBc0IsU0FBdEJBLG1CQUFzQixHQUFZO0FBQ2xDLFNBQUl0VixPQUFPOXRCLE9BQU9pSCxpQkFBUCxHQUEyQm9GLFFBQTNCLENBQW9DOUYsT0FBcEMsQ0FBNEMsUUFBNUMsRUFBc0QsRUFBdEQsQ0FBWDtBQUFBLFNBQXNFO0FBQ2xFODhCLG1CQUFjdlYsS0FBSzFsQixXQUFMLEdBQW1CeW5CLEtBQW5CLENBQXlCLENBQXpCLENBRGxCLENBRGtDLENBRWE7O0FBRS9DLFNBQUl3VCxZQUFZeFQsS0FBWixDQUFrQixDQUFDLENBQW5CLE1BQTBCLEdBQTlCLEVBQW1DO0FBQUU7QUFDakN3VCx1QkFBY0EsWUFBWXhULEtBQVosQ0FBa0IsQ0FBbEIsRUFBcUIsQ0FBQyxDQUF0QixDQUFkO0FBQ0g7O0FBRUQsU0FBSXlULFdBQVdELFlBQVl4OUIsS0FBWixDQUFrQixHQUFsQixDQUFmO0FBQ0EsU0FBSTA5QixpQkFBSjs7QUFFQSxTQUFNQyxXQUFXWCxhQUFqQjs7QUFFQSxTQUFJUyxTQUFTeDlCLE1BQVQsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDdkIsYUFBSTA5QixhQUFhLEVBQWIsSUFBbUJBLGFBQWEsTUFBcEMsRUFBNEM7QUFBRTtBQUMxQ0Qsd0JBQVcsZUFBWDtBQUNILFVBRkQsTUFFTyxJQUFJQyxhQUFhLE1BQWIsSUFBdUJBLGFBQWEsU0FBcEMsSUFBaURBLGFBQWEsT0FBOUQsSUFBeUVBLGFBQWEsVUFBMUYsRUFBc0c7QUFDekdELHdCQUFXQyxXQUFXLE9BQXRCO0FBQ0gsVUFGTSxNQUVBO0FBQ0hELHdCQUFXSixhQUFYO0FBQ0g7QUFDSixNQVJELE1BUU87QUFDSCxhQUFJSyxhQUFhLE9BQWIsSUFBd0JGLFNBQVN4OUIsTUFBVCxHQUFrQixDQUExQyxJQUErQ3c5QixTQUFTLENBQVQsTUFBZ0IsR0FBbkUsRUFBd0U7QUFBRTtBQUN0RSxpQkFBSUEsU0FBU3g5QixNQUFULEtBQW9CLENBQXhCLEVBQTJCO0FBQ3ZCeTlCLDRCQUFXRCxTQUFTLENBQVQsSUFBYyxPQUF6QjtBQUNILGNBRkQsTUFFTztBQUNIQyw0QkFBV0QsU0FBUyxDQUFULElBQWMsR0FBZCxHQUFvQkEsU0FBU3pULEtBQVQsQ0FBZSxDQUFmLEVBQWtCM3BCLElBQWxCLENBQXVCLEdBQXZCLENBQS9CO0FBQ0g7QUFDSixVQU5ELE1BTU8sSUFBSXM5QixhQUFhLE1BQWIsSUFBdUJBLGFBQWEsU0FBcEMsSUFBaURBLGFBQWEsT0FBOUQsSUFBeUVBLGFBQWEsVUFBMUYsRUFBc0c7QUFDekdELHdCQUFXRCxTQUFTcDlCLElBQVQsQ0FBYyxHQUFkLEVBQW1CSyxPQUFuQixDQUEyQiwwQ0FBM0IsRUFBdUUsU0FBdkUsQ0FBWDtBQUNILFVBRk0sTUFFQTtBQUFFO0FBQ0xnOUIsd0JBQVdKLGFBQVg7QUFDSDtBQUNKOztBQUVELFlBQU9JLFFBQVA7QUFDSCxFQXBDRDs7QUFzQ0EsS0FBSVYsY0FBYyxTQUFkQSxXQUFjLEdBQVk7QUFDMUIsU0FBTS9VLE9BQU85dEIsT0FBT2lILGlCQUFQLEdBQTJCb0YsUUFBM0IsQ0FBb0M5RixPQUFwQyxDQUE0QyxRQUE1QyxFQUFzRCxFQUF0RCxDQUFiLENBRDBCLENBQzhDO0FBQ3hFLFNBQUk4OEIsY0FBY3ZWLEtBQUsxbEIsV0FBTCxHQUFtQnluQixLQUFuQixDQUF5QixDQUF6QixDQUFsQixDQUYwQixDQUVxQjs7QUFFL0MsU0FBSXdULFlBQVl4VCxLQUFaLENBQWtCLENBQUMsQ0FBbkIsTUFBMEIsR0FBOUIsRUFBbUM7QUFBRTtBQUNqQ3dULHVCQUFjQSxZQUFZeFQsS0FBWixDQUFrQixDQUFsQixFQUFxQixDQUFDLENBQXRCLENBQWQ7QUFDSDs7QUFFRCxTQUFNeVQsV0FBV0QsWUFBWXg5QixLQUFaLENBQWtCLEdBQWxCLENBQWpCO0FBQ0EsWUFBT3k5QixTQUFTeDlCLE1BQVQsR0FBa0IsQ0FBbEIsR0FBc0J3OUIsU0FBUyxDQUFULENBQXRCLEdBQW9DLEVBQTNDO0FBQ0gsRUFWRDs7QUFhQTs7O0FBR0EsS0FBSTVCLGNBQWMsU0FBZEEsV0FBYyxDQUFVMzNCLEdBQVYsRUFBZTtBQUM3QixTQUFJLHdCQUF3QjFDLElBQXhCLENBQTZCMEMsR0FBN0IsQ0FBSixFQUF1QztBQUNuQyxnQkFBT0EsR0FBUDtBQUNIO0FBQ0QsWUFBT2UsbUJBQW1CZixHQUFuQixDQUFQO0FBQ0gsRUFMRDs7QUFPQTs7Ozs7QUFLQSxLQUFJNDJCLDRCQUE0QixTQUE1QkEseUJBQTRCLENBQVVGLE9BQVYsRUFBbUI7QUFDL0MsU0FBSXpSLE9BQU8sRUFBWDtBQUFBLFNBQ0l5VSxlQUFlcGpDLFNBQVNzdUIsaUJBQVQsQ0FBMkI4UixRQUFRbjdCLElBQW5DLEVBQXlDLFdBQXpDLENBRG5CO0FBRUEsU0FBSSxPQUFPbTdCLFFBQVF6UixJQUFmLEtBQXdCLFdBQTVCLEVBQXlDO0FBQ3JDQSxnQkFBT3lSLFFBQVF6UixJQUFmO0FBQ0gsTUFGRCxNQUVPLElBQUksT0FBT3lSLFFBQVFpRCxTQUFmLEtBQTZCLFdBQWpDLEVBQThDO0FBQ2pEMVUsZ0JBQU95UixRQUFRaUQsU0FBZjtBQUNIO0FBQ0QsU0FBSUMsV0FBV0YsYUFBYSxDQUFiLENBQWYsQ0FSK0MsQ0FRZDtBQUNqQ0UsZ0JBQVlBLGFBQWEsU0FBYixHQUF5QixVQUF6QixHQUFzQ0EsUUFBbEQ7QUFDQTtBQUNBLFNBQUlDLG1CQUFtQixTQUFuQkEsZ0JBQW1CLENBQVU3NUIsR0FBVixFQUFlO0FBQ2xDQSxlQUFNdEksTUFBTXFJLElBQU4sQ0FBV0MsR0FBWCxFQUFnQjNCLFdBQWhCLEdBQThCN0IsT0FBOUIsQ0FBc0MsZUFBdEMsRUFBdUQsR0FBdkQsQ0FBTjtBQUNBLGdCQUFRd0QsSUFBSTlGLE9BQUosQ0FBWSxNQUFaLE1BQXdCLENBQUMsQ0FBekIsR0FBNkI4RixHQUE3QixHQUFtQ0EsSUFBSTlELE1BQUosQ0FBVyxDQUFYLEVBQWM4RCxJQUFJOUYsT0FBSixDQUFZLE1BQVosQ0FBZCxDQUEzQztBQUNILE1BSEQ7QUFJQSxTQUFJNC9CLGlDQUFpQyxTQUFqQ0EsOEJBQWlDLENBQVV2K0IsSUFBVixFQUFnQjtBQUNqRCxhQUFJdytCLFVBQVV4K0IsS0FBSzFDLEtBQUwsQ0FBVyxzQkFBWCxDQUFkO0FBQ0EsZ0JBQVFraEMsWUFBWSxJQUFaLEdBQW1CQSxRQUFRLENBQVIsQ0FBbkIsR0FBZ0NMLGFBQWF2OUIsSUFBYixDQUFrQixHQUFsQixDQUF4QztBQUNILE1BSEQ7QUFJQTtBQUNBLFNBQUk2OUIsZUFBZSxFQUFuQjtBQUNBLFNBQUksT0FBT3RELFFBQVF1RCxPQUFmLEtBQTJCLFdBQTNCLElBQTBDLE9BQU92RCxRQUFRdUQsT0FBUixDQUFnQkMsS0FBdkIsS0FBaUMsV0FBM0UsSUFDR3hELFFBQVF1RCxPQUFSLENBQWdCQyxLQUFoQixLQUEwQixFQURqQyxDQUNxQztBQURyQyxPQUVFO0FBQ0U7QUFDQUYsNEJBQWV0RCxRQUFRdUQsT0FBUixDQUFnQkMsS0FBL0I7QUFDSCxVQUxELE1BS08sSUFBSXhELFFBQVFyMkIsWUFBUixDQUFxQixZQUFyQixDQUFKLEVBQXdDO0FBQzNDO0FBQ0EyNUIsd0JBQWV0RCxRQUFRcjJCLFlBQVIsQ0FBcUIsWUFBckIsQ0FBZjtBQUNILE1BSE0sTUFHQSxJQUFJLE9BQU9xMkIsUUFBUXlELEdBQWYsS0FBdUIsV0FBdkIsSUFBc0N6RCxRQUFReUQsR0FBUixLQUFnQixFQUExRCxFQUE4RDtBQUNqRTtBQUNBSCx3QkFBZXRELFFBQVF5RCxHQUF2QjtBQUNIO0FBQ0Q7QUFDQSxTQUFJekQsUUFBUXA2QixTQUFSLENBQWtCcEMsT0FBbEIsQ0FBMEIsZUFBMUIsTUFBK0MsQ0FBQyxDQUFwRCxFQUF1RDtBQUNuRDtBQUNBO0FBQ0E7QUFDQSxnQkFBTztBQUNILHVCQUFVLEtBRFA7QUFFSCx5QkFBWSxVQUZUO0FBR0gseUJBQVkyL0IsaUJBQWlCNVUsSUFBakIsQ0FIVDtBQUlILDJCQUFjO0FBSlgsVUFBUDtBQU9ILE1BWEQsTUFXTyxJQUFJLENBQUM0UyxlQUFlLENBQWYsTUFBc0IsVUFBdEIsSUFBb0NBLGVBQWUsQ0FBZixNQUFzQixXQUEzRCxLQUNKbUMsYUFBYTkvQixPQUFiLENBQXFCLEdBQXJCLE1BQThCLENBQUMsQ0FEL0IsRUFFTDtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSWtnQyxhQUFhSixhQUFhbCtCLEtBQWIsQ0FBbUIsR0FBbkIsQ0FBakI7QUFDQSxhQUFJdStCLFdBQVlYLGFBQWEsQ0FBYixFQUFnQjdnQyxLQUFoQixDQUFzQm0vQixlQUF0QixJQUNWOEIsK0JBQStCcEQsUUFBUW43QixJQUF2QyxDQURVLEdBQ3FDcytCLGlCQUFpQjVVLElBQWpCLENBRHJEO0FBRUEsYUFBSXhtQixTQUFTL0csTUFBTXdHLHVCQUFOLENBQThCdzRCLE9BQTlCLEVBQXVDLFNBQXZDLENBQWIsQ0FSRixDQVFtRTtBQUNqRSxhQUFJajRCLFdBQVcsS0FBZixFQUFzQjtBQUNsQkEsc0JBQVMvRyxNQUFNNEcsMEJBQU4sQ0FBaUNvNEIsT0FBakMsRUFBMEMsU0FBMUMsQ0FBVCxDQURrQixDQUM4QztBQUNuRTtBQUNELGFBQUk0RCxlQUFlNWlDLE1BQU04Ryw4QkFBTixDQUFxQ0MsTUFBckMsRUFBNkNpNEIsUUFBUW43QixJQUFyRCxDQUFuQjtBQUNBLGFBQUk2K0IsV0FBV3IrQixNQUFYLEdBQW9CLENBQXhCLEVBQTJCO0FBQ3ZCLG9CQUFPO0FBQ0gsMkJBQVUsS0FEUDtBQUVILDZCQUFZNjlCLFNBQVN2N0IsV0FBVCxFQUZUO0FBR0gsNkJBQVlnOEIsUUFIVDtBQUlILCtCQUFjRCxXQUFXLENBQVgsRUFBYy83QixXQUFkLEVBSlg7QUFLSCw2QkFBYSxPQUFPKzdCLFdBQVcsQ0FBWCxDQUFQLEtBQXlCLFFBQXpCLEdBQW9DQSxXQUFXLENBQVgsRUFBYy83QixXQUFkLEVBQXBDLEdBQWtFODVCLEdBTDVFO0FBTUgsaUNBQWlCbUMsaUJBQWlCLEtBQWpCLElBQTBCQSxpQkFBaUIsQ0FBM0MsR0FBK0NBLFlBQS9DLEdBQThEbkM7QUFONUUsY0FBUDtBQVFIO0FBRUosTUExQk0sTUEwQkEsSUFBSXpnQyxNQUFNNkcsY0FBTixDQUFxQm00QixPQUFyQixFQUE4QixnQkFBOUIsRUFBZ0RuM0IsU0FBaEQsRUFBMkQsSUFBM0QsQ0FBSixFQUFzRTtBQUN6RTtBQUNBLGdCQUFPO0FBQ0gsdUJBQVUsS0FEUDtBQUVILHlCQUFZLEtBRlQ7QUFHSCx5QkFBWSxTQUhUO0FBSUgsMkJBQWM7QUFKWCxVQUFQO0FBT0gsTUFUTSxNQVNBLElBQUk3SCxNQUFNNkcsY0FBTixDQUFxQm00QixPQUFyQixFQUE4QixlQUE5QixFQUErQ24zQixTQUEvQyxFQUEwRCxJQUExRCxDQUFKLEVBQXFFO0FBQ3hFO0FBQ0EsZ0JBQU8sS0FBUDtBQUVILE1BSk0sTUFJQSxJQUFJN0gsTUFBTTZHLGNBQU4sQ0FBcUJtNEIsT0FBckIsRUFBOEIsZ0JBQTlCLEtBQW1EaC9CLE1BQU02RyxjQUFOLENBQXFCbTRCLE9BQXJCLEVBQThCLGFBQTlCLENBQXZELEVBQXFHO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBLGdCQUFPO0FBQ0gsdUJBQVUsU0FEUDtBQUVILHlCQUFZLGFBRlQ7QUFHSCx5QkFBWW1ELGlCQUFpQjVVLElBQWpCLENBSFQsRUFHa0M7QUFDckMsMkJBQWMsYUFKWDtBQUtILGtCQUFLO0FBQ0QsdUJBQU00VSxpQkFBaUI1VSxJQUFqQixJQUF5QixRQUQ5QixFQUN5QztBQUMxQyx1QkFBTTRTLGVBQWUsQ0FBZixJQUFvQixHQUFwQixHQUEwQnVCLGFBRi9CLENBRThDO0FBRjlDO0FBTEYsVUFBUDtBQVdILE1BZk0sTUFlQSxJQUFJLENBQUN2QixlQUFlLENBQWYsTUFBc0IsTUFBdEIsSUFBZ0NBLGVBQWUsQ0FBZixNQUFzQixXQUF2RCxLQUNKbmdDLE1BQU02RyxjQUFOLENBQXFCbTRCLE9BQXJCLEVBQThCLDJCQUE5QixFQUEyRCxDQUEzRCxDQURBLEVBRUw7QUFDRTtBQUNBLGdCQUFPO0FBQ0gsdUJBQVUsS0FEUDtBQUVILHlCQUFZLFdBRlQ7QUFHSCx5QkFBWW1ELGlCQUFpQjVVLElBQWpCLENBSFQsRUFHa0M7QUFDckMsMkJBQWM7QUFKWCxVQUFQO0FBTUgsTUFWTSxNQVVBLElBQUl5UixRQUFRbjdCLElBQVIsQ0FBYXJCLE9BQWIsQ0FBcUIsY0FBckIsTUFBeUMsQ0FBQyxDQUE5QyxFQUFpRDtBQUNwRDtBQUNBMC9CLG9CQUFXLGlCQUFYO0FBQ0EsYUFBSVcsV0FBVzdpQyxNQUFNd0csdUJBQU4sQ0FBOEJ3NEIsT0FBOUIsRUFBdUMsVUFBdkMsRUFBbUQsQ0FBbkQsQ0FBZjtBQUNBLGFBQUksT0FBTzZELFNBQVNOLE9BQVQsQ0FBaUJPLFFBQXhCLEtBQXFDLFdBQXpDLEVBQXNEO0FBQ2xELGlCQUFJQSxXQUFXNXhCLFNBQVMyeEIsU0FBU04sT0FBVCxDQUFpQk8sUUFBakIsQ0FBMEJ0K0IsTUFBMUIsQ0FBaUMsQ0FBakMsRUFBb0MsQ0FBcEMsQ0FBVCxFQUFpRCxFQUFqRCxDQUFmO0FBQ0EsaUJBQUl1K0IsVUFBVTtBQUNWLG1DQUFrQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQURSLEVBQ21CO0FBQzdCLHNDQUFxQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUZYLEVBRXNCO0FBQ2hDLGlDQUFnQixDQUFDLENBQUQsRUFBSSxDQUFKLENBSE4sRUFHaUI7QUFDM0IsMENBQXlCLENBQUMsQ0FBRCxDQUpmLENBSTBCO0FBSjFCLGNBQWQ7QUFNQSxpQkFBSWwxQixDQUFKO0FBQ0Esa0JBQUtBLENBQUwsSUFBVWsxQixPQUFWLEVBQW1CO0FBQ2YscUJBQUlBLFFBQVFsMUIsQ0FBUixFQUFXckwsT0FBWCxDQUFtQnNnQyxRQUFuQixNQUFpQyxDQUFDLENBQXRDLEVBQXlDO0FBQ3JDWixnQ0FBV3IwQixDQUFYO0FBQ0E7QUFDSDtBQUNKO0FBQ0o7QUFDRCxnQkFBTztBQUNILHVCQUFVLEtBRFA7QUFFSCx5QkFBWXEwQixRQUZUO0FBR0gseUJBQVlDLGlCQUFpQjVVLElBQWpCLENBSFQsRUFHa0M7QUFDckMsMkJBQWM7QUFKWCxVQUFQO0FBTUg7O0FBRUQsWUFBTyxLQUFQLENBekkrQyxDQXlJaEM7QUFDbEIsRUExSUQ7O0FBNElBLEtBQUl5VixrQkFBa0IsU0FBbEJBLGVBQWtCLEdBQVk7QUFDOUIsWUFBT2xqQyxVQUFVckIsU0FBVixDQUFvQjhzQixTQUFwQixDQUE4QkMsb0JBQTlCLEVBQVA7QUFDSCxFQUZEOztBQUlBOzs7Ozs7QUFNQSxLQUFJMFUsb0JBQW9CLFNBQXBCQSxpQkFBb0IsQ0FBVTM4QixHQUFWLEVBQWV3cUIsUUFBZixFQUF5QjtBQUM3Q3hxQixXQUFNeS9CLG9CQUFvQnovQixHQUExQjtBQUNBOUQsU0FBSSxnQkFBSixFQUFzQjhELEdBQXRCO0FBQ0EsU0FBSTAvQixNQUFNeGhDLFNBQVNpQyxhQUFULENBQXVCLEtBQXZCLENBQVY7QUFDQSxTQUFJLE9BQU9xcUIsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNoQ2tWLGFBQUl0eEIsTUFBSixHQUFhb2MsUUFBYjtBQUNIO0FBQ0QsU0FBSSxPQUFPbHVCLE9BQU9xakMsbUJBQWQsS0FBc0MsV0FBMUMsRUFBdUQ7QUFDbkQ7QUFDQUQsYUFBSXQwQixHQUFKLEdBQVVwTCxHQUFWO0FBQ0g7QUFDSixFQVhEOztBQWFBLEtBQUltNkIsNkJBQTZCLFNBQTdCQSwwQkFBNkIsQ0FBVXlGLHVCQUFWLEVBQW1DM0YsZ0JBQW5DLEVBQXFEO0FBQ2xGLFNBQUk0RixjQUFjcGpDLE1BQU13SixTQUFOLENBQWdCMjVCLHVCQUFoQixDQUFsQjtBQUNBLFNBQUksT0FBT0MsV0FBUCxLQUF1QixXQUF2QixJQUFzQ0EsWUFBWS8rQixNQUFaLEdBQXFCLENBQS9ELEVBQWtFO0FBQzlENUUsYUFBSSwrQkFBK0IwakMsdUJBQS9CLEdBQXlELFVBQXpELEdBQXNFQyxXQUExRTtBQUNBO0FBQ0FsRCwyQkFBa0JrRCxXQUFsQjtBQUNBNUYsMEJBQWlCLE1BQWpCLEVBQXlCajBCLElBQXpCLENBQThCNjVCLFdBQTlCO0FBQ0FwakMsZUFBTTRKLFlBQU4sQ0FBbUJ1NUIsdUJBQW5CO0FBQ0g7QUFDSixFQVREOztBQVdBLEtBQUlFLDRCQUE0QixTQUE1QkEseUJBQTRCLENBQVVDLGVBQVYsRUFBMkJILHVCQUEzQixFQUFvREksdUJBQXBELEVBQTZFO0FBQ3pHO0FBQ0EsU0FBSUMsWUFBWUYsZ0JBQWdCQyx1QkFBaEIsRUFBeUMsTUFBekMsRUFBaUQxN0IsU0FBakQsRUFBNEQsS0FBNUQsQ0FBaEI7QUFDQTdILFdBQU04SSxTQUFOLENBQWdCcTZCLHVCQUFoQixFQUF5Q0ssU0FBekMsRUFBb0QsRUFBcEQ7QUFDQS9qQyxTQUFJLHVCQUF1QjBqQyx1QkFBdkIsR0FBaUQsVUFBakQsR0FBOERLLFNBQWxFO0FBQ0gsRUFMRDs7QUFPQTs7O0FBR0EsS0FBSUMsK0JBQStCLFNBQS9CQSw0QkFBK0IsQ0FBVUgsZUFBVixFQUEyQjk2QixHQUEzQixFQUFnQ2xCLEtBQWhDLEVBQXVDaThCLHVCQUF2QyxFQUFnRTtBQUMvRixTQUFJRyxlQUFlLEtBQW5CO0FBQUEsU0FDSUMsWUFBWSxJQURoQjtBQUFBLFNBRUlDLFNBQVMsQ0FBQzVqQyxNQUFNbUksdUJBQU4sQ0FBOEJiLEtBQTlCLENBRmQ7QUFBQSxTQUdJdThCLG1CQUFtQixTQUFuQkEsZ0JBQW1CLENBQVVyN0IsR0FBVixFQUFlbEIsS0FBZixFQUFzQnpFLE9BQXRCLEVBQStCK2dDLE1BQS9CLEVBQXVDO0FBQ3REeGdDLHNCQUFhUCxPQUFiO0FBQ0EsYUFBSXlFLFNBQVMsQ0FBQ284QixZQUFWLElBQTBCRSxNQUExQixJQUFvQ3A3QixHQUF4QyxFQUE2QztBQUN6Q3hJLG1CQUFNdUksVUFBTixDQUFpQkMsR0FBakI7QUFDSDtBQUNEazdCLHdCQUFlLElBQWY7QUFDSCxNQVRMO0FBVUExakMsV0FBTWlJLFdBQU4sQ0FBa0JYLEtBQWxCO0FBQ0FnOEIscUJBQWdCQyx1QkFBaEIsRUFBeUMsTUFBekMsRUFBaUQsVUFBVU8sT0FBVixFQUFtQjtBQUNoRUQsMEJBQWlCcjdCLEdBQWpCLEVBQXNCbEIsS0FBdEIsRUFBNkJxOEIsU0FBN0IsRUFBd0NDLE1BQXhDO0FBQ0gsTUFGRDtBQUdBRCxpQkFBWXRnQyxXQUFXLFlBQVk7QUFDL0J3Z0MsMEJBQWlCcjdCLEdBQWpCLEVBQXNCbEIsS0FBdEIsRUFBNkJxOEIsU0FBN0IsRUFBd0NDLE1BQXhDO0FBQ0gsTUFGVyxFQUVUcEQsZ0JBRlMsQ0FBWjtBQUdILEVBbEJEOztBQW9CQSxLQUFJZixZQUFZLFNBQVpBLFNBQVksQ0FBVTZELGVBQVYsRUFBMkJILHVCQUEzQixFQUFvRDM2QixHQUFwRCxFQUF5RGxCLEtBQXpELEVBQWdFc2IsU0FBaEUsRUFBMkU7QUFDdkYsU0FBSXdjLFNBQVM1MkIsR0FBVCxLQUFpQm00QiwyQkFBMkJuNEIsR0FBM0IsQ0FBckIsRUFBc0Q7QUFDbEQ7QUFDQTY2QixtQ0FBMEJDLGVBQTFCLEVBQTJDSCx1QkFBM0MsRUFBb0V2Z0IsU0FBcEU7QUFDSCxNQUhELE1BR087QUFDSDtBQUNBNmdCLHNDQUE2QkgsZUFBN0IsRUFBOEM5NkIsR0FBOUMsRUFBbURsQixLQUFuRCxFQUEwRHNiLFNBQTFEO0FBQ0g7QUFDSixFQVJEOztBQVVBOzs7O0FBSUEsS0FBSWljLGtDQUFrQyxTQUFsQ0EsK0JBQWtDLENBQVVrRixtQkFBVixFQUErQjtBQUNqRSxTQUFJQyxjQUFjcGxDLFNBQVNvbEIsVUFBVCxDQUFvQixDQUFwQixFQUF1QixXQUF2QixFQUFvQyxJQUFwQyxDQUFsQjtBQUNBLFNBQUlnZ0IsZUFBZXpELHVCQUF1Qi85QixPQUF2QixDQUErQndoQyxXQUEvQixNQUFnRCxDQUFDLENBQXBFLEVBQXVFO0FBQ25FO0FBQ0E7QUFDSDtBQUNELFNBQUk1RCxrQkFBa0IsSUFBdEIsRUFBNEI7QUFDeEI7QUFDSDtBQUNEQyxxQkFBZ0IsdUJBQVUvNEIsS0FBVixFQUFpQjtBQUFHO0FBQ2hDLGFBQUkwM0IsVUFBVWgvQixNQUFNNEcsMEJBQU4sQ0FBaUNVLE1BQU0yOEIsTUFBTixJQUFnQjM4QixNQUFNNDhCLFVBQXZELEVBQW1FLEdBQW5FLEVBQXdFLElBQXhFLENBQWQ7QUFDQSxhQUFJbEYsWUFBWSxLQUFoQixFQUF1QjtBQUNuQitFLGlDQUFvQi9FLE9BQXBCLEVBQTZCMTNCLEtBQTdCO0FBQ0g7QUFDSixNQUxEO0FBTUE7QUFDQTtBQUNBdEgsV0FBTWtILFFBQU4sQ0FBZXpGLFNBQVNDLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLENBQWYsRUFBeUQsT0FBekQsRUFBa0UyK0IsYUFBbEU7QUFDQUQscUJBQWdCLElBQWhCO0FBQ0gsRUFuQkQ7O0FBc0JBOzs7OztBQUtBLEtBQUl0VCxvQkFBb0IsU0FBcEJBLGlCQUFvQixHQUFZO0FBQ2hDLFNBQUl4cUIsV0FBVy9ELE9BQU9pSCxpQkFBUCxFQUFmO0FBQUEsU0FDSWdELE1BQU1sRyxTQUFTdUIsSUFEbkI7QUFBQSxTQUVJc2dDLFdBQVdsbEMsUUFBUSx3QkFBUixDQUZmOztBQUlBLFNBQUlWLE9BQU8ybUIsT0FBUCxPQUFxQixhQUFyQixJQUFzQ2lmLFFBQTFDLEVBQW9EO0FBQ2hEMzdCLGVBQU1sRyxTQUFTbUksUUFBVCxHQUFvQixJQUFwQixHQUEyQm5JLFNBQVNDLFFBQXBDLEdBQStDNGhDLFFBQXJEO0FBQ0g7O0FBRUQsWUFBTzM3QixHQUFQO0FBQ0gsRUFWRDs7QUFhQTs7Ozs7Ozs7QUFRQSxLQUFJNDdCLHNCQUFzQixTQUF0QkEsbUJBQXNCLENBQVVDLElBQVYsRUFBZ0I7QUFDdEMsWUFBT0EsU0FBUyxnQkFBVCxHQUE0QixPQUE1QixHQUFzQyxPQUE3QztBQUNILEVBRkQ7O0FBSUFoa0MsUUFBT0MsT0FBUCxHQUFpQjtBQUNiOCtCLGVBQVVBLFFBREc7QUFFYndCLHdCQUFtQkEsaUJBRk47QUFHYkUsdUJBQWtCQSxnQkFITDtBQUliSSxxQkFBZ0JBLGNBSkg7QUFLYkUsa0JBQWFBLFdBTEE7QUFNYjdiLGtCQUFhQSxXQU5BO0FBT2JrYyx1QkFBa0JBLGdCQVBMO0FBUWJ1QixzQkFBaUJBLGVBUko7QUFTYnRCLGtCQUFhQSxXQVRBO0FBVWJDLDBCQUFxQkEsbUJBVlI7QUFXYjFCLGtCQUFhQSxXQVhBO0FBWWJmLGdDQUEyQkEseUJBWmQ7QUFhYmdCLHdCQUFtQkEsaUJBYk47QUFjYnhDLGlDQUE0QkEsMEJBZGY7QUFlYitCLGdCQUFXQSxTQWZFO0FBZ0JiWixzQ0FBaUNBLCtCQWhCcEI7QUFpQmIvUix3QkFBbUJBLGlCQWpCTjtBQWtCYnNYLDBCQUFxQkEsbUJBbEJSO0FBbUJicjZCLFFBQUcsYUFBWTtBQUNYL0osZUFBTXdILFdBQU4sQ0FBa0IvRixTQUFTQyxvQkFBVCxDQUE4QixNQUE5QixFQUFzQyxDQUF0QyxDQUFsQixFQUE0RCxPQUE1RCxFQUFxRTIrQixhQUFyRTtBQUNBRCx5QkFBZ0IsS0FBaEI7QUFDSDtBQXRCWSxFQUFqQixDOzs7Ozs7Ozs7OztTQ3JqQmdCa0UsZ0IsR0FBQUEsZ0I7U0FxREFDLHVCLEdBQUFBLHVCO1NBbUJBQywwQixHQUFBQSwwQjs7QUFqRmhCOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVPLFVBQVNGLGdCQUFULEdBQTBDO0FBQUEsU0FBaEIxaEIsU0FBZ0IseURBQUosRUFBSTs7QUFDN0MsU0FBTXVjLGlCQUFpQixpQ0FBdkI7O0FBRUE7QUFDQUEsNEJBQ1UsV0FEVixFQUN1QixFQUFDcDJCLE9BQU8sS0FBUixFQUR2QixVQUVVLFNBRlYsRUFFcUIsRUFBQ0EsT0FBTyxJQUFSLEVBRnJCLFVBR1UsTUFIVixFQUdrQixFQUFDQSxPQUFPLE9BQVIsRUFIbEI7O0FBS0E7QUFDQW8yQiw0QkFDVSxTQURWLEVBQ3FCLEVBQUNHLFNBQVMsV0FBVixFQURyQixVQUVVLFlBRlYsRUFFd0IsRUFBQ0EsU0FBUyxjQUFWLEVBRnhCLFVBR1UsU0FIVixFQUdxQixFQUFDQSxTQUFTLENBQUMsWUFBRCxFQUFlLFVBQWYsQ0FBVixFQUhyQixVQUlVLE9BSlYsRUFJbUIsRUFBQ0EsU0FBUyxVQUFWLEVBSm5CLFVBS1UsVUFMVixFQUtzQixFQUFDQSxTQUFTLE1BQVYsRUFMdEIsVUFNVSxZQU5WLEVBTXdCLEVBQUNBLFNBQVMsY0FBVixFQU54QixVQU9VLFNBUFYsRUFPcUIsRUFBQ0EsU0FBUyxXQUFWLEVBUHJCLFVBUVUsU0FSVixFQVFxQixFQUFDQSxTQUFTLFdBQVYsRUFSckIsVUFTVSx5QkFUVixFQVNxQyxFQUFDQSxTQUFTLFFBQVYsRUFUckMsVUFVVSxVQVZWLEVBVXNCLEVBQUNBLFNBQVMsTUFBVixFQVZ0QixVQVdVLG9CQVhWLEVBV2dDLEVBQUNBLFNBQVMsSUFBVixFQVhoQyxVQVlVLGdCQVpWLEVBWTRCLEVBQUNBLFNBQVMsQ0FBQyxTQUFELEVBQVksVUFBWixFQUF3QixXQUF4QixDQUFWLEVBWjVCLFVBYVUsV0FiVixFQWF1QixFQUFDQSxTQUFTLFlBQVYsRUFidkIsVUFjVSxTQWRWLEVBY3FCLEVBQUNBLFNBQVMsQ0FBQyxVQUFELEVBQWEsVUFBYixDQUFWLEVBZHJCOztBQWdCQTtBQUNBLFNBQU1hLGlCQUFpQixxQ0FBdkI7QUFDQWhCLDRCQUNVLFlBRFYsRUFDd0IsRUFBQ3AyQixPQUFVbzNCLGVBQWUsQ0FBZixDQUFWLFNBQUQsRUFEeEIsVUFFVSxhQUZWLEVBRXlCLEVBQUNiLFNBQVMsZ0JBQVYsRUFBNEJ2OEIsTUFBTSxDQUFDbzlCLGNBQUQsQ0FBbEMsRUFGekIsVUFHVSxhQUhWLEVBR3lCLEVBQUNiLFNBQVMsZ0JBQVYsRUFBNEJ2OEIsTUFBTSxDQUFDbzlCLGNBQUQsQ0FBbEMsRUFIekIsVUFJVSxpQkFKVixFQUk2QixFQUFDYixTQUFTLGdCQUFWLEVBQTRCdjhCLE1BQU0sQ0FBQ285QixjQUFELENBQWxDLEVBSjdCLFVBS1UsaUJBTFYsRUFLNkIsRUFBQ2IsU0FBUyxnQkFBVixFQUE0QnY4QixNQUFNLENBQUNvOUIsY0FBRCxDQUFsQyxFQUw3Qjs7QUFPQTtBQUNBLFNBQU1zRSxxQkFBcUIseUNBQTNCO0FBQ0F0Riw0QkFDVSxVQURWLEVBQ3NCO0FBQ2RFLHVCQUFjO0FBQUEsb0JBQU1vRix1QkFBdUIsS0FBdkIsSUFBZ0NDLHFCQUF0QztBQUFBLFVBREE7QUFFZDM3QixnQkFBTzA3QjtBQUZPLE1BRHRCOztBQU1BLFNBQU1FLHdCQUF3Qiw0Q0FBOUI7QUFDQXhGLDRCQUNVLEtBRFYsRUFDaUI7QUFDVEUsdUJBQWM7QUFBQSxvQkFBTXNGLHFCQUFOO0FBQUEsVUFETDtBQUVUNTdCLGdCQUFPNDdCO0FBRkUsTUFEakI7O0FBTUEsWUFBT2hsQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQmdqQixTQUFsQixFQUE2QnVjLGVBQWVwYixLQUFmLEVBQTdCLENBQVA7QUFDSDs7QUFFTSxVQUFTd2dCLHVCQUFULEdBQWlEO0FBQUEsU0FBaEIzaEIsU0FBZ0IseURBQUosRUFBSTs7QUFDcEQsU0FBTXVjLGlCQUFpQixpQ0FBdkI7QUFDQSxTQUFNN1osV0FBVywrQkFBakI7QUFDQSxTQUFNc2YsVUFBVXRmLFNBQVNqQyxRQUFULENBQWtCLEtBQWxCLENBQWhCOztBQUVBOGIsNEJBQ1UsVUFEVixFQUNzQixFQUFDRyxTQUFTLGFBQVYsRUFBeUJ2MkIsT0FBT3VjLFFBQWhDLEVBRHRCOztBQUdBO0FBQ0E2Wiw0QkFDVSxXQURWLEVBQ3VCLEVBQUNHLFNBQVMsY0FBVixFQUEwQkQsY0FBYztBQUFBLG9CQUFNLENBQUN1RixPQUFQO0FBQUEsVUFBeEMsRUFEdkIsVUFFVSxjQUZWLEVBRTBCLEVBQUN0RixTQUFTLGlCQUFWLEVBQTZCRCxjQUFjO0FBQUEsb0JBQU0sQ0FBQ3VGLE9BQVA7QUFBQSxVQUEzQyxFQUYxQixVQUdVLG9CQUhWLEVBR2dDLEVBQUN0RixTQUFTLGtCQUFWLEVBQThCRCxjQUFjO0FBQUEsb0JBQU0sQ0FBQ3VGLE9BQVA7QUFBQSxVQUE1QyxFQUE0RDdoQyxNQUFNLENBQUMsSUFBRCxDQUFsRSxFQUhoQyxVQUlVLHNCQUpWLEVBSWtDLEVBQUN1OEIsU0FBUyxnQkFBVixFQUE0QkQsY0FBYztBQUFBLG9CQUFNLENBQUN1RixPQUFQO0FBQUEsVUFBMUMsRUFBMEQ3aEMsTUFBTSxDQUFDLElBQUQsQ0FBaEUsRUFKbEMsVUFLVSxlQUxWLEVBSzJCLEVBQUN1OEIsU0FBUyxrQkFBVixFQUE4QkQsY0FBYztBQUFBLG9CQUFNLENBQUN1RixPQUFQO0FBQUEsVUFBNUMsRUFMM0I7O0FBT0EsWUFBT2psQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQmdqQixTQUFsQixFQUE2QnVjLGVBQWVwYixLQUFmLEVBQTdCLENBQVA7QUFDSDs7QUFFTSxVQUFTeWdCLDBCQUFULEdBQW9EO0FBQUEsU0FBaEI1aEIsU0FBZ0IseURBQUosRUFBSTs7QUFDdkQsU0FBTXVjLGlCQUFpQixpQ0FBdkI7O0FBRUFBLDRCQUNVLFdBRFYsRUFDdUIsRUFBQ0csU0FBUyxPQUFWLEVBRHZCLFVBRVUsU0FGVixFQUVxQixFQUFDdjJCLE9BQU8sUUFBUixFQUZyQjs7QUFJQSxZQUFPcEosT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JnakIsU0FBbEIsRUFBNkJ1YyxlQUFlcGIsS0FBZixFQUE3QixDQUFQO0FBQ0g7O0FBR0Q7Ozs7OztBQU1BLFVBQVMyZ0IsbUJBQVQsR0FBK0I7QUFDM0IsU0FBSUcsTUFBTWowQixVQUFVazBCLGFBQXBCO0FBQUEsU0FBbUNDLFVBQW5DO0FBQ0EsU0FBSUYsUUFBUSxLQUFaLEVBQW1CO0FBQ2YsZ0JBQU9BLEdBQVA7QUFDSDs7QUFFRDtBQUNBcGpDLGNBQVNvRSxNQUFULEdBQWtCLGNBQWxCLENBUDJCLENBT087QUFDbENrL0Isa0JBQWF0akMsU0FBU29FLE1BQVQsQ0FBZ0JyRCxPQUFoQixDQUF3QixhQUF4QixNQUEyQyxDQUFDLENBQXpEO0FBQ0FmLGNBQVNvRSxNQUFULEdBQWtCLHFEQUFsQixDQVQyQixDQVM4QztBQUN6RSxZQUFPay9CLFVBQVA7QUFDSCxHOzs7Ozs7OztBQzdHRDFrQyxRQUFPQyxPQUFQLEdBQWlCO0FBQ2JneUIsU0FBSSxtQkFBQW4wQixDQUFRLEdBQVIsQ0FEUztBQUViNm1DLHNCQUFpQixtQkFBQTdtQyxDQUFRLEdBQVIsQ0FGSjtBQUdiczVCLGdCQUFXLG1CQUFBdDVCLENBQVEsR0FBUixDQUhFO0FBSWJ1a0IsaUJBQVksbUJBQUF2a0IsQ0FBUSxHQUFSLENBSkM7QUFLYjhtQyxpQkFBWSxtQkFBQTltQyxDQUFRLEdBQVIsQ0FMQztBQU1ic0Msc0JBQWlCLG1CQUFBdEMsQ0FBUSxHQUFSLENBTko7QUFPYjBrQixlQUFVLG1CQUFBMWtCLENBQVEsR0FBUixDQVBHO0FBUWIrbUMsYUFBUSxtQkFBQS9tQyxDQUFRLEdBQVIsQ0FSSztBQVNid2tCLGFBQVEsbUJBQUF4a0IsQ0FBUSxHQUFSLENBVEs7QUFVYnc2Qix1QkFBa0IsbUJBQUF4NkIsQ0FBUSxHQUFSLENBVkw7QUFXYmduQyxlQUFVLG1CQUFBaG5DLENBQVEsR0FBUixDQVhHO0FBWWJza0Isa0JBQWEsbUJBQUF0a0IsQ0FBUSxHQUFSLENBWkE7QUFhYjJrQixrQkFBYSxtQkFBQTNrQixDQUFRLEdBQVIsQ0FiQTtBQWNieWtCLGdCQUFXLG1CQUFBemtCLENBQVEsR0FBUixDQWRFO0FBZWJxa0IsYUFBUSxtQkFBQXJrQixDQUFRLEdBQVIsQ0FmSztBQWdCYmluQyx1QkFBa0IsbUJBQUFqbkMsQ0FBUSxHQUFSLENBaEJMO0FBaUJiMDBCLFdBQU0sbUJBQUExMEIsQ0FBUSxHQUFSLENBakJPO0FBa0Jia25DLGdCQUFXLG1CQUFBbG5DLENBQVEsR0FBUixDQWxCRTtBQW1CYm1uQyxtQkFBYyxtQkFBQW5uQyxDQUFRLEdBQVIsQ0FuQkQ7QUFvQmJvbkMsbUJBQWMsbUJBQUFwbkMsQ0FBUSxHQUFSO0FBcEJELEVBQWpCLEM7Ozs7Ozs7O0FDQUEsS0FBSXFuQyxXQUFXLG1CQUFBcm5DLENBQVEsR0FBUixDQUFmOztBQUVBLEtBQUk2QixRQUFRLG1CQUFBN0IsQ0FBUSxHQUFSLENBQVo7QUFDQSxLQUFJZ0IsU0FBUyxtQkFBQWhCLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSXFrQixTQUFTLG1CQUFBcmtCLENBQVEsR0FBUixDQUFiOztBQUVBLEtBQUlzQixNQUFNLG1CQUFBdEIsQ0FBUSxHQUFSLEVBQWtCLFlBQWxCLENBQVY7O0FBRUEsS0FBSXNuQyx1QkFBdUIsRUFBM0I7QUFBQSxLQUNJQyxjQUFjLFNBRGxCO0FBQUEsS0FFSUMsZ0JBQWdCRCxjQUFjLFNBRmxDO0FBQUEsS0FHSUUsbUJBQW1CRixjQUFjLE1BSHJDO0FBQUEsS0FJSUcscUJBQXFCSCxjQUFjLGNBSnZDO0FBQUEsS0FLSUksWUFBWTtBQUNSLGdCQUFXLG1CQURIO0FBRVIsd0JBQW1CLGlCQUZYO0FBR1IsZ0JBQVcsdUJBSEg7QUFJUixlQUFVLHVCQUpGO0FBS1IsZ0JBQVcseUJBTEg7QUFNUixnQkFBVztBQU5ILEVBTGhCOztBQWNBLEtBQUlDLGNBQWMsU0FBZEEsV0FBYyxDQUFVdFQsS0FBVixFQUFpQjtBQUMvQixTQUFJdVQsUUFBUXZrQyxTQUFTa3lCLGNBQVQsQ0FBd0JsQixLQUF4QixDQUFaO0FBQ0EsU0FBSSxPQUFPdVQsS0FBUCxLQUFpQixXQUFqQixJQUFnQ0EsVUFBVSxJQUE5QyxFQUFvRDtBQUNoRCxnQkFBT0EsTUFBTWw2QixTQUFOLENBQWdCaEgsT0FBaEIsQ0FBd0IsTUFBeEIsRUFBZ0MsRUFBaEMsQ0FBUDtBQUNIO0FBQ0QsWUFBTyxLQUFQO0FBQ0gsRUFORDs7QUFRQSxLQUFJbWhDLEtBQUssU0FBTEEsRUFBSyxDQUFVeEosSUFBVixFQUFnQjtBQUNyQixVQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDQSxVQUFLaEssS0FBTCxHQUFhaVQsY0FBY2pKLElBQTNCO0FBQ0EsVUFBS25vQixLQUFMLEdBQWEsSUFBYjtBQUNBLFVBQUtELE1BQUwsR0FBYyxJQUFkO0FBQ0EsVUFBSzh3QixRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsVUFBS2UsU0FBTCxHQUFpQixLQUFqQjtBQUNBLFVBQUtDLE1BQUwsR0FBYyxLQUFkO0FBQ0EsVUFBS0MsUUFBTCxHQUFnQixLQUFoQjtBQUNBLFVBQUtDLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxVQUFLQyxRQUFMLEdBQWdCO0FBQ1pDLGVBQU07QUFETSxNQUFoQjtBQUdBLFVBQUt6bEMsT0FBTCxHQUFlLElBQWY7O0FBRUEsVUFBS2cxQixNQUFMLEdBQWMsVUFBZDtBQUNBLFVBQUswUSxPQUFMLEdBQWUsS0FBZjtBQUNBLFVBQUtuUSxZQUFMLEdBQW9CLEtBQXBCO0FBQ0EsVUFBS29RLGlCQUFMLEdBQXlCLEtBQXpCO0FBQ0EsVUFBS0MsaUJBQUwsR0FBeUIsRUFBekI7QUFDQSxVQUFLQyxvQkFBTCxHQUE0QixFQUE1QjtBQUNILEVBckJEOztBQXVCQVYsSUFBR3o1QixTQUFILENBQWFvNkIsU0FBYixHQUF5QixVQUFVNzlCLEtBQVYsRUFBaUI7QUFDdEMsVUFBS285QixNQUFMLEdBQWNwOUIsS0FBZDtBQUNBLFlBQU8sS0FBS285QixNQUFaO0FBQ0gsRUFIRDs7QUFLQUYsSUFBR3o1QixTQUFILENBQWEyckIsS0FBYixHQUFxQixZQUFZO0FBQzdCLFVBQUt5TyxTQUFMLENBQWUsSUFBZjtBQUNBLFVBQUtyUSxJQUFMO0FBQ0gsRUFIRDs7QUFLQTBQLElBQUd6NUIsU0FBSCxDQUFhcTZCLFNBQWIsR0FBeUIsWUFBWTtBQUNqQyxZQUFPLEtBQUtWLE1BQVo7QUFDSCxFQUZEOztBQUlBRixJQUFHejVCLFNBQUgsQ0FBYTJtQixXQUFiLEdBQTJCLFVBQVVwcUIsS0FBVixFQUFpQjtBQUN4QyxVQUFLcTlCLFFBQUwsR0FBZ0JyOUIsS0FBaEI7QUFDQSxZQUFPLEtBQUtxOUIsUUFBWjtBQUNILEVBSEQ7O0FBS0FILElBQUd6NUIsU0FBSCxDQUFhMG1CLFVBQWIsR0FBMEIsWUFBWTtBQUNsQyxZQUFPLEtBQUtrVCxRQUFaO0FBQ0gsRUFGRDs7QUFJQUgsSUFBR3o1QixTQUFILENBQWFxckIsU0FBYixHQUF5QixVQUFVdDVCLE1BQVYsRUFBa0I7QUFDdkMsU0FBSTBGLENBQUo7QUFDQSxVQUFLQSxDQUFMLElBQVUxRixNQUFWLEVBQWtCO0FBQ2QsYUFBSUEsT0FBT3NRLGNBQVAsQ0FBc0I1SyxDQUF0QixDQUFKLEVBQThCO0FBQzFCLGtCQUFLQSxDQUFMLElBQVUxRixPQUFPMEYsQ0FBUCxDQUFWO0FBQ0g7QUFDSjtBQUNELFlBQU8sSUFBUDtBQUNILEVBUkQ7O0FBVUFnaUMsSUFBR3o1QixTQUFILENBQWF5ckIsY0FBYixHQUE4QixZQUFZO0FBQ3RDLFVBQUtxTyxRQUFMLENBQWNDLElBQWQsR0FBcUJSLFlBQVksS0FBS3RULEtBQWpCLENBQXJCO0FBQ0EsWUFBTyxLQUFLNlQsUUFBTCxDQUFjQyxJQUFyQjtBQUNILEVBSEQ7O0FBS0FOLElBQUd6NUIsU0FBSCxDQUFhczZCLGNBQWIsR0FBOEIsWUFBWTtBQUN0QyxZQUFPLEtBQUtSLFFBQUwsQ0FBY0MsSUFBckI7QUFDSCxFQUZEOztBQUlBTixJQUFHejVCLFNBQUgsQ0FBYW93QixvQkFBYixHQUFvQyxVQUFVbUssV0FBVixFQUF1QjtBQUN2RHRuQyxTQUFJLDhCQUE4QixLQUFLZzlCLElBQW5DLEdBQTBDLE1BQTFDLEdBQW1Ec0ssV0FBdkQ7QUFDQSxVQUFLTCxpQkFBTCxHQUF5QkssV0FBekI7QUFDQSxZQUFPLElBQVA7QUFDSCxFQUpEOztBQU1BZCxJQUFHejVCLFNBQUgsQ0FBYXc2QixvQkFBYixHQUFvQyxZQUFZO0FBQzVDLFlBQU8sS0FBS04saUJBQVo7QUFDSCxFQUZEOztBQUlBVCxJQUFHejVCLFNBQUgsQ0FBYW13QixrQkFBYixHQUFrQyxVQUFVaEksTUFBVixFQUFrQjtBQUNoRCxVQUFLZ1Msb0JBQUwsQ0FBMEJwOUIsSUFBMUIsQ0FBK0JvckIsTUFBL0I7QUFDSCxFQUZEOztBQUlBc1IsSUFBR3o1QixTQUFILENBQWF5NkIsdUJBQWIsR0FBdUMsWUFBWTtBQUMvQyxZQUFPLEtBQUtOLG9CQUFaO0FBQ0gsRUFGRDs7QUFJQVYsSUFBR3o1QixTQUFILENBQWEwNkIsWUFBYixHQUE0QixVQUFVQyxPQUFWLEVBQW1CO0FBQzNDLFVBQUtqQixTQUFMLEdBQWlCaUIsT0FBakI7QUFDQSxZQUFPLElBQVA7QUFDSCxFQUhEOztBQUtBbEIsSUFBR3o1QixTQUFILENBQWE0NkIsV0FBYixHQUEyQixZQUFZO0FBQ25DLFlBQU8sS0FBS2xCLFNBQVo7QUFDSCxFQUZEOztBQUlBOzs7O0FBSUFELElBQUd6NUIsU0FBSCxDQUFhNjZCLFVBQWIsR0FBMEIsWUFBWTtBQUNsQyxZQUFPLEtBQUtDLGFBQUwsRUFBUDtBQUNILEVBRkQ7O0FBSUFyQixJQUFHejVCLFNBQUgsQ0FBYTg2QixhQUFiLEdBQTZCLFlBQVk7QUFDckMsU0FBSSxDQUFDLEtBQUt4bUMsT0FBVixFQUFtQjtBQUNmLGNBQUtBLE9BQUwsR0FBZVcsU0FBU2t5QixjQUFULENBQXdCLEtBQUtsQixLQUE3QixDQUFmO0FBQ0g7QUFDRCxZQUFPLEtBQUszeEIsT0FBWjtBQUNILEVBTEQ7O0FBT0FtbEMsSUFBR3o1QixTQUFILENBQWErNkIsbUJBQWIsR0FBbUMsWUFBWTtBQUMzQztBQUNBLFNBQUlDLFNBQVMvbEMsU0FBU2t5QixjQUFULENBQXdCLEtBQUtsQixLQUE3QixDQUFiO0FBQ0EsWUFBTztBQUNIbmUsZ0JBQU8sS0FBS0EsS0FBTCxLQUFla3pCLFNBQVNBLE9BQU9qakIsV0FBaEIsR0FBOEIsQ0FBN0MsQ0FESjtBQUVIbFEsaUJBQVEsS0FBS0EsTUFBTCxLQUFnQm16QixTQUFTQSxPQUFPNVQsWUFBaEIsR0FBK0IsQ0FBL0M7QUFGTCxNQUFQO0FBSUgsRUFQRDs7QUFTQXFTLElBQUd6NUIsU0FBSCxDQUFhaTdCLFFBQWIsR0FBd0IsVUFBVWxqQixXQUFWLEVBQXVCO0FBQzNDLFVBQUtqUSxLQUFMLEdBQWFpUSxXQUFiO0FBQ0EsWUFBTyxJQUFQO0FBQ0gsRUFIRDs7QUFLQTBoQixJQUFHejVCLFNBQUgsQ0FBYXdwQixRQUFiLEdBQXdCLFlBQVk7QUFDaEMsWUFBTzlrQixTQUFTLEtBQUtxMkIsbUJBQUwsR0FBMkJqekIsS0FBcEMsRUFBMkMsRUFBM0MsQ0FBUDtBQUNILEVBRkQ7O0FBSUEyeEIsSUFBR3o1QixTQUFILENBQWFrN0IsU0FBYixHQUF5QixVQUFVOVQsWUFBVixFQUF3QjtBQUM3QyxVQUFLdmYsTUFBTCxHQUFjdWYsWUFBZDtBQUNBLFlBQU8sSUFBUDtBQUNILEVBSEQ7O0FBS0FxUyxJQUFHejVCLFNBQUgsQ0FBYW03QixTQUFiLEdBQXlCLFlBQVk7QUFDakMsWUFBT3oyQixTQUFTLEtBQUtxMkIsbUJBQUwsR0FBMkJsekIsTUFBcEMsRUFBNEMsRUFBNUMsQ0FBUDtBQUNILEVBRkQ7O0FBSUE0eEIsSUFBR3o1QixTQUFILENBQWF5cEIsaUJBQWIsR0FBaUMsWUFBWTtBQUN6QyxZQUFRbjJCLFVBQVViLE9BQVYsQ0FBa0IsMEJBQWxCLENBQUQsR0FBa0QsS0FBSzBvQyxTQUFMLEVBQWxELEdBQXFFLEtBQUtBLFNBQUwsS0FBbUJsQyxvQkFBL0Y7QUFDSCxFQUZEOztBQUlBUSxJQUFHejVCLFNBQUgsQ0FBYW83QixtQkFBYixHQUFtQyxVQUFVdnpCLE1BQVYsRUFBa0JDLEtBQWxCLEVBQXlCdXpCLG1CQUF6QixFQUE4QztBQUM3RSxTQUFJL21DLFVBQVUsS0FBS3dtQyxhQUFMLEVBQWQ7QUFDQSxTQUFJeG1DLFlBQVksSUFBWixLQUFxQixDQUFDLEtBQUswbEMsT0FBTixJQUFpQnFCLG1CQUF0QyxDQUFKLEVBQWdFO0FBQzVELGFBQUlDLGNBQWMsRUFBbEI7QUFDQSxhQUFJLE9BQU94ekIsS0FBUCxLQUFpQixXQUFyQixFQUFrQztBQUM5QnhULHFCQUFRaW5DLEtBQVIsQ0FBY3p6QixLQUFkLEdBQXNCQSxRQUFRLElBQTlCO0FBQ0g7QUFDRHhULGlCQUFRaW5DLEtBQVIsQ0FBYzF6QixNQUFkLEdBQXdCQSxTQUFTeXpCLFdBQVYsR0FBeUIsSUFBaEQ7QUFDQSxjQUFLdEIsT0FBTCxHQUFlLElBQWY7QUFDSDtBQUNKLEVBVkQ7O0FBWUE7Ozs7OztBQU1BUCxJQUFHejVCLFNBQUgsQ0FBYXc3QixhQUFiLEdBQTZCLFVBQVUzekIsTUFBVixFQUFrQkMsS0FBbEIsRUFBeUI7QUFDbEQsU0FBSXhULFVBQVUsS0FBS3dtQyxhQUFMLEVBQWQ7QUFDQSxTQUFJbjRCLENBQUo7QUFBQSxTQUNJODRCLFlBQVlubkMsUUFBUVksb0JBQVIsQ0FBNkIsUUFBN0IsQ0FEaEI7QUFBQSxTQUVJd21DLGNBQWNwbkMsUUFBUVksb0JBQVIsQ0FBNkIsS0FBN0IsQ0FGbEI7QUFHQSxVQUFLa21DLG1CQUFMLENBQXlCdnpCLE1BQXpCLEVBQWlDQyxLQUFqQyxFQUF3QyxJQUF4QztBQUNBLFNBQUkyekIsVUFBVTVqQyxNQUFWLElBQW9CLENBQXBCLElBQXlCLE9BQU80akMsVUFBVSxDQUFWLENBQVAsS0FBd0IsV0FBckQsRUFBa0U7QUFDOUQsYUFBSSxPQUFPM3pCLEtBQVAsS0FBaUIsV0FBckIsRUFBa0M7QUFDOUIyekIsdUJBQVUsQ0FBVixFQUFhM3pCLEtBQWIsR0FBcUJBLEtBQXJCO0FBQ0g7QUFDRDJ6QixtQkFBVSxDQUFWLEVBQWE1ekIsTUFBYixHQUFzQkEsTUFBdEI7QUFDSDtBQUNELFVBQUtsRixDQUFMLElBQVUrNEIsV0FBVixFQUF1QjtBQUNuQixhQUFJLE9BQU9BLFlBQVkvNEIsQ0FBWixFQUFlNDRCLEtBQXRCLEtBQWdDLFdBQXBDLEVBQWlEO0FBQzdDLGlCQUFJLE9BQU96ekIsS0FBUCxLQUFpQixXQUFyQixFQUFrQztBQUM5QjR6Qiw2QkFBWS80QixDQUFaLEVBQWU0NEIsS0FBZixDQUFxQnp6QixLQUFyQixHQUE2QkEsUUFBUSxJQUFyQztBQUNIO0FBQ0Q0ekIseUJBQVkvNEIsQ0FBWixFQUFlNDRCLEtBQWYsQ0FBcUIxekIsTUFBckIsR0FBOEJBLFNBQVMsSUFBdkM7QUFDSDtBQUNKOztBQUVEbFYsWUFBT2ttQixPQUFQLENBQWUsV0FBZixFQUE0QixLQUFLb1gsSUFBakMsRUFBdUNub0IsS0FBdkMsRUFBOENELE1BQTlDO0FBQ0FsVixZQUFPa21CLE9BQVAsQ0FBZSxlQUFlLEtBQUtvWCxJQUFuQyxFQUF5QyxLQUFLQSxJQUE5QyxFQUFvRG5vQixLQUFwRCxFQUEyREQsTUFBM0Q7O0FBRUEsWUFBTyxJQUFQO0FBQ0gsRUF6QkQ7O0FBMkJBNHhCLElBQUd6NUIsU0FBSCxDQUFhMjdCLGFBQWIsR0FBNkIsVUFBVUMsVUFBVixFQUFzQjtBQUMvQyxVQUFLL1IsWUFBTCxHQUFvQitSLFVBQXBCO0FBQ0Fwb0MsV0FBTTJFLFdBQU4sQ0FBa0IsS0FBSzJpQyxhQUFMLEVBQWxCLEVBQXdDLG1CQUF4QztBQUNBLFlBQU8sSUFBUDtBQUNILEVBSkQ7O0FBTUFyQixJQUFHejVCLFNBQUgsQ0FBYTY3QixZQUFiLEdBQTRCLFlBQVk7QUFDcEMsU0FBSWw1QixDQUFKO0FBQ0EsVUFBS0EsQ0FBTCxJQUFVMjJCLFNBQVYsRUFBcUI7QUFDakIsYUFBSSxLQUFLckosSUFBTCxLQUFjNTBCLFNBQWQsSUFBMkIsT0FBTyxLQUFLNDBCLElBQUwsQ0FBVWo2QixPQUFqQixLQUE2QixXQUF4RCxJQUF1RSxLQUFLaTZCLElBQUwsQ0FBVWo2QixPQUFWLENBQWtCMk0sQ0FBbEIsTUFBeUIsQ0FBQyxDQUFyRyxFQUF3RztBQUNwRyxvQkFBTzIyQixVQUFVMzJCLENBQVYsQ0FBUDtBQUNIO0FBQ0o7QUFDRCxZQUFPMjJCLFVBQVUsU0FBVixDQUFQO0FBQ0gsRUFSRDs7QUFVQUcsSUFBR3o1QixTQUFILENBQWE4N0IsU0FBYixHQUF5QixZQUFZO0FBQ2pDLFlBQVEsT0FBTyxLQUFLQyxTQUFaLEtBQTBCLFdBQTFCLElBQXlDLEtBQUtBLFNBQUwsS0FBbUIsS0FBN0QsR0FDSCxLQURHLEdBQ0t6b0MsVUFBVXRCLE9BQVYsQ0FBa0IwbUMsTUFBbEIsQ0FBeUJzRCxPQUF6QixDQUFpQyxLQUFLSCxZQUFMLEVBQWpDLENBRFo7QUFFSCxFQUhEOztBQUtBcEMsSUFBR3o1QixTQUFILENBQWFpOEIsWUFBYixHQUE0QixZQUFZO0FBQ3BDLFlBQU8zb0MsVUFBVXRCLE9BQVYsQ0FBa0IwbUMsTUFBbEIsQ0FBeUJ3RCxVQUF6QixDQUFvQyxLQUFLTCxZQUFMLEVBQXBDLENBQVA7QUFDSCxFQUZEOztBQUlBcEMsSUFBR3o1QixTQUFILENBQWEwbkIsT0FBYixHQUF1QixZQUFZO0FBQy9CLFlBQU8sS0FBS3VJLElBQVo7QUFDSCxFQUZEOztBQUlBd0osSUFBR3o1QixTQUFILENBQWFvcEIsU0FBYixHQUF5QixZQUFZO0FBQ2pDLFlBQU8sS0FBSzFCLE9BQUwsRUFBUDtBQUNILEVBRkQ7O0FBSUE7OztBQUdBK1IsSUFBR3o1QixTQUFILENBQWEwckIsSUFBYixHQUFvQixZQUFZO0FBQzVCLFNBQUlsMkIsVUFBVStqQyxZQUFZLEtBQUt0VCxLQUFqQixDQUFkO0FBQ0EsVUFBSzN4QixPQUFMLEdBQWVXLFNBQVNreUIsY0FBVCxDQUF3QixLQUFLbEIsS0FBN0IsQ0FBZjtBQUNBLFNBQUl6d0IsV0FBVyxDQUFDLEtBQUs2a0MsU0FBTCxFQUFaLElBQWdDLENBQUMvbUMsVUFBVWIsT0FBVixDQUFrQiwwQkFBbEIsQ0FBckMsRUFBb0Y7QUFDaEYsY0FBSzJuQyxTQUFMLENBQWUsS0FBS04sUUFBTCxDQUFjQyxJQUFkLEtBQXVCdmtDLE9BQXZCLElBQWtDLENBQUMsQ0FBRCxLQUFPQSxRQUFRUSxPQUFSLENBQWdCLFFBQWhCLENBQXhEO0FBQ0EsY0FBSzh6QixJQUFMO0FBQ0g7QUFDRCxVQUFLclEsK0JBQUw7QUFDSCxFQVJEOztBQVVBOzs7QUFHQWdnQixJQUFHejVCLFNBQUgsQ0FBYXlaLCtCQUFiLEdBQStDLFlBQVk7QUFDdkQsU0FBSWhpQixDQUFKLEVBQU8wa0MsS0FBUCxFQUFjQyxPQUFkO0FBQ0EsU0FBSTluQyxVQUFVLEtBQUt3bUMsYUFBTCxFQUFkO0FBQ0EsU0FBSSxDQUFDLEtBQUtiLGlCQUFOLElBQTJCM2xDLFlBQVksSUFBdkMsSUFBK0NBLFlBQVkrRyxTQUEvRCxFQUEwRTtBQUN0RThnQyxpQkFBUTduQyxRQUFRWSxvQkFBUixDQUE2QixHQUE3QixDQUFSO0FBQ0EsY0FBS3VDLElBQUksQ0FBVCxFQUFZQSxJQUFJMGtDLE1BQU10a0MsTUFBdEIsRUFBOEJKLEdBQTlCLEVBQW1DO0FBQy9CMGtDLG1CQUFNMWtDLENBQU4sRUFBUzRrQyxRQUFULEdBQW9CLElBQXBCO0FBQ0g7QUFDREQsbUJBQVU5bkMsUUFBUVksb0JBQVIsQ0FBNkIsUUFBN0IsQ0FBVjtBQUNBLGNBQUt1QyxJQUFJLENBQVQsRUFBWUEsSUFBSTJrQyxRQUFRdmtDLE1BQXhCLEVBQWdDSixHQUFoQyxFQUFxQztBQUNqQzJrQyxxQkFBUTNrQyxDQUFSLEVBQVc0a0MsUUFBWCxHQUFzQixJQUF0QjtBQUNIO0FBQ0o7QUFDSixFQWJEOztBQWVBOzs7QUFHQTVDLElBQUd6NUIsU0FBSCxDQUFhK3BCLElBQWIsR0FBb0IsWUFBWTtBQUM1QixTQUFJejFCLFVBQVUsS0FBS3dtQyxhQUFMLEVBQWQ7QUFDQSxTQUNJeG1DLFlBQVksSUFBWixJQUNBLE9BQU9BLE9BQVAsS0FBbUIsV0FEbkIsSUFFQUEsUUFBUThELFNBQVIsQ0FBa0JwQyxPQUFsQixDQUEwQm9qQyxnQkFBMUIsTUFBZ0QsQ0FBQyxDQUZqRCxJQUdBOWtDLFFBQVE4RCxTQUFSLENBQWtCcEMsT0FBbEIsQ0FBMEJxakMsa0JBQTFCLE1BQWtELENBQUMsQ0FKdkQsRUFLRTtBQUNFO0FBQ0E3bEMsZUFBTTJFLFdBQU4sQ0FBa0I3RCxPQUFsQixFQUEyQjhrQyxnQkFBM0I7QUFDQTVsQyxlQUFNMkUsV0FBTixDQUFrQjdELFFBQVFnb0MsYUFBMUIsRUFBeUNsRCxnQkFBekM7QUFDQTVsQyxlQUFNNkUsY0FBTixDQUFxQi9ELFFBQVFnb0MsYUFBN0IsRUFBNENuRCxhQUE1QztBQUNBM2xDLGVBQU1nRixrQkFBTixDQUF5QjBnQyxjQUFjLEtBQUtqSixJQUE1QztBQUNBdDlCLGdCQUFPa21CLE9BQVAsQ0FBZSxVQUFmLEVBQTJCLEtBQUtvWCxJQUFoQztBQUNBdDlCLGdCQUFPa21CLE9BQVAsQ0FBZSxjQUFjLEtBQUtvWCxJQUFsQyxFQUF3QyxLQUFLQSxJQUE3QztBQUNIO0FBQ0osRUFoQkQ7O0FBa0JBd0osSUFBR3o1QixTQUFILENBQWF1OEIsTUFBYixHQUFzQixZQUFZO0FBQzlCLFNBQUlqb0MsVUFBVSxLQUFLd21DLGFBQUwsRUFBZDtBQUNBLFlBQVF4bUMsUUFBUThELFNBQVIsQ0FBa0JwQyxPQUFsQixDQUEwQm9qQyxnQkFBMUIsTUFBZ0QsQ0FBQyxDQUF6RDtBQUNILEVBSEQ7O0FBS0E7OztBQUdBSyxJQUFHejVCLFNBQUgsQ0FBYXc4QixxQkFBYixHQUFxQyxZQUFZO0FBQzdDLFNBQUksQ0FBQyxLQUFLN0QsUUFBTixJQUFrQixLQUFLMUksSUFBTCxLQUFjLGlCQUFwQyxFQUF1RDtBQUNuRCxjQUFLMEksUUFBTCxHQUFnQixJQUFJSyxRQUFKLENBQWExbEMsVUFBVXRCLE9BQVYsQ0FBa0Jva0IsU0FBbEIsQ0FBNEJ2UixHQUE1QixDQUFnQyxTQUFoQyxDQUFiLENBQWhCO0FBQ0g7QUFDSixFQUpEOztBQU1BOzs7QUFHQTQwQixJQUFHejVCLFNBQUgsQ0FBYThwQixJQUFiLEdBQW9CLFlBQVk7QUFDNUIsU0FBSXgxQixVQUFVLEtBQUt3bUMsYUFBTCxFQUFkO0FBQ0EsVUFBSzBCLHFCQUFMO0FBQ0EsU0FBSSxLQUFLM1MsWUFBVCxFQUF1QjtBQUNuQnIyQixlQUFNMkUsV0FBTixDQUFrQjdELE9BQWxCLEVBQTJCLG1CQUEzQjtBQUNIO0FBQ0QsU0FBSSxDQUFDLEtBQUsrbEMsU0FBTCxFQUFMLEVBQXVCO0FBQ25CN21DLGVBQU02RSxjQUFOLENBQXFCL0QsT0FBckIsRUFBOEIra0Msa0JBQTlCO0FBQ0E7QUFDQTdsQyxlQUFNNkUsY0FBTixDQUFxQi9ELE9BQXJCLEVBQThCOGtDLGdCQUE5QjtBQUNBNWxDLGVBQU02RSxjQUFOLENBQXFCL0QsUUFBUWdvQyxhQUE3QixFQUE0Q2xELGdCQUE1QztBQUNBNWxDLGVBQU0rRSxlQUFOLENBQXNCMmdDLGNBQWMsS0FBS2pKLElBQXpDO0FBQ0F6OEIsZUFBTTJFLFdBQU4sQ0FBa0I3RCxRQUFRZ29DLGFBQTFCLEVBQXlDbkQsYUFBekM7QUFDSDtBQUNKLEVBZEQ7O0FBZ0JBOzs7QUFHQU0sSUFBR3o1QixTQUFILENBQWF5OEIsU0FBYixHQUF5QixVQUFVNTBCLE1BQVYsRUFBa0JDLEtBQWxCLEVBQXlCO0FBQzlDLFNBQUl4VCxVQUFVLEtBQUt3bUMsYUFBTCxFQUFkO0FBQ0E7OztBQUdBLFVBQUtHLFFBQUwsQ0FBY256QixLQUFkO0FBQ0EsVUFBS296QixTQUFMLENBQWVyekIsTUFBZjs7QUFFQTs7O0FBR0EsU0FBSSxLQUFLZ2lCLFlBQVQsRUFBdUI7QUFDbkJyMkIsZUFBTTJFLFdBQU4sQ0FBa0I3RCxPQUFsQixFQUEyQixtQkFBM0I7QUFDSDtBQUNEOzs7QUFHQSxTQUFJb29DLE9BQU8sSUFBWDtBQUNBN2xDLGdCQUFXLFlBQVk7QUFDbkIsYUFBSXdqQyxZQUFZcUMsS0FBS3JDLFNBQUwsRUFBaEI7QUFDQXBuQyxxQ0FBMEJ5cEMsS0FBS2hWLE9BQUwsRUFBMUIscUJBQXdEMlMsU0FBeEQ7QUFDQSxhQUFJLENBQUNBLFNBQUwsRUFBZ0I7QUFDWjdtQyxtQkFBTTZFLGNBQU4sQ0FBcUJxa0MsS0FBS3BvQyxPQUExQixFQUFtQzhrQyxnQkFBbkM7QUFDQTVsQyxtQkFBTTZFLGNBQU4sQ0FBcUJxa0MsS0FBS3BvQyxPQUFMLENBQWFnb0MsYUFBbEMsRUFBaURsRCxnQkFBakQ7QUFDQTVsQyxtQkFBTTJFLFdBQU4sQ0FBa0J1a0MsS0FBS3BvQyxPQUFMLENBQWFnb0MsYUFBL0IsRUFBOENuRCxhQUE5QztBQUNIO0FBQ0osTUFSRCxFQVFHLEdBUkg7QUFTQTNsQyxXQUFNNkUsY0FBTixDQUFxQnBELFNBQVNreUIsY0FBVCxDQUF3QixZQUFZLEtBQUs4SSxJQUFqQixHQUF3QixPQUFoRCxDQUFyQixFQUErRW9KLGtCQUEvRTtBQUNBOzs7QUFHQTdsQyxXQUFNK0UsZUFBTixDQUFzQixLQUFLMHRCLEtBQTNCO0FBQ0EsU0FBR2pRLE9BQU9xUyxpQkFBUCxLQUE2QixDQUE3QixJQUFrQyxLQUFLcEMsS0FBTCxDQUFXandCLE9BQVgsQ0FBbUIsS0FBbkIsSUFBNEIsQ0FBakUsRUFBbUU7QUFDL0R4QyxlQUFNK0UsZUFBTixDQUFzQixLQUFLMHRCLEtBQUwsR0FBVyxHQUFYLElBQWdCcGUsU0FBUyxHQUFULEdBQWMsS0FBZCxHQUFvQixPQUFwQyxDQUF0QjtBQUNIO0FBQ0RsVixZQUFPa21CLE9BQVAsQ0FBZSxTQUFmLEVBQTBCLEtBQUtvWCxJQUEvQixFQUFxQ25vQixLQUFyQyxFQUE0Q0QsTUFBNUM7QUFDQWxWLFlBQU9rbUIsT0FBUCxDQUFlLGFBQWEsS0FBS29YLElBQWpDLEVBQXVDLEtBQUtBLElBQTVDLEVBQWtEbm9CLEtBQWxELEVBQXlERCxNQUF6RDtBQUNILEVBckNEOztBQXVDQTs7OztBQUlBNHhCLElBQUd6NUIsU0FBSCxDQUFhNG1CLFlBQWIsR0FBNEIsVUFBVWlULFNBQVYsRUFBcUI7QUFDN0MsVUFBS0EsU0FBTCxHQUFpQkEsU0FBakI7QUFDSCxFQUZEOztBQUlBSixJQUFHejVCLFNBQUgsQ0FBYTZtQixhQUFiLEdBQTZCLFlBQVk7QUFDckMsU0FBSTtBQUNBLGFBQUksS0FBS2lVLGFBQUwsT0FBeUIsSUFBekIsSUFBaUMsS0FBS3BVLFVBQUwsRUFBckMsRUFBd0Q7QUFDcEQsaUJBQUksQ0FBQyxLQUFLMlQsU0FBTCxFQUFELElBQ0EsS0FBS1IsU0FBTCxLQUFtQixJQURuQixJQUVBLE9BQU8sS0FBS0EsU0FBTCxDQUFlLENBQWYsQ0FBUCxLQUE2QixXQUY3QixJQUdBLE9BQU8sS0FBS0EsU0FBTCxDQUFlLENBQWYsQ0FBUCxLQUE2QixXQUhqQyxFQUc4QztBQUMxQzs7OztBQUlBaGpDLDRCQUFXLFlBQVk7QUFDbkIseUJBQUksS0FBS3dqQyxTQUFMLEVBQUosRUFBc0I7QUFDbEIxbkMsZ0NBQU9rbUIsT0FBUCxDQUFlLGlCQUFmLEVBQWtDLEtBQUtvTixLQUF2QztBQUNBLDhCQUFLMEYsS0FBTDtBQUNILHNCQUhELE1BR087QUFDSCw4QkFBSzhRLFNBQUwsQ0FBZSxLQUFLNUMsU0FBTCxDQUFlLENBQWYsQ0FBZixFQUFrQyxLQUFLQSxTQUFMLENBQWUsQ0FBZixDQUFsQztBQUNIO0FBQ0osa0JBUFUsQ0FPVGptQyxJQVBTLENBT0osSUFQSSxDQUFYLEVBT2MsR0FQZDtBQVFILGNBaEJELE1BZ0JPO0FBQ0hqQix3QkFBT2ttQixPQUFQLENBQWUsaUJBQWYsRUFBa0MsS0FBS29OLEtBQXZDO0FBQ0Esc0JBQUswRixLQUFMO0FBQ0g7QUFDSjtBQUNKLE1BdkJELENBdUJFLE9BQU83cUIsQ0FBUCxFQUFVO0FBQ1I3TixhQUFJcW1CLEtBQUosQ0FBVSxtQ0FBVixFQUErQ3hZLENBQS9DO0FBQ0g7QUFDSixFQTNCRDs7QUE4QkE7Ozs7QUFJQTI0QixJQUFHejVCLFNBQUgsQ0FBYTI4QixxQkFBYixHQUFxQyxZQUFZO0FBQzdDLFNBQUlDLFdBQUo7QUFBQSxTQUNJdlcsSUFESjtBQUFBLFNBRUlVLFFBQVEsS0FBSzBULHVCQUFMLEVBRlo7QUFHQSxVQUFLcFUsSUFBTCxJQUFhVSxLQUFiLEVBQW9CO0FBQ2hCLGFBQUlBLE1BQU0xa0IsY0FBTixDQUFxQmdrQixJQUFyQixDQUFKLEVBQWdDO0FBQzVCdVcsMkJBQWMzbkMsU0FBU2t5QixjQUFULENBQXdCK1IsY0FBYyxLQUFLakosSUFBbkIsR0FBMEIsR0FBMUIsR0FBZ0NsSixNQUFNVixJQUFOLEVBQVlwdUIsSUFBWixDQUFpQixHQUFqQixDQUF4RCxDQUFkO0FBQ0F6RSxtQkFBTTZFLGNBQU4sQ0FBcUJ1a0MsV0FBckIsRUFBa0N6RCxhQUFsQztBQUNIO0FBQ0o7QUFDRCxTQUFJLEtBQUtlLGlCQUFMLElBQTBCLEtBQUtBLGlCQUFMLENBQXVCcmlDLE1BQXZCLEdBQWdDLENBQTFELElBQStELENBQUMsS0FBSzhoQyxNQUF6RSxFQUFpRjtBQUM3RWlELHVCQUFjM25DLFNBQVNreUIsY0FBVCxDQUF3QitSLGNBQWMsS0FBS2pKLElBQW5CLEdBQTBCLEdBQTFCLEdBQWdDLEtBQUtpSyxpQkFBTCxDQUF1QmppQyxJQUF2QixDQUE0QixHQUE1QixDQUF4RCxDQUFkO0FBQ0F6RSxlQUFNMkUsV0FBTixDQUFrQnlrQyxXQUFsQixFQUErQnpELGFBQS9CO0FBQ0g7QUFDRHlELG1CQUFjLElBQWQ7QUFDSCxFQWZEOztBQWtCQW5ELElBQUd6NUIsU0FBSCxDQUFhc29CLGdDQUFiLEdBQWdELFVBQVVILE1BQVYsRUFBa0I7QUFDOUQsU0FBSTF3QixDQUFKLEVBQ0lnZixHQURKLEVBRUlvbUIsZ0JBRko7QUFHQUEsd0JBQW1CLEdBQUdsYixNQUFILENBQVVqckIsS0FBVixDQUFnQixFQUFoQixFQUFvQixLQUFLeWpDLG9CQUF6QixFQUErQ2xpQyxJQUEvQyxFQUFuQjtBQUNBLFVBQUtSLElBQUksQ0FBSixFQUFPZ2YsTUFBTTBSLE9BQU90d0IsTUFBekIsRUFBaUNKLElBQUlnZixHQUFyQyxFQUEwQ2hmLEtBQUssQ0FBL0MsRUFBa0Q7QUFDOUMsYUFBSW9sQyxpQkFBaUI3bUMsT0FBakIsQ0FBeUJteUIsT0FBTzF3QixDQUFQLENBQXpCLE1BQXdDLENBQUMsQ0FBN0MsRUFBZ0Q7QUFDNUN4RSxpQkFBSWlGLElBQUosQ0FBU2l3QixPQUFPMXdCLENBQVAsSUFBWSxtQ0FBWixHQUFrRCxLQUFLdzRCLElBQWhFO0FBQ0Esb0JBQU8sSUFBUDtBQUNIO0FBQ0o7QUFDRCxZQUFPLEtBQVA7QUFDSCxFQVpEOztBQWNBd0osSUFBR3o1QixTQUFILENBQWFrb0IsdUJBQWIsR0FBdUMsWUFBWTtBQUMvQyxTQUFJNFUsdUJBQUo7QUFDQSxTQUFJcEUsZUFBSjtBQUNBLFNBQUlxRSxrQkFBSjtBQUNBLFNBQUlDLFlBQVksQ0FBaEI7O0FBRUEsY0FBU0MsZUFBVCxHQUEyQjtBQUN2QkQ7QUFDQSxhQUFJMW9DLFVBQVUsS0FBS3dtQyxhQUFMLEVBQWQ7QUFDQSxhQUFJeG1DLE9BQUosRUFBYTtBQUNULGlCQUFJNG9DLE9BQU9qb0MsU0FBU2lDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBWDtBQUNBZ21DLGtCQUFLNTlCLFNBQUwsR0FBaUJvNUIsTUFBakI7QUFDQXdFLGtCQUFLN2xDLElBQUwsR0FBWTBsQyxTQUFaO0FBQ0FHLGtCQUFLOWtDLFNBQUwsR0FBaUIsYUFBakI7O0FBRUE5RCxxQkFBUTZvQyxZQUFSLENBQXFCRCxJQUFyQixFQUEyQjVvQyxRQUFRZzhCLFVBQW5DO0FBQ0E4TSwyQkFBY04sY0FBZDtBQUNILFVBUkQsTUFRTyxJQUFJRSxhQUFhLEVBQWpCLEVBQXFCO0FBQ3hCSSwyQkFBY04sY0FBZDtBQUNIO0FBQ0o7O0FBRURwRSxjQUFTLEtBQUtvRCxTQUFMLEVBQVQ7QUFDQSxTQUFJcEQsTUFBSixFQUFZO0FBQ1JxRSxxQkFBWSxLQUFLZCxZQUFMLEVBQVo7QUFDQWEsMEJBQWlCTyxZQUFrQkosZUFBbEIsTUFBWSxJQUFaLEdBQW1DLEVBQW5DLENBQWpCO0FBQ0g7QUFDSixFQTNCRDs7QUE2QkF4RCxJQUFHejVCLFNBQUgsQ0FBYXM5QixlQUFiLEdBQStCLFlBQVk7QUFDdkMsU0FBSTlELFFBQVF2a0MsU0FBU2t5QixjQUFULENBQXdCLEtBQUtsQixLQUE3QixDQUFaOztBQUVBLFNBQUl1VCxLQUFKLEVBQVc7QUFDUCxhQUFJO0FBQ0FBLG1CQUFNK0IsS0FBTixDQUFZaFQsT0FBWixHQUFzQixPQUF0QjtBQUNBaVIsbUJBQU0rQixLQUFOLENBQVkxekIsTUFBWixHQUFxQixLQUFyQjtBQUNBMnhCLG1CQUFNK0IsS0FBTixDQUFZZ0MsUUFBWixHQUF1QixRQUF2QjtBQUNBL0QsbUJBQU0rQixLQUFOLENBQVlpQyxPQUFaLEdBQXNCLEdBQXRCO0FBQ0gsVUFMRCxDQUtFLE9BQU8xOEIsQ0FBUCxFQUFVLENBQ1g7QUFDSjtBQUNKLEVBWkQ7O0FBY0EyNEIsSUFBR3o1QixTQUFILENBQWEycEIsbUJBQWIsR0FBbUMsVUFBVThULEtBQVYsRUFBaUI7QUFDaEQsWUFBTyxLQUFLakQsb0JBQUwsR0FBNEJ4a0MsT0FBNUIsQ0FBb0N5bkMsS0FBcEMsS0FBOEMsQ0FBckQ7QUFDSCxFQUZEOztBQUlBNXBDLFFBQU9DLE9BQVAsR0FBaUIybEMsRUFBakIsQzs7Ozs7Ozs7QUM5ZUEsS0FBSXJuQyxXQUFXLG1CQUFBVCxDQUFRLEdBQVIsQ0FBZjtBQUNBLEtBQUkrckMsU0FBUyxtQkFBQS9yQyxDQUFRLEdBQVIsQ0FBYjtBQUNBLEtBQUl5a0IsWUFBWSxtQkFBQXprQixDQUFRLEdBQVIsQ0FBaEI7O0FBRUFrQyxRQUFPQyxPQUFQLEdBQWlCLFNBQVNrbEMsUUFBVCxDQUFtQjFiLE9BQW5CLEVBQTRCO0FBQ3pDLFNBQUlqbUIsT0FBTyxLQUFYO0FBQUEsU0FDSWtMLFFBQVEsS0FEWjtBQUFBLFNBRUlpaUIsWUFGSjtBQUFBLFNBR0ltWixXQUFXO0FBQ1gsd0JBQWU7QUFDWHA3QixvQkFBTSxjQURLO0FBRVh4TCxrQkFBSztBQUZNLFVBREo7QUFLWCxpQ0FBd0I7QUFDcEJ3TCxvQkFBTSx5QkFEYztBQUVwQnhMLGtCQUFLO0FBRmUsVUFMYjtBQVNYLHdCQUFlO0FBQ1h3TCxvQkFBTSxjQURLO0FBRVh4TCxrQkFBSztBQUZNLFVBVEo7QUFhWCx5QkFBZ0I7QUFDWndMLG9CQUFNLGVBRE07QUFFWnhMLGtCQUFLO0FBRk8sVUFiTDtBQWlCWCxnQkFBTztBQUNId0wsb0JBQU0sb0JBREg7QUFFSHhMLGtCQUFLO0FBRkYsVUFqQkk7QUFxQlgsdUJBQWM7QUFDVndMLG9CQUFNLGNBREk7QUFFVnhMLGtCQUFLO0FBRkssVUFyQkg7QUF5QlgsMEJBQWlCO0FBQ2J3TCxvQkFBTSxnQkFETztBQUVieEwsa0JBQUs7QUFGUSxVQXpCTjtBQTZCWCx1QkFBYztBQUNWd0wsb0JBQU0sYUFESTtBQUVWeEwsa0JBQUs7QUFGSyxVQTdCSDtBQWlDWCxvQkFBVztBQUNQd0wsb0JBQU0scUJBREM7QUFFUHhMLGtCQUFLLG1CQUZFO0FBR1A2bUMsdUJBQVc7QUFISixVQWpDQTtBQXNDWCw2QkFBb0I7QUFDaEJyN0Isb0JBQU0sa0JBRFU7QUFFaEJ4TCxrQkFBSztBQUZXLFVBdENUO0FBMENYLG1CQUFVO0FBQ053TCxvQkFBTSxRQURBO0FBRU54TCxrQkFBSztBQUZDLFVBMUNDO0FBOENYLDZCQUFvQjtBQUNoQndMLG9CQUFNLG1CQURVO0FBRWhCeEwsa0JBQUs7QUFGVyxVQTlDVDtBQWtEWCxvQkFBVztBQUNQd0wsb0JBQU0sVUFEQztBQUVQeEwsa0JBQUs7QUFGRSxVQWxEQTtBQXNEWCxvQkFBVztBQUNQd0wsb0JBQU0sVUFEQztBQUVQeEwsa0JBQUs7QUFGRSxVQXREQTtBQTBEWCx1QkFBYztBQUNWd0wsb0JBQU0sYUFESTtBQUVWeEwsa0JBQUs7QUFGSyxVQTFESDtBQThEWCw2QkFBb0I7QUFDaEJ3TCxvQkFBTSxtQkFEVTtBQUVoQnhMLGtCQUFLO0FBRlcsVUE5RFQ7QUFrRVgsb0JBQVc7QUFDUHdMLG9CQUFNLHdCQURDO0FBRVB4TCxrQkFBSztBQUZFLFVBbEVBO0FBc0VYLHdCQUFlO0FBQ1h3TCxvQkFBTSxlQURLO0FBRVh4TCxrQkFBSztBQUZNLFVBdEVKO0FBMEVYLHFCQUFZO0FBQ1J3TCxvQkFBTSxXQURFO0FBRVJ4TCxrQkFBSztBQUZHLFVBMUVEO0FBOEVYLDZCQUFvQjtBQUNoQndMLG9CQUFNLG9CQURVO0FBRWhCeEwsa0JBQUs7QUFGVyxVQTlFVDtBQWtGWCwrQkFBc0I7QUFDbEJ3TCxvQkFBTSwwQkFEWTtBQUVsQnhMLGtCQUFLO0FBRmEsVUFsRlg7QUFzRlgsNkJBQW9CLEVBQUU7QUFDbEJ3TCxvQkFBTSx3QkFEVTtBQUVoQnhMLGtCQUFLO0FBRlcsVUF0RlQ7QUEwRlgsMkJBQWtCLEVBQUU7QUFDaEJ3TCxvQkFBTSxtQkFEUTtBQUVkeEwsa0JBQUs7QUFGUyxVQTFGUDtBQThGWCx1QkFBYyxFQUFFO0FBQ1p3TCxvQkFBTSxtQkFESTtBQUVWeEwsa0JBQUs7QUFGSyxVQTlGSDtBQWtHWCx5QkFBZ0IsRUFBRTtBQUNkd0wsb0JBQU0sZ0JBRE07QUFFWnhMLGtCQUFJO0FBRlEsVUFsR0w7QUFzR1gsMEJBQWlCO0FBQ2J3TCxvQkFBTSxrQkFETztBQUVieEwsa0JBQUk7QUFGUyxVQXRHTjtBQTBHWCwwQkFBaUI7QUFDYndMLG9CQUFNLGlCQURPO0FBRWJ4TCxrQkFBSTtBQUZTLFVBMUdOO0FBOEdYLDBCQUFpQjtBQUNid0wsb0JBQU0saUJBRE87QUFFYnhMLGtCQUFJO0FBRlMsVUE5R047QUFrSFgsNEJBQW1CO0FBQ2Z3TCxvQkFBTSxvQkFEUztBQUVYeEwsa0JBQUk7QUFGTyxVQWxIUjtBQXNIWCx1QkFBYztBQUNWd0wsb0JBQU0sYUFESTtBQUVWeEwsa0JBQUk7QUFGTSxVQXRISDtBQTBIWCw2QkFBb0I7QUFDaEJ3TCxvQkFBTSx1QkFEVTtBQUVoQnhMLGtCQUFJO0FBRlksVUExSFQ7QUE4SFgsd0JBQWU7QUFDWHdMLG9CQUFNLGNBREs7QUFFWHhMLGtCQUFJO0FBRk8sVUE5SEo7QUFrSVgsc0JBQWE7QUFDVHdMLG9CQUFNLFlBREc7QUFFVHhMLGtCQUFJO0FBRkssVUFsSUY7QUFzSVgsdUJBQWM7QUFDVndMLG9CQUFNLGFBREk7QUFFVnhMLGtCQUFJO0FBRk0sVUF0SUg7QUEwSVgsNEJBQW1CLEVBQUU7QUFDakJ3TCxvQkFBTSxtQkFEUztBQUVmeEwsa0JBQUk7QUFGVyxVQTFJUjtBQThJWCwwQkFBaUIsRUFBRTtBQUNmd0wsb0JBQU0sZ0JBRE87QUFFYnhMLGtCQUFJO0FBRlM7QUE5SU4sTUFIZjs7QUF3SkMsa0JBQVc7QUFDUnl0Qix3QkFBZXBPLFVBQVV1TyxlQUFWLEVBQWY7QUFDQSxhQUFJLE9BQU9nWixTQUFTcmdCLE9BQVQsQ0FBUCxLQUE2QixXQUFqQyxFQUE4QztBQUMxQ2ptQixvQkFBT3NtQyxTQUFTcmdCLE9BQVQsRUFBa0J2bUIsR0FBekI7QUFDQXdMLHFCQUFRbzdCLFNBQVNyZ0IsT0FBVCxFQUFrQi9hLEtBQTFCO0FBQ0gsVUFIRCxNQUdPLElBQUlpaUIsWUFBSixFQUFrQjtBQUNyQm50QixvQkFBT210QixhQUFhbnRCLElBQXBCO0FBQ0FrTCxxQkFBUWlpQixhQUFhamlCLEtBQXJCO0FBQ0g7QUFDSixNQVRBLEdBQUQ7O0FBV0E7OztBQUdBLFNBQUksQ0FBQ25RLFNBQVNxbUIsV0FBVCxHQUF1QixDQUF2QixNQUE4QixNQUE5QixJQUF3Q3JtQixTQUFTcW1CLFdBQVQsR0FBdUIsQ0FBdkIsTUFBOEIsY0FBdkUsS0FDQSxlQUFtQixXQUR2QixFQUNvQztBQUNoQ29sQixtQkFBVSxDQUFDLGtCQUFELEVBQXFCLG1CQUFyQixDQUFWLEVBQXFELFVBQVNDLElBQVQsRUFBZUMsVUFBZixFQUEyQjtBQUM1RSxpQkFBSUMsZ0JBQUo7QUFBQSxpQkFDSTFFLFlBQVksaUJBRGhCO0FBQUEsaUJBRUlaLFNBQVNnRixPQUFPMUIsT0FBUCxDQUFlMUMsU0FBZixDQUZiO0FBQUEsaUJBR0kyRSxhQUFhUCxPQUFPeEIsVUFBUCxDQUFrQjVDLFNBQWxCLENBSGpCO0FBSUEsaUJBQUksT0FBT3lFLFVBQVAsS0FBc0IsV0FBMUIsRUFBdUM7QUFDbkMscUJBQUksT0FBT0EsV0FBV0csWUFBbEIsS0FBbUMsV0FBbkMsSUFBa0RILFdBQVdJLGFBQVgsR0FBMkI3cEMsT0FBM0IsQ0FBbUN1RCxNQUFuQyxHQUE0QyxDQUFsRyxFQUFxRztBQUNqR21tQyx3Q0FBb0IzbUMsUUFBUTBtQyxXQUFXSSxhQUFYLEdBQTJCN3BDLE9BQTNCLENBQW1DOHBDLElBQW5DLENBQXdDLEdBQXhDLEVBQTZDdm1DLE1BQTdDLElBQXVELENBQWhFLEdBQ2YsY0FBY1IsSUFBZCxHQUFxQixJQUFyQixHQUNJa0wsS0FESixHQUVBLE1BSGUsR0FJZnc3QixXQUFXSSxhQUFYLEdBQTJCN3BDLE9BQTNCLENBQW1DLENBQW5DLEVBQXNDK3BDLFdBSjFDOztBQU1BTixnQ0FBV0csWUFBWCxDQUNJLHNDQUNJRixnQkFESixHQUVBLFNBRkEsR0FHQSwrQkFIQSxHQUdrQ0MsVUFIbEMsR0FHK0MsSUFIL0MsR0FHc0QsbUNBSHRELEdBSUl2RixNQUpKLEdBS0EsTUFOSjtBQVFIO0FBQ0o7QUFDSixVQXZCRDtBQXdCSDs7QUFFRCxZQUFPO0FBQ0g0RixpQkFBUSxrQkFBVztBQUNmLG9CQUFPam5DLElBQVA7QUFDSCxVQUhFO0FBSUhrbkMsbUJBQVUsb0JBQVc7QUFDakIsb0JBQU9oOEIsS0FBUDtBQUNIO0FBTkUsTUFBUDtBQVNILEVBNU1ELEM7Ozs7Ozs7O0FDSkE7Ozs7Ozs7Ozs7OztBQVlBLEtBQUkvTyxRQUFRLG1CQUFBN0IsQ0FBUSxHQUFSLENBQVo7QUFDQSxLQUFJUyxXQUFXLG1CQUFBVCxDQUFRLEdBQVIsQ0FBZjtBQUNBLEtBQUlVLFNBQVMsbUJBQUFWLENBQVEsR0FBUixDQUFiOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZCQSxLQUFJNnNDLG9CQUFvQjtBQUNwQixjQUFTO0FBQ0wsZ0NBQXVCO0FBQ25CLGtCQUFLO0FBQ0QzZ0Isd0NBQXVCO0FBRHRCO0FBRGMsVUFEbEI7QUFNTCxtQ0FBMEI7QUFDdEIsa0JBQUs7QUFDREEsd0NBQXVCO0FBRHRCO0FBRGlCLFVBTnJCO0FBV0wsK0NBQXNDO0FBQ2xDLGtCQUFLO0FBQ0RBLHdDQUF1QjtBQUR0QjtBQUQ2QjtBQVhqQztBQURXLEVBQXhCOztBQW9CQTs7Ozs7O0FBTUEsS0FBSTRnQixvQ0FBb0M7QUFDcEM5Z0Isd0JBQW1CLG1CQURpQjtBQUVwQ0UsNEJBQXVCLHdCQUZhO0FBR3BDQyxzQkFBaUIsd0JBSG1CO0FBSXBDNkMsOEJBQXlCLHdCQUpXO0FBS3BDNUMsc0JBQWlCO0FBTG1CLEVBQXhDOztBQVFBOzs7Ozs7QUFNQSxLQUFJMmdCLDhCQUE4QixtQkFBbEM7O0FBRUE3cUMsUUFBT0MsT0FBUCxHQUFpQjs7QUFFYjs7Ozs7O0FBTUFrb0MsY0FBUyxpQkFBVTFDLFNBQVYsRUFBcUI7QUFDMUIsYUFBSS80QixJQUFJL00sTUFBTXVMLFVBQU4sQ0FBaUIzTSxTQUFTcW1CLFdBQVQsRUFBakIsQ0FBUjtBQUNBLGFBQUk0YSxZQUFZbUwsaUJBQWhCO0FBQ0EsYUFBSXBULFFBQUo7O0FBRUE7QUFDQSxhQUFJM3pCLENBQUosRUFBT0MsQ0FBUDtBQUNBLGNBQUtELElBQUksQ0FBSixFQUFPQyxJQUFJNkksRUFBRTFJLE1BQWxCLEVBQTBCSixJQUFJQyxDQUE5QixFQUFpQyxFQUFFRCxDQUFuQyxFQUFzQztBQUNsQyxpQkFBSTJWLElBQUk3TSxFQUFFOUksQ0FBRixDQUFSO0FBQ0EsaUJBQUk0N0IsVUFBVWh4QixjQUFWLENBQXlCK0ssQ0FBekIsQ0FBSixFQUFpQztBQUM3QmltQiw2QkFBWUEsVUFBVWptQixDQUFWLENBQVo7QUFDSCxjQUZELE1BRU8sSUFBSSxDQUFDaW1CLFVBQVVoeEIsY0FBVixDQUF5QixHQUF6QixDQUFMLEVBQW9DO0FBQ3ZDZ3hCLDZCQUFZLEtBQVo7QUFDQTtBQUNIO0FBQ0o7O0FBRUQ7QUFDQSxhQUFJQSxhQUFhQSxVQUFVaHhCLGNBQVYsQ0FBeUJpM0IsU0FBekIsQ0FBakIsRUFBc0Q7QUFDbERsTyx3QkFBV2lJLFVBQVVpRyxTQUFWLENBQVg7QUFDSCxVQUZELE1BRU8sSUFBSWpHLGFBQWFBLFVBQVVoeEIsY0FBVixDQUF5QixHQUF6QixDQUFiLElBQThDZ3hCLFVBQVUsR0FBVixFQUFlaHhCLGNBQWYsQ0FBOEJpM0IsU0FBOUIsQ0FBbEQsRUFBNEY7QUFDL0ZsTyx3QkFBV2lJLFVBQVUsR0FBVixFQUFlaUcsU0FBZixDQUFYO0FBQ0g7O0FBRUQsZ0JBQU9sTyxZQUFZLzRCLE9BQU93UyxHQUFQLENBQVd5MEIsU0FBWCxDQUFuQjtBQUNILE1BakNZOztBQW1DYjs7Ozs7O0FBTUE0QyxpQkFBWSxvQkFBVTVDLFNBQVYsRUFBcUI7QUFDN0IsYUFBSXFGLFlBQVlGLGtDQUFrQ25GLFNBQWxDLEtBQWdEb0YsMkJBQWhFO0FBQ0EsZ0JBQU9yc0MsT0FBT3dTLEdBQVAsQ0FBVzg1QixTQUFYLENBQVA7QUFDSCxNQTVDWTs7QUE4Q2I7Ozs7QUFJQUMsMEJBQXFCLDZCQUFVdkwsU0FBVixFQUFxQjtBQUN0Q21MLDZCQUFvQm5MLFNBQXBCO0FBQ0g7QUFwRFksRUFBakIsQzs7Ozs7Ozs7Ozs7O0FDdkZBOzs7Ozs7c0JBRWU7QUFDWHdMLGVBQVUsa0JBQVUvWSxFQUFWLEVBQWNnWixVQUFkLEVBQTBCO0FBQ2hDLGFBQUlwRyxNQUFKLEVBQ0lxRyxNQURKOztBQUdBLDZCQUFPbG1CLE9BQVAsQ0FBZSxXQUFmLEVBQTRCaU4sR0FBRzRCLE9BQUgsRUFBNUI7O0FBRUE7OztBQUdBZ1Isa0JBQVNvRyxjQUFjaFosR0FBR2dXLFNBQUgsRUFBdkI7QUFDQSxhQUFJcEQsTUFBSixFQUFZO0FBQ1JxRyxzQkFBU2paLEdBQUdtVyxZQUFILEVBQVQ7QUFDQWhuQyxzQkFBU3NRLEtBQVQsbUNBQStDdzVCLE1BQS9DLFVBQTBEckcsTUFBMUQ7QUFDSDtBQUNEbFQsbUJBQVVXLEdBQVYsQ0FBY3BwQixJQUFkLENBQW1CLFlBQVk7QUFDM0J5b0IsdUJBQVUrQyxPQUFWLGFBQTRCekMsR0FBRzRCLE9BQUgsRUFBNUI7QUFDQSxpQ0FBTzdPLE9BQVAsQ0FBZSxvQkFBZixFQUFxQ2lOLEdBQUc0QixPQUFILEVBQXJDO0FBQ0gsVUFIRDtBQUlIO0FBbkJVLEU7Ozs7Ozs7OztBQ0ZmN3pCLFFBQU9DLE9BQVAsR0FBaUI7QUFDYjs7O0FBR0FrckMsZUFBVSxrQkFBVTVZLElBQVYsRUFBZ0I7QUFDdEIsZ0JBQU8sSUFBSTl5QixVQUFVdEIsT0FBVixDQUFrQjh6QixFQUF0QixDQUF5Qk0sSUFBekIsQ0FBUDtBQUNIO0FBTlksRUFBakIsQzs7Ozs7Ozs7QUNBQSxLQUFJenpCLFNBQVMsbUJBQUFoQixDQUFRLEdBQVIsQ0FBYjs7QUFFQSxLQUFJK21DLFNBQ0kscURBRFI7QUFBQSxLQUVJdUcsYUFDSSxvQ0FDQSwwQ0FEQSxHQUVBLDhCQUZBLEdBR0EsV0FOUjs7QUFRQXByQyxRQUFPQyxPQUFQLEdBQWlCO0FBQ2IrcUMsZUFBVSxrQkFBVTlpQixJQUFWLEVBQWdCO0FBQ3RCLGFBQUlyZCxNQUFNLEVBQVY7O0FBRUEvTCxnQkFBT2ttQixPQUFQLENBQWUsV0FBZixFQUE0QmtELEtBQUtxSyxJQUFqQzs7QUFFQSxhQUFJckssS0FBSzJjLE1BQVQsRUFBaUI7QUFDYmg2QixtQkFBTSxLQUFLd2dDLGNBQUwsQ0FBb0J4RyxNQUFwQixFQUE0QjNjLElBQTVCLENBQU47QUFDSDtBQUNEcmQsZ0JBQU8sS0FBS3dnQyxjQUFMLENBQW9CRCxVQUFwQixFQUFnQ2xqQixJQUFoQyxDQUFQO0FBQ0E5bUIsa0JBQVNzUSxLQUFULENBQWU3RyxHQUFmOztBQUVBLGdCQUFPQSxHQUFQO0FBQ0gsTUFiWTtBQWNid2dDLHFCQUFnQix3QkFBVUMsUUFBVixFQUFvQnBqQixJQUFwQixFQUEwQjtBQUN0QyxhQUFJcWpCLFNBQVNELFNBQVM3bUMsT0FBVCxDQUFpQixhQUFqQixFQUFnQyxVQUFVcW1CLEdBQVYsRUFBZTtBQUN4RCxvQkFBTzVDLEtBQUs0QyxJQUFJcm1CLE9BQUosQ0FBWSxRQUFaLEVBQXNCLEVBQXRCLENBQUwsS0FBbUNxbUIsR0FBMUM7QUFDSCxVQUZZLENBQWI7QUFHQSxnQkFBT3lnQixNQUFQO0FBQ0g7QUFuQlksRUFBakIsQzs7Ozs7Ozs7QUNWQSxLQUFJaHRDLFdBQVcsbUJBQUFULENBQVEsR0FBUixDQUFmO0FBQ0EsS0FBSSttQyxTQUFTLG1CQUFBL21DLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSXVrQixhQUFhLG1CQUFBdmtCLENBQVEsR0FBUixDQUFqQjs7QUFFQSxLQUFJMHRDLGdCQUFnQjdoQyxLQUFLOGhDLElBQUwsQ0FBVTloQyxLQUFLRSxNQUFMLEtBQWdCLENBQTFCLENBQXBCOztBQUVBOzs7QUFHQSxLQUFJNmhDLHVCQUF1QixTQUF2QkEsb0JBQXVCLEdBQVc7QUFDbEMsU0FBSW50QyxTQUFTb2xCLFVBQVQsQ0FBb0IsQ0FBcEIsTUFBMkIsTUFBM0IsSUFBcUNwbEIsU0FBU29sQixVQUFULENBQW9CLENBQXBCLE1BQTJCLEtBQXBFLEVBQTJFO0FBQ3ZFO0FBQ0Fua0IsZ0JBQU9tc0MsZUFBUCxHQUEwQkgsa0JBQWtCLENBQWxCLEdBQ3BCLHFDQURvQixHQUVuQkEsa0JBQWtCLENBQWxCLEdBQXNCLG9EQUF0QixHQUNHLHVDQUhWO0FBSUgsTUFORCxNQU1PLElBQUlqdEMsU0FBU29sQixVQUFULENBQW9CLENBQXBCLE1BQTJCLE1BQTNCLElBQXFDcGxCLFNBQVNvbEIsVUFBVCxDQUFvQixDQUFwQixNQUEyQixVQUFoRSxJQUNKcGxCLFNBQVNvbEIsVUFBVCxDQUFvQixDQUFwQixNQUEyQixhQUQzQixFQUVOO0FBQ0c7QUFDQW5rQixnQkFBT21zQyxlQUFQLEdBQXlCLHFDQUF6QjtBQUNIO0FBQ0osRUFiRDs7QUFlQTs7O0FBR0EsS0FBSUMsb0JBQW9CLFNBQXBCQSxpQkFBb0IsR0FBVztBQUMvQixTQUFJdlUsVUFBVTk0QixTQUFTb2xCLFVBQVQsQ0FBb0IsQ0FBcEIsQ0FBZDtBQUNBLFNBQUcwVCxZQUFZLGNBQWYsRUFBK0I7QUFDM0IsZ0JBQU8sY0FBUDtBQUNILE1BRkQsTUFFTyxJQUFHLDBDQUEwQzl4QixJQUExQyxDQUErQzh4QixPQUEvQyxDQUFILEVBQTREO0FBQy9ELGdCQUFPLFdBQVA7QUFDSCxNQUZNLE1BRUE7QUFDSCxnQkFBTyxZQUFQO0FBQ0g7QUFDSixFQVREOztBQVdBOzs7QUFHQSxVQUFTbDNCLHNCQUFULENBQWdDMHJDLFNBQWhDLEVBQTJDO0FBQ3ZDLFNBQUl6c0MsTUFBTSxtQkFBQXRCLENBQVEsR0FBUixFQUFrQix5QkFBbEIsQ0FBVjtBQUNBLFNBQUk0TyxJQUFJLEVBQVI7QUFDQSxTQUFJOUksQ0FBSjtBQUNBLFNBQUk2aEMsWUFBWSxpQkFBaEI7QUFBQSxTQUNJcUcsY0FBY2pILE9BQU9zRCxPQUFQLENBQWUxQyxTQUFmLENBRGxCO0FBQUEsU0FFSXlELFlBQVlyRSxPQUFPd0QsVUFBUCxDQUFrQjVDLFNBQWxCLENBRmhCOztBQUlBLFNBQUlvRyxVQUFVN25DLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDeEI1RSxhQUFJLDZDQUFKO0FBQ0FpakIsb0JBQVdzVixZQUFYLEdBQTBCRyxLQUExQjtBQUNBO0FBQ0g7O0FBRUQsU0FBSStULFVBQVUsQ0FBVixFQUFhdm9DLElBQWIsS0FBc0IsTUFBMUIsRUFBa0M7O0FBRTlCb0osY0FBSSxTQUNJLFdBREosR0FDa0J3OEIsU0FEbEIsR0FDOEIsa0JBRDlCLEdBQ21ENEMsV0FEbkQsR0FDaUUsTUFEakUsR0FFQSxPQUZBLEdBR0EsTUFISjs7QUFLQSxhQUFJRCxVQUFVN25DLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7O0FBRXhCMEksa0JBQUksU0FDSSxNQURKLEdBRVEsV0FGUixHQUVzQm0vQixVQUFVLENBQVYsRUFBYTNvQyxHQUZuQyxHQUV5QyxJQUZ6QyxHQUdZLGtDQUhaLEdBSVkscUNBSlosR0FJb0Qyb0MsVUFBVSxDQUFWLEVBQWFFLFdBSmpFLEdBSStFLG1CQUovRSxHQUtZLGdDQUxaLEdBTVFGLFVBQVUsQ0FBVixFQUFhRyxLQU5yQixHQU02QixNQU43QixHQU9JLE1BUEosR0FRSSxLQVJKLEdBU1FILFVBQVUsQ0FBVixFQUFhSSxLQVRyQixHQVM2QixHQVQ3QixHQVVJLE1BVkosR0FXSSxLQVhKLEdBWVEsV0FaUixHQVlzQkosVUFBVSxDQUFWLEVBQWEzb0MsR0FabkMsR0FZeUMsSUFaekMsR0FhWSxrQ0FiWixHQWNZLHFDQWRaLEdBY29EMm9DLFVBQVUsQ0FBVixFQUFhRSxXQWRqRSxHQWMrRSxtQkFkL0UsR0FlWSxnQ0FmWixHQWdCUUYsVUFBVSxDQUFWLEVBQWFLLEtBaEJyQixHQWdCNkIsTUFoQjdCLEdBaUJJLE1BakJKLEdBa0JJLEtBbEJKLEdBbUJRLFdBbkJSLEdBbUJzQkwsVUFBVSxDQUFWLEVBQWEzb0MsR0FuQm5DLEdBbUJ5QyxJQW5CekMsR0FvQlksa0NBcEJaLEdBcUJZLHFDQXJCWixHQXFCb0Qyb0MsVUFBVSxDQUFWLEVBQWFFLFdBckJqRSxHQXFCK0UsbUJBckIvRSxHQXNCWSxnQ0F0QlosR0F1QlFGLFVBQVUsQ0FBVixFQUFhRSxXQXZCckIsR0F1Qm1DLE1BdkJuQyxHQXdCSSxNQXhCSixHQXlCQSxPQXpCSjtBQTJCSCxVQTdCRCxNQTZCTyxJQUFJRixVQUFVN25DLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7O0FBRTdCLGtCQUFJSixJQUFFLENBQU4sRUFBU0EsSUFBSWlvQyxVQUFVN25DLE1BQXZCLEVBQStCLEVBQUVKLENBQWpDLEVBQW9DO0FBQ2hDOEksc0JBQUksU0FDSSxNQURKLEdBRVEsV0FGUixHQUVzQm0vQixVQUFVam9DLENBQVYsRUFBYVYsR0FGbkMsR0FFeUMsSUFGekMsR0FHWSxrQ0FIWixHQUlZLHFDQUpaLEdBSW9EMm9DLFVBQVVqb0MsQ0FBVixFQUFhbW9DLFdBSmpFLEdBSStFLG1CQUovRSxHQUtZLGdDQUxaLEdBTVFGLFVBQVVqb0MsQ0FBVixFQUFhb29DLEtBTnJCLEdBTTZCLE1BTjdCLEdBT0ksT0FQSixHQVFJLEtBUkosR0FTUUgsVUFBVWpvQyxDQUFWLEVBQWFxb0MsS0FUckIsR0FTNkIsR0FUN0IsR0FTbUNKLFVBQVVqb0MsQ0FBVixFQUFhc29DLEtBVGhELEdBVUksTUFWSixHQVdJLEtBWEosR0FZUSxXQVpSLEdBWXNCTCxVQUFVam9DLENBQVYsRUFBYVYsR0FabkMsR0FZeUMsSUFaekMsR0FhWSxrQ0FiWixHQWNZLHFDQWRaLEdBY29EMm9DLFVBQVVqb0MsQ0FBVixFQUFhbW9DLFdBZGpFLEdBYytFLG1CQWQvRSxHQWVZLGdDQWZaLEdBZ0JRRixVQUFVam9DLENBQVYsRUFBYW1vQyxXQWhCckIsR0FnQm1DLE1BaEJuQyxHQWlCSSxNQWpCSixHQWtCQSxPQWxCSjtBQW1CSDtBQUVKO0FBQ0RyL0IsY0FBSSxPQUFKO0FBQ0g7QUFDRHRMLGNBQVNzUSxLQUFULENBQWUsMkNBQXlDaEYsQ0FBekMsR0FBMkMsUUFBMUQ7QUFDQTtBQUNIOztBQUVEMU0sUUFBT0MsT0FBUCxHQUFpQjtBQUNiRSw2QkFBd0JBLHNCQURYO0FBRWI2cUMsZUFBVSxvQkFBVztBQUNqQnhyQyxnQkFBTzJzQyxnQkFBUCxHQUE0QixXQUE1QjtBQUNBM3NDLGdCQUFPNHNDLGdCQUFQLEdBQTRCLElBQTVCO0FBQ0E1c0MsZ0JBQU82c0Msa0JBQVAsR0FBNEIsR0FBNUI7QUFDQTdzQyxnQkFBTzhzQyxjQUFQLEdBQTRCLE1BQTVCO0FBQ0E5c0MsZ0JBQU8rc0MsaUJBQVAsR0FBNEJYLG1CQUE1QjtBQUNBRjs7QUFFQXRxQyxrQkFBU3NRLEtBQVQsQ0FBZSxhQUNmLHlCQURlLEdBRWYsZ0VBRmUsR0FHZnJNLG1CQUFtQixLQUFuQixDQUhlLEdBR2EsVUFINUI7QUFJQSxnQkFBTyxJQUFQO0FBQ0gsTUFmWTtBQWdCYm1uQyxnQkFBVyxtQkFBUzNpQyxNQUFULEVBQWlCO0FBQ3hCMmhDLHlCQUFnQjNoQyxNQUFoQjtBQUNIO0FBbEJZLEVBQWpCLEM7Ozs7Ozs7O0FDMUhBLEtBQUl5WSxTQUFTLG1CQUFBeGtCLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSXFrQixTQUFTLG1CQUFBcmtCLENBQVEsR0FBUixDQUFiOztBQUVBLEtBQUkydUMsU0FBUztBQUNULGdCQUFXO0FBQ1BDLGlCQUFRLFNBREQ7QUFFUHBxQixpQkFBUSxTQUZEO0FBR1B2VCxjQUFLLDRCQUhFO0FBSVBta0IsZ0JBQU87QUFDSHlaLDBCQUFhLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFELENBRFY7QUFFSEMsa0JBQUs7QUFGRjtBQUpBLE1BREY7QUFVVEMsWUFBTztBQUNISCxpQkFBUSxTQURMO0FBRUhwcUIsaUJBQVEsU0FGTDtBQUdIdlQsY0FBSyw0QkFIRjtBQUlIbWtCLGdCQUFPO0FBQ0h5WiwwQkFBYSxDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRDtBQURWO0FBSkosTUFWRTtBQWtCVEcsVUFBSztBQUNESixpQkFBUSxTQURQO0FBRURwcUIsaUJBQVEsU0FGUDtBQUdEdlQsY0FBSyw0QkFISjtBQUlEbWtCLGdCQUFPO0FBQ0h5WiwwQkFBYSxDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQURWO0FBRUhDLGtCQUFLLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFEO0FBRkY7QUFKTixNQWxCSTtBQTJCVEcsZUFBVTtBQUNOTCxpQkFBUSxTQURGO0FBRU5wcUIsaUJBQVEsU0FGRjtBQUdOdlQsY0FBSyw0QkFIQztBQUlObWtCLGdCQUFPO0FBQ0h5WiwwQkFBYSxDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxDQURWO0FBRUhDLGtCQUFLLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFEO0FBRkY7QUFKRCxNQTNCRDtBQW9DVEksYUFBUTtBQUNKTixpQkFBUSxTQURKO0FBRUpwcUIsaUJBQVEsU0FGSjtBQUdKdlQsY0FBSyw0QkFIRDtBQUlKbWtCLGdCQUFPO0FBQ0h5WiwwQkFBYSxDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxDQURWO0FBRUhDLGtCQUFLLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFEO0FBRkY7QUFKSCxNQXBDQztBQTZDVEssbUJBQWM7QUFDVlAsaUJBQVEsU0FERTtBQUVWcHFCLGlCQUFRLFNBRkU7QUFHVnZULGNBQUssNEJBSEs7QUFJVm1rQixnQkFBTztBQUNIK1osMkJBQWMsQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUQsQ0FEWDtBQUVITiwwQkFBYSxDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxDQUZWO0FBR0hDLGtCQUFLLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFEO0FBSEY7QUFKRyxNQTdDTDtBQXVEVCx1QkFBa0I7QUFDZEYsaUJBQVEsU0FETTtBQUVkcHFCLGlCQUFRLFNBRk07QUFHZHZULGNBQUssNEJBSFM7QUFJZG1rQixnQkFBTztBQUNIK1osMkJBQWMsQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUQsQ0FEWDtBQUVITiwwQkFBYSxDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxDQUZWO0FBR0hDLGtCQUFLLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFEO0FBSEY7QUFKTyxNQXZEVDtBQWlFVCxzQkFBaUI7QUFDYkYsaUJBQVEsU0FESztBQUVicHFCLGlCQUFRLFNBRks7QUFHYnZULGNBQUssNEJBSFE7QUFJYm1rQixnQkFBTztBQUNIK1osMkJBQWMsQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUQsQ0FEWDtBQUVITiwwQkFBYSxDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxDQUZWO0FBR0hDLGtCQUFLLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFEO0FBSEY7QUFKTSxNQWpFUjtBQTJFVE0sWUFBTztBQUNIUixpQkFBUSxTQURMO0FBRUhwcUIsaUJBQVEsU0FGTDtBQUdIdlQsY0FBSztBQUhGLE1BM0VFO0FBZ0ZUbytCLFdBQU07QUFDRlQsaUJBQVEsU0FETjtBQUVGcHFCLGlCQUFRLFNBRk47QUFHRnZULGNBQUs7QUFISCxNQWhGRztBQXFGVHErQixXQUFNO0FBQ0ZWLGlCQUFRLFNBRE47QUFFRnBxQixpQkFBUSxTQUZOO0FBR0Z2VCxjQUFLO0FBSEg7QUFyRkcsRUFBYjs7QUE0RkEvTyxRQUFPQyxPQUFQLEdBQWlCO0FBQ2JoQyxXQUFNLGNBQVUyeEIsa0JBQVYsRUFBOEI7QUFDaEMsYUFBSXlkLEtBQUo7QUFDQSxhQUFJLHFCQUFxQjluQyxJQUFyQixDQUEwQnFxQixrQkFBMUIsQ0FBSixFQUFtRDtBQUMvQyxpQkFBSSxnQkFBZ0IsT0FBTzZjLE9BQU81ckMsT0FBTytQLEVBQWQsQ0FBM0IsRUFBK0M7QUFDM0N5OEIseUJBQVFaLE9BQU81ckMsT0FBTytQLEVBQWQsQ0FBUjtBQUNBLHFCQUFJeThCLE1BQU10K0IsR0FBVixFQUFlO0FBQ1h1VCw0QkFBT3laLE1BQVAsQ0FBY3NSLE1BQU10K0IsR0FBcEI7QUFDSDtBQUNELHFCQUFJcytCLE1BQU0vcUIsTUFBVixFQUFrQjtBQUNkQSw0QkFBTzJaLFNBQVAsQ0FBaUJvUixNQUFNL3FCLE1BQXZCO0FBQ0g7QUFDRCxxQkFBSStxQixNQUFNbmEsS0FBVixFQUFpQjtBQUNiL1EsNEJBQU93VSxrQkFBUCxDQUEwQjBXLE1BQU1uYSxLQUFoQztBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBakJZLEVBQWpCLEM7Ozs7Ozs7O0FDL0ZBOzs7O0FBSUEsS0FBSW9CLFNBQVM7QUFDVCxRQUFHO0FBQ0M1bkIsWUFBRyxDQURKO0FBRUNNLFlBQUcsR0FGSjtBQUdDa21CLGdCQUFPO0FBQ0hvYSx3QkFBVyxFQURSO0FBRUhYLDBCQUFhLEVBRlY7QUFHSEMsa0JBQUssRUFIRjtBQUlIVyx5QkFBWSxFQUpUO0FBS0hDLHlCQUFZLEVBTFQ7QUFNSEMsc0JBQVMsRUFOTjtBQU9IenRDLHFCQUFRLEVBUEw7QUFRSDB0QyxxQ0FBd0IsRUFSckI7QUFTSEMsb0JBQU8sRUFUSjtBQVVIQyw0QkFBZSxFQVZaO0FBV0gsdUJBQVUsQ0FBQyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQUQsQ0FYUDtBQVlILDhCQUFpQixFQVpkO0FBYUgsa0NBQXFCLEVBYmxCO0FBY0gsbUNBQXNCLEVBZG5CO0FBZUgsa0NBQXFCLEVBZmxCO0FBZ0JIQyxzQkFBUyxFQWhCTjtBQWlCSEMsMEJBQWEsRUFqQlY7QUFrQkhDLHVCQUFVLEVBbEJQO0FBbUJIQyx1Q0FBMEIsQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FuQnZCO0FBb0JILGlDQUFvQixDQUFDLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBRCxDQXBCakI7QUFxQkgsaUNBQW9CLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELENBckJqQjtBQXNCSCwrQkFBa0IsQ0FBQyxDQUFDLEVBQUQsRUFBSSxFQUFKLENBQUQ7QUF0QmY7QUFIUixNQURNO0FBNkJULFFBQUc7QUFDQ3RoQyxZQUFHLEdBREo7QUFFQ00sWUFBRyxHQUZKO0FBR0NrbUIsZ0JBQU87QUFDSG9hLHdCQUFXLEVBRFI7QUFFSFgsMEJBQWEsQ0FBQyxDQUFDLEdBQUQsRUFBTSxFQUFOLENBQUQsRUFBWSxDQUFDLEdBQUQsRUFBTSxFQUFOLENBQVosQ0FGVjtBQUdIQyxrQkFBSyxDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxFQUFZLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBWixFQUF1QixDQUFDLEdBQUQsRUFBTSxHQUFOLENBQXZCLENBSEY7QUFJSFcseUJBQVksQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FKVDtBQUtIQyx5QkFBWSxDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQUxUO0FBTUhDLHNCQUFTLENBQUMsQ0FBQyxFQUFELEVBQUssRUFBTCxDQUFELENBTk47QUFPSHp0QyxxQkFBUSxDQUFDLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FBRCxDQVBMO0FBUUgwdEMscUNBQXdCLENBQUMsQ0FBQyxHQUFELEVBQU0sRUFBTixDQUFELEVBQVksQ0FBQyxHQUFELEVBQU0sRUFBTixDQUFaLENBUnJCO0FBU0hPLHFCQUFRLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELENBVEw7QUFVSE4sb0JBQU8sRUFWSjtBQVdIQyw0QkFBZSxFQVhaO0FBWUgsdUJBQVUsQ0FBQyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQUQsQ0FaUDtBQWFILDhCQUFpQixFQWJkO0FBY0gsa0NBQXFCLEVBZGxCO0FBZUgsbUNBQXNCLEVBZm5CO0FBZ0JILGtDQUFxQixFQWhCbEI7QUFpQkhDLHNCQUFTLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELENBakJOO0FBa0JIQywwQkFBYSxFQWxCVjtBQW1CSEMsdUJBQVUsRUFuQlA7QUFvQkhDLHVDQUEwQixDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQXBCdkI7QUFxQkgsaUNBQW9CLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELENBckJqQjtBQXNCSCxpQ0FBb0IsQ0FBQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUQsQ0F0QmpCO0FBdUJILCtCQUFrQixDQUFDLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBRDtBQXZCZjtBQUhSLE1BN0JNO0FBMERULFFBQUc7QUFDQ3RoQyxZQUFHLEdBREo7QUFFQ00sWUFBRyxHQUZKO0FBR0NrbUIsZ0JBQU87QUFDSG9hLHdCQUFXLEVBRFI7QUFFSDtBQUNBWCwwQkFBYSxDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxFQUFZLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBWixFQUF1QixDQUFDLEdBQUQsRUFBTSxFQUFOLENBQXZCLENBSFY7QUFJSEMsa0JBQUssQ0FBQyxDQUFDLEdBQUQsRUFBTSxFQUFOLENBQUQsRUFBWSxDQUFDLEdBQUQsRUFBTSxFQUFOLENBQVosRUFBdUIsQ0FBQyxHQUFELEVBQU0sRUFBTixDQUF2QixFQUFrQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQWxDLENBSkY7QUFLSFcseUJBQVksQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FMVDtBQU1IQyx5QkFBWSxDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQU5UO0FBT0hDLHNCQUFTLENBQUMsQ0FBQyxFQUFELEVBQUssRUFBTCxDQUFELENBUE47QUFRSHp0QyxxQkFBUSxDQUFDLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FBRCxDQVJMO0FBU0gwdEMscUNBQXdCLENBQUMsQ0FBQyxHQUFELEVBQU0sRUFBTixDQUFELEVBQVksQ0FBQyxHQUFELEVBQU0sRUFBTixDQUFaLENBVHJCO0FBVUhPLHFCQUFRLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELENBVkw7QUFXSE4sb0JBQU8sRUFYSjtBQVlIQyw0QkFBZSxFQVpaO0FBYUgsdUJBQVUsQ0FBQyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQUQsQ0FiUDtBQWNILDhCQUFpQixFQWRkO0FBZUgsa0NBQXFCLEVBZmxCO0FBZ0JILG1DQUFzQixFQWhCbkI7QUFpQkgsa0NBQXFCLEVBakJsQjtBQWtCSEMsc0JBQVMsQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUQsQ0FsQk47QUFtQkhDLDBCQUFhLEVBbkJWO0FBb0JIQyx1QkFBVSxFQXBCUDtBQXFCSEMsdUNBQTBCLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFELENBckJ2QjtBQXNCSCxpQ0FBb0IsQ0FBQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUQsQ0F0QmpCO0FBdUJILGlDQUFvQixDQUFDLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBRCxDQXZCakI7QUF3QkgsK0JBQWtCLENBQUMsQ0FBQyxFQUFELEVBQUksRUFBSixDQUFEO0FBeEJmO0FBSFIsTUExRE07QUF3RlQsUUFBRztBQUNDdGhDLFlBQUcsR0FESjtBQUVDTSxZQUFHLElBRko7QUFHQ2ttQixnQkFBTztBQUNIb2Esd0JBQVcsRUFEUjtBQUVIO0FBQ0FYLDBCQUFhLENBQUMsQ0FBQyxHQUFELEVBQU0sRUFBTixDQUFELEVBQVksQ0FBQyxHQUFELEVBQU0sRUFBTixDQUFaLEVBQXVCLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBdkIsRUFBbUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFuQyxFQUErQyxDQUFDLEdBQUQsRUFBTSxFQUFOLENBQS9DLEVBQTBELENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBMUQsQ0FIVjtBQUlIQyxrQkFBSyxDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxFQUFhLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBYixDQUpGO0FBS0hXLHlCQUFZLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFELENBTFQ7QUFNSEMseUJBQVksQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FOVDtBQU9IQyxzQkFBUyxDQUFDLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FBRCxDQVBOO0FBUUh6dEMscUJBQVEsQ0FBQyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQUQsQ0FSTDtBQVNIMHRDLHFDQUF3QixDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxFQUFZLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBWixDQVRyQjtBQVVITyxxQkFBUSxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBRCxDQVZMO0FBV0hOLG9CQUFPLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFELENBWEo7QUFZSEMsNEJBQWUsQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FaWjtBQWFILHVCQUFVLENBQUMsQ0FBQyxFQUFELEVBQUssRUFBTCxDQUFELENBYlA7QUFjSCw4QkFBaUIsQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FkZDtBQWVILGtDQUFxQixDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQWZsQjtBQWdCSCxtQ0FBc0IsQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FoQm5CO0FBaUJILGtDQUFxQixDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQWpCbEI7QUFrQkhDLHNCQUFTLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELENBbEJOO0FBbUJIQywwQkFBYSxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBRCxDQW5CVjtBQW9CSEMsdUJBQVUsRUFwQlA7QUFxQkhDLHVDQUEwQixDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQXJCdkI7QUFzQkgsaUNBQW9CLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELENBdEJqQjtBQXVCSCxpQ0FBb0IsQ0FBQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUQsQ0F2QmpCO0FBd0JILCtCQUFrQixDQUFDLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBRDtBQXhCZjtBQUhSLE1BeEZNO0FBc0hULFFBQUc7QUFDQ3RoQyxZQUFHLElBREo7QUFFQ00sWUFBRyxLQUZKO0FBR0NrbUIsZ0JBQU87QUFDSG9hLHdCQUFXLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELENBRFI7QUFFSDtBQUNBWCwwQkFBYSxDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxFQUFZLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBWixFQUF3QixDQUFDLEdBQUQsRUFBTSxHQUFOLENBQXhCLEVBQW9DLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBcEMsRUFBK0MsQ0FBQyxHQUFELEVBQU0sRUFBTixDQUEvQyxFQUEwRCxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQTFELENBSFY7QUFJSEMsa0JBQUssQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsRUFBYSxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQWIsQ0FKRjtBQUtIVyx5QkFBWSxDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQUxUO0FBTUhDLHlCQUFZLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFELENBTlQ7QUFPSEMsc0JBQVMsQ0FBQyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBQUQsQ0FQTixFQU9rQjtBQUNyQnp0QyxxQkFBUSxDQUFDLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FBRCxDQVJMLEVBUWlCO0FBQ3BCMHRDLHFDQUF3QixDQUFDLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBRCxFQUFZLENBQUMsR0FBRCxFQUFNLEVBQU4sQ0FBWixDQVRyQjtBQVVITyxxQkFBUSxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBRCxDQVZMO0FBV0hOLG9CQUFPLENBQUMsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUFELENBWEo7QUFZSEMsNEJBQWUsQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FaWjtBQWFILHVCQUFVLENBQUMsQ0FBQyxFQUFELEVBQUssRUFBTCxDQUFELENBYlA7QUFjSCw4QkFBaUIsQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FkZDtBQWVILGtDQUFxQixDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQWZsQjtBQWdCSCxtQ0FBc0IsQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FoQm5CO0FBaUJILGtDQUFxQixDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQWpCbEI7QUFrQkhDLHNCQUFTLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFELENBbEJOO0FBbUJIQywwQkFBYSxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBRCxDQW5CVjtBQW9CSEMsdUJBQVUsQ0FBQyxDQUFDLEdBQUQsRUFBTSxHQUFOLENBQUQsQ0FwQlA7QUFxQkhDLHVDQUEwQixDQUFDLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FBRCxDQXJCdkI7QUFzQkgsaUNBQW9CLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELENBdEJqQjtBQXVCSCxpQ0FBb0IsQ0FBQyxDQUFDLENBQUQsRUFBRyxDQUFILENBQUQsQ0F2QmpCO0FBd0JILCtCQUFrQixDQUFDLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBRDtBQXhCZjtBQUhSO0FBdEhNLEVBQWI7O0FBc0pBaHVDLFFBQU9DLE9BQVAsR0FBaUI7QUFDYjs7O0FBR0Fva0IsZ0JBQVcsbUJBQVU2cEIsWUFBVixFQUF3QjtBQUMvQjVaLGtCQUFTNFosWUFBVDtBQUNILE1BTlk7QUFPYjs7OztBQUlBbnFCLGVBQVUsa0JBQVU2bEIsS0FBVixFQUFpQnVFLFdBQWpCLEVBQThCO0FBQ3BDLGFBQUlBLFlBQVl6aEMsQ0FBWixJQUFpQnloQyxZQUFZbmhDLENBQTdCLElBQWtDbWhDLFlBQVlqYixLQUFsRCxFQUF5RDtBQUNyRG9CLG9CQUFPc1YsS0FBUCxJQUFnQnVFLFdBQWhCO0FBQ0Esa0JBQUt2cUIsYUFBTCxDQUFtQmdtQixLQUFuQixFQUEwQnVFLFlBQVl6aEMsQ0FBdEM7QUFDQSxrQkFBS3NYLGNBQUwsQ0FBb0I0bEIsS0FBcEIsRUFBMkJ1RSxZQUFZbmhDLENBQXZDO0FBQ0g7QUFDSixNQWpCWTtBQWtCYjs7OztBQUlBNFcsb0JBQWUsdUJBQVVnbUIsS0FBVixFQUFpQjMxQixLQUFqQixFQUF3QjtBQUNuQyxhQUFJLE9BQU9xZ0IsT0FBT3NWLEtBQVAsQ0FBUCxLQUF5QixXQUF6QixJQUF3QyxPQUFPdFYsT0FBT3NWLEtBQVAsRUFBY2w5QixDQUFyQixLQUEyQixXQUF2RSxFQUFvRjtBQUNoRjRuQixvQkFBT3NWLEtBQVAsRUFBY2w5QixDQUFkLEdBQWtCdUgsS0FBbEI7QUFDSDtBQUNELGFBQUksT0FBT3FnQixPQUFPc1YsUUFBUSxDQUFmLENBQVAsS0FBNkIsV0FBN0IsSUFBNEMsT0FBT3RWLE9BQU9zVixRQUFRLENBQWYsRUFBa0I1OEIsQ0FBekIsS0FBK0IsV0FBL0UsRUFBNEY7QUFDeEZzbkIsb0JBQU9zVixRQUFRLENBQWYsRUFBa0I1OEIsQ0FBbEIsR0FBc0JpSCxRQUFRLENBQTlCO0FBQ0g7QUFDSixNQTdCWTtBQThCYjs7OztBQUlBK1AscUJBQWdCLHdCQUFVNGxCLEtBQVYsRUFBaUIzMUIsS0FBakIsRUFBd0I7QUFDcEMsYUFBSSxPQUFPcWdCLE9BQU9zVixLQUFQLENBQVAsS0FBeUIsV0FBekIsSUFBd0MsT0FBT3RWLE9BQU9zVixLQUFQLEVBQWM1OEIsQ0FBckIsS0FBMkIsV0FBdkUsRUFBb0Y7QUFDaEZzbkIsb0JBQU9zVixLQUFQLEVBQWM1OEIsQ0FBZCxHQUFrQmlILEtBQWxCO0FBQ0g7QUFDRCxhQUFJLE9BQU9xZ0IsT0FBT3NWLFFBQVEsQ0FBZixDQUFQLEtBQTZCLFdBQTdCLElBQTRDLE9BQU90VixPQUFPc1YsUUFBUSxDQUFmLEVBQWtCNThCLENBQXpCLEtBQStCLFdBQS9FLEVBQTRGO0FBQ3hGc25CLG9CQUFPc1YsUUFBUSxDQUFmLEVBQWtCbDlCLENBQWxCLEdBQXNCdUgsUUFBUSxDQUE5QjtBQUNIO0FBQ0osTUF6Q1k7QUEwQ2JnUSxnQkFBVyxxQkFBWTtBQUNuQixnQkFBT3FRLE1BQVA7QUFDSCxNQTVDWTtBQTZDYnhRLGVBQVUsa0JBQVU4bEIsS0FBVixFQUFpQjtBQUN2QixnQkFBT3RWLE9BQU9zVixLQUFQLENBQVA7QUFDSDtBQS9DWSxFQUFqQixDOzs7Ozs7OztBQzFKQTs7Ozs7QUFLQSxLQUFJMXJDLFNBQVMsbUJBQUFKLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSVMsV0FBVyxtQkFBQVQsQ0FBUSxHQUFSLENBQWY7O0FBRUE7Ozs7O0FBS0EsS0FBSXN3QyxtQkFBbUI7QUFDbkJuRSxXQUFNLGNBRGE7QUFFbkJvRSxZQUFPLGVBRlk7QUFHbkJDLGVBQVU7QUFIUyxFQUF2Qjs7QUFNQSxVQUFTQyxlQUFULENBQTBCL3FDLElBQTFCLEVBQWdDO0FBQzVCLFNBQUlBLEtBQUsxQyxLQUFMLENBQVcsaURBQVgsQ0FBSixFQUFtRTtBQUMvRCxnQkFBT2tJLG1CQUNIeEYsS0FBS2lCLE9BQUwsQ0FBYSxXQUFiLEVBQTBCLEVBQTFCLENBREcsQ0FDMkI7QUFEM0IsVUFBUDtBQUdILE1BSkQsTUFJTztBQUNILGdCQUFPdUUsbUJBQW1CLHlCQUFuQixDQUFQO0FBQ0g7QUFDSjs7QUFFRCxVQUFTd2xDLFlBQVQsQ0FBdUIvNkIsRUFBdkIsRUFBMkI2M0IsUUFBM0IsRUFBcUM7QUFDakMsU0FBSXJoQyxpQkFBaUIvTCxPQUFPaUgsaUJBQVAsRUFBckI7QUFDQSxTQUFJakMsTUFBTXFyQyxnQkFBZ0J0a0MsZUFBZXpHLElBQWYsQ0FBb0JpQixPQUFwQixDQUE0QixxQkFBNUIsRUFBbUQsS0FBbkQsQ0FBaEIsQ0FBVjs7QUFFQSxZQUFPLGtEQUFrRGdQLEVBQWxELEdBQXVELElBQXZELEdBQ0Qsa0NBREMsR0FDb0N2USxHQURwQyxHQUMwQyxvQkFEMUMsR0FFRHVRLEdBQUdoUCxPQUFILENBQVcsV0FBWCxFQUF3QixFQUF4QixFQUE0QlAsV0FBNUIsRUFGQyxHQUdELHNCQUhDLEdBR3dCb25DLFFBSHhCLEdBR21DLFVBSG5DLEdBSUQsaUNBSkMsR0FLRCwrSEFMQyxHQU1ELFdBTkMsR0FPRCxRQVBOO0FBUUg7O0FBRUR0ckMsUUFBT0MsT0FBUCxHQUFpQjtBQUNic3VDLHNCQUFpQkEsZUFESjtBQUVidkQsZUFBVSxrQkFBVXYzQixFQUFWLEVBQWM7QUFDcEIsYUFBSWc3QixVQUFVbHdDLFNBQVNvbEIsVUFBVCxDQUFvQixDQUFwQixDQUFkOztBQUVBLGFBQUkybkIsV0FBVzhDLGlCQUFpQkssT0FBakIsS0FBNkJMLGlCQUFpQkUsUUFBN0Q7O0FBRUEsYUFBSSxDQUFDcHdDLE9BQU9xbEIsS0FBUCxFQUFELElBQW1CcmxCLE9BQU93d0MsaUJBQVAsRUFBdkIsRUFBbUQ7QUFDL0M7QUFDQSxpQkFBSUMsT0FBT0gsYUFBYS82QixFQUFiLEVBQWlCNjNCLFFBQWpCLENBQVg7QUFDQWxxQyxzQkFBU3NRLEtBQVQsQ0FBZWk5QixJQUFmO0FBQ0Esb0JBQU9BLElBQVA7QUFDSDtBQUNELGdCQUFPLEtBQVA7QUFDSDtBQWRZLEVBQWpCLEM7Ozs7Ozs7O0FDM0NBLEtBQUlodkMsUUFBUSxtQkFBQTdCLENBQVEsR0FBUixDQUFaO0FBQ0EsS0FBSUksU0FBUyxtQkFBQUosQ0FBUSxHQUFSLENBQWI7QUFDQSxLQUFJdWtCLGFBQWEsbUJBQUF2a0IsQ0FBUSxHQUFSLENBQWpCO0FBQ0EsS0FBSXFrQixTQUFTLG1CQUFBcmtCLENBQVEsR0FBUixDQUFiO0FBQ0EsS0FBSThtQyxhQUFhLG1CQUFBOW1DLENBQVEsR0FBUixDQUFqQjtBQUNBLEtBQUlpbkMsbUJBQW1CLG1CQUFBam5DLENBQVEsR0FBUixDQUF2QjtBQUNBLEtBQUlzQyxrQkFBa0IsbUJBQUF0QyxDQUFRLEdBQVIsQ0FBdEI7O0FBRUFrQyxRQUFPQyxPQUFQLEdBQWlCLFNBQVN1eUIsSUFBVCxDQUFlRCxJQUFmLEVBQXFCK0IsTUFBckIsRUFBNkJ3UyxPQUE3QixFQUFzQ21FLFVBQXRDLEVBQWtEMkQsZ0JBQWxELEVBQW9FO0FBQ2pGOztBQUVBLFNBQUl4dkMsTUFBTSxtQkFBQXRCLENBQVEsR0FBUixFQUFrQixjQUFsQixDQUFWOztBQUVBLFNBQUk7QUFDQSxhQUFJSSxPQUFPZ2xCLFFBQVAsQ0FBZ0IsS0FBaEIsS0FBMEIsT0FBT3FQLElBQVAsS0FBZ0IsUUFBMUMsSUFBc0RBLEtBQUt2dUIsTUFBTCxHQUFjLENBQXBFLElBQXlFLE9BQU9zd0IsTUFBUCxLQUFrQixXQUEvRixFQUE0RztBQUN4RyxpQkFBSXVhLFVBQUo7QUFBQSxpQkFDSUMsVUFESjtBQUFBLGlCQUVJN2MsS0FBSzVQLFdBQVdxUSxLQUFYLENBQWlCSCxJQUFqQixDQUZUO0FBQUEsaUJBR0lnQyxpQkFBaUJwUyxPQUFPcVMsaUJBQVAsRUFIckI7QUFBQSxpQkFJSXVhLFlBQWFqSSxPQUFELEdBQ1IsWUFBWXZVLElBQVosR0FBbUIsR0FBbkIsR0FBeUIrQixPQUFPbHdCLElBQVAsQ0FBWSxHQUFaLENBQXpCLEdBQTRDLFVBRHBDLEdBRVIsWUFBWW11QixJQUFaLEdBQW1CLEdBQW5CLEdBQXlCK0IsT0FBT2x3QixJQUFQLENBQVksR0FBWixDQU5qQztBQUFBLGlCQU9JMmtDLGNBQWMzbkMsU0FBU2t5QixjQUFULENBQXdCeWIsU0FBeEIsQ0FQbEI7QUFBQSxpQkFRSUMsVUFBVSxZQUFZemMsSUFSMUI7QUFTQSxpQkFBSSxPQUFPTixFQUFQLEtBQWMsV0FBZCxJQUE2QixPQUFPQSxHQUFHNEIsT0FBSCxFQUFQLEtBQXdCLFdBQXpELEVBQXNFO0FBQ2xFZ2IsOEJBQWE7QUFDVDNELDZCQUFRalosR0FBR21XLFlBQUgsRUFEQztBQUVUdkQsNkJBQVFvRyxjQUFjaFosR0FBR2dXLFNBQUgsRUFGYjtBQUdUK0csOEJBQVNBLE9BSEE7QUFJVHpjLDJCQUFNQTtBQUpHLGtCQUFiO0FBTUEscUJBQUksQ0FBQ04sR0FBR3dDLGdDQUFILENBQW9DSCxNQUFwQyxDQUFMLEVBQWtEO0FBQzlDckMsd0JBQUdxSyxrQkFBSCxDQUFzQmhJLE1BQXRCO0FBQ0E7QUFDQSx5QkFBSXlVLGdCQUFnQixJQUFwQixFQUEwQjtBQUN0QitGLHNDQUFhMXRDLFNBQVNDLG9CQUFULENBQThCLFFBQTlCLENBQWI7QUFDQXV0Qyw0Q0FBb0IsT0FBT0EsZ0JBQVAsS0FBNEIsV0FBNUIsR0FDYkUsV0FBV0EsV0FBVzlxQyxNQUFYLEdBQW9CLENBQS9CLEVBQWtDeUgsU0FBbEMsQ0FBNEN0SixPQUE1QyxDQUFvRCxXQUFwRCxNQUFxRSxDQUFDLENBQXZFLEdBQ0Uyc0MsV0FBV0EsV0FBVzlxQyxNQUFYLEdBQW9CLENBQS9CLENBREYsR0FDc0M4cUMsV0FBV0EsV0FBVzlxQyxNQUFYLEdBQW9CLENBQS9CLENBRnhCLEdBRTRENHFDLGdCQUZoRjtBQUdBN0YsdUNBQWNwcEMsTUFBTXdHLHVCQUFOLENBQThCeW9DLGdCQUE5QixFQUFnRCxhQUFoRCxDQUFkO0FBQ0EsNkJBQUksQ0FBQzdGLFdBQUwsRUFBa0I7QUFDZDNwQyxpQ0FBSWlGLElBQUosQ0FBUyxrREFBZ0QwcUMsU0FBaEQsR0FBMEQsR0FBbkU7QUFDQTFzQix3Q0FBV29WLGNBQVgsQ0FBMEJqd0IsU0FBMUI7QUFDQSxvQ0FBTyxLQUFQO0FBQ0g7QUFDRHVoQyxxQ0FBWXQxQixFQUFaLEdBQWlCczdCLFNBQWpCO0FBQ0g7QUFDRDs7QUFFQWhHLGlDQUFZeGtDLFNBQVosSUFBeUIsYUFBYTB0QixHQUFHd0QsTUFBaEIsR0FBeUIsT0FBbEQ7O0FBRUEseUJBQUluQixPQUFPbnlCLE9BQVAsQ0FBZW95QixjQUFmLEtBQWtDLENBQXRDLEVBQXlDO0FBQ3JDO0FBQ0F0Qyw0QkFBR3NLLG9CQUFILENBQXdCakksTUFBeEI7O0FBRUEsNkJBQUksT0FBT3dTLE9BQVAsS0FBbUIsV0FBbkIsSUFBa0NBLE9BQXRDLEVBQStDO0FBQzNDN1UsZ0NBQUc0VSxZQUFILENBQWdCLElBQWhCO0FBQ0g7O0FBRUQ7QUFDQXhrQixvQ0FBV29WLGNBQVgsQ0FBMEJsRixJQUExQjs7QUFFQTtBQUNBd1cscUNBQVkzVixRQUFaLENBQXFCLENBQXJCLEVBQXdCM2YsRUFBeEIsR0FBNkJ1N0IsT0FBN0I7O0FBRUEvYyw0QkFBRzZXLHFCQUFIOztBQUVBO0FBQ0EsNkJBQUl2VyxLQUFLcHdCLE9BQUwsQ0FBYSxTQUFiLE1BQTRCLENBQWhDLEVBQW1DO0FBQy9CO0FBQ0Esb0NBQU8vQixnQkFBZ0I0cUMsUUFBaEIsRUFBUDtBQUNILDBCQUhELE1BR08sSUFBSXpZLEtBQUtwd0IsT0FBTCxDQUFhLFVBQWIsTUFBNkIsQ0FBakMsRUFBb0M7QUFDdkM7QUFDQSxvQ0FBTzRpQyxpQkFBaUJpRyxRQUFqQixDQUEwQnpZLElBQTFCLENBQVA7QUFDSCwwQkFITSxNQUdBO0FBQ0g7QUFDQSxvQ0FBT3FTLFdBQVdvRyxRQUFYLENBQW9CNkQsVUFBcEIsQ0FBUDtBQUNIO0FBQ0osc0JBM0JELE1BMkJPO0FBQ0h4c0Isb0NBQVdvVixjQUFYLENBQTBCLEtBQTFCO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7QUFDSixNQXZFRCxDQXVFRSxPQUFPeHFCLENBQVAsRUFBVTtBQUNSN04sYUFBSXFtQixLQUFKLENBQVV4WSxDQUFWO0FBQ0g7QUFDSixFQS9FRCxDOzs7Ozs7OztBQ1JBak4sUUFBT0MsT0FBUCxHQUFpQixVQUFVc3lCLElBQVYsRUFBZ0IrQixNQUFoQixFQUF3QjJXLFVBQXhCLEVBQW9DO0FBQ2pELFNBQUloWixFQUFKO0FBQUEsU0FDSU8sSUFESjtBQUFBLFNBRUk2SixtQkFGSjtBQUFBLFNBR0k5SCxpQkFBaUI5MEIsVUFBVXRCLE9BQVYsQ0FBa0Jna0IsTUFBbEIsQ0FBeUJxUyxpQkFBekIsRUFIckI7O0FBS0EsU0FBSWgxQixPQUFPQyxTQUFQLElBQW9CQSxVQUFVd3lCLEVBQWxDLEVBQXNDO0FBQ2xDQSxjQUFLeHlCLFVBQVV3eUIsRUFBVixDQUFhTSxJQUFiLENBQUw7QUFDQSxhQUFJLE9BQU9OLEVBQVAsS0FBYyxXQUFkLElBQTZCLENBQUNBLEdBQUd3QyxnQ0FBSCxDQUFvQyxDQUFDSCxNQUFELENBQXBDLENBQWxDLEVBQWlGO0FBQzdFckMsZ0JBQUdxSyxrQkFBSCxDQUFzQmhJLE1BQXRCO0FBQ0EsaUJBQUlBLE9BQU9ueUIsT0FBUCxDQUFlb3lCLGNBQWYsS0FBa0MsQ0FBdEMsRUFBeUM7O0FBRXJDdEMsb0JBQUdzSyxvQkFBSCxDQUF3QmpJLE1BQXhCOztBQUVBOUIsd0JBQU9weEIsU0FBU2t5QixjQUFULENBQXdCLFlBQVlyQixHQUFHNEIsT0FBSCxFQUFaLEdBQTJCLEdBQTNCLEdBQWlDUyxPQUFPbHdCLElBQVAsQ0FBWSxHQUFaLENBQXpELENBQVA7QUFDQWk0Qix1Q0FBdUI3SixLQUFLZ0ssaUJBQUwsSUFBMEJoSyxLQUFLaUssVUFBdEQ7QUFDQSxxQkFBSUosbUJBQUosRUFBeUI7QUFDckJBLHlDQUFvQjVvQixFQUFwQixHQUF5QixZQUFZd2UsR0FBRzRCLE9BQUgsRUFBckM7QUFDSDtBQUNEcDBCLDJCQUFVRSxLQUFWLENBQWdCMkUsV0FBaEIsQ0FBNEJrdUIsSUFBNUIsRUFBa0MsWUFBWVAsR0FBR3dELE1BQWYsR0FBd0IsT0FBMUQ7O0FBRUF4RCxvQkFBR2UsYUFBSDs7QUFFQTtBQUNBLHFCQUFJVCxLQUFLcHdCLE9BQUwsQ0FBYSxTQUFiLE1BQTRCLENBQWhDLEVBQW1DO0FBQy9CO0FBQ0EsNEJBQU8xQyxVQUFVdEIsT0FBVixDQUFrQmlDLGVBQWxCLENBQWtDNHFDLFFBQWxDLEVBQVA7QUFDSCxrQkFIRCxNQUdPLElBQUl6WSxLQUFLcHdCLE9BQUwsQ0FBYSxVQUFiLE1BQTZCLENBQWpDLEVBQW9DO0FBQ3ZDO0FBQ0E7QUFDQTh2Qix3QkFBR2dFLElBQUg7QUFDQSw0QkFBT3gyQixVQUFVdEIsT0FBVixDQUFrQjRtQyxnQkFBbEIsQ0FBbUNpRyxRQUFuQyxDQUE0Q3pZLElBQTVDLENBQVA7QUFDSCxrQkFMTSxNQUtBO0FBQ0g7QUFDQSw0QkFBTzl5QixVQUFVdEIsT0FBVixDQUFrQndtQyxlQUFsQixDQUFrQ3FHLFFBQWxDLENBQTJDL1ksRUFBM0MsRUFBK0NnWixVQUEvQyxDQUFQO0FBQ0g7QUFFSjtBQUNKO0FBQ0o7QUFDSixFQXhDRCxDOzs7Ozs7OztBQ0FBLEtBQUlsYSxNQUFNLG1CQUFBanpCLENBQVEsR0FBUixFQUFrQixzQkFBbEIsQ0FBVjtBQUNBLEtBQUlteEMsa0JBQWtCLG1CQUFBbnhDLENBQVEsR0FBUixDQUF0Qjs7QUFFQTs7Ozs7Ozs7QUFRQSxLQUFJb3hDLGVBQWUsU0FBZkEsWUFBZSxDQUFVM2MsSUFBVixFQUFnQitCLE1BQWhCLEVBQXdCN3pCLE9BQXhCLEVBQWlDcTJCLFFBQWpDLEVBQTJDO0FBQzFEL0YsU0FBSSwyQkFBSixFQUFpQztBQUM3QndCLGVBQU1BLElBRHVCO0FBRTdCK0IsaUJBQVFBLE1BRnFCO0FBRzdCN3pCLGtCQUFTQSxPQUhvQjtBQUk3QnEyQixtQkFBVUE7QUFKbUIsTUFBakM7O0FBT0E7QUFDQSxTQUFJcVksY0FBYzdhLE9BQU9sd0IsSUFBUCxDQUFZLEdBQVosQ0FBbEI7QUFBQSxTQUNJZ3JDLGdCQURKOztBQUdBLFNBQUk7QUFDQTtBQUNBQSw0QkFBbUJILGdCQUFnQkksV0FBaEIsQ0FBNEIsMkJBQTVCLEVBQXlEQyxNQUF6RCxDQUFnRTtBQUMvRSxxQkFBUS9jLElBRHVFO0FBRS9FLHVCQUFVK0IsTUFGcUU7QUFHL0UsNEJBQWU2YSxXQUhnRTtBQUkvRSx5QkFBWXJZO0FBSm1FLFVBQWhFLENBQW5CO0FBTUgsTUFSRCxDQVFFLE9BQU83cEIsQ0FBUCxFQUFVO0FBQ1I4akIsYUFBSXRMLEtBQUosQ0FBVSwrQkFBVjtBQUNBLGdCQUFPLElBQVA7QUFDSDs7QUFFRCxTQUFJLENBQUNobEIsT0FBTCxFQUFjO0FBQ1Y7QUFDQXN3QixhQUFJLHFDQUFxQ3dCLElBQXpDO0FBQ0EsZ0JBQU82YyxnQkFBUDtBQUNIOztBQUVEcmUsU0FBSSxnREFBSixFQUFzRDtBQUNsRHR3QixrQkFBU0EsT0FEeUM7QUFFbEQydUMsMkJBQWtCQTtBQUZnQyxNQUF0RDtBQUlBSCxxQkFBZ0JNLGlCQUFoQixDQUFrQzl1QyxPQUFsQyxFQUEyQzJ1QyxnQkFBM0M7QUFDSCxFQXBDRDs7QUFzQ0FwdkMsUUFBT0MsT0FBUCxHQUFpQml2QyxZQUFqQixDOzs7Ozs7OztBQ2pEQSxLQUFJbmUsTUFBTSxtQkFBQWp6QixDQUFRLEdBQVIsRUFBa0IsMkJBQWxCLENBQVY7O0FBRUE7Ozs7OztBQU1BLEtBQU0weEMsc0JBQXNCLENBQ3hCLDJCQUR3QixDQUE1Qjs7QUFJQSxVQUFTUCxlQUFULEdBQTJCO0FBQ3ZCLFVBQUtRLFNBQUwsR0FBaUJELG9CQUFvQkUsTUFBcEIsQ0FBMkIsVUFBQ0MsU0FBRCxFQUFZam5DLEtBQVosRUFBc0I7QUFDOURpbkMsbUJBQVVqbkMsS0FBVixJQUFtQiw2QkFBQTVLLEdBQWE0SyxLQUFiLGVBQW5CO0FBQ0EsZ0JBQU9pbkMsU0FBUDtBQUNILE1BSGdCLEVBR2QsRUFIYyxDQUFqQjtBQUlIOztBQUVEOzs7Ozs7O0FBT0FWLGlCQUFnQjlpQyxTQUFoQixDQUEwQmtqQyxXQUExQixHQUF3QyxVQUFVTyxZQUFWLEVBQXdCO0FBQzVELFNBQUksQ0FBQyxLQUFLSCxTQUFMLENBQWVqaEMsY0FBZixDQUE4Qm9oQyxZQUE5QixDQUFMLEVBQWtEO0FBQzlDN2UsYUFBSXRMLEtBQUosQ0FBVSw4QkFBOEJtcUIsWUFBeEM7QUFDQSxlQUFNLElBQUk1cEMsS0FBSixDQUFVLDhCQUE4QjRwQyxZQUF4QyxDQUFOO0FBQ0g7O0FBRUQsWUFBTyxLQUFLSCxTQUFMLENBQWVHLFlBQWYsQ0FBUDtBQUNILEVBUEQ7O0FBU0FYLGlCQUFnQjlpQyxTQUFoQixDQUEwQm9qQyxpQkFBMUIsR0FBOEMsVUFBVTl1QyxPQUFWLEVBQW1Ca3VDLElBQW5CLEVBQXlCO0FBQ25FLFNBQUksQ0FBQ2x1QyxPQUFELElBQVksQ0FBQ2t1QyxJQUFqQixFQUF1QjtBQUNuQjVkLGFBQUl0TCxLQUFKLENBQVUsZ0NBQVYsRUFBNEM7QUFDeENobEIsc0JBQVNBLE9BRCtCO0FBRXhDa3VDLG1CQUFNQTtBQUZrQyxVQUE1QztBQUlBLGVBQU0sSUFBSTNvQyxLQUFKLENBQVUsNkJBQVYsQ0FBTjtBQUNIOztBQUVEdkYsYUFBUWdMLFNBQVIsR0FBb0JrakMsSUFBcEI7QUFDQSxTQUFJO0FBQ0FrQiwyQkFBa0JwdkMsT0FBbEI7QUFDSCxNQUZELENBRUUsT0FBT3dNLENBQVAsRUFBVTtBQUNSOGpCLGFBQUl0TCxLQUFKLENBQVUscUNBQVYsRUFBaUR4WSxDQUFqRDtBQUNIO0FBQ0osRUFmRDs7QUFpQkE7QUFDQSxVQUFTNGlDLGlCQUFULENBQTJCdHVDLElBQTNCLEVBQWlDO0FBQzdCLFNBQUl1dUMsYUFBYXZ1QyxJQUFiLE1BQXVCLElBQTNCLEVBQWlDO0FBQzdCQSxjQUFLTyxVQUFMLENBQWdCaXVDLFlBQWhCLENBQTZCQyxnQkFBZ0J6dUMsSUFBaEIsQ0FBN0IsRUFBb0RBLElBQXBEO0FBQ0gsTUFGRCxNQUdLO0FBQ0QsYUFBSXFDLElBQUksQ0FBUjtBQUNBLGFBQUl3dkIsV0FBVzd4QixLQUFLMHVDLFVBQXBCO0FBQ0EsZ0JBQU9yc0MsSUFBSXd2QixTQUFTcHZCLE1BQXBCLEVBQTRCO0FBQ3hCNnJDLCtCQUFrQnpjLFNBQVN4dkIsR0FBVCxDQUFsQjtBQUNIO0FBQ0o7O0FBRUQsWUFBT3JDLElBQVA7QUFDSDs7QUFFRCxVQUFTdXVDLFlBQVQsQ0FBc0J2dUMsSUFBdEIsRUFBNEI7QUFDeEIsWUFBT0EsS0FBS1AsT0FBTCxLQUFpQixRQUF4QjtBQUNIOztBQUVELFVBQVNndkMsZUFBVCxDQUF5Qnp1QyxJQUF6QixFQUErQjtBQUMzQixTQUFJMnVDLFNBQVM5dUMsU0FBU2lDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBYjtBQUNBNnNDLFlBQU9oakIsSUFBUCxHQUFjM3JCLEtBQUtrSyxTQUFuQjtBQUNBLFVBQUssSUFBSTdILElBQUlyQyxLQUFLNHVDLFVBQUwsQ0FBZ0Juc0MsTUFBaEIsR0FBeUIsQ0FBdEMsRUFBeUNKLEtBQUssQ0FBOUMsRUFBaURBLEdBQWpELEVBQXNEO0FBQ2xEc3NDLGdCQUFPdmlCLFlBQVAsQ0FBb0Jwc0IsS0FBSzR1QyxVQUFMLENBQWdCdnNDLENBQWhCLEVBQW1CbUIsSUFBdkMsRUFBNkN4RCxLQUFLNHVDLFVBQUwsQ0FBZ0J2c0MsQ0FBaEIsRUFBbUI4RSxLQUFoRTtBQUNIO0FBQ0QsWUFBT3duQyxNQUFQO0FBQ0g7O0FBRURsd0MsUUFBT0MsT0FBUCxHQUFpQixJQUFJZ3ZDLGVBQUosRUFBakIsQzs7Ozs7O0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWlDLHVEQUF1RDtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ2RBO0FBQ0EsOEJBQTZCLHlCQUF5Qix3QkFBd0IsWUFBWSxhQUFhLHlCQUF5Qiw0QkFBNEIsU0FBUyxtQ0FBbUMsdUVBQXVFLDRCQUE0QixtQ0FBbUMsOENBQThDLEdBQUcsSUFBSSx5QkFBeUIsc0RBQXNELGNBQWMsZ0VBQWdFLEdBQUcsY0FBYyw4Q0FBOEMsNEJBQTRCLFlBQVksOEJBQThCLFFBQVEsR0FBRyxjQUFjLGtCQUFrQixHQUFHLGNBQWMscUNBQXFDLEVBQUUsU0FBUyxvQkFBb0IsY0FBYyxFQUFFLGFBQWEsU0FBUyxJQUFJLHNCQUFzQixNQUFNLEdBQUcsYUFBYSxpRUFBaUUsTUFBTSw2QkFBNkIsV0FBVywyR0FBMkcsMENBQTBDLE1BQU0sTUFBTSxRQUFRLEdBQUcsZUFBZSxnQ0FBZ0MsV0FBVyxrQkFBa0IsU0FBUyxFQUFFLEc7Ozs7OztBQ0Q3dUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4Q0FBNkMsV0FBVyxFQUFFOztBQUUxRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBOEM7QUFDOUMsTUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFxQixpQkFBaUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQU87QUFDUCx3QkFBdUIsa0JBQWtCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBVztBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBLHFCQUFvQixlQUFlLEVBQUU7O0FBRXJDLHFCQUFvQixrQkFBa0IsZUFBZSxVQUFVLEVBQUU7O0FBRWpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxRQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEwQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBNkI7QUFDN0IsNEJBQTJCO0FBQzNCLDRCQUEyQjtBQUMzQiwrQkFBOEI7QUFDOUIsZ0NBQStCO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BWRDs7OztBQUNBOzs7Ozs7Ozs7O0FBR0EsS0FBTTd2QyxNQUFNLHlCQUFPLGtDQUFQLENBQVo7O0tBRXFCZ3hDLGM7QUFFakIsK0JBQWM7QUFBQTs7QUFDVixjQUFLQyxPQUFMLEdBQWUsSUFBSUMsR0FBSixFQUFmO0FBQ0g7Ozs7aUNBU1c7QUFBQSxpQkFQUEMsTUFPTyx5REFQRSxJQU9GOztBQUFBLDhFQUFKLEVBQUk7O0FBQUEscUNBTEp0UixPQUtJO0FBQUEsaUJBTEpBLE9BS0ksZ0NBTE0sSUFLTjtBQUFBLHlDQUpKdVIsV0FJSTtBQUFBLGlCQUpKQSxXQUlJLG9DQUpVLElBSVY7QUFBQSwwQ0FISnhSLFlBR0k7QUFBQSxpQkFISkEsWUFHSSxxQ0FIVyxJQUdYO0FBQUEsa0NBRkp0OEIsSUFFSTtBQUFBLGlCQUZKQSxJQUVJLDZCQUZHLEVBRUg7QUFBQSxtQ0FESmdHLEtBQ0k7QUFBQSxpQkFESkEsS0FDSSw4QkFESWxCLFNBQ0o7O0FBQ1IsaUJBQUkrb0MsTUFBSixFQUFZO0FBQ1Isc0JBQUtGLE9BQUwsQ0FBYXAvQixHQUFiLENBQWlCcy9CLE1BQWpCLEVBQXlCLEVBQUN0UixnQkFBRCxFQUFVdVIsd0JBQVYsRUFBdUI5dEMsVUFBdkIsRUFBNkJzOEIsMEJBQTdCLEVBQTJDdDJCLFlBQTNDLEVBQXpCO0FBQ0g7QUFDRCxvQkFBTyxJQUFQO0FBQ0g7OzttQ0FFUzZuQyxNLEVBQW1CO0FBQUEsaUJBQVg3dEMsSUFBVyx5REFBSixFQUFJOztBQUN6QixpQkFBTSt0QywyQkFBd0JGLE9BQU90c0MsTUFBUCxDQUFjLENBQWQsRUFBaUJDLFdBQWpCLEtBQWlDcXNDLE9BQU94aUIsS0FBUCxDQUFhLENBQWIsQ0FBekQsQ0FBTjtBQUNBLGlCQUFJLG1CQUFpQnZmLGNBQWpCLENBQWdDaWlDLGVBQWhDLENBQUosRUFBc0Q7QUFDbEQsd0JBQU8sbUJBQWlCQSxlQUFqQiwrQ0FBcUMvdEMsSUFBckMsRUFBUDtBQUNIO0FBQ0QsbUJBQU0sSUFBSXNELEtBQUosMkJBQWtDdXFDLE1BQWxDLFVBQTZDRSxlQUE3QyxPQUFOO0FBQ0g7OztpQ0FFTztBQUNKLGlCQUFNQyxTQUFTLEVBQWY7O0FBRUEsa0JBQUtMLE9BQUwsQ0FBYTVnQyxPQUFiLENBQXFCLFVBQVVraEMsT0FBVixFQUFtQkosTUFBbkIsRUFBMkI7QUFBQTs7QUFDNUMscUJBQUk7QUFBQTtBQUNBLDZCQUFJSSxRQUFRM1IsWUFBWixFQUEwQjtBQUN0QixpQ0FBSSxDQUFDMlIsUUFBUTNSLFlBQVIsRUFBTCxFQUE2QjtBQUN6QjtBQUFBO0FBQUE7QUFDSDtBQUNKOztBQUVELDZCQUFJcDlCLGVBQUo7QUFDQSw2QkFBSSxPQUFPK3VDLFFBQVFqb0MsS0FBZixLQUF5QixXQUE3QixFQUEwQztBQUN0QzlHLHNDQUFTK3VDLFFBQVFqb0MsS0FBakI7QUFDSCwwQkFGRCxNQUVPO0FBQ0g5RyxzQ0FBUyxNQUFLZ3ZDLFNBQUwsQ0FBZUwsTUFBZixFQUF1QkksUUFBUWp1QyxJQUEvQixDQUFUO0FBQ0g7O0FBRUQsNkJBQUlpdUMsUUFBUUgsV0FBWixFQUF5QjtBQUNyQjV1QyxzQ0FBUyt1QyxRQUFRSCxXQUFSLENBQW9CNXVDLE1BQXBCLENBQVQ7QUFDSDs7QUFFRCw2QkFBSSt1QyxRQUFRMVIsT0FBWixFQUFxQjtBQUNqQixpQ0FBSTRSLFdBQVdGLFFBQVExUixPQUF2QjtBQUNBLGlDQUFJLENBQUMsMEJBQVU0UixRQUFWLENBQUwsRUFBMEI7QUFDdEJBLDRDQUFXLENBQUNBLFFBQUQsQ0FBWDtBQUNIOztBQUVEQSxzQ0FBU3BoQyxPQUFULENBQWlCLG1CQUFXO0FBQ3hCaWhDLHdDQUFPelIsT0FBUCxJQUFrQnI5QixNQUFsQjtBQUNILDhCQUZEO0FBR0gsMEJBVEQsTUFTTztBQUNIOHVDLG9DQUFPSCxNQUFQLElBQWlCM3VDLE1BQWpCO0FBQ0g7QUE3QkQ7O0FBQUE7QUErQkgsa0JBL0JELENBK0JFLE9BQU9tRSxHQUFQLEVBQVk7QUFDVjNHLHlCQUFJaUYsSUFBSiw2QkFBbUNrc0MsTUFBbkMsRUFBNkN4cUMsR0FBN0M7QUFDSDtBQUNKLGNBbkNvQixDQW1DbkJoRyxJQW5DbUIsQ0FtQ2QsSUFuQ2MsQ0FBckI7O0FBcUNBLG9CQUFPMndDLE1BQVA7QUFDSDs7Ozs7O3NCQXJFZ0JOLGM7Ozs7Ozs7Ozs7Ozs7QUNOckI7Ozs7OztLQUdJVSxhLHNCQUFBQSxhO0tBQ0FDLHFCLHNCQUFBQSxxQjtLQUNBQyxpQixzQkFBQUEsaUI7S0FDQTErQixVLHNCQUFBQSxVO0tBQ0EyK0IsVSxzQkFBQUEsVTtLQUNBQyxZLHNCQUFBQSxZO0tBQ0FDLGdCLHNCQUFBQSxnQjtLQUNBQyx1QixzQkFBQUEsdUI7S0FDQUMsZSxzQkFBQUEsZTtLQUNBQyxxQixzQkFBQUEscUI7S0FDQUMsYSxzQkFBQUEsYTtLQUNBQyxVLHNCQUFBQSxVO0tBQ0FDLGdCLHNCQUFBQSxnQjtLQUNBQyxVLHNCQUFBQSxVO0tBQ0FDLFEsc0JBQUFBLFE7S0FDQXRRLFcsc0JBQUFBLFc7S0FDQW5jLFcsc0JBQUFBLFc7S0FDQTBzQixXLHNCQUFBQSxXO0tBQ0FDLDBCLHNCQUFBQSwwQjtLQUNBQyxjLHNCQUFBQSxjO0tBQ0FDLGMsc0JBQUFBLGM7S0FDQUMsa0Isc0JBQUFBLGtCO0tBQ0FDLGtCLHNCQUFBQSxrQjtLQUNBQyxZLHNCQUFBQSxZO0tBQ0FDLFksc0JBQUFBLFk7S0FDQTV5QixVLHNCQUFBQSxVO3NCQUdXO0FBQ1h1eEIsaUNBRFc7QUFFWEMsaURBRlc7QUFHWEMseUNBSFc7QUFJWDErQiwyQkFKVztBQUtYMitCLDJCQUxXO0FBTVhDLCtCQU5XO0FBT1hDLHVDQVBXO0FBUVhDLHFEQVJXO0FBU1hDLHFDQVRXO0FBVVhDLGlEQVZXO0FBV1hDLGlDQVhXO0FBWVhDLDJCQVpXO0FBYVhDLHVDQWJXO0FBY1hDLDJCQWRXO0FBZVhDLHVCQWZXO0FBZ0JYdFEsNkJBaEJXO0FBaUJYbmMsNkJBakJXO0FBa0JYMHNCLDZCQWxCVztBQW1CWEMsMkRBbkJXO0FBb0JYQyxtQ0FwQlc7QUFxQlhDLG1DQXJCVztBQXNCWEMsMkNBdEJXO0FBdUJYQywyQ0F2Qlc7QUF3QlhDLCtCQXhCVztBQXlCWEMsK0JBekJXO0FBMEJYNXlCO0FBMUJXLEU7Ozs7Ozs7Ozs7Ozs7QUMvQmY7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztzQkFNZTtBQUNYdXhCLDhDQURXO0FBRVhDLDhEQUZXO0FBR1hDLHNEQUhXO0FBSVgxK0Isd0NBSlc7QUFLWDIrQix3Q0FMVztBQU1YQyw0Q0FOVztBQU9YQyxvREFQVztBQVFYQyxrRUFSVztBQVNYQyxrREFUVztBQVVYQyw4REFWVztBQVdYQyw4Q0FYVztBQVlYQyx3Q0FaVztBQWFYQyxvREFiVztBQWNYQyx3Q0FkVztBQWVYQyxvQ0FmVztBQWdCWHRRLDBDQWhCVztBQWlCWG5jLDBDQWpCVztBQWtCWDBzQiwwQ0FsQlc7QUFtQlhRLHNEQW5CVztBQW9CWFAsd0VBcEJXO0FBcUJYQyxnREFyQlc7QUFzQlhDLGdEQXRCVztBQXVCWEMsdURBdkJXO0FBd0JYQyx1REF4Qlc7QUF5QlhJLG9FQXpCVztBQTBCWEgsNENBMUJXO0FBMkJYQyw0Q0EzQlc7QUE0Qlg1eUIsd0NBNUJXO0FBNkJYK3lCLHlEQTdCVztBQThCWEMsMkRBOUJXO0FBK0JYblI7QUEvQlcsRTs7Ozs7Ozs7Ozs7O3NCQ2pDUzBQLGE7O0FBRnhCOzs7Ozs7QUFFZSxVQUFTQSxhQUFULEdBQXlCO0FBQ3BDLFlBQU8sb0JBQU90ckIsWUFBUCxLQUF3QixDQUF4QixHQUE0QixDQUFuQztBQUNIOzs7Ozs7Ozs7Ozs7c0JDRnVCdXJCLHFCOztBQUZ4Qjs7Ozs7O0FBRWUsVUFBU0EscUJBQVQsR0FBaUM7QUFDNUMsWUFBTyxvQkFBT3lCLGtCQUFQLEVBQVA7QUFDSDs7Ozs7Ozs7Ozs7O3NCQ0Z1QnhCLGlCOztBQUZ4Qjs7Ozs7O0FBRWUsVUFBU0EsaUJBQVQsR0FBNkI7QUFDeEMsWUFBTyxvQkFBT0EsaUJBQVAsRUFBUDtBQUNIOzs7Ozs7Ozs7Ozs7c0JDRnVCMStCLFU7O0FBRnhCOzs7Ozs7QUFFZSxVQUFTQSxVQUFULEdBQXNCO0FBQ2pDLFlBQU8sb0JBQU9BLFVBQVAsRUFBUDtBQUNIOzs7Ozs7Ozs7Ozs7c0JDRnVCMitCLFU7O0FBRnhCOzs7Ozs7QUFFZSxVQUFTQSxVQUFULEdBQXNCO0FBQ2pDLFNBQUksb0JBQU85dEIsVUFBUCxNQUF1QjFqQixVQUFVckIsU0FBVixDQUFvQmcvQixnQkFBL0MsRUFBaUU7QUFDN0QsZ0JBQU8sWUFBUDtBQUNILE1BRkQsTUFFTyxJQUFLLE9BQU83VSxHQUFQLEtBQWUsV0FBZixJQUE4QixPQUFPQSxJQUFJa3FCLEdBQVgsS0FBbUIsVUFBakQsSUFBK0RscUIsSUFBSWtxQixHQUFKLENBQVEsSUFBUixNQUFrQixDQUFsRixJQUNKLG9CQUFPdHRDLGlCQUFQLEdBQTJCakQsUUFBM0IsQ0FBb0NrRCxNQUFwQyxDQUEyQyxZQUEzQyxNQUE2RCxDQUQ3RCxFQUNnRTtBQUNuRSxnQkFBTyxZQUFQO0FBQ0gsTUFITSxNQUdBO0FBQ0gsZ0JBQU8sS0FBUDtBQUNIO0FBQ0o7Ozs7Ozs7Ozs7OztzQkNQdUI4ckMsWTs7QUFKeEI7Ozs7OztBQUVBLEtBQU05USxNQUFNLElBQVo7O0FBRWUsVUFBUzhRLFlBQVQsQ0FBc0IxdEMsSUFBdEIsRUFBNEI7QUFDdkMsU0FBSSxPQUFPQSxJQUFQLEtBQWdCLFdBQWhCLElBQStCQSxTQUFTLEVBQTVDLEVBQWdEO0FBQzVDQSxnQkFBTyxvQkFBTzJCLGlCQUFQLEdBQTJCM0IsSUFBbEM7QUFDSDtBQUNELFNBQUkscUJBQXFCK0IsSUFBckIsQ0FBMEIvQixJQUExQixDQUFKLEVBQXFDO0FBQ2pDLGdCQUFPM0MsT0FBTytQLEVBQWQ7QUFDSDtBQUNELFlBQU93dkIsR0FBUDtBQUNIOzs7Ozs7Ozs7Ozs7c0JDWnVCK1EsZ0I7QUFBVCxVQUFTQSxnQkFBVCxHQUE0Qjs7QUFFdkM7QUFDQSxTQUNJLE9BQU8zeEMsT0FBT3RCLE1BQWQsS0FBeUIsV0FBekIsSUFDQSxPQUFPc0IsT0FBT3RCLE1BQVAsQ0FBYzBpQyxLQUFyQixLQUErQixXQUQvQixJQUVBLE9BQU9waEMsT0FBT3RCLE1BQVAsQ0FBYzBpQyxLQUFkLENBQW9CNThCLE1BQTNCLEtBQXNDLFdBRnRDLElBR0F4RSxPQUFPdEIsTUFBUCxDQUFjMGlDLEtBQWQsQ0FBb0I1OEIsTUFBcEIsS0FBK0IsSUFKbkMsRUFLRTtBQUNFO0FBQ0EsZ0JBQU94RSxPQUFPdEIsTUFBUCxDQUFjMGlDLEtBQWQsQ0FBb0I1OEIsTUFBM0I7QUFDSDs7QUFFRDtBQUNBLFNBQUkwdUMsWUFBWXR4QyxTQUFTa3lCLGNBQVQsQ0FBd0IsWUFBeEIsQ0FBaEI7QUFDQSxTQUNJLE9BQU9vZixTQUFQLEtBQXFCLFdBQXJCLElBQ0FBLGNBQWMsSUFGbEIsRUFHRTtBQUNFLGdCQUFPQyxxQkFBcUJELFNBQXJCLENBQVA7QUFDSDs7QUFFRDtBQUNBLFNBQUlFLFVBQVV4eEMsU0FBU3l4QyxzQkFBVCxDQUFnQyxTQUFoQyxDQUFkO0FBQ0EsU0FDSSxPQUFPRCxPQUFQLEtBQW1CLFdBQW5CLElBQ0FBLFlBQVksSUFEWixJQUVBQSxRQUFRNXVDLE1BQVIsS0FBbUIsQ0FIdkIsRUFJRTtBQUNFLGFBQUk4dUMsaUJBQWlCRixRQUFRLENBQVIsQ0FBckI7QUFDQSxnQkFBT0QscUJBQXFCRyxjQUFyQixDQUFQO0FBQ0g7O0FBRUQ7QUFDQSxTQUFJQyxhQUFhM3hDLFNBQVNreUIsY0FBVCxDQUF3QixhQUF4QixDQUFqQjtBQUNBLFNBQ0ksT0FBT3lmLFVBQVAsS0FBc0IsV0FBdEIsSUFDQUEsZUFBZSxJQUZuQixFQUdFO0FBQ0UsZ0JBQU9KLHFCQUFxQkksVUFBckIsQ0FBUDtBQUNIOztBQUVEO0FBQ0EsU0FBSUMsVUFBVTV4QyxTQUFTeXhDLHNCQUFULENBQWdDLGdCQUFoQyxDQUFkO0FBQ0EsU0FDSSxPQUFPRyxPQUFQLEtBQW1CLFdBQW5CLElBQ0FBLFlBQVksSUFEWixJQUVBQSxRQUFRaHZDLE1BQVIsS0FBbUIsQ0FIdkIsRUFJRTtBQUNFLGFBQUlpdkMsaUJBQWlCRCxRQUFRLENBQVIsQ0FBckI7QUFDQSxnQkFBT0wscUJBQXFCTSxjQUFyQixDQUFQO0FBQ0g7O0FBRUQsWUFBTyxJQUFQO0FBQ0g7O0FBRUQsVUFBU04sb0JBQVQsQ0FBOEJseUMsT0FBOUIsRUFBdUM7O0FBRW5DO0FBQ0EsU0FBSSxPQUFPQSxPQUFQLEtBQW1CLFdBQW5CLElBQWtDQSxZQUFZLElBQWxELEVBQXdEO0FBQ3BELGdCQUFPLElBQVA7QUFDSDs7QUFFRCxTQUFJOztBQUVBLGFBQ0ksT0FBT0EsUUFBUW1oQyxTQUFmLEtBQTZCLFdBQTdCLElBQ0FuaEMsUUFBUW1oQyxTQUFSLEtBQXNCLElBRHRCLElBRUEsT0FBT25oQyxRQUFRbWhDLFNBQVIsQ0FBa0I1OUIsTUFBekIsS0FBb0MsV0FGcEMsSUFHQXZELFFBQVFtaEMsU0FBUixDQUFrQjU5QixNQUFsQixLQUE2QixJQUpqQyxFQUtFO0FBQ0U7QUFDQSxvQkFBT3ZELFFBQVFtaEMsU0FBUixDQUFrQjU5QixNQUF6QjtBQUNIOztBQUVELGFBQ0ksT0FBT3ZELFFBQVErcEMsV0FBZixLQUErQixXQUEvQixJQUNBL3BDLFFBQVErcEMsV0FBUixLQUF3QixJQUR4QixJQUVBLE9BQU8vcEMsUUFBUStwQyxXQUFSLENBQW9CeG1DLE1BQTNCLEtBQXNDLFdBRnRDLElBR0F2RCxRQUFRK3BDLFdBQVIsQ0FBb0J4bUMsTUFBcEIsS0FBK0IsSUFKbkMsRUFLRTtBQUNFO0FBQ0Esb0JBQU92RCxRQUFRK3BDLFdBQVIsQ0FBb0J4bUMsTUFBM0I7QUFDSDtBQUVKLE1BdEJELENBc0JFLE9BQU9pSixDQUFQLEVBQVU7QUFDUixnQkFBTyxJQUFQO0FBQ0g7O0FBRUQsWUFBTyxJQUFQO0FBQ0g7Ozs7Ozs7Ozs7OztzQkNyRnVCbWtDLHVCOztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFVBQVNBLHVCQUFULENBQWlDOEIsV0FBakMsRUFBOEM7QUFDekQsU0FBSXRxQyxPQUFPLElBQVg7QUFBQSxTQUNJdXFDLG1CQUFtQixtQkFBTS9xQyxrQkFBTixDQUF5QixpQkFBekIsQ0FEdkI7QUFBQSxTQUVJZ3JDLHNCQUFzQixtQkFBTTdxQyxzQkFBTixDQUE2QixxQkFBN0IsQ0FGMUI7O0FBSUEsU0FBSS9JLE9BQU90QixNQUFQLElBQWlCc0IsT0FBT3RCLE1BQVAsQ0FBYzBpQyxLQUEvQixJQUF3Q3BoQyxPQUFPdEIsTUFBUCxDQUFjMGlDLEtBQWQsQ0FBb0J5UyxhQUE1RCxJQUE2RTd6QyxPQUFPdEIsTUFBUCxDQUFjMGlDLEtBQWQsQ0FBb0J5UyxhQUFwQixDQUFrQ3pxQyxJQUFuSCxFQUF5SDtBQUNySDtBQUNBO0FBQ0FBLGdCQUFPcEosT0FBT3RCLE1BQVAsQ0FBYzBpQyxLQUFkLENBQW9CeVMsYUFBcEIsQ0FBa0N6cUMsSUFBekM7QUFDSCxNQUpELE1BSU8sSUFBSXVxQyxxQkFBcUIsRUFBekIsRUFBNkI7QUFDaEM7QUFDQTtBQUNBdnFDLGdCQUFPdXFDLGlCQUFpQjF1QyxPQUFqQixDQUF5QixHQUF6QixFQUE4QixHQUE5QixFQUFtQ0EsT0FBbkMsQ0FBMkMsUUFBM0MsRUFBcUQsRUFBckQsQ0FBUDtBQUNILE1BSk0sTUFJQSxJQUFJMnVDLHdCQUF3QixFQUE1QixFQUFnQztBQUNuQztBQUNBO0FBQ0F4cUMsZ0JBQU93cUMsbUJBQVA7QUFDSDs7QUFFRCxTQUFJeHFDLFNBQVMsSUFBVCxJQUFpQkEsS0FBSzVFLE1BQUwsS0FBZ0IsQ0FBckMsRUFBd0M7QUFDcEMsZ0JBQU8sSUFBUDtBQUNIOztBQUVENEUsWUFBT0EsS0FBS25FLE9BQUwsQ0FBYSxJQUFiLEVBQW1CLEdBQW5CLENBQVA7O0FBRUEsU0FBSSxPQUFPeXVDLFdBQVAsS0FBdUIsV0FBdkIsSUFBc0NBLGdCQUFnQixJQUExRCxFQUFnRTtBQUM1RCxhQUFJO0FBQ0Esb0JBQVFycUMsS0FBS3lxQyxLQUFMLENBQVcxcUMsSUFBWCxDQUFELEdBQXFCLElBQTVCO0FBQ0gsVUFGRCxDQUVFLE9BQU9xRSxDQUFQLEVBQVU7QUFDUixvQkFBTyxJQUFQO0FBQ0g7QUFDSjtBQUNELFlBQU9yRSxJQUFQO0FBQ0g7Ozs7Ozs7Ozs7OztzQkNuQ3VCeW9DLGU7O0FBSHhCOzs7O0FBQ0E7Ozs7QUFFZSxVQUFTQSxlQUFULEdBQTJCO0FBQ3RDLFlBQU8sd0NBQW1CLG9CQUFnQmhRLFdBQWhCLEVBQW5CLEVBQWtENThCLE9BQWxELENBQTBELE9BQTFELEVBQW1FLEdBQW5FLEVBQXdFQSxPQUF4RSxDQUFnRixRQUFoRixFQUEwRixHQUExRixDQUFQO0FBQ0g7Ozs7Ozs7Ozs7OztTQ0xlOHRDLGtCLEdBQUFBLGtCO1NBT0FELGlCLEdBQUFBLGlCO1NBY0FsUixnQixHQUFBQSxnQjtBQXJCVCxVQUFTbVIsa0JBQVQsQ0FBNEI3cEMsS0FBNUIsRUFBbUM7QUFDdEMsU0FBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGdCQUFPQSxLQUFQO0FBQ0g7QUFDRCxZQUFPQSxNQUFNcEMsV0FBTixHQUFvQjdCLE9BQXBCLENBQTRCLFdBQTVCLEVBQXlDLEVBQXpDLENBQVA7QUFDSDs7QUFFTSxVQUFTNnRDLGlCQUFULENBQTJCL3ZCLFNBQTNCLEVBQXNDO0FBQ3pDLFNBQUlneEIsV0FBVyxFQUFmO0FBQ0EsVUFBSyxJQUFJem9CLEdBQVQsSUFBZ0J2SSxTQUFoQixFQUEyQjtBQUN2QixhQUFJQSxVQUFVL1QsY0FBVixDQUF5QnNjLEdBQXpCLENBQUosRUFBbUM7QUFDL0IsaUJBQUl2SSxVQUFVdUksR0FBVixNQUFtQixFQUFuQixJQUF5QnZJLFVBQVV1SSxHQUFWLE1BQW1CLElBQTVDLElBQW9EdkksVUFBVXVJLEdBQVYsTUFBbUIsSUFBM0UsRUFBaUY7QUFDN0U7QUFDQTtBQUNBeW9CLDBCQUFTem9CLEdBQVQsSUFBaUJ6YixNQUFNa1QsVUFBVXVJLEdBQVYsQ0FBTixJQUF3QnZJLFVBQVV1SSxHQUFWLENBQXhCLEdBQXlDN2YsT0FBT3NYLFVBQVV1SSxHQUFWLENBQVAsQ0FBMUQ7QUFDSDtBQUNKO0FBQ0o7QUFDRCxZQUFPeW9CLFFBQVA7QUFDSDs7QUFFTSxVQUFTblMsZ0JBQVQsQ0FBMEJyOEIsSUFBMUIsRUFBZ0M7QUFDbkMsU0FBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzFCLGdCQUFPQSxJQUFQO0FBQ0g7QUFDRCxZQUFPQSxLQUFLdUIsV0FBTCxHQUFtQjdCLE9BQW5CLENBQTJCLE9BQTNCLEVBQW9DLEdBQXBDLEVBQXlDQSxPQUF6QyxDQUFpRCxhQUFqRCxFQUFnRSxFQUFoRSxFQUFvRUEsT0FBcEUsQ0FBNEUsUUFBNUUsRUFBc0YsR0FBdEYsQ0FBUDtBQUNILEU7Ozs7Ozs7Ozs7O3NCQ1J1QjZzQyxxQjs7QUFsQnhCOzs7Ozs7QUFFQSxLQUFJa0MscUNBQXFDLFNBQXJDQSxrQ0FBcUMsR0FBWTtBQUNqRCxTQUFJQyxjQUFjcnlDLFNBQVNzeUMsYUFBVCxDQUF1QixzQkFBdkIsQ0FBbEI7O0FBRUEsU0FBSSxPQUFPRCxXQUFQLEtBQXVCLFdBQXZCLElBQXNDLENBQUNBLFdBQXZDLElBQXNEQSxnQkFBZ0IsSUFBMUUsRUFBZ0Y7QUFDNUUsZ0JBQU8sSUFBUDtBQUNIOztBQUVELFNBQUlFLFlBQVlGLFlBQVluckMsWUFBWixDQUF5QixnQkFBekIsQ0FBaEI7O0FBRUEsU0FBSSxPQUFPcXJDLFNBQVAsS0FBcUIsV0FBckIsSUFBb0MsQ0FBQ0EsU0FBckMsSUFBa0RBLGNBQWMsRUFBcEUsRUFBd0U7QUFDcEUsZ0JBQU8sSUFBUDtBQUNIOztBQUVELFlBQU9BLFNBQVA7QUFDSCxFQWREOztBQWdCZSxVQUFTckMscUJBQVQsR0FBb0Q7QUFBQSxTQUFyQjRCLFdBQXFCLHlEQUFQLEtBQU87O0FBQy9ELFNBQUl0cUMsT0FBTyxJQUFYO0FBQUEsU0FDSXVxQyxtQkFBbUIsbUJBQU0vcUMsa0JBQU4sQ0FBeUIsa0JBQXpCLENBRHZCO0FBQUEsU0FFSWdyQyxzQkFBc0JJLG9DQUYxQjs7QUFJQSxTQUFJLE9BQU9oMEMsT0FBT3RCLE1BQWQsS0FBeUIsV0FBekIsSUFBd0MsT0FBT3NCLE9BQU90QixNQUFQLENBQWMwaUMsS0FBckIsS0FBK0IsV0FBdkUsSUFDRyxPQUFPcGhDLE9BQU90QixNQUFQLENBQWMwaUMsS0FBZCxDQUFvQmdULFlBQTNCLEtBQTRDLElBRC9DLElBRUcsT0FBT3AwQyxPQUFPdEIsTUFBUCxDQUFjMGlDLEtBQWQsQ0FBb0JnVCxZQUEzQixLQUE0QyxXQUYvQyxJQUdHLE9BQU9wMEMsT0FBT3RCLE1BQVAsQ0FBYzBpQyxLQUFkLENBQW9CZ1QsWUFBcEIsQ0FBaUNockMsSUFBeEMsS0FBaUQsV0FIeEQsRUFJRTtBQUNFO0FBQ0E7QUFDQUEsZ0JBQU9wSixPQUFPdEIsTUFBUCxDQUFjMGlDLEtBQWQsQ0FBb0JnVCxZQUFwQixDQUFpQ2hyQyxJQUF4QztBQUNILE1BUkQsTUFRTyxJQUFJdXFDLHFCQUFxQixFQUF6QixFQUE2QjtBQUNoQztBQUNBO0FBQ0F2cUMsZ0JBQU91cUMsaUJBQWlCMXVDLE9BQWpCLENBQXlCLEdBQXpCLEVBQThCLEdBQTlCLEVBQW1DQSxPQUFuQyxDQUEyQyxRQUEzQyxFQUFxRCxFQUFyRCxDQUFQO0FBQ0gsTUFKTSxNQUlBLElBQUkydUMsbUJBQUosRUFBeUI7QUFDNUIsZ0JBQU9BLG1CQUFQLENBRDRCLENBQ0E7QUFDL0I7O0FBRUQsU0FBSXhxQyxTQUFTLElBQVQsSUFBaUJBLEtBQUs1RSxNQUFMLEtBQWdCLENBQXJDLEVBQXdDO0FBQ3BDLGdCQUFPLElBQVA7QUFDSDs7QUFFRCxTQUFJLE9BQU9rdkMsV0FBUCxLQUF1QixXQUF2QixJQUFzQ0EsZ0JBQWdCLElBQTFELEVBQWdFO0FBQzVELGdCQUFRLElBQUlycUMsSUFBSixDQUFTRCxLQUFLbkUsT0FBTCxDQUFhLEtBQWIsRUFBb0IsR0FBcEIsRUFBeUJBLE9BQXpCLENBQWlDLEdBQWpDLEVBQXNDLEdBQXRDLENBQVQsRUFBcURzRSxPQUFyRCxFQUFELEdBQW1FLElBQTFFO0FBQ0g7QUFDRCxZQUFPSCxLQUFLbkUsT0FBTCxDQUFhLElBQWIsRUFBbUIsR0FBbkIsQ0FBUDtBQUNIOzs7Ozs7Ozs7Ozs7c0JDN0N1QjhzQyxhOztBQUZ4Qjs7Ozs7O0FBRWUsVUFBU0EsYUFBVCxHQUF5QjtBQUNwQyxZQUNJLHVCQUFVdmdDLEdBQVYsQ0FBYyxTQUFkLE1BQTZCLEtBQTdCLEdBQ0ksdUJBQVVBLEdBQVYsQ0FBYyxTQUFkLEVBQXlCMUssV0FBekIsRUFESixHQUVJLEVBSFI7QUFLSDs7Ozs7Ozs7Ozs7O3NCQ051QmtyQyxVOztBQUZ4Qjs7Ozs7O0FBRWUsVUFBU0EsVUFBVCxHQUFzQjtBQUNqQyxZQUFPLG9CQUFPcUMsa0JBQVAsR0FBNEJ6dkMsSUFBNUIsQ0FBaUMsR0FBakMsQ0FBUDtBQUNIOzs7Ozs7Ozs7Ozs7c0JDSnVCMHZDLFM7QUFBVCxVQUFTQSxTQUFULENBQW1CM3JDLEdBQW5CLEVBQXdCO0FBQ25DLFNBQU1vekIsS0FBSyw0QkFBWDtBQUNBLFNBQU16NkIsUUFBUXk2QixHQUFHcjJCLElBQUgsQ0FBUWlELEdBQVIsQ0FBZDtBQUNBLHFCQUFjckgsTUFBTSxDQUFOLENBQWQsV0FBNEJBLE1BQU0sQ0FBTixDQUE1QjtBQUNIOzs7Ozs7Ozs7Ozs7c0JDRnVCNHdDLFU7O0FBRnhCOzs7Ozs7QUFFZSxVQUFTQSxVQUFULEdBQXNCO0FBQ2pDLFlBQU8sb0JBQWdCN1EsY0FBaEIsR0FBaUN2NkIsV0FBakMsRUFBUDtBQUNIOzs7Ozs7Ozs7Ozs7c0JDRnVCcXJDLFE7O0FBRnhCOzs7Ozs7QUFFZSxVQUFTQSxRQUFULEdBQW9CO0FBQy9CLFlBQVEsb0JBQU94dUIsVUFBUCxNQUF1QjFqQixVQUFVckIsU0FBVixDQUFvQmcvQixnQkFBNUMsR0FBZ0UsQ0FBaEUsR0FBb0UsQ0FBM0U7QUFDSDs7Ozs7Ozs7Ozs7O3NCQ0R1QmlFLFc7O0FBSHhCOzs7O0FBQ0E7Ozs7QUFFZSxVQUFTQSxXQUFULEdBQXVCO0FBQ2xDLFlBQU8sc0NBQWlCLG9CQUFnQkMsbUJBQWhCLEVBQWpCLENBQVA7QUFDSDs7Ozs7Ozs7Ozs7O3NCQ0h1QnBjLFc7O0FBRnhCOzs7Ozs7QUFFZSxVQUFTQSxXQUFULENBQXFCL2MsR0FBckIsRUFBMEI7QUFDckMsU0FBSTRyQyx1QkFBdUIsb0JBQWdCN3VCLFdBQWhCLENBQTRCL2MsR0FBNUIsRUFBaUM3QixXQUFqQyxFQUEzQjtBQUNBLFNBQU0wdEMsZUFBZTtBQUNqQixrQkFBUyxRQURRO0FBRWpCLGtCQUFTLFFBRlE7QUFHakIsd0JBQWUsU0FIRTtBQUlqQix1QkFBYyxRQUpHO0FBS2pCLGtCQUFTLFNBTFE7QUFNakIseUJBQWdCLFNBTkM7QUFPakIsd0JBQWU7QUFQRSxNQUFyQjtBQVNBLFlBQVEsT0FBT0EsYUFBYUQsb0JBQWIsQ0FBUCxLQUE4QyxXQUE5QyxHQUE0REMsYUFBYUQsb0JBQWIsQ0FBNUQsR0FBaUcsT0FBekc7QUFDSDs7Ozs7Ozs7Ozs7O3NCQ1p1Qm5DLFc7O0FBRnhCOzs7Ozs7QUFFZSxVQUFTQSxXQUFULEdBQXVCO0FBQ2xDLFlBQ0l4d0MsU0FBU3dOLFFBQVQsS0FBc0Isb0JBQU9nakMsV0FBUCxFQUF0QixHQUNJLG9CQUFPQSxXQUFQLEdBQXFCenRDLE1BQXJCLENBQTRCLENBQTVCLEVBQStCLEdBQS9CLENBREosR0FFSSxFQUhSO0FBS0g7Ozs7Ozs7Ozs7OztzQkNOdUJpdUMsaUI7O0FBRnhCOzs7Ozs7QUFFZSxVQUFTQSxpQkFBVCxHQUE2QjtBQUN4QyxZQUFPLG9CQUFnQjdSLGlCQUFoQixDQUFrQyxHQUFsQyxDQUFQO0FBQ0g7Ozs7Ozs7Ozs7OztzQkNGdUJzUiwwQjs7QUFGeEI7Ozs7OztBQUVlLFVBQVNBLDBCQUFULEdBQXNDO0FBQ2pELFNBQU1vQywwQkFBMEIsbUJBQU05cUMsU0FBTixDQUFnQixNQUFoQixDQUFoQyxDQURpRCxDQUNTO0FBQzFELFlBQVEsT0FBTzhxQyx1QkFBUCxLQUFtQyxXQUFuQyxHQUFpREEsdUJBQWpELEdBQTJFLEVBQW5GO0FBQ0g7Ozs7Ozs7Ozs7OztzQkNMdUJuQyxjO0FBQVQsVUFBU0EsY0FBVCxDQUF3QnZ6QyxRQUF4QixFQUFrQztBQUM3QyxZQUFPQSxTQUFTLENBQVQsQ0FBUDtBQUNIOzs7Ozs7Ozs7Ozs7c0JDRnVCd3pDLGM7QUFBVCxVQUFTQSxjQUFULENBQXdCeHpDLFFBQXhCLEVBQWtDO0FBQzdDLFlBQVFBLFNBQVMsQ0FBVCxNQUFnQkEsU0FBUyxDQUFULENBQWhCLEdBQThCLEVBQTlCLEdBQW1DQSxTQUFTLENBQVQsQ0FBM0MsQ0FENkMsQ0FDYTtBQUM3RDs7Ozs7Ozs7Ozs7O3NCQ0Z1Qnl6QyxrQjtBQUFULFVBQVNBLGtCQUFULENBQTRCenpDLFFBQTVCLEVBQXNDO0FBQ2pELFlBQVFBLFNBQVMsQ0FBVCxNQUFnQkEsU0FBUyxDQUFULENBQWhCLEdBQThCLEVBQTlCLEdBQW1DQSxTQUFTLENBQVQsQ0FBM0MsQ0FEaUQsQ0FDUztBQUM3RDs7Ozs7Ozs7Ozs7O3NCQ0Z1QjB6QyxrQjtBQUFULFVBQVNBLGtCQUFULENBQTRCMXpDLFFBQTVCLEVBQXNDO0FBQ2pELFlBQVFBLFNBQVMsQ0FBVCxNQUFnQkEsU0FBUyxDQUFULENBQWhCLEdBQThCLEVBQTlCLEdBQW1DQSxTQUFTLENBQVQsQ0FBM0MsQ0FEaUQsQ0FDUztBQUM3RDs7Ozs7Ozs7Ozs7O3NCQ011Qjh6Qyx3Qjs7QUFSeEI7Ozs7OztBQUVBOzs7Ozs7QUFNZSxVQUFTQSx3QkFBVCxHQUFvQztBQUMvQyxVQUFPLG9CQUFPeHRCLE9BQVAsT0FBcUIsYUFBckIsR0FBcUMsU0FBckMsR0FBaUQsSUFBeEQ7QUFDSDs7Ozs7Ozs7Ozs7O3NCQ1J1QnF0QixZOztBQUZ4Qjs7Ozs7O0FBRWUsVUFBU0EsWUFBVCxHQUF3QjtBQUNuQyxZQUFPLG1CQUFNL29DLFNBQU4sQ0FBZ0IsWUFBaEIsS0FBaUMsV0FBeEM7QUFDSDs7Ozs7Ozs7Ozs7O3NCQ0F1QmdwQyxZO0FBSnhCOzs7O0FBSWUsVUFBU0EsWUFBVCxHQUF3QjtBQUNuQyxTQUFJLENBQUN0cEMsS0FBS3FyQyxHQUFWLEVBQWU7QUFDWDtBQUNBLGdCQUFPLElBQUlyckMsSUFBSixHQUFXRSxPQUFYLEVBQVA7QUFDSDs7QUFFRCxZQUFPRixLQUFLcXJDLEdBQUwsRUFBUDtBQUNIOzs7Ozs7Ozs7Ozs7c0JDVHVCMzBCLFU7O0FBRnhCOzs7Ozs7QUFFZSxVQUFTQSxVQUFULEdBQXNCO0FBQ2pDLFlBQU8sb0JBQU9BLFVBQVAsRUFBUDtBQUNIOzs7Ozs7Ozs7Ozs7c0JDQ3VCNDBCLHFCOztBQUx4Qjs7Ozs7O0FBRUEsS0FBTUMsMkJBQTJCLFVBQWpDO0FBQ0EsS0FBTUMsdUJBQXVCLFlBQTdCOztBQUVlLFVBQVNGLHFCQUFULEdBQWlDO0FBQzVDLFNBQUlHLFdBQVcsbUJBQU1uckMsU0FBTixDQUFnQmlyQyx3QkFBaEIsQ0FBZjtBQUNBLFNBQUlHLFdBQVcsbUJBQU1wckMsU0FBTixDQUFnQmtyQyxvQkFBaEIsQ0FBZjs7QUFFQSxTQUFJLE9BQU9FLFFBQVAsS0FBb0IsV0FBcEIsSUFBbUNBLGFBQWEsQ0FBcEQsRUFBdUQ7QUFDbkQsZ0JBQU9BLFFBQVA7QUFDSCxNQUZELE1BRU8sSUFBSSxPQUFPRCxRQUFQLEtBQW9CLFdBQXBCLElBQW1DQSxTQUFTdHdDLE1BQVQsS0FBb0IsQ0FBM0QsRUFBOEQ7QUFDakUsZ0JBQU9zd0MsUUFBUDtBQUNIOztBQUVELFlBQU8sS0FBUDtBQUNIOzs7Ozs7Ozs7Ozs7Ozs7QUNkRDs7QUFHQTs7OztBQUxBLEtBQUlsMUMsTUFBTSxtQkFBQXRCLENBQVEsR0FBUixFQUFrQixnQ0FBbEIsQ0FBVjtBQUNBLEtBQUlJLFNBQVMsbUJBQUFKLENBQVEsR0FBUixDQUFiOztBQUVBLEtBQUlPLGtCQUFrQixtQkFBQVAsQ0FBUSxHQUFSLENBQXRCO0FBQ0EsS0FBSTZCLFFBQVEsbUJBQUE3QixDQUFRLEdBQVIsQ0FBWjs7O0FBR0EsS0FBSTB1QixVQUFVLEVBQWQ7O0tBRU0vZixXO0FBRUYsNEJBQWM7QUFBQTs7QUFDVixjQUFLaXdCLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxjQUFLMkIsV0FBTCxHQUFtQixFQUFuQjtBQUNBLGNBQUttVyxxQkFBTCxHQUE2QixLQUE3QjtBQUNBLGNBQUsxWCxhQUFMLEdBQXFCLENBQXJCO0FBQ0g7O0FBRUQ7Ozs7Ozs7Z0NBR087QUFDSDtBQUNBLGtCQUFLSixXQUFMLEdBQW1CLElBQUl4OEIsSUFBSXVNLFdBQVIsQ0FDZixFQURlLEVBRWZwTyxnQkFBZ0Jza0MsZUFBaEIsRUFGZSxDQUFuQjtBQUlIOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0FpQmN6YSxJLEVBQU07QUFDaEI5b0IsaUJBQUksd0JBQUo7QUFDQSxrQkFBSzY5QixpQkFBTCxHQUF5QixJQUF6Qjs7QUFFQSxrQkFBS3VYLHFCQUFMLEdBQTZCLEtBQTdCO0FBQ0Esa0JBQUsxWCxhQUFMOztBQUVBLGtCQUFLMlgsb0JBQUwsQ0FBMEJ2c0IsSUFBMUI7QUFDQSxrQkFBS3dzQixrQkFBTCxDQUF3QnhzQixJQUF4QjtBQUNIOztBQUVEOzs7Ozs7bUNBR1VBLEksRUFBTTtBQUNaLGtCQUFLeXNCLGtCQUFMLENBQXdCLFFBQXhCLEVBQWtDLENBQWxDLEVBQXFDLEVBQUN0M0IsVUFBVSxZQUFYLEVBQXJDO0FBQ0g7O0FBRUQ7Ozs7Ozt5Q0FHZ0I2SyxJLEVBQU07QUFDbEIsa0JBQUt5c0Isa0JBQUwsQ0FBd0IsUUFBeEIsRUFBa0MsQ0FBbEMsRUFBcUMsRUFBQ3QzQixVQUFVLFdBQVgsRUFBckM7QUFDSDs7QUFFRDs7Ozs7O3FDQUdZNkssSSxFQUFNO0FBQ2Q7QUFDQUEsa0JBQUswc0IsV0FBTCxHQUFtQnB0QyxTQUFuQjtBQUNBLGlCQUFJK2EsWUFBWSxLQUFLc3lCLGlCQUFMLENBQXVCM3NCLElBQXZCLEVBQTZCLFFBQTdCLENBQWhCO0FBQUEsaUJBQ0k0c0IsZUFBZSxDQURuQixDQUhjLENBSVM7QUFDdkIsa0JBQUtDLGtCQUFMLENBQXdCLE1BQXhCLEVBQWdDeHlCLFNBQWhDO0FBQ0Esa0JBQUtveUIsa0JBQUwsQ0FBd0IsTUFBeEIsRUFBZ0NHLFlBQWhDO0FBQ0Esa0JBQUtOLHFCQUFMLEdBQTZCLElBQTdCO0FBQ0g7O0FBRUQ7Ozs7OzttQ0FHVXRzQixJLEVBQU07QUFDWjtBQUNBLGlCQUFJOHNCLE9BQU8sS0FBS3RZLFdBQUwsQ0FBaUJya0IsT0FBakIsRUFBWDtBQUFBLGlCQUNJeThCLGVBQWdCLE9BQU9FLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0IsT0FBT0EsS0FBS3A5QixlQUFaLEtBQWdDLFVBQS9ELEdBQTRFbzlCLEtBQUtwOUIsZUFBTCxFQUE1RSxHQUFxRyxDQUR6SDtBQUVBbzlCLGtCQUFLLzlCLFFBQUwsQ0FBYyxVQUFkLEVBQTBCaE0sT0FBTzZwQyxZQUFQLENBQTFCLEVBSlksQ0FJc0M7QUFDbERFLGtCQUFLLzlCLFFBQUwsQ0FBYyxVQUFkLEVBQTBCaE0sT0FBTzZwQyxZQUFQLENBQTFCLEVBTFksQ0FLc0M7QUFDbEQsa0JBQUtILGtCQUFMLENBQXdCLEtBQXhCLEVBQWdDRyxlQUFlLElBQS9DLEVBTlksQ0FNNEM7QUFDM0Q7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7d0NBVWU1c0IsSSxFQUFNO0FBQ2pCLGlCQUFJM0YsWUFBWSxLQUFLc3lCLGlCQUFMLENBQXVCM3NCLElBQXZCLEVBQTZCLE1BQTdCLENBQWhCO0FBQ0Esa0JBQUs2c0Isa0JBQUwsQ0FBd0IsTUFBeEIsRUFBZ0N4eUIsU0FBaEM7QUFDQSxrQkFBS295QixrQkFBTCxDQUF3QixNQUF4QixFQUFnQ3pzQixLQUFLK3NCLFdBQXJDO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7c0NBT2Evc0IsSSxFQUFNO0FBQ2Ysa0JBQUt5c0Isa0JBQUwsQ0FBd0IsS0FBeEIsRUFBZ0M5akMsU0FBU3FYLEtBQUsrc0IsV0FBZCxFQUEyQixFQUEzQixNQUFtQyxDQUFuQyxHQUF1Qy9zQixLQUFLMHNCLFdBQTVDLEdBQTBEMXNCLEtBQUsrc0IsV0FBL0Y7QUFDSDs7QUFFRDs7Ozs7Ozs7Ozs7OztxQ0FVWS9zQixJLEVBQU0sQ0FFakI7QUFERzs7O0FBR0o7Ozs7OztvQ0FHV0EsSSxFQUFNO0FBQ2Isa0JBQUt5c0Isa0JBQUwsQ0FBd0IsT0FBeEIsRUFBaUN6c0IsS0FBSytzQixXQUF0QztBQUNIOztBQUVEOzs7Ozs7a0NBR1Mvc0IsSSxFQUFNO0FBQ1gsa0JBQUt5c0Isa0JBQUwsQ0FBd0IsTUFBeEIsRUFBZ0N6c0IsS0FBSytzQixXQUFyQztBQUNIOztBQUVEOzs7Ozs7bUNBR1Uvc0IsSSxFQUFNO0FBQ1osa0JBQUt5c0Isa0JBQUwsQ0FBd0IsTUFBeEIsRUFBZ0N6c0IsS0FBSytzQixXQUFyQztBQUNIOztBQUVEOzs7Ozs7aUNBR1Evc0IsSSxFQUFNO0FBQ1Ysa0JBQUt5c0Isa0JBQUwsQ0FBd0IsTUFBeEIsRUFBZ0N6c0IsS0FBSytzQixXQUFyQztBQUNIOzs7NkNBRW1CO0FBQ2hCLG9CQUFPLEtBQUtoWSxpQkFBWjtBQUNIOztBQUdEOzs7Ozs7QUFNQTs7Ozs7Ozs7OENBS3FCL1UsSSxFQUFNO0FBQ3ZCO0FBQ0E7O0FBRUEsaUJBQUlndEIsS0FBS3oxQyxVQUFVRSxLQUFWLENBQWdCb0wsUUFBaEIsQ0FBeUJtZCxLQUFLaXRCLGVBQTlCLEtBQWtEanRCLEtBQUtpdEIsZUFBTCxDQUFxQm55QixRQUFyQixDQUE4QixPQUE5QixDQUFsRCxHQUEyRixJQUEzRixHQUFrRyxHQUEzRzs7QUFFQSxpQkFBSVQsWUFBWSx1Q0FDWjtBQUNJMnlCLHFCQUFJQSxFQURSO0FBRUl4VixxQkFBSXhoQyxPQUFPczBDLGtCQUFQLEVBRlI7QUFHSW54QixxQkFBSSxPQUhSLEVBR3dCO0FBQ3BCQyxxQkFBSSxPQUpSLEVBSXdCO0FBQ3BCOHpCLHFCQUFJLE9BTFIsRUFLd0I7QUFDcEJDLDhCQUFhLEtBQUtDLFlBQUwsQ0FBa0JwdEIsS0FBS3F0Qix1QkFBdkIsQ0FOakI7QUFPSTkzQiwyQkFBVStPLE9BUGQsRUFPOEI7QUFDMUJncEIsMkJBQVVocEIsT0FSZCxFQVE4QjtBQUMxQjlPLDJCQUFVLEdBVGQsRUFTOEI7QUFDMUI5QiwyQkFBVXNNLEtBQUtpdEIsZUFBTCxJQUF3QjNvQixPQVZ0QyxFQVUrQztBQUMzQzFRLDJCQUFVMFEsT0FYZCxFQVc4QjtBQUMxQmlwQiwyQkFBVWpwQixPQVpkLEVBWThCO0FBQzFCa3BCLDJCQUFVLE1BYmQsRUFhOEI7QUFDMUJDLDJCQUFVLE9BZGQsRUFjK0I7QUFDM0JDLDJCQUFVLE9BZmQsQ0FlOEI7QUFmOUIsY0FEWSxDQUFoQjtBQW1CQXJ6Qix5QkFBWSw4Q0FBd0JBLFNBQXhCLENBQVo7QUFDQSxrQkFBS3d5QixrQkFBTCxDQUF3QixRQUF4QixFQUFrQ3h5QixTQUFsQztBQUNIOztBQUVEOzs7Ozs7Ozs0Q0FLbUIyRixJLEVBQU07QUFDckIsaUJBQUkydEIsb0JBQW9CO0FBQ3BCQywwQkFBVTUzQyxPQUFPc25CLFlBQVAsS0FBd0IsQ0FBeEIsR0FBNEIsQ0FEbEI7QUFFcEJ1d0IsOEJBQWExM0MsZ0JBQWdCMGxDLG1CQUFoQixDQUFvQzdiLEtBQUs4YixJQUF6QyxDQUZPO0FBR3BCZ1MsNkJBQVksT0FIUTtBQUlwQkMsOEJBQWEsUUFKTztBQUtwQkMsOEJBQWEsS0FMTztBQU1wQnhXLHFCQUFJamdDLFVBQVV2QixNQUFWLENBQWlCczBDLGtCQUFqQixFQU5nQjtBQU9wQjJELDJCQUFXLE9BQU9qdUIsS0FBS2t1QixTQUFaLEtBQTBCLFdBQTFCLEdBQXdDLHNDQUFpQmx1QixLQUFLa3VCLFNBQXRCLENBQXhDLEdBQTJFNXBCO0FBUGxFLGNBQXhCO0FBU0Esa0JBQUt1b0Isa0JBQUwsQ0FBd0IsVUFBeEIsRUFBb0NjLGlCQUFwQztBQUNIOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7c0NBWWFOLHVCLEVBQXlCO0FBQ2xDLGlCQUFJYyxTQUFKO0FBQ0EsaUJBQUluNEMsT0FBT2lzQixvQkFBUCxFQUFKLEVBQW1DO0FBQy9CLHFCQUFJLEtBQUsyUyxhQUFMLEtBQXVCLENBQTNCLEVBQThCO0FBQzFCdVosaUNBQVlkLDBCQUEwQixLQUExQixHQUFrQyxNQUE5QztBQUNILGtCQUZELE1BRU87QUFDSGMsaUNBQVksSUFBWjtBQUNIO0FBQ0osY0FORCxNQU1PO0FBQ0hBLDZCQUFZZCwwQkFBMEIsSUFBMUIsR0FBaUMsSUFBN0M7QUFDSDs7QUFFRCxvQkFBT2MsU0FBUDtBQUNIOztBQUVEOzs7Ozs7OzRDQUltQnB2QyxLLEVBQU9xdkMsbUIsRUFBcUJDLFUsRUFBWTtBQUN2RCxpQkFBSSxDQUFDcjRDLE9BQU9vZ0MsaUJBQVAsRUFBTCxFQUFpQztBQUM3QmwvQixxQkFBSSx5RUFBSjtBQUNBO0FBQ0gsY0FIRCxNQUdPLElBQUksQ0FBQyxLQUFLczlCLFdBQVYsRUFBdUI7QUFDMUJ0OUIscUJBQUlxbUIsS0FBSixDQUFVLHFGQUFWO0FBQ0E7QUFDSDs7QUFFRDh3QiwwQkFBYWozQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQmczQyxVQUFsQixDQUFiOztBQUVBLGlCQUFJdHZDLFVBQVUsTUFBZCxFQUFzQjtBQUNsQjtBQUNBQSx5QkFBUSxPQUFSO0FBQ0FzdkMsNEJBQVdDLFFBQVgsR0FBc0IsTUFBdEI7QUFDQXAzQyxxQkFBSSxtQ0FBSjtBQUNIOztBQUVELGlCQUFJLE9BQU9jLElBQUl1TSxXQUFKLENBQWdCdVUsWUFBaEIsQ0FBNkIvWixNQUFNL0MsV0FBTixFQUE3QixDQUFQLEtBQTZELFdBQWpFLEVBQThFO0FBQzFFOUUscUJBQUlpRixJQUFKLENBQVMseUNBQXlDNEMsS0FBekMsR0FBaUQsR0FBMUQ7QUFDSDs7QUFFRCxpQkFBSXd2QyxVQUFVdjJDLElBQUl1TSxXQUFKLENBQWdCdVUsWUFBaEIsQ0FBNkIvWixNQUFNL0MsV0FBTixFQUE3QixDQUFkO0FBQ0Esa0JBQUt3NEIsV0FBTCxDQUFpQnplLE1BQWpCLENBQXdCdzRCLE9BQXhCLEVBQWlDRixVQUFqQyxFQUE2QzUyQyxNQUFNOEsscUJBQU4sQ0FBNEI2ckMsbUJBQTVCLENBQTdDO0FBQ0Esa0JBQUtqWSxXQUFMLENBQWlCbjFCLElBQWpCLENBQXNCO0FBQ2xCNUYsdUJBQU0sUUFEWTtBQUVsQjJELHdCQUFPQSxLQUZXO0FBR2xCeXZDLHdCQUFPSCxVQUhXO0FBSWxCRSwwQkFBU0EsT0FKUztBQUtsQkgsc0NBQXFCQTtBQUxILGNBQXRCO0FBT0g7Ozs0Q0FFa0JLLE0sRUFBUXAwQixTLEVBQVc7QUFDbEMsaUJBQUksQ0FBQ3JrQixPQUFPb2dDLGlCQUFQLEVBQUwsRUFBaUM7QUFDN0JsL0IscUJBQUkseUVBQUo7QUFDQTtBQUNILGNBSEQsTUFHTyxJQUFJLENBQUMsS0FBS3M5QixXQUFWLEVBQXVCO0FBQzFCdDlCLHFCQUFJcW1CLEtBQUosQ0FBVSxxRkFBVjtBQUNBO0FBQ0g7QUFDRGxELHlCQUFZLHVDQUFrQkEsU0FBbEIsQ0FBWjtBQUNBbmpCLGlCQUFJLHdDQUF3Q3UzQyxNQUF4QyxHQUFpRCxlQUFyRCxFQUFzRXAwQixTQUF0RTs7QUFFQSxxQkFBUW8wQixNQUFSO0FBQ0ksc0JBQUssUUFBTDtBQUNJLDBCQUFLamEsV0FBTCxDQUFpQjVsQixTQUFqQixDQUEyQnlMLFNBQTNCO0FBQ0E7QUFDSixzQkFBSyxVQUFMO0FBQ0ksMEJBQUttYSxXQUFMLENBQWlCdGQsV0FBakIsQ0FBNkJtRCxTQUE3QjtBQUNBO0FBQ0osc0JBQUssTUFBTDtBQUNJLDBCQUFLbWEsV0FBTCxDQUFpQnZkLE9BQWpCLENBQXlCb0QsU0FBekI7QUFDQTtBQUNKO0FBQ0luakIseUJBQUlpRixJQUFKLENBQVMscUJBQXFCc3lDLE1BQXJCLEdBQThCLDJCQUF2QztBQUNBO0FBWlI7O0FBZUEsa0JBQUt0WSxXQUFMLENBQWlCbjFCLElBQWpCLENBQXNCO0FBQ2xCNUYsdUJBQU0sS0FEWTtBQUVsQnF6Qyx5QkFBUUEsTUFGVTtBQUdsQnAwQiw0QkFBV0E7QUFITyxjQUF0QjtBQUtIOzs7MkNBRWlCMkYsSSxFQUFNMHVCLGUsRUFBaUI7QUFDckMsaUJBQUksQ0FBQzE0QyxPQUFPb2dDLGlCQUFQLEVBQUwsRUFBaUM7QUFDN0JsL0IscUJBQUkseUVBQUo7QUFDQTtBQUNILGNBSEQsTUFHTyxJQUFJLENBQUMsS0FBS3M5QixXQUFWLEVBQXVCO0FBQzFCdDlCLHFCQUFJcW1CLEtBQUosQ0FBVSxxRkFBVjtBQUNBO0FBQ0g7O0FBRUQsaUJBQUltdkIsY0FBYyxPQUFPMXNCLEtBQUswc0IsV0FBWixLQUE0QixXQUE1QixHQUNkajFDLE1BQU04SyxxQkFBTixDQUE0QnlkLEtBQUswc0IsV0FBakMsQ0FEYyxHQUNrQyxDQURwRDtBQUVBLGlCQUFJd0IsWUFBWSxFQUFoQjtBQUNBLGlCQUFJN2pCLE9BQVEsT0FBT3JLLEtBQUtxSyxJQUFaLEtBQXFCLFdBQXJCLEdBQW1DckssS0FBS3FLLElBQXhDLEdBQStDLEVBQTNEOztBQUVBLGlCQUFJcWlCLGdCQUFnQixDQUFoQixJQUFxQnZsQyxNQUFNdWxDLFdBQU4sQ0FBekIsRUFBNkM7QUFDekM7QUFDQUEsK0JBQWMsRUFBZDtBQUNIOztBQUVELGlCQUFJZ0Msb0JBQW9CLFFBQXhCLEVBQWtDO0FBQzlCUiw2QkFBWSxjQUFjN2pCLElBQTFCO0FBQ0gsY0FGRCxNQUVPLElBQUlySyxLQUFLa3VCLFNBQVQsRUFBb0I7QUFDdkJBLDZCQUFZLHNDQUFpQmx1QixLQUFLa3VCLFNBQXRCLENBQVo7QUFDSDs7QUFFRCxpQkFBSTd6QixZQUFZO0FBQ1osOEJBQWFnUSxJQUREO0FBRVosOEJBQWEvRixPQUZELEVBRWM7QUFDMUIsNkJBQWFvcUIsb0JBQW9CLFFBQXBCLEdBQStCLFVBQS9CLEdBQTRDLEVBSDdDLEVBR2tEO0FBQzlELCtCQUFjcmtCLElBSkYsRUFJUTtBQUNwQiw2QkFBWTZqQixTQUxBLEVBS1c7QUFDdkIsNkJBQVl4QixXQU5BLEVBTWE7QUFDekIsNkJBQWEsS0FBS0oscUJBQUwsR0FBNkIsQ0FBN0IsR0FBaUMsQ0FQbEMsRUFPc0M7QUFDbEQsNkJBQWFvQyxvQkFBb0IsUUFBcEIsR0FBK0IsTUFBL0IsR0FBeUMxdUIsS0FBSzJ1QixNQUFMLEdBQWMsTUFBZCxHQUF1QixNQVJqRSxFQVEyRTtBQUN2Riw2QkFBWWpDLFdBVEEsRUFTYTtBQUN6Qiw2QkFBYWdDLG9CQUFvQixRQUFwQixJQUFnQzF1QixLQUFLMnVCLE1BQXJDLEdBQThDLENBQTlDLEdBQWtELEVBVm5ELEVBVXdEO0FBQ3BFLDZCQUFZLENBWEEsRUFXRztBQUNmLDZCQUFZVCxTQVpBLEVBWVc7QUFDdkIsNkJBQVksS0FiQSxFQWFPO0FBQ25CLDZCQUFZLENBZEEsRUFjRztBQUNmLDZCQUFhUSxvQkFBb0IsUUFBcEIsR0FBK0IsSUFBL0IsR0FBdUMxdUIsS0FBSzJ1QixNQUFMLEdBQWMsTUFBZCxHQUF1QixLQWYvRCxDQWV1RTtBQWZ2RSxjQUFoQjs7QUFrQkEsb0JBQU90MEIsU0FBUDtBQUNIOzs7Ozs7c0JBR1UsSUFBSTlWLFdBQUosRTs7Ozs7Ozs7Ozs7O1NDbFhDcXFDLFcsR0FBQUEsVztTQUlBQyxZLEdBQUFBLFk7QUFOaEIsS0FBTXZYLFlBQVksSUFBSThRLEdBQUosRUFBbEI7O0FBRU8sVUFBU3dHLFdBQVQsQ0FBcUJoc0IsR0FBckIsRUFBMEJwaUIsS0FBMUIsRUFBaUM7QUFDcEM4MkIsZUFBVXZ1QixHQUFWLENBQWM2WixHQUFkLEVBQW1CcGlCLEtBQW5CO0FBQ0g7O0FBRU0sVUFBU3F1QyxZQUFULEdBQXdCO0FBQzNCLFNBQU1yRyxTQUFTLEVBQWY7QUFDQWxSLGVBQVUvdkIsT0FBVixDQUFrQixVQUFDL0csS0FBRCxFQUFRb2lCLEdBQVIsRUFBZ0I7QUFDOUI0bEIsZ0JBQU81bEIsR0FBUCxJQUFjcGlCLEtBQWQ7QUFDSCxNQUZEOztBQUlBLFlBQU9nb0MsTUFBUDtBQUNILEU7Ozs7Ozs7O0FDYkQ7Ozs7QUFDQTs7Ozs7O0FBRUE7OztBQUdBLFVBQVNzRyxTQUFULEdBQXFCO0FBQ2pCLFNBQUlDLGtCQUFrQixvQkFBT0Msa0JBQVAsRUFBdEI7O0FBRUEsVUFBS0MsT0FBTCxHQUFlO0FBQ1hDLGVBQU1ILGdCQUFnQnp3QixHQUFoQixDQUFvQlIsSUFEZjtBQUVYcXhCLGdCQUFPSixnQkFBZ0J6d0IsR0FBaEIsQ0FBb0JQO0FBRmhCLE1BQWY7O0FBS0EsVUFBS3F4QixZQUFMLEdBQW9CO0FBQ2hCRixlQUFNSCxnQkFBZ0JseEIsUUFBaEIsQ0FBeUJDLElBRGY7QUFFaEJxeEIsZ0JBQU9KLGdCQUFnQmx4QixRQUFoQixDQUF5QkU7QUFGaEIsTUFBcEI7QUFJSDs7QUFFRCt3QixXQUFVN3FDLFNBQVYsQ0FBb0JnZixvQkFBcEIsR0FBMkMsWUFBWTtBQUNuRCxTQUFJLEtBQUtvc0IscUJBQUwsRUFBSixFQUFrQztBQUM5QixnQkFBTyxLQUFLQyxrQkFBTCxFQUFQO0FBQ0gsTUFGRCxNQUVPO0FBQ0gsZ0JBQU8sS0FBS0MsYUFBTCxFQUFQO0FBQ0g7QUFDSixFQU5EOztBQVFBVCxXQUFVN3FDLFNBQVYsQ0FBb0J1ckMsUUFBcEIsR0FBK0IsWUFBWTtBQUN2QyxZQUFPLG9CQUFPdnlDLGlCQUFQLEdBQTJCaUYsUUFBM0IsS0FBd0MsUUFBL0M7QUFDSCxFQUZEOztBQUlBNHNDLFdBQVU3cUMsU0FBVixDQUFvQm9yQyxxQkFBcEIsR0FBNEMsWUFBWTtBQUNwRCxZQUFPLDhDQUE0QixLQUFuQztBQUNILEVBRkQ7O0FBSUFQLFdBQVU3cUMsU0FBVixDQUFvQnFyQyxrQkFBcEIsR0FBeUMsWUFBWTtBQUNqRCxTQUFJLEtBQUtFLFFBQUwsRUFBSixFQUFxQjtBQUNqQixnQkFBTyxLQUFLSixZQUFMLENBQWtCRCxLQUF6QjtBQUNILE1BRkQsTUFFTztBQUNILGdCQUFPLEtBQUtDLFlBQUwsQ0FBa0JGLElBQXpCO0FBQ0g7QUFDSixFQU5EOztBQVFBSixXQUFVN3FDLFNBQVYsQ0FBb0JzckMsYUFBcEIsR0FBb0MsWUFBWTtBQUM1QyxTQUFJLEtBQUtDLFFBQUwsRUFBSixFQUFxQjtBQUNqQixnQkFBTyxLQUFLUCxPQUFMLENBQWFFLEtBQXBCO0FBQ0gsTUFGRCxNQUVPO0FBQ0gsZ0JBQU8sS0FBS0YsT0FBTCxDQUFhQyxJQUFwQjtBQUNIO0FBQ0osRUFORDs7QUFRQXAzQyxRQUFPQyxPQUFQLEdBQWlCLElBQUkrMkMsU0FBSixFQUFqQixDOzs7Ozs7OztBQ3BEQTs7Ozs7OztBQU9BOzs7Ozs7O0FBT0EsS0FBSXAzQyxRQUFRO0FBQ1Jzb0IsV0FBTTtBQURFLEVBQVo7O0FBSUE7Ozs7O0FBS0EsS0FBSXl2QixjQUFjO0FBQ2RDLG1CQUFjLEVBREE7QUFFZEMsa0JBQWEsRUFGQztBQUdkQyxlQUFVLEVBSEk7QUFJZEMsZUFBVSxFQUpJO0FBS2RDLGNBQVM7QUFMSyxFQUFsQjs7QUFRQTs7Ozs7O0FBTUEsS0FBSUMsV0FBVyxFQUFmOztBQUVBOzs7OztBQUtBLFVBQVNDLE1BQVQsQ0FBZ0JDLGFBQWhCLEVBQStCO0FBQzNCNzRDLFlBQU80MEIsSUFBUCxDQUFZaWtCLGFBQVosRUFBMkIxb0MsT0FBM0IsQ0FBbUMsVUFBVXhJLEtBQVYsRUFBaUI7QUFDaERreEMsdUJBQWNseEMsS0FBZCxFQUFxQndJLE9BQXJCLENBQTZCLFVBQVUyb0MsT0FBVixFQUFtQjtBQUM1QzM0Qyx1QkFBVVgsTUFBVixDQUFpQnU1QixHQUFqQixDQUFxQnB4QixLQUFyQixFQUE0Qm14QyxPQUE1QjtBQUNILFVBRkQ7QUFHSCxNQUpEO0FBS0g7O0FBRUQ7Ozs7Ozs7Ozs7QUFVQSxVQUFTcjRDLElBQVQsQ0FBY3E0QixNQUFkLEVBQXNCaWdCLE9BQXRCLEVBQStCO0FBQzNCLFNBQUlDLG1CQUFtQjN0QixNQUFNNHRCLE9BQU4sQ0FBY25nQixNQUFkLElBQXdCQSxNQUF4QixHQUFpQyxDQUFDQSxNQUFELENBQXhEOztBQUVBa2dCLHNCQUFpQjdvQyxPQUFqQixDQUF5QixVQUFVeEksS0FBVixFQUFpQjtBQUN0QyxhQUFJbXhDLFVBQVUsU0FBVkEsT0FBVSxHQUFZO0FBQ3RCLGlCQUFJSSxPQUFPbDVDLE9BQU9tNUMsTUFBUCxDQUFjSixRQUFReDFDLEtBQVIsQ0FBYyxJQUFkLEVBQW9CLENBQUNqRCxNQUFNc29CLElBQVAsRUFBYTRGLE1BQWIsQ0FBb0JuRCxNQUFNeGUsU0FBTixDQUFnQjRoQixLQUFoQixDQUFzQjNoQixJQUF0QixDQUEyQnpKLFNBQTNCLENBQXBCLENBQXBCLENBQWQsQ0FBWDtBQUNBL0MsbUJBQU1zb0IsSUFBTixHQUFhc3dCLElBQWI7QUFDSCxVQUhEOztBQUtBLzRDLG1CQUFVWCxNQUFWLENBQWlCbTVCLEVBQWpCLENBQW9CaHhCLEtBQXBCLEVBQTJCbXhDLE9BQTNCO0FBQ0FILGtCQUFTaHhDLEtBQVQsSUFBa0IsQ0FBQ2d4QyxTQUFTaHhDLEtBQVQsS0FBbUIsRUFBcEIsRUFBd0I2bUIsTUFBeEIsQ0FBK0JzcUIsT0FBL0IsQ0FBbEI7QUFDSCxNQVJEO0FBU0g7O0FBRUQ7Ozs7Ozs7Ozs7QUFVQXg0QyxPQUFNM0IsSUFBTixHQUFhLFNBQVNBLElBQVQsR0FBZ0I7O0FBRXpCMkIsV0FBTXNvQixJQUFOLEdBQWE1b0IsT0FBT201QyxNQUFQLENBQWNkLFdBQWQsQ0FBYjtBQUNBTyxZQUFPRCxRQUFQOztBQUVBbDRDLFVBQUsseUJBQUwsRUFBZ0MsVUFBVW1vQixJQUFWLEVBQWdCanFCLElBQWhCLEVBQXNCO0FBQ2xELGdCQUFPcUIsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0Iyb0IsSUFBbEIsRUFBd0JqcUIsS0FBSzJCLEtBQTdCLEVBQW9DO0FBQ3ZDODRDLDZCQUFnQno2QyxLQUFLMkIsS0FBTCxDQUFXeWpCLE9BQVgsR0FBcUIsV0FBckIsR0FBbUM7QUFEWixVQUFwQyxDQUFQO0FBR0gsTUFKRDs7QUFNQXRqQixVQUFLLGVBQUwsRUFBc0IsVUFBVW1vQixJQUFWLEVBQWdCZ0wsS0FBaEIsRUFBdUI7QUFDekMsZ0JBQU81ekIsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0Iyb0IsSUFBbEIsRUFBd0I7QUFDM0IwdkIsMkJBQWMxa0I7QUFEYSxVQUF4QixDQUFQO0FBR0gsTUFKRDs7QUFNQW56QixVQUFLLG9CQUFMLEVBQTJCLFVBQVVtb0IsSUFBVixFQUFnQnFLLElBQWhCLEVBQXNCblUsT0FBdEIsRUFBK0I7QUFDdEQsYUFBSThKLEtBQUsydkIsV0FBTCxDQUFpQjExQyxPQUFqQixDQUF5Qm93QixJQUF6QixLQUFrQyxDQUF0QyxFQUF5QztBQUNyQyxvQkFBT3JLLElBQVA7QUFDSDs7QUFFRCxnQkFBTzVvQixPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQjJvQixJQUFsQixFQUF3QjtBQUMzQjJ2QiwwQkFBYTN2QixLQUFLMnZCLFdBQUwsQ0FBaUIvcEIsTUFBakIsQ0FBd0J5RSxJQUF4QixDQURjO0FBRTNCdWxCLHVCQUFVMTVCLFVBQVU4SixLQUFLNHZCLFFBQUwsQ0FBY2hxQixNQUFkLENBQXFCeUUsSUFBckIsQ0FBVixHQUF1Q3JLLEtBQUs0dkI7QUFGM0IsVUFBeEIsQ0FBUDtBQUlILE1BVEQ7O0FBV0EvM0MsVUFBSyxXQUFMLEVBQWtCLFVBQVVtb0IsSUFBVixFQUFnQnFLLElBQWhCLEVBQXNCO0FBQ3BDLGdCQUFPanpCLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCMm9CLElBQWxCLEVBQXdCO0FBQzNCNnZCLHVCQUFVN3ZCLEtBQUs2dkIsUUFBTCxDQUFjanFCLE1BQWQsQ0FBcUJ5RSxJQUFyQjtBQURpQixVQUF4QixDQUFQO0FBR0gsTUFKRDs7QUFNQXh5QixVQUFLLGlCQUFMLEVBQXdCLFVBQVVtb0IsSUFBVixFQUFnQnFLLElBQWhCLEVBQXNCO0FBQzFDLGdCQUFPanpCLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCMm9CLElBQWxCLEVBQXdCO0FBQzNCOHZCLHNCQUFTOXZCLEtBQUs4dkIsT0FBTCxDQUFhbHFCLE1BQWIsQ0FBb0J5RSxJQUFwQjtBQURrQixVQUF4QixDQUFQO0FBR0gsTUFKRDtBQUtILEVBdkNEOztBQXlDQXZ5QixRQUFPQyxPQUFQLEdBQWlCTCxLQUFqQixDOzs7Ozs7OztBQy9IQUksUUFBT0MsT0FBUCxHQUFpQixTQUFTdkIsWUFBVCxDQUF1QjJELElBQXZCLEVBQTZCO0FBQzFDLFNBQUlzMkMsZUFBZW41QyxPQUFPOFIsTUFBMUI7QUFDQSxTQUFJLE9BQU85UixPQUFPOFIsTUFBZCxLQUF5QixVQUE3QixFQUF5QztBQUNyQzlSLGdCQUFPOFIsTUFBUCxHQUFnQmpQLElBQWhCO0FBQ0gsTUFGRCxNQUVPO0FBQ0g3QyxnQkFBTzhSLE1BQVAsR0FBZ0IsWUFBWTtBQUN4QixpQkFBSXFuQyxZQUFKLEVBQWtCO0FBQ2RBO0FBQ0g7QUFDRHQyQztBQUNILFVBTEQ7QUFNSDtBQUNKLEVBWkQsQzs7Ozs7Ozs7QUNBQSxLQUFJbkUsU0FBUyxtQkFBQUosQ0FBUSxHQUFSLENBQWI7QUFDQSxLQUFJdWtCLGFBQWEsbUJBQUF2a0IsQ0FBUSxHQUFSLENBQWpCO0FBQ0EsS0FBSWluQyxtQkFBbUIsbUJBQUFqbkMsQ0FBUSxHQUFSLENBQXZCOztBQUVBLEtBQUk4NkMsU0FBUyxFQUFiO0FBQ0EsS0FBSUMsdUJBQUo7O0FBRUEsS0FBSUMsZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFZO0FBQzVCLFNBQUksT0FBT0MsS0FBUCxLQUFpQixXQUFyQixFQUFrQztBQUM5QkEsZUFBTSxFQUFDQyxLQUFLLFFBQU4sRUFBZ0JDLFNBQVMsR0FBekIsRUFBOEJDLFFBQVEsV0FBdEMsRUFBTixFQUEwREMsTUFBMUQsR0FBbUVDLElBQW5FO0FBQ0E3UCx1QkFBY3NQLHVCQUFkO0FBQ0g7QUFDSixFQUxEOztBQU9BLEtBQUlRLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBWTtBQUM1QixTQUFJLE9BQU9OLEtBQVAsS0FBaUIsV0FBckIsRUFBa0M7QUFDOUJBLGVBQU0sRUFBQ0MsS0FBSyxRQUFOLEVBQWdCQyxTQUFTLEdBQXpCLEVBQThCQyxRQUFRLFdBQXRDLEVBQU4sRUFBMERDLE1BQTFELEdBQW1FQyxJQUFuRTtBQUNBN1AsdUJBQWNzUCx1QkFBZDtBQUNIO0FBQ0osRUFMRDs7QUFPQSxLQUFJcnJCLGFBQWEsU0FBYkEsVUFBYSxDQUFVbGYsR0FBVixFQUFlO0FBQzVCLFNBQUk0aEMsTUFBSixFQUFZb0osSUFBWjtBQUNBO0FBQ0FwSixjQUFTOXVDLFNBQVNpQyxhQUFULENBQXVCLFFBQXZCLENBQVQ7QUFDQTZzQyxZQUFPcHBCLEtBQVAsR0FBZSxJQUFmO0FBQ0FvcEIsWUFBTzVzQyxJQUFQLEdBQWMsaUJBQWQ7QUFDQTRzQyxZQUFPNWhDLEdBQVAsR0FBYUEsR0FBYjtBQUNBZ3JDLFlBQU9sNEMsU0FBU0Msb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0MsQ0FBdEMsQ0FBUDtBQUNBaTRDLFVBQUs3MUMsV0FBTCxDQUFpQnlzQyxNQUFqQjtBQUNILEVBVEQ7O0FBV0Fsd0MsUUFBT0MsT0FBUCxHQUFpQjtBQUNieVIsWUFBTyxpQkFBWTs7QUFFZixhQUFJeFQsT0FBT2dsQixRQUFQLENBQWdCLFdBQWhCLENBQUosRUFBa0M7O0FBRTlCO0FBQ0EsaUJBQUlobEIsT0FBT2dsQixRQUFQLENBQWdCLFlBQWhCLENBQUosRUFBbUM7QUFDL0I7QUFDQXNLLDRCQUFXLENBQUMsYUFBYXBzQixTQUFTYSxRQUFULENBQWtCbUksUUFBL0IsR0FBMEMsUUFBMUMsR0FBcUQsT0FBdEQsSUFDUCxxQ0FESjtBQUVBd3VDLHdCQUFPMXZDLElBQVAsQ0FBWSxZQUFaO0FBQ0g7O0FBRUQ7QUFDQSxpQkFBSWhMLE9BQU9nbEIsUUFBUCxDQUFnQixZQUFoQixDQUFKLEVBQW1DO0FBQy9CO0FBQ0FzSyw0QkFBVyxDQUFDLGFBQWFwc0IsU0FBU2EsUUFBVCxDQUFrQm1JLFFBQS9CLEdBQTBDLFFBQTFDLEdBQXFELE9BQXRELElBQ1AscUNBREo7QUFFQXd1Qyx3QkFBTzF2QyxJQUFQLENBQVksWUFBWjtBQUNIOztBQUVEO0FBQ0EsaUJBQUloTCxPQUFPZ2xCLFFBQVAsQ0FBZ0IsWUFBaEIsQ0FBSixFQUFtQztBQUMvQjtBQUNDLDhCQUFZO0FBQ1QseUJBQUkzVixJQUFJLElBQUk4RCxLQUFKLENBQVUsQ0FBVixFQUFhLENBQWIsQ0FBUjtBQUNBOUQsdUJBQUVnRSxPQUFGLEdBQVloRSxFQUFFK0QsTUFBRixHQUFXLFlBQVk7QUFDL0IvRCwyQkFBRWdFLE9BQUYsR0FBWWhFLEVBQUUrRCxNQUFGLEdBQVcsSUFBdkI7QUFDSCxzQkFGRDtBQUdBL0QsdUJBQUVlLEdBQUYsR0FBUSxDQUFDLENBQUMsYUFBYWxOLFNBQVNhLFFBQVQsQ0FBa0JtSSxRQUEvQixHQUEwQyxRQUExQyxHQUFxRCxPQUF0RCxJQUNULGdGQURRLEVBRUptdkMsVUFBVS81QyxPQUFPeUMsUUFBUCxDQUFnQnVCLElBQTFCLENBRkksRUFHSixVQUhJLEVBSUorMUMsVUFBVW40QyxTQUFTd04sUUFBbkIsQ0FKSSxFQUtKLDBCQUxJLEVBTUgsSUFBSS9GLElBQUosRUFBRCxDQUFhRSxPQUFiLEVBTkksRUFNb0IzRSxJQU5wQixDQU15QixFQU56QixDQUFSO0FBT0gsa0JBWkEsR0FBRDtBQWFBdzBDLHdCQUFPMXZDLElBQVAsQ0FBWSxZQUFaO0FBQ0g7O0FBRUQ7QUFDQywwQkFBWTtBQUNULHFCQUFJc3dDLEtBQUtwNEMsU0FBU2lDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBVDtBQUNBbTJDLG9CQUFHbDJDLElBQUgsR0FBVSxpQkFBVjtBQUNBazJDLG9CQUFHMXlCLEtBQUgsR0FBVyxJQUFYO0FBQ0EweUIsb0JBQUdsckMsR0FBSCxHQUFTLENBQUMsYUFBYWxOLFNBQVNhLFFBQVQsQ0FBa0JtSSxRQUEvQixHQUEwQyxnQkFBMUMsR0FBNkQsZUFBOUQsSUFBaUYsNkJBQTFGO0FBQ0EscUJBQUlzQyxJQUFJdEwsU0FBU0Msb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0MsQ0FBdEMsQ0FBUjtBQUNBcUwsbUJBQUVqSixXQUFGLENBQWMrMUMsRUFBZDtBQUNILGNBUEEsR0FBRDtBQVFBWixvQkFBTzF2QyxJQUFQLENBQVksbUJBQVo7O0FBRUE7QUFDQSxpQkFBSSxPQUFPbVosV0FBV3FRLEtBQVgsQ0FBaUIsZUFBakIsQ0FBUCxLQUE2QyxXQUFqRCxFQUE4RDtBQUMxRHFTLGtDQUFpQmlHLFFBQWpCLENBQTBCLGVBQTFCO0FBQ0E0Tix3QkFBTzF2QyxJQUFQLENBQVksVUFBWjtBQUNIO0FBQ0o7QUFDSixNQXpEWTtBQTBEYnV3QyxnQkFBVyxxQkFBWTtBQUNuQixhQUFJdjdDLE9BQU9nbEIsUUFBUCxDQUFnQixXQUFoQixDQUFKLEVBQWtDOztBQUU5QjtBQUNBLGlCQUFJaGxCLE9BQU9nbEIsUUFBUCxDQUFnQixZQUFoQixDQUFKLEVBQW1DO0FBQy9CMjFCLDJDQUEwQnJQLFlBQVlzUCxhQUFaLEVBQTJCLEdBQTNCLENBQTFCO0FBQ0FGLHdCQUFPMXZDLElBQVAsQ0FBWSxzQkFBWjtBQUNIOztBQUVEO0FBQ0EsaUJBQUloTCxPQUFPZ2xCLFFBQVAsQ0FBZ0IsWUFBaEIsQ0FBSixFQUFtQztBQUMvQjIxQiwyQ0FBMEJyUCxZQUFZNlAsYUFBWixFQUEyQixHQUEzQixDQUExQjtBQUNBVCx3QkFBTzF2QyxJQUFQLENBQVksc0JBQVo7QUFDSDtBQUVKO0FBQ0osTUExRVk7QUEyRWI7OztBQUdBd3dDLGdCQUFXLHFCQUFZO0FBQ25CLGdCQUFPZCxNQUFQO0FBQ0gsTUFoRlk7QUFpRmJsdkMsUUFBRyxhQUFZO0FBQ1hrdkMsa0JBQVMsRUFBVDtBQUNIO0FBbkZZLEVBQWpCLEM7Ozs7Ozs7O0FDM0JBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQW5CQTs7O0FBR0EsS0FBSTNtQixFQUFKOztBQWtCQSxLQUFJN3pCLFlBQVksbUJBQUFOLENBQVEsR0FBUixDQUFoQjs7QUFFQSxLQUFJYSxNQUFNO0FBQ042ekIsV0FBTSxjQUFVRCxJQUFWLEVBQWdCK0IsTUFBaEIsRUFBd0J3UyxPQUF4QixFQUFpQ21FLFVBQWpDLEVBQTZDME8sb0JBQTdDLEVBQW1FO0FBQ3JFLGFBQUlwbkIsUUFBUStCLE1BQVosRUFBb0I7QUFDaEIsb0JBQU8sdUJBQUsvQixJQUFMLEVBQVcrQixNQUFYLEVBQW1Cd1MsT0FBbkIsRUFBNEJtRSxVQUE1QixFQUF3QzBPLG9CQUF4QyxDQUFQO0FBQ0g7QUFDRCxnQkFBTyxLQUFQO0FBQ0gsTUFOSzs7QUFRTjtBQUNBQyxzQ0FUTTtBQVVONVUsZ0JBQVcsbUJBQVV6UyxJQUFWLEVBQWdCK0IsTUFBaEIsRUFBd0J3UyxPQUF4QixFQUFpQ21FLFVBQWpDLEVBQTZDO0FBQ3BELGFBQUkxWSxRQUFRK0IsTUFBWixFQUFvQjtBQUNoQixvQkFBTyw0QkFBVS9CLElBQVYsRUFBZ0IrQixNQUFoQixFQUF3QjJXLFVBQXhCLENBQVA7QUFDSDtBQUNELGdCQUFPLEtBQVA7QUFDSCxNQWZLOztBQWlCTjs7Ozs7Ozs7QUFRQS9GLG1CQUFjLHNCQUFVM1MsSUFBVixFQUFnQitCLE1BQWhCLEVBQXdCN3pCLE9BQXhCLEVBQWlDcTJCLFFBQWpDLEVBQTJDO0FBQ3JELGdCQUFPLCtCQUFhdkUsSUFBYixFQUFtQitCLE1BQW5CLEVBQTJCN3pCLE9BQTNCLEVBQW9DcTJCLFFBQXBDLENBQVA7QUFDSCxNQTNCSzs7QUE2Qk50Qyx3QkFBbUIsNkJBQVk7QUFDM0IsZ0JBQU8sb0JBQU9BLGlCQUFQLEVBQVA7QUFDSCxNQS9CSzs7QUFpQ056UCxxQkFBZ0Isd0JBQVU5ZCxLQUFWLEVBQWlCO0FBQzdCO0FBQ0EsYUFBSXMwQixLQUFLLGdEQUFUO0FBQ0EsYUFDSUEsR0FBR3IyQixJQUFILENBQVErQixNQUFNNHlDLE1BQWQsTUFBMEIsSUFBMUIsSUFDQTV5QyxNQUFNNHlDLE1BQU4sS0FBaUIsZ0NBRGpCLElBRUE1eUMsTUFBTTR5QyxNQUFOLEtBQWlCLDhCQUhyQixFQUlFO0FBQ0U7QUFDQTtBQUNIOztBQUVEO0FBQ0EsYUFBSTN4QixJQUFKO0FBQ0EsYUFBSTtBQUNBQSxvQkFBTzR4QixLQUFLeEcsS0FBTCxDQUFXcnNDLE1BQU1paEIsSUFBakIsQ0FBUDtBQUNILFVBRkQsQ0FFRSxPQUFPamIsQ0FBUCxFQUFVO0FBQ1I7QUFDQTtBQUNIOztBQUVELGFBQUksT0FBT2liLEtBQUtzSyxJQUFaLEtBQXFCLFdBQXpCLEVBQXNDO0FBQ2xDO0FBQ0EscUNBQVdFLEtBQVgsQ0FBaUJ4SyxLQUFLc0ssSUFBdEIsRUFBNEJzRixLQUE1QjtBQUNBN3dCLG1CQUFNOHlDLE1BQU4sQ0FBYUMsV0FBYixDQUF5QkYsS0FBS0csU0FBTCxDQUFlLEVBQUNDLFNBQVMsSUFBVixFQUFmLENBQXpCLEVBQTBELEdBQTFEO0FBQ0g7QUFDSixNQTNESzs7QUE2RE5DLG1CQUFjLHNCQUFVMW1DLEVBQVYsRUFBYzZnQixNQUFkLEVBQXNCO0FBQ2hDO0FBQ0EsYUFBSThsQixlQUFlOWxCLE9BQU9sd0IsSUFBUCxDQUFZLEdBQVosQ0FBbkI7QUFBQSxhQUNJNnRCLEtBQUssd0JBQVczTixVQUFYLENBQXNCN1EsRUFBdEIsQ0FEVDtBQUVBLGFBQUl3ZSxHQUFHOFUsV0FBSCxNQUFvQnR6QixFQUFwQixJQUEwQjZnQixNQUE5QixFQUFzQztBQUNsQyxpQ0FBTzhCLE1BQVAsQ0FBYyxZQUFZM2lCLEVBQVosR0FBaUIsR0FBakIsR0FBdUIybUMsWUFBdkIsR0FBc0MsVUFBcEQsRUFBZ0UsWUFBWTNtQyxFQUFaLEdBQWlCLEdBQWpCLEdBQXVCMm1DLFlBQXZGO0FBQ0EscUNBQVcxbkIsS0FBWCxDQUFpQmpmLEVBQWpCLEVBQXFCb2tCLElBQXJCO0FBQ0g7QUFDSixNQXJFSzs7QUF1RU56aEIsWUFBTyxpQkFBWTtBQUNmLGdCQUFPLG9CQUFPQSxLQUFQLEVBQVA7QUFDSCxNQXpFSzs7QUEyRU55aEIsV0FBTSxnQkFBWTtBQUNkNUYsY0FBSyx3QkFBVzBGLFlBQVgsRUFBTDtBQUNBLGFBQUksT0FBTzFGLEVBQVAsS0FBYyxXQUFsQixFQUErQjtBQUMzQkEsZ0JBQUc0RixJQUFIO0FBQ0g7QUFDSixNQWhGSzs7QUFrRk4zVSxlQUFVLGtCQUFVNEgsR0FBVixFQUFlO0FBQ3JCLGdCQUFPLG9CQUFPNUgsUUFBUCxDQUFnQjRILEdBQWhCLENBQVA7QUFDSCxNQXBGSzs7QUFzRk51dkIsb0JBQWUsdUJBQVV2dkIsR0FBVixFQUFlcGlCLEtBQWYsRUFBc0I7QUFDakMsZ0NBQVV1SSxHQUFWLENBQWM2WixHQUFkLEVBQW1CcGlCLEtBQW5CO0FBQ0gsTUF4Rks7O0FBMEZOdXpCLGdCQUFXLG1CQUFVcWUsSUFBVixFQUFnQjtBQUN2Qiw2QkFBT3JlLFNBQVAsQ0FBaUJxZSxJQUFqQjtBQUNILE1BNUZLOztBQThGTkMsZ0JBQVcsbUJBQVV0dEIsS0FBVixFQUFpQkMsSUFBakIsRUFBdUI7QUFDOUIsNkJBQU9qYyxHQUFQLENBQVdnYyxLQUFYLEVBQWtCQyxJQUFsQjtBQUNILE1BaEdLOztBQWtHTitFLFNBQUksWUFBVU0sSUFBVixFQUFnQjtBQUNoQixnQkFBTyx3QkFBV0csS0FBWCxDQUFpQkgsSUFBakIsQ0FBUDtBQUNILE1BcEdLOztBQXNHTmlvQix5QkFBb0IsNEJBQVU1USxLQUFWLEVBQWlCMzFCLEtBQWpCLEVBQXdCO0FBQ3hDLGdCQUFPLHlCQUFZMlAsYUFBWixDQUEwQmdtQixLQUExQixFQUFpQzMxQixLQUFqQyxDQUFQO0FBQ0gsTUF4R0s7O0FBMEdOOzs7OztBQUtBdWpCLGdCQUFXLG9CQUFPclAsU0FBUCxDQUFpQnBvQixJQUFqQixxQkEvR0w7O0FBaUhOOzs7O0FBSUF1a0IsaUJBQVksb0JBQVVpTyxJQUFWLEVBQWdCK0IsTUFBaEIsRUFBd0I7QUFDaEMsa0NBQVloUSxVQUFaLENBQXVCaU8sSUFBdkIsRUFBNkIrQixNQUE3QjtBQUNILE1BdkhLOztBQXlITm1tQiw0Q0F6SE07QUEwSE5DLDBDQTFITTs7QUE0SE47Ozs7O0FBS0F2bUIsZ0JBQVcsbUJBQVU1QixJQUFWLEVBQWdCM2lCLElBQWhCLEVBQXNCcTdCLFVBQXRCLEVBQWtDOztBQUV6QyxhQUFJcm5DLENBQUo7QUFBQSxhQUNJKzJDLFFBREo7QUFBQSxhQUVJQyxhQUFhLFNBRmpCO0FBQUEsYUFHSUMsaUJBQWlCLEVBSHJCO0FBQUEsYUFJSXQ0QixZQUFZQSxVQUFVcU8sTUFBVixFQUpoQjtBQUFBLGFBS0lxQixLQUFLLHdCQUFXUyxLQUFYLENBQWlCSCxJQUFqQixDQUxUO0FBQUEsYUFNSXVvQixTQUFTMTVDLFNBQVNreUIsY0FBVCxDQUF3QnNuQixhQUFhcm9CLElBQXJDLENBTmI7QUFBQSxhQU9JOFcsT0FBT2pvQyxTQUFTaUMsYUFBVCxDQUF1QixHQUF2QixDQVBYO0FBQUEsYUFRSTAzQyxTQUFTMzVDLFNBQVNpQyxhQUFULENBQXVCLFFBQXZCLENBUmI7QUFBQSxhQVNJNm5DLFNBQVNqWixHQUFHbVcsWUFBSCxFQVRiO0FBQUEsYUFVSXZELFNBQVM1UyxHQUFHZ1csU0FBSCxFQVZiOztBQVlBLGNBQUtya0MsQ0FBTCxJQUFVMmUsU0FBVixFQUFxQjtBQUNqQixpQkFBSUEsVUFBVS9ULGNBQVYsQ0FBeUI1SyxDQUF6QixDQUFKLEVBQWlDO0FBQzdCaTNDLG1DQUFrQixNQUFNajNDLENBQU4sR0FBVSxHQUFWLEdBQWdCMmUsVUFBVTNlLENBQVYsQ0FBbEM7QUFDSDtBQUNKOztBQUVEKzJDLG9CQUFXLDhCQUNQLG9CQUFPM3BDLEdBQVAsR0FBYXZNLE9BQWIsQ0FBcUIsT0FBckIsRUFBOEIsWUFBOUIsQ0FETyxHQUVQLFFBRk8sR0FFSTh0QixJQUZKLEdBR1AsTUFITyxHQUdFM2lCLElBSEYsR0FJUGlyQyxjQUpPLEdBS1AsT0FMTyxHQUtHbHhDLEtBQUtFLE1BQUwsR0FBY0UsUUFBZCxHQUF5QmdrQixLQUF6QixDQUErQixDQUEvQixFQUFrQyxFQUFsQyxDQUxILEdBTVAsU0FOTyxHQU9QLGNBUEo7O0FBU0FndEIsZ0JBQU96c0MsR0FBUCxHQUFhcXNDLFFBQWI7QUFDQUksZ0JBQU85bUMsS0FBUCxHQUFlckUsS0FBSzdMLEtBQUwsQ0FBVyxHQUFYLEVBQWdCLENBQWhCLENBQWY7QUFDQWczQyxnQkFBTy9tQyxNQUFQLEdBQWdCcEUsS0FBSzdMLEtBQUwsQ0FBVyxHQUFYLEVBQWdCLENBQWhCLENBQWhCO0FBQ0FnM0MsZ0JBQU9DLFNBQVAsR0FBbUIsSUFBbkI7QUFDQUQsZ0JBQU9yVCxLQUFQLENBQWF1VCxNQUFiLEdBQXNCLE1BQXRCO0FBQ0FGLGdCQUFPclQsS0FBUCxDQUFhZ0MsUUFBYixHQUF3QixRQUF4Qjs7QUFFQUwsY0FBSzU5QixTQUFMLEdBQWlCbzVCLE1BQWpCO0FBQ0F3RSxjQUFLN2xDLElBQUwsR0FBWTBuQyxNQUFaO0FBQ0E3QixjQUFLOWtDLFNBQUwsR0FBaUIsYUFBakI7O0FBRUF1MkMsZ0JBQU9ydkMsU0FBUCxHQUFtQixFQUFuQjtBQUNBcXZDLGdCQUFPcFQsS0FBUCxDQUFhenpCLEtBQWIsR0FBcUJyRSxLQUFLN0wsS0FBTCxDQUFXLEdBQVgsRUFBZ0IsQ0FBaEIsSUFBcUIsSUFBMUM7QUFDQSsyQyxnQkFBT3YyQyxTQUFQLEdBQW1CdTJDLE9BQU92MkMsU0FBUCxDQUFpQkUsT0FBakIsQ0FBeUIscUJBQXpCLEVBQWdELEVBQWhELENBQW5CO0FBQ0FxMkMsZ0JBQU9yM0MsV0FBUCxDQUFtQjRsQyxJQUFuQjtBQUNBeVIsZ0JBQU9yM0MsV0FBUCxDQUFtQnMzQyxNQUFuQjs7QUFFQSxpQ0FBV3JvQixLQUFYLENBQWlCSCxJQUFqQixFQUF1QjBELElBQXZCO0FBQ0gsTUFoTEs7O0FBa0xOOzs7QUFHQWlsQixpQkFBWSxzQkFBWTtBQUNwQjtBQUNILE1BdkxLOztBQXlMTkMsYUFBUSxnQkFBVXg0QixNQUFWLEVBQWtCOztBQUV0QixhQUFJRSxpQkFBaUI7QUFDYm5VLG9CQUFPaVUsT0FBT2tFLFFBREQ7QUFFYmpZLHVCQUFVK1QsT0FBTy9ULFFBQVAsSUFBbUI7QUFGaEIsVUFBckI7QUFBQSxhQUlJMUwsTUFBTXlmLE9BQU96ZixHQUFQLElBQWMsRUFKeEI7QUFBQSxhQUtJazRDLFlBQVksNEJBTGhCOztBQU9BO0FBQ0EsK0JBQVMxeEMsQ0FBVDtBQUNBLGdDQUFVQSxDQUFWOztBQUVBL0ssYUFBSTY0QixTQUFKLENBQWM3VSxNQUFkOztBQUVBLGFBQUksT0FBT0EsT0FBT2tFLFFBQWQsS0FBMkIsV0FBM0IsSUFBMEMsT0FBT2xFLE9BQU8wNEIsT0FBZCxLQUEwQixXQUF4RSxFQUFxRjtBQUNqRkQsdUJBQVVucUMsR0FBVixDQUFjMFIsT0FBT2tFLFFBQVAsR0FBa0IsR0FBbEIsR0FBd0JsRSxPQUFPMDRCLE9BQTdDO0FBQ0g7O0FBRUQsK0JBQVMzM0IsS0FBVCxDQUFlLElBQWYsRUFBcUJ4Z0IsR0FBckI7O0FBRUEsNkJBQU9qRixJQUFQLENBQVksb0JBQU95bUIsY0FBUCxFQUFaLEVBQXFDbGQsU0FBckMsRUFBZ0Qsc0JBQVNvZCxXQUFULENBQXFCLFFBQXJCLENBQWhELEVBQWdGLHNCQUFTQSxXQUFULEVBQWhGOztBQUVBLGdDQUFVM21CLElBQVYsQ0FDSSxtQkFBTStMLG9CQUFOLENBQTJCOUcsR0FBM0IsQ0FESixFQUVJMmYsY0FGSjtBQUlBLGFBQUksT0FBT0YsT0FBT29OLFNBQWQsS0FBNEIsV0FBaEMsRUFBNkM7QUFDekMsb0NBQVU5ZSxHQUFWLENBQWMsWUFBZCxFQUE0QjBSLE9BQU9vTixTQUFuQztBQUNIO0FBRUo7QUF4TkssRUFBVjs7QUEyTkEvdkIsUUFBT0MsT0FBUCxHQUFpQnRCLEdBQWpCLEM7Ozs7Ozs7Ozs7O1NDL09nQis3QyxVLEdBQUFBLFU7U0FrQkFELFcsR0FBQUEsVzs7QUFyQmhCOzs7O0FBQ0E7Ozs7OztBQUVPLFVBQVNDLFVBQVQsR0FBd0M7QUFBQSxTQUFwQlksV0FBb0IseURBQU4sSUFBTTs7O0FBRTNDLFNBQUlBLGdCQUFnQixJQUFwQixFQUEwQjtBQUN0QixnQkFBTyx5QkFBWSxFQUFaLEVBQWdCdnpCLE1BQWhCLENBQVA7QUFDSDtBQUNEdXpCLG1CQUFjQSxZQUFZaDFDLFdBQVosRUFBZDs7QUFFQSxTQUFNaTFDLGlCQUFpQixvQkFBT2QsV0FBUCxFQUF2QjtBQUNBLFNBQU0xeUIsU0FBUyxvQkFBT3l6QixTQUFQLEVBQWY7O0FBRUEsU0FBTUMsY0FDRkYsZUFBZS9zQyxjQUFmLENBQThCOHNDLFdBQTlCLENBRGdCLEdBRWhCaDhDLE9BQU9DLE1BQVAsQ0FBYyxFQUFDd0YsTUFBTXUyQyxXQUFQLEVBQWQsRUFBbUNDLGVBQWVELFdBQWYsQ0FBbkMsQ0FGZ0IsR0FFa0QsRUFBQ3YyQyxNQUFNdTJDLFdBQVAsRUFGdEU7O0FBSUEsWUFBTyx5QkFBWUcsV0FBWixFQUF5QjF6QixNQUF6QixDQUFQO0FBRUg7O0FBRU0sVUFBUzB5QixXQUFULEdBQXVCOztBQUUxQixTQUFNYyxpQkFBaUIsb0JBQU9kLFdBQVAsRUFBdkI7QUFDQSxTQUFNMXlCLFNBQVMsb0JBQU95ekIsU0FBUCxFQUFmO0FBQ0EsU0FBSTF6QixXQUFXLEVBQWY7O0FBRUEsVUFBSyxJQUFJd3pCLFdBQVQsSUFBd0JDLGNBQXhCLEVBQXdDO0FBQ3BDO0FBQ0EsYUFBSUEsZUFBZS9zQyxjQUFmLENBQThCOHNDLFdBQTlCLENBQUosRUFBZ0Q7QUFDNUN4ekIsc0JBQVN3ekIsV0FBVCxJQUF3QlosV0FBV1ksV0FBWCxDQUF4QjtBQUNIO0FBQ0o7O0FBRUQsWUFBT3h6QixRQUFQO0FBRUgsRTs7Ozs7Ozs7Ozs7Ozs7QUNwQ0Q7Ozs7S0FRcUI0ekIsTztBQUVqQix3QkFTRTtBQUFBLDBFQUZNLEVBRU47O0FBQUEsOEJBUE0zMkMsSUFPTjtBQUFBLGFBUE1BLElBT04sNkJBUGEsaUJBT2I7QUFBQSw4QkFOTTQyQyxJQU1OO0FBQUEsYUFOTUEsSUFNTiw2QkFOYSxFQU1iO0FBQUEsNEJBTE0xakIsRUFLTjtBQUFBLGFBTE1BLEVBS04sMkJBTFcsS0FLWDtBQUFBLGlDQUpNMFksT0FJTjtBQUFBLGFBSk1BLE9BSU4sZ0NBSmdCLEVBSWhCO0FBQUEsa0NBSE1wWixRQUdOO0FBQUEsYUFITUEsUUFHTixpQ0FIaUIsSUFHakI7QUFBQSxhQURFeFAsTUFDRjs7QUFBQTs7QUFFRSxjQUFLaGpCLElBQUwsR0FBWUEsSUFBWjtBQUNBLGNBQUs0MkMsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsY0FBSzFqQixFQUFMLEdBQVVBLEVBQVY7QUFDQSxjQUFLMFksT0FBTCxHQUFlQSxPQUFmO0FBQ0EsY0FBS3BaLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsY0FBS3hQLE1BQUwsR0FBY0EsTUFBZDtBQUVIOzs7O21DQUVTO0FBQ04sb0JBQU8sS0FBS2hqQixJQUFaO0FBQ0g7OztxQ0FFb0M7QUFBQSxpQkFBM0I2MkMsV0FBMkIseURBQWIsS0FBSzd6QixNQUFROztBQUNqQyxpQkFBSSxLQUFLd1AsUUFBTCxLQUFrQixJQUF0QixFQUE0QjtBQUN4Qix3QkFBTyxLQUFLQSxRQUFaO0FBQ0g7QUFDRCxvQkFBYXNrQixvQkFBTixZQUEyQkQsV0FBM0IsS0FBaURFLEtBQU4sV0FBbEQ7QUFDSDs7O3NDQUVZO0FBQ1Qsb0JBQU8sS0FBS25MLE9BQVo7QUFDSDs7O21DQUVTb0wsTSxFQUFRO0FBQ2QsaUJBQU1wTCxVQUFVLEtBQUtxTCxVQUFMLEVBQWhCO0FBQ0Esb0JBQU9yTCxRQUFRbmlDLGNBQVIsQ0FBdUJ1dEMsTUFBdkIsSUFBaUNwTCxRQUFRb0wsTUFBUixDQUFqQyxHQUFtRCxJQUExRDtBQUNIOzs7Ozs7c0JBeENnQkwsTzs7O0FBNENyQixVQUFTRyxvQkFBVCxDQUE4QkQsV0FBOUIsRUFBMkM7QUFDdkMsWUFBTyxLQUFLRCxJQUFMLENBQVUzNEIsUUFBVixDQUFtQjQ0QixXQUFuQixLQUFtQyxLQUFLRCxJQUFMLENBQVUzM0MsTUFBVixLQUFxQixDQUEvRDtBQUNIOztBQUVELFVBQVM4M0MsS0FBVCxHQUFpQjtBQUNiLFlBQU8sS0FBSzdqQixFQUFaO0FBQ0giLCJmaWxlIjoiYmJjZG90Y29tLmRldi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgNjY2MjNhMjFlMWRhOTBjY2ZmODhcbiAqKi8iLCJyZXF1aXJlKCdwb2x5ZmlsbCcpO1xuXG52YXIgYm9vdHN0cmFwID0gcmVxdWlyZSgnYm9vdHN0cmFwJyk7XG52YXIgc3RyZWFtc2Vuc2UgPSByZXF1aXJlKCdleHBvcnRzP25zXyEuLi92ZW5kb3IvY29tc2NvcmUvc3RyZWFtc2Vuc2UnKTtcbnZhciBpbml0ID0gcmVxdWlyZSgnaW5pdCcpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIGFkdmVydHMgPSByZXF1aXJlKCdhZHZlcnRzJyk7XG52YXIgYW5hbHl0aWNzID0gcmVxdWlyZSgnYW5hbHl0aWNzJyk7XG52YXIgYW5hbHl0aWNzSGVscGVyID0gcmVxdWlyZSgnYW5hbHl0aWNzL2hlbHBlcicpO1xudmFyIFV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcbnZhciBzZWN0aW9ucyA9IHJlcXVpcmUoJ3NlY3Rpb25zJyk7XG52YXIgbG9jYWxlID0gcmVxdWlyZSgnbG9jYWxlJyk7XG52YXIgY3VycmVuY3lQcm92aWRlcnMgPSByZXF1aXJlKCdjdXJyZW5jeVByb3ZpZGVycycpO1xudmFyIGFkZExvYWRFdmVudCA9IHJlcXVpcmUoJ2V2ZW50cycpO1xudmFyIGFwaSA9IHJlcXVpcmUoJ2FwaScpO1xudmFyIG9iamVjdHMgPSByZXF1aXJlKCdvYmplY3RzJyk7XG52YXIgY2xhc3NlcyA9IHJlcXVpcmUoJ2NsYXNzZXMnKTtcbnZhciBwdWJzdWIgPSByZXF1aXJlKCdwdWJzdWInKTtcbnZhciBLcnV4ID0gcmVxdWlyZSgna3J1eCcpO1xudmFyIFByZWRpY2F0ZSA9IHJlcXVpcmUoJ3ByZWRpY2F0ZScpO1xudmFyIFN0YXRzID0gcmVxdWlyZSgnc3RhdHMnKTtcbnZhciBTdXJ2ZXkgPSByZXF1aXJlKCdzdXJ2ZXknKTtcbnZhciBsb2dnZXIgPSByZXF1aXJlKCdsb2dnZXInKTtcblxudmFyIGxvZyA9IGxvZ2dlcignaW5kZXgnKTtcbmxvZy5pbmZvKCdVc2luZyBXZWJwYWNrJyk7XG5cbk9iamVjdC5hc3NpZ24oXG4gICAgd2luZG93LmJiY2RvdGNvbSxcbiAgICB7XG4gICAgICAgIG9iamVjdHM6IG9iamVjdHMsXG4gICAgICAgIGRvbUxvYWRlZDogZmFsc2UsXG4gICAgICAgIGFkZExvYWRFdmVudDogYWRkTG9hZEV2ZW50LFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgY3VycmVuY3lQcm92aWRlcnM6IGN1cnJlbmN5UHJvdmlkZXJzLFxuICAgICAgICB1dGlsczogVXRpbHMsXG4gICAgICAgIGFkdmVydHM6IGFkdmVydHMsXG4gICAgICAgIGFuYWx5dGljczogYW5hbHl0aWNzLFxuICAgICAgICBhbmFseXRpY3NIZWxwZXI6IGFuYWx5dGljc0hlbHBlcixcbiAgICAgICAgc2VjdGlvbnM6IHNlY3Rpb25zLFxuICAgICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgICAgS3J1eDogS3J1eCxcbiAgICAgICAgcHVic3ViOiBwdWJzdWIsXG4gICAgICAgIFByZWRpY2F0ZTogUHJlZGljYXRlLFxuICAgICAgICBzdGF0czogU3RhdHMsXG4gICAgICAgIHN1cnZleTogU3VydmV5LFxuICAgICAgICBMb2dnZXI6IGxvZ2dlclxuICAgIH1cbik7XG5cbmJvb3RzdHJhcCgpO1xuXG53aW5kb3cuYmJjZG90Y29tLmluaXQgPSBpbml0LmJpbmQod2luZG93LmJiY2RvdGNvbSk7XG5cbk9iamVjdC5hc3NpZ24od2luZG93LmJiY2RvdGNvbSwgYXBpKTtcblxubW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuYmJjZG90Y29tO1xud2luZG93Lm5zXyA9IHN0cmVhbXNlbnNlO1xud2luZG93Lmdvb2dsZV9hZF9yZXF1ZXN0X2RvbmUgPSB3aW5kb3cuYmJjZG90Y29tLmFkdmVydHMuYWRzZW5zZVJlbmRlcmVyLmdvb2dsZV9hZF9yZXF1ZXN0X2RvbmU7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi93ZWJwYWNrLWVudHJ5LmpzXG4gKiovIiwicmVxdWlyZSgnY29yZS1qcy9lczUnKTtcbnJlcXVpcmUoJ2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCdjb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJ2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCdjb3JlLWpzL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnY29yZS1qcy9lczYvc3ltYm9sJyk7XG5yZXF1aXJlKCdjb3JlLWpzL2ZuL3N5bWJvbC9pdGVyYXRvcicpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL3BvbHlmaWxsLmpzXG4gKiovIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9lczUvaW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2NyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpfSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZSAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSlcbiAgICAsIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZih0YXJnZXQpcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYoZXhwb3J0c1trZXldICE9IG91dCloaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZihJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dClleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanNcbiAqKiBtb2R1bGUgaWQgPSA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanNcbiAqKiBtb2R1bGUgaWQgPSA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanNcbiAqKiBtb2R1bGUgaWQgPSA4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanNcbiAqKiBtb2R1bGUgaWQgPSAxMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzXG4gKiogbW9kdWxlIGlkID0gMTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19mYWlscy5qc1xuICoqIG1vZHVsZSBpZCA9IDEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpe1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlICAgICAgIDogdmFsdWVcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanNcbiAqKiBtb2R1bGUgaWQgPSAxNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBTUkMgICAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJylcbiAgLCBUT19TVFJJTkcgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXVxuICAsIFRQTCAgICAgICA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihPLCBrZXksIHZhbCwgc2FmZSl7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZihpc0Z1bmN0aW9uKWhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYoT1trZXldID09PSB2YWwpcmV0dXJuO1xuICBpZihpc0Z1bmN0aW9uKWhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZihPID09PSBnbG9iYWwpe1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBpZighc2FmZSl7XG4gICAgICBkZWxldGUgT1trZXldO1xuICAgICAgaGlkZShPLCBrZXksIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKE9ba2V5XSlPW2tleV0gPSB2YWw7XG4gICAgICBlbHNlIGhpZGUoTywga2V5LCB2YWwpO1xuICAgIH1cbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzXG4gKiogbW9kdWxlIGlkID0gMTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19oYXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGlkID0gMFxuICAsIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3VpZC5qc1xuICoqIG1vZHVsZSBpZCA9IDE5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19jdHguanNcbiAqKiBtb2R1bGUgaWQgPSAyMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAyMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGRQcyAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfVxuICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJylcbiAgICAsIGkgICAgICA9IGVudW1CdWdLZXlzLmxlbmd0aFxuICAgICwgbHQgICAgID0gJzwnXG4gICAgLCBndCAgICAgPSAnPidcbiAgICAsIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7XG4gIHZhciByZXN1bHQ7XG4gIGlmKE8gIT09IG51bGwpe1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGRQICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBQO1xuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qc1xuICoqIG1vZHVsZSBpZCA9IDIzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSAyNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGhhcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9JT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSlcbiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwgaSAgICAgID0gMFxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1xuICoqIG1vZHVsZSBpZCA9IDI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMjZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2NvZi5qc1xuICoqIG1vZHVsZSBpZCA9IDI4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanNcbiAqKiBtb2R1bGUgaWQgPSAyOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIHRvSW5kZXggICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KCR0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcbiAgICAgICwgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIGlmKHZhbHVlICE9IHZhbHVlKXJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXtcbiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDMwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzXG4gKiogbW9kdWxlIGlkID0gMzFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgID0gTWF0aC5jZWlsXG4gICwgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuICoqIG1vZHVsZSBpZCA9IDMyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWF4ICAgICAgID0gTWF0aC5tYXhcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDMzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qc1xuICoqIG1vZHVsZSBpZCA9IDM0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanNcbiAqKiBtb2R1bGUgaWQgPSAzNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSAzNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanNcbiAqKiBtb2R1bGUgaWQgPSAzN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mfSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanNcbiAqKiBtb2R1bGUgaWQgPSAzOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpfSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qc1xuICoqIG1vZHVsZSBpZCA9IDM5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA0MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHBJRSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgZ09QRCAgICAgICAgICAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKXtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIGlmKGhhcyhPLCBQKSlyZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qc1xuICoqIG1vZHVsZSBpZCA9IDQxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7XG4gIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzXG4gKiogbW9kdWxlIGlkID0gNDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KXtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanNcbiAqKiBtb2R1bGUgaWQgPSA0NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSA0NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qc1xuICoqIG1vZHVsZSBpZCA9IDQ2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgJGtleXMgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanNcbiAqKiBtb2R1bGUgaWQgPSA0N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzXG4gKiogbW9kdWxlIGlkID0gNDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBnT1BOICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCB0b1N0cmluZyAgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uKGl0KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzXG4gKiogbW9kdWxlIGlkID0gNDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzXG4gKiogbW9kdWxlIGlkID0gNTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24oJGZyZWV6ZSl7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpe1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDUxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgTUVUQSAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpXG4gICwgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGhhcyAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBzZXREZXNjICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBpZCAgICAgICA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbihpdCl7XG4gIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH19KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpe1xuICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6ICAgICAgTUVUQSxcbiAgTkVFRDogICAgIGZhbHNlLFxuICBmYXN0S2V5OiAgZmFzdEtleSxcbiAgZ2V0V2VhazogIGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qc1xuICoqIG1vZHVsZSBpZCA9IDUyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uKCRzZWFsKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpe1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qc1xuICoqIG1vZHVsZSBpZCA9IDUzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIG1ldGEgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24oJHByZXZlbnRFeHRlbnNpb25zKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KXtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzXG4gKiogbW9kdWxlIGlkID0gNTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24oJGlzRnJvemVuKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzXG4gKiogbW9kdWxlIGlkID0gNTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24oJGlzU2VhbGVkKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzXG4gKiogbW9kdWxlIGlkID0gNTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbigkaXNFeHRlbnNpYmxlKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDU3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywge2JpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKX0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzXG4gKiogbW9kdWxlIGlkID0gNThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlXG4gICwgZmFjdG9yaWVzICA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24oRiwgbGVuLCBhcmdzKXtcbiAgaWYoIShsZW4gaW4gZmFjdG9yaWVzKSl7XG4gICAgZm9yKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qLCBhcmdzLi4uICovKXtcbiAgdmFyIGZuICAgICAgID0gYUZ1bmN0aW9uKHRoaXMpXG4gICAgLCBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbigvKiBhcmdzLi4uICovKXtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYoaXNPYmplY3QoZm4ucHJvdG90eXBlKSlib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanNcbiAqKiBtb2R1bGUgaWQgPSA1OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGF0KXtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2goYXJncy5sZW5ndGgpe1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanNcbiAqKiBtb2R1bGUgaWQgPSA2MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7aXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKX0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qc1xuICoqIG1vZHVsZSBpZCA9IDYxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qc1xuICoqIG1vZHVsZSBpZCA9IDYyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qc1xuICoqIG1vZHVsZSBpZCA9IDYzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1ldGhvZCwgYXJnKXtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24oKXt9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanNcbiAqKiBtb2R1bGUgaWQgPSA2NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGh0bWwgICAgICAgPSByZXF1aXJlKCcuL19odG1sJylcbiAgLCBjb2YgICAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCB0b0luZGV4ICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIGlmKGh0bWwpYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpe1xuICAgIHZhciBsZW4gICA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKVxuICAgICAgLCBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZihrbGFzcyA9PSAnQXJyYXknKXJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ICA9IHRvSW5kZXgoYmVnaW4sIGxlbilcbiAgICAgICwgdXBUbyAgID0gdG9JbmRleChlbmQsIGxlbilcbiAgICAgICwgc2l6ZSAgID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KVxuICAgICAgLCBjbG9uZWQgPSBBcnJheShzaXplKVxuICAgICAgLCBpICAgICAgPSAwO1xuICAgIGZvcig7IGkgPCBzaXplOyBpKyspY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzXG4gKiogbW9kdWxlIGlkID0gNjVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgZmFpbHMgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsICRzb3J0ICAgICA9IFtdLnNvcnRcbiAgLCB0ZXN0ICAgICAgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qc1xuICoqIG1vZHVsZSBpZCA9IDY2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApXG4gICwgU1RSSUNUICAgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qc1xuICoqIG1vZHVsZSBpZCA9IDY3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBhc2MgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRZUEUsICRjcmVhdGUpe1xuICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMVxuICAgICwgSVNfRklMVEVSICAgICA9IFRZUEUgPT0gMlxuICAgICwgSVNfU09NRSAgICAgICA9IFRZUEUgPT0gM1xuICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNFxuICAgICwgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNlxuICAgICwgTk9fSE9MRVMgICAgICA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYXG4gICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCl7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KCR0aGlzKVxuICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgICAsIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gMFxuICAgICAgLCByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkXG4gICAgICAsIHZhbCwgcmVzO1xuICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZihUWVBFKXtcbiAgICAgICAgaWYoSVNfTUFQKXJlc3VsdFtpbmRleF0gPSByZXM7ICAgICAgICAgICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYocmVzKXN3aXRjaChUWVBFKXtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmKElTX0VWRVJZKXJldHVybiBmYWxzZTsgICAgICAgICAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanNcbiAqKiBtb2R1bGUgaWQgPSA2OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCwgbGVuZ3RoKXtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gNjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaXNBcnJheSAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpXG4gICwgU1BFQ0lFUyAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsKXtcbiAgdmFyIEM7XG4gIGlmKGlzQXJyYXkob3JpZ2luYWwpKXtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZih0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpQyA9IHVuZGVmaW5lZDtcbiAgICBpZihpc09iamVjdChDKSl7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmKEMgPT09IG51bGwpQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA3MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHN0b3JlICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJylcbiAgLCB1aWQgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sXG4gICwgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3drcy5qc1xuICoqIG1vZHVsZSBpZCA9IDcxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJG1hcCAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanNcbiAqKiBtb2R1bGUgaWQgPSA3MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA3M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRzb21lICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzXG4gKiogbW9kdWxlIGlkID0gNzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZXZlcnkgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzXG4gKiogbW9kdWxlIGlkID0gNzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanNcbiAqKiBtb2R1bGUgaWQgPSA3NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSU9iamVjdCAgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCl7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoYXQpXG4gICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIGluZGV4ICA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMFxuICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYoYUxlbiA8IDIpZm9yKDs7KXtcbiAgICBpZihpbmRleCBpbiBzZWxmKXtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZihpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KXtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gc2VsZil7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qc1xuICoqIG1vZHVsZSBpZCA9IDc3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qc1xuICoqIG1vZHVsZSBpZCA9IDc4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGluZGV4T2YgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgJG5hdGl2ZSAgICAgICA9IFtdLmluZGV4T2ZcbiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzXG4gKiogbW9kdWxlIGlkID0gNzlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0lPYmplY3QgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9JbnRlZ2VyICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIHRvTGVuZ3RoICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsICRuYXRpdmUgICAgICAgPSBbXS5sYXN0SW5kZXhPZlxuICAsIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gQFsqLTFdICovKXtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYoTkVHQVRJVkVfWkVSTylyZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCh0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gbGVuZ3RoIC0gMTtcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoID4gMSlpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYoaW5kZXggPCAwKWluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yKDtpbmRleCA+PSAwOyBpbmRleC0tKWlmKGluZGV4IGluIE8paWYoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qc1xuICoqIG1vZHVsZSBpZCA9IDgwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0ludGVnZXIgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpXG4gICwgcmVwZWF0ICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG4gICwgJHRvRml4ZWQgICAgID0gMS4udG9GaXhlZFxuICAsIGZsb29yICAgICAgICA9IE1hdGguZmxvb3JcbiAgLCBkYXRhICAgICAgICAgPSBbMCwgMCwgMCwgMCwgMCwgMF1cbiAgLCBFUlJPUiAgICAgICAgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISdcbiAgLCBaRVJPICAgICAgICAgPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uKG4sIGMpe1xuICB2YXIgaSAgPSAtMVxuICAgICwgYzIgPSBjO1xuICB3aGlsZSgrK2kgPCA2KXtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24obil7XG4gIHZhciBpID0gNlxuICAgICwgYyA9IDA7XG4gIHdoaWxlKC0taSA+PSAwKXtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBpID0gNlxuICAgICwgcyA9ICcnO1xuICB3aGlsZSgtLWkgPj0gMCl7XG4gICAgaWYocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKXtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uKHgsIG4sIGFjYyl7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24oeCl7XG4gIHZhciBuICA9IDBcbiAgICAsIHgyID0geDtcbiAgd2hpbGUoeDIgPj0gNDA5Nil7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlKHgyID49IDIpe1xuICAgIG4gICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4udG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKXtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUilcbiAgICAgICwgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cylcbiAgICAgICwgcyA9ICcnXG4gICAgICAsIG0gPSBaRVJPXG4gICAgICAsIGUsIHosIGosIGs7XG4gICAgaWYoZiA8IDAgfHwgZiA+IDIwKXRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIGlmKHggIT0geClyZXR1cm4gJ05hTic7XG4gICAgaWYoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZih4IDwgMCl7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZih4ID4gMWUtMjEpe1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZihlID4gMCl7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUoaiA+PSA3KXtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZShqID49IDIzKXtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGYgPiAwKXtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzXG4gKiogbW9kdWxlIGlkID0gODFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIG1zZyl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKXRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanNcbiAqKiBtb2R1bGUgaWQgPSA4MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpe1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpXG4gICAgLCByZXMgPSAnJ1xuICAgICwgbiAgID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYobiA8IDAgfHwgbiA9PSBJbmZpbml0eSl0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvcig7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKWlmKG4gJiAxKXJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzXG4gKiogbW9kdWxlIGlkID0gODNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmYWlscyAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpXG4gICwgJHRvUHJlY2lzaW9uID0gMS4udG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbigpe1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbil7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pOyBcbiAgfVxufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanNcbiAqKiBtb2R1bGUgaWQgPSA4NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7bm93OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH19KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanNcbiAqKiBtb2R1bGUgaWQgPSA4NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xuXG52YXIgbHogPSBmdW5jdGlvbihudW0pe1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG5ldyBEYXRlKC01ZTEzIC0gMSkudG9JU09TdHJpbmcoKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICBuZXcgRGF0ZShOYU4pLnRvSVNPU3RyaW5nKCk7XG59KSksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogZnVuY3Rpb24gdG9JU09TdHJpbmcoKXtcbiAgICBpZighaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSl0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgICB2YXIgZCA9IHRoaXNcbiAgICAgICwgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKVxuICAgICAgLCBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKVxuICAgICAgLCBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICAgIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG4gIH1cbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanNcbiAqKiBtb2R1bGUgaWQgPSA4NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHt0b0lTT1N0cmluZzogZnVuY3Rpb24oKXsgcmV0dXJuIDE7IH19KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KXtcbiAgICB2YXIgTyAgPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanNcbiAqKiBtb2R1bGUgaWQgPSA4N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHtwYXJzZUludDogJHBhcnNlSW50fSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qc1xuICoqIG1vZHVsZSBpZCA9IDg4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnRcbiAgLCAkdHJpbSAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW1cbiAgLCB3cyAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKVxuICAsIGhleCAgICAgICA9IC9eW1xcLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpe1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qc1xuICoqIG1vZHVsZSBpZCA9IDg5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgc3BhY2VzICA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpXG4gICwgc3BhY2UgICA9ICdbJyArIHNwYWNlcyArICddJ1xuICAsIG5vbiAgICAgPSAnXFx1MjAwYlxcdTAwODUnXG4gICwgbHRyaW0gICA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKVxuICAsIHJ0cmltICAgPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbihLRVksIGV4ZWMsIEFMSUFTKXtcbiAgdmFyIGV4cCAgID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmKEFMSUFTKWV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbihzdHJpbmcsIFRZUEUpe1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYoVFlQRSAmIDEpc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYoVFlQRSAmIDIpc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzXG4gKiogbW9kdWxlIGlkID0gOTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzXG4gKiogbW9kdWxlIGlkID0gOTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qc1xuICoqIG1vZHVsZSBpZCA9IDkyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0XG4gICwgJHRyaW0gICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKXtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKVxuICAgICwgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qc1xuICoqIG1vZHVsZSBpZCA9IDkzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbigkdHJpbSl7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzXG4gKiogbW9kdWxlIGlkID0gOTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkZmxhZ3MgICAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBUT19TVFJJTkcgICA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgICA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24oZm4pe1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoe3NvdXJjZTogJ2EnLCBmbGFnczogJ2InfSkgIT0gJy9hL2InOyB9KSl7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORyl7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanNcbiAqKiBtb2R1bGUgaWQgPSA5NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJylyZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanNcbiAqKiBtb2R1bGUgaWQgPSA5NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICB2YXIgdGhhdCAgID0gYW5PYmplY3QodGhpcylcbiAgICAsIHJlc3VsdCA9ICcnO1xuICBpZih0aGF0Lmdsb2JhbCkgICAgIHJlc3VsdCArPSAnZyc7XG4gIGlmKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYodGhhdC5tdWx0aWxpbmUpICByZXN1bHQgKz0gJ20nO1xuICBpZih0aGF0LnVuaWNvZGUpICAgIHJlc3VsdCArPSAndSc7XG4gIGlmKHRoYXQuc3RpY2t5KSAgICAgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzXG4gKiogbW9kdWxlIGlkID0gOTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHthc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKX0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzXG4gKiogbW9kdWxlIGlkID0gOThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgdmFyIEEgPSB7fVxuICAgICwgQiA9IHt9XG4gICAgLCBTID0gU3ltYm9sKClcbiAgICAsIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpXG4gICAgLCBhTGVuICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ID0gMVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZlxuICAgICwgaXNFbnVtICAgICA9IHBJRS5mO1xuICB3aGlsZShhTGVuID4gaW5kZXgpe1xuICAgIHZhciBTICAgICAgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSlcbiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBqICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanNcbiAqKiBtb2R1bGUgaWQgPSA5OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY29udGV4dCAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKVxuICAsIEVORFNfV0lUSCA9ICdlbmRzV2l0aCdcbiAgLCAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyosIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLyl7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKVxuICAgICAgLCBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKVxuICAgICAgLCBlbmQgICAgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pXG4gICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qc1xuICoqIG1vZHVsZSBpZCA9IDEwMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKXtcbiAgaWYoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSl0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzXG4gKiogbW9kdWxlIGlkID0gMTAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgY29mICAgICAgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIE1BVENIICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2goZSl7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoKGYpeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvbnRleHQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKVxuICAsIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyosIHBvc2l0aW9uID0gMCAqLyl7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzXG4gKiogbW9kdWxlIGlkID0gMTA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ01hcCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KXtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBjcmVhdGUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBjdHggICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCBmb3JPZiAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpXG4gICwgc3RlcCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKVxuICAsIHNldFNwZWNpZXMgID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIGZhc3RLZXkgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXlcbiAgLCBTSVpFICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24odGhhdCwga2V5KXtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KSwgZW50cnk7XG4gIGlmKGluZGV4ICE9PSAnRicpcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgaWYoZW50cnkuayA9PSBrZXkpcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpe1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCl7XG4gICAgICAgIGZvcih2YXIgdGhhdCA9IHRoaXMsIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmKGVudHJ5LnApZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAgICwgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZihlbnRyeSl7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uXG4gICAgICAgICAgICAsIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmKHByZXYpcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZihuZXh0KW5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYodGhhdC5fZiA9PSBlbnRyeSl0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZih0aGF0Ll9sID09IGVudHJ5KXRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGlzLCBDLCAnZm9yRWFjaCcpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMylcbiAgICAgICAgICAsIGVudHJ5O1xuICAgICAgICB3aGlsZShlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2Ype1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYoREVTQ1JJUFRPUlMpZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gZGVmaW5lZCh0aGlzW1NJWkVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbih0aGF0LCBrZXksIHZhbHVlKXtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpXG4gICAgICAsIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmKGVudHJ5KXtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmKCF0aGF0Ll9mKXRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmKHByZXYpcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmKGluZGV4ICE9PSAnRicpdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24oQywgTkFNRSwgSVNfTUFQKXtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuICAgICAgdGhpcy5fdCA9IGl0ZXJhdGVkOyAgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICwga2luZCAgPSB0aGF0Ll9rXG4gICAgICAgICwgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZighdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKXtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycgLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjLCBzYWZlKXtcbiAgZm9yKHZhciBrZXkgaW4gc3JjKXJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzXG4gKiogbW9kdWxlIGlkID0gMTA5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ2V0SXRlckZuICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICwgQlJFQUsgICAgICAgPSB7fVxuICAsIFJFVFVSTiAgICAgID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSlcbiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICwgaW5kZXggID0gMFxuICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApe1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzXG4gKiogbW9kdWxlIGlkID0gMTEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaChlKXtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmKHJldCAhPT0gdW5kZWZpbmVkKWFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzXG4gKiogbW9kdWxlIGlkID0gMTExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgSVRFUkFUT1IgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzXG4gKiogbW9kdWxlIGlkID0gMTEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qc1xuICoqIG1vZHVsZSBpZCA9IDExNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXG4gIC8vIEVTMyB3cm9uZyBoZXJlXG4gICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qc1xuICoqIG1vZHVsZSBpZCA9IDExNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIEl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCAkaXRlckNyZWF0ZSAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gICwgRkZfSVRFUkFUT1IgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKXtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XG4gICAgaWYoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHICAgICAgICA9IE5BTUUgKyAnIEl0ZXJhdG9yJ1xuICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG4gICAgLCBWQUxVRVNfQlVHID0gZmFsc2VcbiAgICAsIHByb3RvICAgICAgPSBCYXNlLnByb3RvdHlwZVxuICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXG4gICAgLCAkZW50cmllcyAgID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZFxuICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmVcbiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYoJGFueU5hdGl2ZSl7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcbiAgICBpZihJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSl7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qc1xuICoqIG1vZHVsZSBpZCA9IDExNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qc1xuICoqIG1vZHVsZSBpZCA9IDExN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZGVzY3JpcHRvciAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gMTE4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzXG4gKiogbW9kdWxlIGlkID0gMTE5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgJGV4cG9ydCAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIHJlZGVmaW5lQWxsICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBtZXRhICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKVxuICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBhbkluc3RhbmNlICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgJGl0ZXJEZXRlY3QgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgICAgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspe1xuICB2YXIgQmFzZSAgPSBnbG9iYWxbTkFNRV1cbiAgICAsIEMgICAgID0gQmFzZVxuICAgICwgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnXG4gICAgLCBwcm90byA9IEMgJiYgQy5wcm90b3R5cGVcbiAgICAsIE8gICAgID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbihLRVkpe1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uKGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpe1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgICAgICAgICAgICAgPSBuZXcgQ1xuICAgICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgICAgLCBIQVNOVF9DSEFJTklORyAgICAgICA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2VcbiAgICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgICAgLCBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uKCl7IGluc3RhbmNlLmhhcygxKTsgfSlcbiAgICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICAgICwgQUNDRVBUX0lURVJBQkxFUyAgICAgPSAkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXsgbmV3IEMoaXRlcik7IH0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICAgICwgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKVxuICAgICAgICAgICwgaW5kZXggICAgID0gNTtcbiAgICAgICAgd2hpbGUoaW5kZXgtLSkkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgICB9KTtcbiAgICBpZighQUNDRVBUX0lURVJBQkxFUyl7IFxuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGFyZ2V0LCBpdGVyYWJsZSl7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pe1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORylmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYoSVNfV0VBSyAmJiBwcm90by5jbGVhcilkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYoIUlTX1dFQUspY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDEyMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3Npbmcpe1xuICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIHRhcmdldCwgQyl7XG4gIHZhciBQLCBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICBpZihTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKXtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXtcbiAgYW5PYmplY3QoTyk7XG4gIGlmKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCl7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pe1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4gKiogbW9kdWxlIGlkID0gMTI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzXG4gKiogbW9kdWxlIGlkID0gMTI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKVxuICAsIEFycmF5UHJvdG8gID0gQXJyYXkucHJvdG90eXBlO1xuaWYoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKXJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDEyN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL2VzNi9zeW1ib2wuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBNRVRBICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVlcbiAgLCAkZmFpbHMgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzaGFyZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgdWlkICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIHdrcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKVxuICAsIHdrc0RlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpXG4gICwga2V5T2YgICAgICAgICAgPSByZXF1aXJlKCcuL19rZXlvZicpXG4gICwgZW51bUtleXMgICAgICAgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKVxuICAsIGlzQXJyYXkgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIF9jcmVhdGUgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZ09QTkV4dCAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKVxuICAsICRHT1BEICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICREUCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCAka2V5cyAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BEICAgICAgICAgICA9ICRHT1BELmZcbiAgLCBkUCAgICAgICAgICAgICA9ICREUC5mXG4gICwgZ09QTiAgICAgICAgICAgPSBnT1BORXh0LmZcbiAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2xcbiAgLCAkSlNPTiAgICAgICAgICA9IGdsb2JhbC5KU09OXG4gICwgX3N0cmluZ2lmeSAgICAgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnlcbiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG4gICwgSElEREVOICAgICAgICAgPSB3a3MoJ19oaWRkZW4nKVxuICAsIFRPX1BSSU1JVElWRSAgID0gd2tzKCd0b1ByaW1pdGl2ZScpXG4gICwgaXNFbnVtICAgICAgICAgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZVxuICAsIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKVxuICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJylcbiAgLCBPUFN5bWJvbHMgICAgICA9IHNoYXJlZCgnb3Atc3ltYm9scycpXG4gICwgT2JqZWN0UHJvdG8gICAgPSBPYmplY3RbUFJPVE9UWVBFXVxuICAsIFVTRV9OQVRJVkUgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJ1xuICAsIFFPYmplY3QgICAgICAgID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBkUCh0aGlzLCAnYScsIHt2YWx1ZTogN30pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZihwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKWRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24odGFnKXtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90bykkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZihoYXMoQWxsU3ltYm9scywga2V5KSl7XG4gICAgaWYoIUQuZW51bWVyYWJsZSl7XG4gICAgICBpZighaGFzKGl0LCBISURERU4pKWRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7ZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSl9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpXG4gICAgLCBpICAgID0gMFxuICAgICwgbCA9IGtleXMubGVuZ3RoXG4gICAgLCBrZXk7XG4gIHdoaWxlKGwgPiBpKSRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApe1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSl7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICBpdCAgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgdmFyIG5hbWVzICA9IGdPUE4odG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSlyZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpe1xuICB2YXIgSVNfT1AgID0gaXQgPT09IE9iamVjdFByb3RvXG4gICAgLCBuYW1lcyAgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmKCFVU0VfTkFUSVZFKXtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpe1xuICAgIGlmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8pJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmKERFU0NSSVBUT1JTICYmIHNldHRlcilzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mICAgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiAgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSl7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uKG5hbWUpe1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH1cbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1N5bWJvbDogJFN5bWJvbH0pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrcyhzeW1ib2xzW2krK10pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzRGVmaW5lKHN5bWJvbHNbaSsrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24oa2V5KXtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7XG4gICAgaWYoaXNTeW1ib2woa2V5KSlyZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7XG4gICAgdGhyb3cgVHlwZUVycm9yKGtleSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uKCl7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24oKXsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoe2E6IFN9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpe1xuICAgIGlmKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKXJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XVxuICAgICAgLCBpICAgID0gMVxuICAgICAgLCByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmKHR5cGVvZiByZXBsYWNlciA9PSAnZnVuY3Rpb24nKSRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYoIWlzU3ltYm9sKHZhbHVlKSlyZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzXG4gKiogbW9kdWxlIGlkID0gMTMwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKVxuICAsIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwge3ZhbHVlOiB3a3NFeHQuZihuYW1lKX0pO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEzMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGdldEtleXMgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGtleXMgICA9IGdldEtleXMoTylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19rZXlvZi5qc1xuICoqIG1vZHVsZSBpZCA9IDEzMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgcmVzdWx0ICAgICA9IGdldEtleXMoaXQpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZihnZXRTeW1ib2xzKXtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpXG4gICAgICAsIGlzRW51bSAgPSBwSUUuZlxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoc3ltYm9scy5sZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qc1xuICoqIG1vZHVsZSBpZCA9IDEzM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIHRlc3QgICAgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJyl7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzXG4gKiogbW9kdWxlIGlkID0gMTM0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzXG4gKiogbW9kdWxlIGlkID0gMTM1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwgaW5kZXggPSB0aGlzLl9pXG4gICAgLCBwb2ludDtcbiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSAxMzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanNcbiAqKiBtb2R1bGUgaWQgPSAxMzdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciAkaXRlcmF0b3JzICAgID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKVxuICAsIHJlZGVmaW5lICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIHdrcyAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAsIElURVJBVE9SICAgICAgPSB3a3MoJ2l0ZXJhdG9yJylcbiAgLCBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpXG4gICwgQXJyYXlWYWx1ZXMgICA9IEl0ZXJhdG9ycy5BcnJheTtcblxuZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG4gIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cbiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV1cbiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlXG4gICAgLCBrZXk7XG4gIGlmKHByb3RvKXtcbiAgICBpZighcHJvdG9bSVRFUkFUT1JdKWhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYoIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGZvcihrZXkgaW4gJGl0ZXJhdG9ycylpZighcHJvdG9ba2V5XSlyZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEzOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKVxuICAsIHN0ZXAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKVxuICAsIEl0ZXJhdG9ycyAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIHRvSU9iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGtpbmQgID0gdGhpcy5fa1xuICAgICwgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKXtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSAxMzlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBVdGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG5cbnZhciBCb290c3RyYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgVXRpbHMuYWRkSHRtbFRhZ0NsYXNzKCdiYmNkb3Rjb20nKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQm9vdHN0cmFwO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2Jvb3RzdHJhcC5qc1xuICoqLyIsIi8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cbi8qXG4gKiBBTFdBWVMgUkVRVUlSRUQgSU5URVJOQVRJT05BTCBmb3IgYW5hbHl0aWNzLmpzLCBpcnJlc3BlY3RpdmUgb2YgYWRzIGJlaW5nIGVuYWJsZWRcbiAqL1xuXG5cbnZhciBsb2cgPSByZXF1aXJlKCdsb2dnZXInKSgndXRpbHMnKTtcblxudmFyIHRyYWNrQ29va2llID0gW107ICAvLyBoYWNrIHRvIG1ha2UgdW5pdCB0ZXN0aW5nIGVhc2llciBhcyBubyBlYXN5IHdheSB0byBESSBpbiBvdGhlciBvYmplY3RzIHlldCA6KFxuXG5cbi8qKlxuICogU3RhbmRhcmQgbWV0aG9kcyB0byBjaGVjayB0aGUgY2xhc3NlcyBvbiBhbiBlbGVtZW50XG4gKiBAcGFyYW0gRE9NRWxlbWVudCBlbGVtZW50XG4gKiBAcGFyYW0gc3RyaW5nIGNsYXNzTmFtZVxuICogQHJldHVybiBib29sO1xuICovXG52YXIgaGFzQXRycmlidXRlID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlS2V5LCBhdHRyaWJ1dGVWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgZWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWxlbWVudCAhPT0gJycgJiYgZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgYXR0cmlidXRlVmFsdWUgKyAnKFxcXFxzfCQpJyk7XG4gICAgICAgIHJldHVybiBlbGVtZW50W2F0dHJpYnV0ZUtleV0ubWF0Y2gocmVnZXgpO1xuICAgIH1cbn07XG5cbnZhciBoYXNUYWdJZCA9IGZ1bmN0aW9uKHRhZ05hbWUsIGlkTmFtZSkge1xuICAgIHZhciBhdHRyaWJ1dGVNYXRjaCxcbiAgICAgICAgdGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSlbMF07XG4gICAgaWYgKHR5cGVvZiB0YWcgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHRhZyAhPT0gJycgJiZcbiAgICAgICAgdGFnICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBpZE5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGF0dHJpYnV0ZU1hdGNoID0gaGFzQXRycmlidXRlKHRhZywgJ2lkJywgaWROYW1lKTtcbiAgICAgICAgcmV0dXJuIChhdHRyaWJ1dGVNYXRjaCAhPT0gbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBET00gbm9kZSwgc2VhcmNoIHVwIHRoZSB0cmVlIGFuZCBmaW5kIHRoZSBuZWFyZXN0IGFuY2VzdG9yXG4gKiBub2RlIHdoaWNoIHBhc3NlcyB0aGUgbWF0Y2hlciBmdW5jdGlvbi4gVGhlIG1hdGNoZXIgZnVuY3Rpb24gc2hvdWxkXG4gKiByZXR1cm4gemVybywgYSBuZWdhdGl2ZSB2YWx1ZSBvciBhIHBvc2l0aXZlIHZhbHVlLlxuICogIC0gemVybzogbWF0Y2ggZmFpbGVkLCBrZWVwIHNlYXJjaGluZ1xuICogIC0gbmVnYXRpdmU6IG1hdGNoIGZhaWxlZCwgc3RvcCBzZWFyY2hpbmdcbiAqICAtIHBvc2l0aXZlOiBtYXRjaCBzdWNjZWVkZWQsIHJldHVybiBjdXJyZW50IG5vZGVcbiAqXG4gKiBAcGFyYW0gbm9kZSBUaGUgc3RhcnRpbmcgRE9NIG5vZGVcbiAqIEBwYXJhbSBtYXRjaGVyIFRoZSBtYXRjaGVyIGZ1bmN0aW9uLCBzZWUgYWJvdmUgZm9yIHJldHVybiB2YWx1ZXNcbiAqIEBwYXJhbSBbaW5jbHVkZVNlbGZdIFdoZXRoZXIgb3Igbm90IHRvIGluY2x1ZGUgY3VycmVudCBub2RlIGluIHNlYXJjaFxuICogQHBhcmFtIFtsaW1pdF0gVGhlIHNlYXJjaCBsaW1pdCAoZGVmYXVsdHMgdG8gMTApXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xudmFyIHNlYXJjaFRyZWVVcHdhcmRzID0gZnVuY3Rpb24gKG5vZGUsIG1hdGNoZXIsIGluY2x1ZGVTZWxmLCBsaW1pdCkge1xuICAgIHZhciBjdXJyZW50LFxuICAgICAgICByZXN1bHQgPSBmYWxzZSxcbiAgICAgICAgaXRlcmF0aW9uID0gMDtcblxuICAgIGlmICghbm9kZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGltaXQgPSB0eXBlb2YgbGltaXQgPT09ICdudW1iZXInID8gbGltaXQgOiAxMDtcbiAgICBpbmNsdWRlU2VsZiA9IGluY2x1ZGVTZWxmID09PSB0cnVlID8gdHJ1ZSA6IGZhbHNlO1xuICAgIGN1cnJlbnQgPSBpbmNsdWRlU2VsZiA/IG5vZGUgOiBub2RlLnBhcmVudE5vZGU7XG5cbiAgICB3aGlsZSAoY3VycmVudCAmJiBpdGVyYXRpb24gPCBsaW1pdCkge1xuICAgICAgICB2YXIgbWF0Y2hlclJlc3VsdCA9IG1hdGNoZXIoY3VycmVudCk7XG4gICAgICAgIGlmIChtYXRjaGVyUmVzdWx0ID4gMCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gY3VycmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoZXJSZXN1bHQgPCAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xuICAgICAgICBpdGVyYXRpb24rKztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBnZXRDb29raWVEb21haW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5pbmRleE9mKCcuYmJjLmNvbScpICE9PSAtMVxuICAgICAgICA/ICdiYmMuY29tJ1xuICAgICAgICA6ICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUuaW5kZXhPZignLmJiYy5jby51aycpICE9PSAtMVxuICAgICAgICA/ICdiYmMuY28udWsnXG4gICAgICAgIDogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBkZWJvdW5jZTogZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgICAgIHZhciB0aW1lb3V0O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgeyBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOyB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgICAgICBpZiAoY2FsbE5vdykgeyBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOyB9XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhcHBlbmRMaW5rVG9IZWFkOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sXG4gICAgICAgICAgICBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuXG4gICAgICAgIGxpbmsudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgICAgICBsaW5rLmhyZWYgPSB1cmw7XG5cbiAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICB9LFxuICAgIGNhcGl0YWxpemU6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHZhciBpLCBuLCBwaWVjZXMgPSBzdHJpbmcuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBpZWNlcy5sZW5ndGg7IGkrKyApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHBpZWNlc1tpXS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG4gPSBwaWVjZXNbaV0uY2hhckF0KDApLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHBpZWNlc1tpXSA9IG4gKyBwaWVjZXNbaV0uc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwaWVjZXMuam9pbihcIiBcIik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgcmVxdWlyZSgnbG9nZ2VyJylcbiAgICAgKi9cbiAgICBsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nLndhcm4oJ3V0aWxzLmxvZyBpcyBkZXByZWNhdGVkJywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGFkZFRhZ0NsYXNzOiBmdW5jdGlvbih0YWcsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRhZyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHRhZyAhPT0gJycgJiZcbiAgICAgICAgICAgIHRhZyAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3N0cmluZycgJiYgY2xhc3NOYW1lICE9PSAnJykge1xuICAgICAgICAgICAgaWYgKCFoYXNBdHJyaWJ1dGUodGFnLCAnY2xhc3NOYW1lJywgY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIHRhZy5jbGFzc05hbWUgPSB0YWcuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhZy5jbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZVRhZ0NsYXNzOiBmdW5jdGlvbih0YWcsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRhZyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHRhZyAhPT0gJycgJiZcbiAgICAgICAgICAgIHRhZyAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3N0cmluZycgJiYgY2xhc3NOYW1lICE9PSAnJykge1xuICAgICAgICAgICAgaWYgKGhhc0F0cnJpYnV0ZSh0YWcsICdjbGFzc05hbWUnLCBjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGFnLmNsYXNzTmFtZSA9IHRhZy5jbGFzc05hbWUucmVwbGFjZSgnICcgKyBjbGFzc05hbWUsICcnKTtcbiAgICAgICAgICAgICAgICB0YWcuY2xhc3NOYW1lID0gdGFnLmNsYXNzTmFtZS5yZXBsYWNlKGNsYXNzTmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhZy5jbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFkZEJvZHlUYWdDbGFzczogZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciB0YWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRUYWdDbGFzcyh0YWcsIGNsYXNzTmFtZSk7XG4gICAgfSxcbiAgICByZW1vdmVCb2R5VGFnQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgdGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlVGFnQ2xhc3ModGFnLCBjbGFzc05hbWUpO1xuICAgIH0sXG4gICAgYWRkSHRtbFRhZ0NsYXNzOiBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdodG1sJylbMF07XG4gICAgICAgIHJldHVybiB0aGlzLmFkZFRhZ0NsYXNzKHRhZywgY2xhc3NOYW1lKTtcbiAgICB9LFxuICAgIHJlbW92ZUh0bWxUYWdDbGFzczogZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciB0YWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdO1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVUYWdDbGFzcyh0YWcsIGNsYXNzTmFtZSk7XG4gICAgfSxcbiAgICBoYXNCb2R5VGFnSWQ6IGZ1bmN0aW9uKGlkTmFtZSkge1xuICAgICAgICByZXR1cm4gaGFzVGFnSWQoJ2JvZHknLCBpZE5hbWUpO1xuICAgIH0sXG5cbiAgICBnZXRVcmlQYXJhbUJ5TmFtZTogZnVuY3Rpb24obmFtZSwgc2FuaXRpemVSZXN1bHQpIHtcbiAgICAgICAgc2FuaXRpemVSZXN1bHQgPSBzYW5pdGl6ZVJlc3VsdCAhPT0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCBcIlxcXFxbXCIpLnJlcGxhY2UoL1tcXF1dLywgXCJcXFxcXVwiKTtcbiAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIltcXFxcPyZdXCIgKyBuYW1lICsgXCI9KFteJiNdKilcIiksXG4gICAgICAgICAgICByZXN1bHRzID0gcmVnZXguZXhlYyhiYmNkb3Rjb20uY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCkuc2VhcmNoKTtcblxuICAgICAgICBpZiAocmVzdWx0cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzYW5pdGl6ZVJlc3VsdCA/IHJlc3VsdHNbMV0ucmVwbGFjZSgvW15hLXpBLVowLTlcXC1fXS9nLCAnJykgOiByZXN1bHRzWzFdKTtcbiAgICB9LFxuICAgIGlzRGVidWc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKC9bP3wmXWFkcy1kZWJ1Zy8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikgfHwgZG9jdW1lbnQuY29va2llLmluZGV4T2YoJ2Fkcy1kZWJ1Zz0nKSAhPT0gLTEpO1xuICAgIH0sXG4gICAgaXNEZWJ1Z1RyYWNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICgvWz98Jl1hZHMtZGVidWctdHJhY2UvLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpIHx8IGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKCdhZHMtZGVidWctdHJhY2U9JykgIT09IC0xKTtcbiAgICB9LFxuICAgIGdldEVudjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IGJiY2RvdGNvbS5jb25maWcuZ2V0V2luZG93TG9jYXRpb24oKTtcbiAgICAgICAgaWYgKC9bYS16XStcXC10ZXN0WzAtOV0rXFwuYmJjLipcXC5jb20vLnRlc3QobG9jYXRpb24uaHJlZikpIHtcbiAgICAgICAgICAgIHJldHVybiAndGVzdCc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hdGNoZXMgPSBsb2NhdGlvbi5ocmVmLm1hdGNoKC8oc2FuZGJveHxpbnR8dGVzdHxzdGFnZSkoLmRldikqLmJiYy5jbyovKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXMgPT09IG51bGwgPyAnbGl2ZScgOiBtYXRjaGVzWzFdO1xuICAgIH0sXG4gICAgaXNMaXZlRW52OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RW52KCkgPT09ICdsaXZlJztcbiAgICB9LFxuICAgIGlzVGVzdEVudjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEVudigpICE9PSAnbGl2ZScgJiYgdGhpcy5nZXRFbnYoKSAhPT0gJ3N0YWdlJztcbiAgICB9LFxuICAgIHN0YWNrVHJhY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG4gICAgICAgIHdpbmRvdy5jb25zb2xlLmxvZyhlcnIuc3RhY2spO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogZWcgZ2V0UGFyZW50RWxlbWVudEJ5Q2xhc3MoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnbmF2aWdhdGlvbicpO1xuICAgICAqIGVnIGdldFBhcmVudEVsZW1lbnRCeUNsYXNzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb28nKSwgJ25hdmlnYXRpb24nLCAxMCk7XG4gICAgICogZWcgZ2V0UGFyZW50RWxlbWVudEJ5Q2xhc3MoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnbmF2aWdhdGlvbicsIDEwLCB0cnVlKTtcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3Qgbm9kZSBFbGVtZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSBzdHJpbmcgY2xhc3NOYW1lIENsYXNzIG5hbWUgbG9va2luZyBmb3IgaW4gcGFyZW50IGVsZW1lbnRzXG4gICAgICogQHBhcmFtIGludGVnZXIgZGVwdGggSG93IGZhciB1cCB0aGUgRE9NIHRyZWUgc2hvdWxkIHdlIHNlYXJjaC4gIFNtYWxsZXIgbnVtYmVyIGlzIG1vcmUgcGVyZm9ybWFudC5cbiAgICAgKiBAcGFyYW0gYm9vbGVhbiBpZ25vcmVCb2R5IFdoZXRoZXIgdGhpcyB1dGlsaXR5IHNob3VsZCBjcmF3bCB1cCB0byA8Ym9keT4gYW5kIDxodG1sPiBvciBzdG9wIGJlbG93IDxib2R5PlxuICAgICAqIEByZXR1cm4gYm9vbGVhbiBSZXR1cm5zIGVsZW1lbnRcbiAgICAgKi9cbiAgICBnZXRQYXJlbnRFbGVtZW50QnlDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3NOYW1lLCBkZXB0aCwgaWdub3JlQm9keSkge1xuICAgICAgICBpZ25vcmVCb2R5ID0gdHlwZW9mIGlnbm9yZUJvZHkgIT09ICd1bmRlZmluZWQnICYmIGlnbm9yZUJvZHkgPT09IHRydWUgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgdmFyIGxpbWl0ID0gKHR5cGVvZiBkZXB0aCA9PT0gJ3VuZGVmaW5lZCcgfHwgZGVwdGggPT09IDAgPyA1IDogZGVwdGgpLFxuICAgICAgICAgICAgbWF0Y2hlciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFub2RlIHx8IHR5cGVvZiBub2RlLmNsYXNzTmFtZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIG5vZGUudGFnTmFtZSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgICAgICAgICAgKGlnbm9yZUJvZHkgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdib2R5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5jbGFzc05hbWUuaW5kZXhPZihjbGFzc05hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZWFyY2hUcmVlVXB3YXJkcyhub2RlLCBtYXRjaGVyLCBmYWxzZSwgbGltaXQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhbiBlbGVtZW50IGFuZCBhIHRhZyBuYW1lLCB0cmF2ZXJzZXMgdXAgdGhlIERPTSB0cmVlIGxvb2tpbmdcbiAgICAgKiBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgZWxlbWVudCB3aXRoIHRoYXQgdGFnIG5hbWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBub2RlIFRoZSBzdGFydGluZyBub2RlXG4gICAgICogQHBhcmFtIHRhZ05hbWUgVGhlIHRhZyBuYW1lIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcGFyYW0gW2luY2x1ZGVTZWxmXSBJbmNsdWRlIHNlbGYgaW4gc2VhcmNoXG4gICAgICogQHBhcmFtIFtsaW1pdF0gSG93IGZhciB1cCB0aGUgdHJlZSB0byBzZWFyY2hcbiAgICAgKiBAcmV0dXJucyB7fVxuICAgICAqL1xuICAgIGdldENsb3Nlc3RFbGVtZW50QnlUYWdOYW1lOiBmdW5jdGlvbihub2RlLCB0YWdOYW1lLCBpbmNsdWRlU2VsZiwgbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIHNlYXJjaFRyZWVVcHdhcmRzKG5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHRhZ05hbWUgPyAxIDogMDtcbiAgICAgICAgfSwgaW5jbHVkZVNlbGYsIGxpbWl0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZWcgcGFyZW50SGFzQ2xhc3MoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnbmF2aWdhdGlvbicpO1xuICAgICAqIGVnIHBhcmVudEhhc0NsYXNzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb28nKSwgJ25hdmlnYXRpb24nLCAxMCk7XG4gICAgICogZWcgcGFyZW50SGFzQ2xhc3MoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnbmF2aWdhdGlvbicsIDEwLCB0cnVlKTtcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3Qgbm9kZSBFbGVtZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSBzdHJpbmcgY2xhc3NOYW1lIENsYXNzIG5hbWUgbG9va2luZyBmb3IgaW4gcGFyZW50IGVsZW1lbnRzXG4gICAgICogQHBhcmFtIGludGVnZXIgZGVwdGggSG93IGZhciB1cCB0aGUgRE9NIHRyZWUgc2hvdWxkIHdlIHNlYXJjaC4gIFNtYWxsZXIgbnVtYmVyIGlzIG1vcmUgcGVyZm9ybWFudC5cbiAgICAgKiBAcGFyYW0gYm9vbGVhbiBpZ25vcmVCb2R5IFdoZXRoZXIgdGhpcyB1dGlsaXR5IHNob3VsZCBjcmF3bCB1cCB0byA8Ym9keT4gYW5kIDxodG1sPiBvciBzdG9wIGJlbG93IDxib2R5PlxuICAgICAqIEByZXR1cm4gYm9vbGVhbiBSZXR1cm5zIHRydWUgaWYgY2xhc3Mgd2FzIGZvdW5kIGluIHRoZSBuZXN0ZWQgcGFyZW50IHRhZ3NcbiAgICAgKi9cbiAgICBwYXJlbnRIYXNDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3NOYW1lLCBkZXB0aCwgaWdub3JlQm9keSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0UGFyZW50RWxlbWVudEJ5Q2xhc3Mobm9kZSwgY2xhc3NOYW1lLCBkZXB0aCwgaWdub3JlQm9keSkgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB3b3JrIG91dCB3aGVyZSBhIGxpbmsgaXMgd2l0aGluIGEgbW9kdWxlIHNvIGVkaXRvcmlhbCBrbndvIHdoZXRoZXIgdGhlIGxpbmsgd2FzIHRoZSBmaXJzdCBsaW5rLFxuICAgICAqIHNlY29uZCBsaW5rIGV0Y1xuICAgICAqIGVnIGdldEFuY2hvclBvc2l0aW9uV2l0aGluRWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVzaW5lc3MtbW9kdWxlJyksICcvbmV3cy9idXNpbmVzcy0xMjM0NTY3OCcpO1xuICAgICAqXG4gICAgICogQHBhcmFtIG9iamVjdCBwYXJlbnQgRWxlbWVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0gc3RyaW5nIGhyZWYgZWcgL25ld3MvYnVzaW5lc3MtMTIzNDU2N1xuICAgICAqIEByZXR1cm5zIG51bWJlciAwLTIwXG4gICAgICovXG4gICAgZ2V0QW5jaG9yUG9zaXRpb25XaXRoaW5FbGVtZW50OiBmdW5jdGlvbihwYXJlbnQsIGhyZWYpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICB0YWdzLFxuICAgICAgICAgICAgaHJlZlJlZ2V4O1xuICAgICAgICBpZiAocGFyZW50ICYmIGhyZWYpIHtcbiAgICAgICAgICAgIHRhZ3MgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKTtcbiAgICAgICAgICAgIGhyZWZSZWdleCA9IG5ldyBSZWdFeHAoaHJlZisnJCcpO1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFnc1tpXS5ocmVmICE9PSAndW5kZWZpbmVkJyAmJiBocmVmICE9PSAnJyAmJiB0YWdzW2ldLmhyZWYubWF0Y2goaHJlZlJlZ2V4KSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGVnIGFkZEV2ZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb28nKSwgJ2NsaWNrJywgZnVuY3Rpb24oKXt9KTtcbiAgICAgKiBzb3VyY2U6IGh0dHA6Ly9lam9obi5vcmcvcHJvamVjdHMvZmxleGlibGUtamF2YXNjcmlwdC1ldmVudHNcbiAgICAgKi9cbiAgICBhZGRFdmVudDogZnVuY3Rpb24ob2JqLCB0eXBlLCBmbikge1xuICAgICAgICBpZiAob2JqLmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICBvYmpbJ2UnICsgdHlwZSArIGZuXSA9IGZuO1xuICAgICAgICAgICAgb2JqW3R5cGUgKyBmbl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvYmpbJ2UnICsgdHlwZSArIGZuXSh3aW5kb3cuZXZlbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9iai5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgb2JqW3R5cGUgKyBmbl0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogZWcgcmVtb3ZlRXZlbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnY2xpY2snLCBmdW5jdGlvbigpe30pO1xuICAgICAqIHNvdXJjZTogaHR0cDovL2Vqb2huLm9yZy9wcm9qZWN0cy9mbGV4aWJsZS1qYXZhc2NyaXB0LWV2ZW50c1xuICAgICAqL1xuICAgIHJlbW92ZUV2ZW50OiBmdW5jdGlvbihvYmosIHR5cGUsIGZuKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqLmRldGFjaEV2ZW50KSB7XG4gICAgICAgICAgICBvYmouZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIG9ialt0eXBlICsgZm5dKTtcbiAgICAgICAgICAgIG9ialt0eXBlICsgZm5dID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBlZyB0cmlnZ2VyRXZlbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnY2xpY2snKTtcbiAgICAgKiBzb3VyY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL3NhbXBsZXMvZG9tcmVmL2Rpc3BhdGNoRXZlbnQuaHRtbFxuICAgICAqL1xuICAgIHRyaWdnZXJFdmVudDogZnVuY3Rpb24ob2JqLCB0eXBlLCBwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogcHJldmVudERlZmF1bHQ7XG4gICAgICAgIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gICAgICAgIGV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMCwgMCwgMCwgMCwgMCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcblxuICAgIGNhbmNlbEV2ZW50OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBldmVudC5wcmV2ZW50RGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaXNFdmVudERlZmF1bHRQcmV2ZW50ZWQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fCBldmVudC5yZXR1cm5WYWx1ZSA9PT0gZmFsc2U7XG4gICAgfSxcblxuICAgIHRyaW06IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXltcXHNcXHhBMF0rLywgJycpLnJlcGxhY2UoL1tcXHNcXHhBMF0rJC8sICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH0sXG5cbiAgICBuYXZpZ2F0ZVRvOiBmdW5jdGlvbiAodXJpKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgPG1ldGE+IHRhZyBuYW1lIHZhbHVlLCBmb3IgZXhhbXBsZTpcbiAgICAgKiBIdG1sOiAgIDxtZXRhIG5hbWU9XCJEQ1RFUk1TLmNyZWF0ZWRcIiBjb250ZW50PVwiMjAxNS0wMS0wNlQxMjowMDowMFwiIC8+XG4gICAgICogTWV0aG9kOiBiYmNkb3Rjb20udXRpbHMuZ2V0TWV0YU5hbWVDb250ZW50KCdEQ1RFUk1TLmNyZWF0ZWQnKTtcbiAgICAgKi9cbiAgICBnZXRNZXRhTmFtZUNvbnRlbnQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdmFyIG1ldGFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21ldGEnKSxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG1ldGFzW2ldLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0YXNbaV0uZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBHZXQgPG1ldGE+IHRhZyBwcm9wZXJ0eSB2YWx1ZSwgZm9yIGV4YW1wbGU6XG4gICAgICogSHRtbDogICA8bWV0YSBwcm9wZXJ0eT1cInd3aHAtZWRpdGlvblwiIGNvbnRlbnQ9XCJpbnRlcm5hdGlvbmFsXCIgLz5cbiAgICAgKiBNZXRob2Q6IGJiY2RvdGNvbS51dGlscy5nZXRNZXRhUHJvcGVydHlDb250ZW50KCd3d2hwLWVkaXRpb24nKTtcbiAgICAgKi9cbiAgICBnZXRNZXRhUHJvcGVydHlDb250ZW50OiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICB2YXIgbWV0YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWV0YScpLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG1ldGFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobWV0YXNbaV0uZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgPT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ldGFzW2ldLmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0sXG4gICAgc2V0Q29va2llOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgc2Vjb25kcykge1xuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAndW5kZWZpbmVkJyAmJiBuYW1lICE9PSAnJyAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWNvbmRzID09PSAndW5kZWZpbmVkJyB8fCBzZWNvbmRzID09PSBudWxsIHx8IHNlY29uZHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIDM2NSBkYXlzICg2MCAqIDYwICogMjQgPSAxIGRheSlcbiAgICAgICAgICAgICAgICBzZWNvbmRzID0gNjAgKiA2MCAqIDI0ICogMzY1O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAoc2Vjb25kcyAqIDEwMDApKTsgIC8vIGVnIDEyMHMgKiAxMDAwID0gMTIwLDAwMG1zXG4gICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSkrJz0nK2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkrJzsgZXhwaXJlcz0nK2RhdGUudG9HTVRTdHJpbmcoKVxuICAgICAgICAgICAgICAgICsnOyBkb21haW49LicrZ2V0Q29va2llRG9tYWluKCkrJzsgcGF0aD0vJztcbiAgICAgICAgICAgIHRyYWNrQ29va2llLnB1c2goWydzZXQnLCBuYW1lLCB2YWx1ZSwgc2Vjb25kc10pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRDb29raWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9ICc7ICcgKyBkb2N1bWVudC5jb29raWUsXG4gICAgICAgICAgICBwYXJ0cyA9IGNvb2tpZS5zcGxpdCgnOyAnICsgZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgJz0nKSxcbiAgICAgICAgICAgIHZhbHVlO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0cy5wb3AoKS5zcGxpdCgnOycpLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNrQ29va2llLnB1c2goWydnZXQnLCBuYW1lLCB2YWx1ZV0pO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBkZWxldGVDb29raWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpKyc9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UOyBkb21haW49LicrZ2V0Q29va2llRG9tYWluKCkrJzsgcGF0aD0vJztcbiAgICAgICAgdHJhY2tDb29raWUucHVzaChbJ2RlbGV0ZScsIG5hbWVdKTtcbiAgICB9LFxuICAgIGdlbmVyYXRlVXVpZFY0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgdmFyIHIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTYpLCB2ID0gYyA9PT0gJ3gnID8gciA6IChyJjB4MyB8IDB4OCk7XG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHN0cmluZyBVcmkgZWcgaHR0cDovL3d3dy50ZXN0LmJiYy5jb20vbmV3cy93b3JsZD9oZWxsbz13b3JsZCNoZWxwXG4gICAgICovXG4gICAgY3JlYXRlV2luZG93TG9jYXRpb246IGZ1bmN0aW9uKHVyaSkge1xuICAgICAgICB2YXIgd2luZG93TG9jYXRpb24sXG4gICAgICAgICAgICB3aXRob3V0UHJvdG9jb2wsXG4gICAgICAgICAgICB3aXRob3V0UXVlcnlQYXJhbSA9IHVyaTtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmkgPT09ICd1bmRlZmluZWQnIHx8IHVyaSA9PT0gbnVsbCB8fCB1cmkgPT09ICcnKSB7XG4gICAgICAgICAgICB3aW5kb3dMb2NhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBocmVmICAgICA6ICcnLFxuICAgICAgICAgICAgICAgIHByb3RvY29sIDogJycsXG4gICAgICAgICAgICAgICAgaG9zdCAgICAgOiAnJyxcbiAgICAgICAgICAgICAgICBob3N0bmFtZSA6ICcnLFxuICAgICAgICAgICAgICAgIHBvcnQgICAgIDogJycsXG4gICAgICAgICAgICAgICAgcGF0aG5hbWUgOiAnJyxcbiAgICAgICAgICAgICAgICBzZWFyY2ggICA6ICcnLFxuICAgICAgICAgICAgICAgIGhhc2ggICAgIDogJydcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodXJpLmluZGV4T2YoJz8nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB3aXRob3V0UXVlcnlQYXJhbSA9IHVyaS5zdWJzdHIoMCwgdXJpLmluZGV4T2YoJz8nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aXRob3V0UHJvdG9jb2wgPSB3aXRob3V0UXVlcnlQYXJhbS5zdWJzdHIod2l0aG91dFF1ZXJ5UGFyYW0uaW5kZXhPZignOicpKzMpO1xuICAgICAgICAgICAgd2luZG93TG9jYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgaHJlZiAgICAgOiB1cmksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL3d3dy50ZXN0LmJiYy5jb20vbmV3cy93b3JsZD9oZWxsbz13b3JsZCNoZWxwXG4gICAgICAgICAgICAgICAgcHJvdG9jb2wgOiB1cmkuc3Vic3RyKDAsIHVyaS5pbmRleE9mKCc6JykrMSksICAvLyBodHRwOlxuICAgICAgICAgICAgICAgIGhvc3QgICAgIDogd2l0aG91dFByb3RvY29sLnN1YnN0cigwLCB3aXRob3V0UHJvdG9jb2wuaW5kZXhPZignLycpKSwgICAgICAgIC8vIHd3dy50ZXN0LmJiYy5jb206ODg4OFxuICAgICAgICAgICAgICAgIGhvc3RuYW1lIDogd2l0aG91dFByb3RvY29sLnN1YnN0cigwLCB3aXRob3V0UHJvdG9jb2wuaW5kZXhPZignLycpKSwgICAgICAgIC8vIHd3dy50ZXN0LmJiYy5jb21cbiAgICAgICAgICAgICAgICBwb3J0ICAgICA6ICcnLFxuICAgICAgICAgICAgICAgIHBhdGhuYW1lIDogd2l0aG91dFByb3RvY29sLnN1YnN0cih3aXRob3V0UHJvdG9jb2wuaW5kZXhPZignLycpKSxcbiAgICAgICAgICAgICAgICBzZWFyY2ggICA6IHVyaS5zdWJzdHIodXJpLmluZGV4T2YoJz8nKSksXG4gICAgICAgICAgICAgICAgaGFzaCAgICAgOiAnJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2luZG93TG9jYXRpb247XG4gICAgfSxcbiAgICBzZWNvbmRzVG9NaWxsaVNlY29uZHM6IGZ1bmN0aW9uKHNlY29uZHMpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IocGFyc2VGbG9hdChzZWNvbmRzLCAxMCkqMTAwMCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZyBvbmx5XG4gICAgICovXG4gICAgcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyYWNrQ29va2llID0gW107XG4gICAgfSxcbiAgICBnZXRUcmFja0Nvb2tpZVZhbHVlczogZnVuY3Rpb24oY29va2llc0Fycikge1xuICAgICAgICBpZiAodHlwZW9mIGNvb2tpZXNBcnIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2tDb29raWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dCA9IFtdLFxuICAgICAgICAgICAgdDtcbiAgICAgICAgZm9yICh0ID0gMDsgdCA8IHRyYWNrQ29va2llLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgICAgICBpZiAoY29va2llc0Fyci5pbmRleE9mKHRyYWNrQ29va2llW3RdWzFdKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdXQucHVzaCh0cmFja0Nvb2tpZVt0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9LFxuXG4gICAgaXNTdHJpbmc6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8IHZhbCBpbnN0YW5jZW9mIFN0cmluZztcbiAgICB9LFxuXG4gICAgY2xlYW5BcnJheTogZnVuY3Rpb24gKGFjdHVhbCkge1xuICAgICAgICB2YXIgbmV3QXJyYXkgPSBbXTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvcihpID0gMDsgaTxhY3R1YWwubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYgKGFjdHVhbFtpXSB8fCBhY3R1YWxbaV0gPT09IDApe1xuICAgICAgICAgICAgICAgIG5ld0FycmF5LnB1c2goYWN0dWFsW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3QXJyYXk7XG4gICAgfSxcblxuICAgIG91dGVySFRNTDogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIElFLCBDaHJvbWUgdGFrZSB0aGUgaW50ZXJuYWwgbWV0aG9kIG90aGVyd2lzZSBidWlsZCBvbmVcbiAgICAgICAgcmV0dXJuIG5vZGUub3V0ZXJIVE1MIHx8IChcbiAgICAgICAgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgICAgICBoO1xuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKG4uY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgICAgICAgIGggPSBkaXYuaW5uZXJIVE1MO1xuICAgICAgICAgICAgZGl2ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBoO1xuICAgICAgICB9KG5vZGUpKTtcbiAgICB9XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL3V0aWxzLmpzXG4gKiovIiwiLyoqXG4gKiBAbW9kdWxlIExvZ0ZhY3RvcnlcbiAqXG4gKiBVc2U6XG4gKlxuICogdmFyIGxvZyA9IGJiY2RvdGNvbS5Mb2dnZXIoJ215Om5hbWVzcGFjZScpO1xuICpcbiAqIGxvZygnc2FtZSBhcyBsb2cubG9nJylcbiAqIGxvZy5sb2coJ3NhbWUgYXMgbG9nKCknKTtcbiAqIGxvZy5pbmZvKCdpbmZvJylcbiAqIGxvZy5kZWJ1ZygnZGVidWcnLCBvYmplY3QpO1xuICogbG9nLndhcm4oJ3dhcm5pbmcnKTtcbiAqIGxvZy5lcnJvcignZXJyb3InLCBFcnJvcik7XG4gKlxuICogRW5hYmxpbmc6XG4gKlxuICogd2luZG93LmJiY2RvdGNvbS5Mb2dnZXIuZW5hYmxlKCcqJyk7IC8vIEZpcnN0IGFyZ3VtZW50IGlzIHRoZSBuYW1lc3BhY2UgdG8gZW5hYmxlXG4gKlxuICogRGlzYWJsaW5nOlxuICpcbiAqIHdpbmRvdy5iYmNkb3Rjb20uTG9nZ2VyLmRpc2FibGUoKTsgLy8gRGlzYWJsZXMgYWxsIG5hbWVzcGFjZXNcbiAqL1xuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG5cbmZ1bmN0aW9uIExvZ0ZhY3RvcnkobmFtZXNwYWNlKSB7XG5cbiAgICBjb25zdCBwcmVmaXhlZE5hbWVzcGFjZSA9IGBiYmNkb3Rjb206JHtuYW1lc3BhY2V9YDtcblxuICAgIGNvbnN0IGxvZ0xldmVscyA9IFtcbiAgICAgICAgJ2xvZycsXG4gICAgICAgICdpbmZvJyxcbiAgICAgICAgJ3dhcm4nLFxuICAgICAgICAnZXJyb3InLFxuICAgICAgICAnZGVidWcnLFxuICAgIF07XG5cbiAgICBjb25zdCBkZWZhdWx0TG9nZ2VyID0gZGVidWcocHJlZml4ZWROYW1lc3BhY2UpO1xuXG4gICAgZnVuY3Rpb24gTG9nZ2VyKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXIoLi4uYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9nTGV2ZWwobGV2ZWwpIHtcbiAgICAgICAgTG9nZ2VyW2xldmVsXSA9IGRlYnVnKHByZWZpeGVkTmFtZXNwYWNlKTtcbiAgICAgICAgTG9nZ2VyW2xldmVsXS5sb2cgPSBmdW5jdGlvbiBsb2coLi4uYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cuY29uc29sZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICB3aW5kb3cuY29uc29sZVtsZXZlbF0gJiZcbiAgICAgICAgICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh3aW5kb3cuY29uc29sZVtsZXZlbF0sIHdpbmRvdy5jb25zb2xlLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGxvZ0xldmVsIG9mIGxvZ0xldmVscykge1xuICAgICAgICBjcmVhdGVMb2dMZXZlbChsb2dMZXZlbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIExvZ2dlcjtcbn1cblxuTG9nRmFjdG9yeS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoLi4uYXJncykge1xuICAgIGRlYnVnLmVuYWJsZSguLi5hcmdzKTtcbiAgICBkZWJ1ZygnYmJjZG90Y29tJykoJ0RlYnVnZ2luZyBlbmFibGVkJywgYXJncyk7XG59O1xuTG9nRmFjdG9yeS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSguLi5hcmdzKSB7XG4gICAgZGVidWcoJ2JiY2RvdGNvbScpKCdEZWJ1Z2dpbmcgZGlzYWJsZWQnKTtcbiAgICBkZWJ1Zy5kaXNhYmxlKC4uLmFyZ3MpO1xufTtcblxuaWYgKC9bP3wmXWFkcy1kZWJ1Zy8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikgfHwgZG9jdW1lbnQuY29va2llLmluZGV4T2YoJ2Fkcy1kZWJ1Zz0nKSAhPT0gLTEpIHtcbiAgICBMb2dGYWN0b3J5LmVuYWJsZSgnYmJjZG90Y29tKicpO1xufSBlbHNlIGlmIChkZWJ1Zy5lbmFibGVkKCdiYmNkb3Rjb20qJykpIHtcbiAgICBkZWJ1ZygnYmJjZG90Y29tJykoJ1RvIGRpc2FibGUgZGVidWdnaW5nOiBgYmJjZG90Y29tLkxvZ2dlci5kaXNhYmxlKClgJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTG9nRmFjdG9yeTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9sb2dnZXIuanNcbiAqKi8iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJ2xpZ2h0c2VhZ3JlZW4nLFxuICAnZm9yZXN0Z3JlZW4nLFxuICAnZ29sZGVucm9kJyxcbiAgJ2RvZGdlcmJsdWUnLFxuICAnZGFya29yY2hpZCcsXG4gICdjcmltc29uJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIHJldHVybiAoJ1dlYmtpdEFwcGVhcmFuY2UnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHdpbmRvdy5jb25zb2xlICYmIChjb25zb2xlLmZpcmVidWcgfHwgKGNvbnNvbGUuZXhjZXB0aW9uICYmIGNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm4gYXJncztcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3MgPSBbYXJnc1swXSwgYywgJ2NvbG9yOiBpbmhlcml0J10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16JV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbiAgcmV0dXJuIGFyZ3M7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2RlYnVnL2Jyb3dzZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxNDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBkZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXJjYXNlZCBsZXR0ZXIsIGkuZS4gXCJuXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogUHJldmlvdXNseSBhc3NpZ25lZCBjb2xvci5cbiAqL1xuXG52YXIgcHJldkNvbG9yID0gMDtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcigpIHtcbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW3ByZXZDb2xvcisrICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVidWcobmFtZXNwYWNlKSB7XG5cbiAgLy8gZGVmaW5lIHRoZSBgZGlzYWJsZWRgIHZlcnNpb25cbiAgZnVuY3Rpb24gZGlzYWJsZWQoKSB7XG4gIH1cbiAgZGlzYWJsZWQuZW5hYmxlZCA9IGZhbHNlO1xuXG4gIC8vIGRlZmluZSB0aGUgYGVuYWJsZWRgIHZlcnNpb25cbiAgZnVuY3Rpb24gZW5hYmxlZCgpIHtcblxuICAgIHZhciBzZWxmID0gZW5hYmxlZDtcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gYWRkIHRoZSBgY29sb3JgIGlmIG5vdCBzZXRcbiAgICBpZiAobnVsbCA9PSBzZWxmLnVzZUNvbG9ycykgc2VsZi51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICAgIGlmIChudWxsID09IHNlbGYuY29sb3IgJiYgc2VsZi51c2VDb2xvcnMpIHNlbGYuY29sb3IgPSBzZWxlY3RDb2xvcigpO1xuXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJW9cbiAgICAgIGFyZ3MgPSBbJyVvJ10uY29uY2F0KGFyZ3MpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuZm9ybWF0QXJncykge1xuICAgICAgYXJncyA9IGV4cG9ydHMuZm9ybWF0QXJncy5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG4gICAgdmFyIGxvZ0ZuID0gZW5hYmxlZC5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuICBlbmFibGVkLmVuYWJsZWQgPSB0cnVlO1xuXG4gIHZhciBmbiA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpID8gZW5hYmxlZCA6IGRpc2FibGVkO1xuXG4gIGZuLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblxuICByZXR1cm4gZm47XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgdmFyIHNwbGl0ID0gKG5hbWVzcGFjZXMgfHwgJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9kZWJ1Zy9kZWJ1Zy5qc1xuICoqIG1vZHVsZSBpZCA9IDE0NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucyl7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIHZhbCkgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIHJldHVybiBvcHRpb25zLmxvbmdcbiAgICA/IGxvbmcodmFsKVxuICAgIDogc2hvcnQodmFsKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSAnJyArIHN0cjtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDAwMCkgcmV0dXJuO1xuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKHN0cik7XG4gIGlmICghbWF0Y2gpIHJldHVybjtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIGlmIChtcyA+PSBoKSByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICBpZiAobXMgPj0gbSkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgaWYgKG1zID49IHMpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKVxuICAgIHx8IHBsdXJhbChtcywgaCwgJ2hvdXInKVxuICAgIHx8IHBsdXJhbChtcywgbSwgJ21pbnV0ZScpXG4gICAgfHwgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJylcbiAgICB8fCBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSByZXR1cm47XG4gIGlmIChtcyA8IG4gKiAxLjUpIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9tcy9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDE0NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gQ29weXJpZ2h0IChjKSAyMDE0IGNvbVNjb3JlLCBJbmMuXG52YXIgbnNfPW5zX3x8e307bnNfLlN0cmVhbVNlbnNlPW5zXy5TdHJlYW1TZW5zZXx8ZnVuY3Rpb24oKXtmdW5jdGlvbiBoKHQsbil7dmFyIHI9dHx8XCJcIixpPVwidW5kZWZpbmVkXCIscz1sLmNvbVNjb3JlfHxsLnNpdGVzdGF0fHxmdW5jdGlvbih0KXt2YXIgbj1cImNvbVNjb3JlPVwiLHI9Yy5jb29raWUscz1cIlwiLG89XCJpbmRleE9mXCIsYT1cInN1YnN0cmluZ1wiLGY9XCJsZW5ndGhcIixoPWUuYnJvd3NlckFjY2VwdHNMYXJnZVVSTHMoKT9nLlVSTF9MRU5HVEhfTElNSVQ6Zy5SRVNUUklDVEVEX1VSTF9MRU5HVEhfTElNSVQscCxkPVwiJm5zX1wiLHY9XCImXCIsbSx5LGIsdyxFPWwuZW5jb2RlVVJJQ29tcG9uZW50fHxlc2NhcGU7aWYocltvXShuKSsxKWZvcihiPTAseT1yLnNwbGl0KFwiO1wiKSx3PXlbZl07Yjx3O2IrKyltPXlbYl1bb10obiksbSsxJiYocz12K3VuZXNjYXBlKHlbYl1bYV0obStuW2ZdKSkpO3QrPWQrXCJfdD1cIisgKyhuZXcgRGF0ZSkrZCtcImM9XCIrKGMuY2hhcmFjdGVyU2V0fHxjLmRlZmF1bHRDaGFyc2V0fHxcIlwiKStzLHQubGVuZ3RoPmgmJnQuaW5kZXhPZih2KT4wJiYocD10LnN1YnN0cigwLGgtOCkubGFzdEluZGV4T2YodiksdD0odC5zdWJzdHJpbmcoMCxwKStkK1wiY3V0PVwiK0UodC5zdWJzdHJpbmcocCsxKSkpLnN1YnN0cigwLGgpKSx1Lmh0dHBHZXQodCksdHlwZW9mIG5zX3A9PT1pJiYobnNfcD17c3JjOnR9KSxuc19wLmxhc3RNZWFzdXJlbWVudD10fTtpZih0eXBlb2YgbiE9PWkpe3ZhciBvPVtdLGE9bC5lbmNvZGVVUklDb21wb25lbnR8fGVzY2FwZTtmb3IodmFyIGYgaW4gbiluLmhhc093blByb3BlcnR5KGYpJiZvLnB1c2goYShmKStcIj1cIithKG5bZl0pKTsvW1xcP1xcJl0kLy50ZXN0KHIpfHwocis9XCImXCIpLHIrPW8uam9pbihcIiZcIil9cmV0dXJuIHMocil9ZnVuY3Rpb24gcCh0LG4pe3ZhciByLGk9bC5lbmNvZGVVUklDb21wb25lbnR8fGVzY2FwZSxzPVtdLG89Zy5MQUJFTFNfT1JERVIsdT10LnNwbGl0KFwiP1wiKSxhPXVbMF0sZj11WzFdLGg9Zi5zcGxpdChcIiZcIik7Zm9yKHZhciBwPTAsZD1oLmxlbmd0aDtwPGQ7cCsrKXt2YXIgdj1oW3BdLnNwbGl0KFwiPVwiKSxtPXVuZXNjYXBlKHZbMF0pLHk9dW5lc2NhcGUodlsxXSk7bSYmKG5bbV09eSl9dmFyIGI9e307Zm9yKHZhciBwPTAsZD1vLmxlbmd0aDtwPGQ7cCsrKXt2YXIgdz1vW3BdO2lmKG4uaGFzT3duUHJvcGVydHkodykpe3ZhciBFPW5bd107dHlwZW9mIEUhPVwidW5kZWZpbmVkXCImJkUhPW51bGwmJihiW3ddPSEwLHMucHVzaChpKHcpK1wiPVwiK2koblt3XSkpKX19Zm9yKHZhciB3IGluIG4pe2lmKGJbd10pY29udGludWU7aWYobi5oYXNPd25Qcm9wZXJ0eSh3KSl7dmFyIEU9blt3XTt0eXBlb2YgRSE9XCJ1bmRlZmluZWRcIiYmRSE9bnVsbCYmcy5wdXNoKGkodykrXCI9XCIraShuW3ddKSl9fXI9YStcIj9cIitzLmpvaW4oXCImXCIpLHI9cisoci5pbmRleE9mKFwiJmM4PVwiKTwwP1wiJmM4PVwiK2koYy50aXRsZSk6XCJcIikrKHIuaW5kZXhPZihcIiZjNz1cIik8MD9cIiZjNz1cIitpKGMuVVJMKTpcIlwiKSsoci5pbmRleE9mKFwiJmM5PVwiKTwwP1wiJmM5PVwiK2koYy5yZWZlcnJlcik6XCJcIik7dmFyIFM9ZS5icm93c2VyQWNjZXB0c0xhcmdlVVJMcygpP2cuVVJMX0xFTkdUSF9MSU1JVDpnLlJFU1RSSUNURURfVVJMX0xFTkdUSF9MSU1JVDtpZihyLmxlbmd0aD5TJiZyLmluZGV4T2YoXCImXCIpPjApe3ZhciB4PXIuc3Vic3RyKDAsUy04KS5sYXN0SW5kZXhPZihcIiZcIik7cj0oci5zdWJzdHJpbmcoMCx4KStcIiZuc19jdXQ9XCIraShyLnN1YnN0cmluZyh4KzEpKSkuc3Vic3RyKDAsUyl9cmV0dXJuIHJ9dmFyIGU9ZnVuY3Rpb24oKXt2YXIgZT17dWlkOmZ1bmN0aW9uKCl7dmFyIGU9MTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4rKG5ldyBEYXRlKStcIl9cIitlKyt9fSgpLGZpbHRlcjpmdW5jdGlvbihlLHQpe3ZhciBuPXt9O2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJmUodFtyXSkmJihuW3JdPXRbcl0pO3JldHVybiBufSxleHRlbmQ6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuO2U9ZXx8e307Zm9yKHZhciByPTE7cjx0O3IrKyl7bj1hcmd1bWVudHNbcl07aWYoIW4pY29udGludWU7Zm9yKHZhciBpIGluIG4pbi5oYXNPd25Qcm9wZXJ0eShpKSYmKGVbaV09bltpXSl9cmV0dXJuIGV9LGdldFN0cmluZzpmdW5jdGlvbihlLHQpe3ZhciBuPVN0cmluZyhlKTtyZXR1cm4gZT09bnVsbD90fHxcIm5hXCI6bn0sZ2V0TG9uZzpmdW5jdGlvbihlLHQpe3ZhciBuPU51bWJlcihlKTtyZXR1cm4gZT09bnVsbHx8aXNOYU4obik/dHx8MDpufSxnZXRJbnRlZ2VyOmZ1bmN0aW9uKGUsdCl7dmFyIG49TnVtYmVyKGUpO3JldHVybiBlPT1udWxsfHxpc05hTihuKT90fHwwOm59LGdldEJvb2xlYW46ZnVuY3Rpb24oZSx0KXt2YXIgbj1TdHJpbmcoZSkudG9Mb3dlckNhc2UoKT09XCJ0cnVlXCI7cmV0dXJuIGU9PW51bGw/dHx8ITE6bn0saXNOb3RFbXB0eTpmdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGUhPVwidW5kZWZpbmVkXCImJmUhPW51bGwmJnR5cGVvZiBlLmxlbmd0aCE9XCJ1bmRlZmluZWRcIiYmZS5sZW5ndGg+MH0saW5kZXhPZjpmdW5jdGlvbih0LG4pe3ZhciByPS0xO3JldHVybiBlLmZvckVhY2gobixmdW5jdGlvbihlLG4pe2U9PXQmJihyPW4pfSkscn0sZm9yRWFjaDpmdW5jdGlvbihlLHQsbil7dHJ5e2lmKHR5cGVvZiB0PT1cImZ1bmN0aW9uXCIpe249dHlwZW9mIG4hPVwidW5kZWZpbmVkXCI/bjpudWxsO2lmKHR5cGVvZiBlW1wibGVuZ3RoXCJdIT1cIm51bWJlclwifHx0eXBlb2YgZVswXT09XCJ1bmRlZmluZWRcIil7dmFyIHI9dHlwZW9mIGUuX19wcm90b19fIT1cInVuZGVmaW5lZFwiO2Zvcih2YXIgaSBpbiBlKSghcnx8ciYmdHlwZW9mIGUuX19wcm90b19fW2ldPT1cInVuZGVmaW5lZFwiKSYmdHlwZW9mIGVbaV0hPVwiZnVuY3Rpb25cIiYmdC5jYWxsKG4sZVtpXSxpKX1lbHNlIGZvcih2YXIgaT0wLHM9ZS5sZW5ndGg7aTxzO2krKyl0LmNhbGwobixlW2ldLGkpfX1jYXRjaChvKXt9fSxyZWdpb25NYXRjaGVzOmZ1bmN0aW9uKGUsdCxuLHIsaSl7aWYodDwwfHxyPDB8fHQraT5lLmxlbmd0aHx8citpPm4ubGVuZ3RoKXJldHVybiExO3doaWxlKC0taT49MCl7dmFyIHM9ZS5jaGFyQXQodCsrKSxvPW4uY2hhckF0KHIrKyk7aWYocyE9bylyZXR1cm4hMX1yZXR1cm4hMH0sc2l6ZTpmdW5jdGlvbihlKXt2YXIgdD0wLG47Zm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmdCsrO3JldHVybiB0fSxsb2c6ZnVuY3Rpb24oZSx0KXtpZih0eXBlb2YgdCE9XCJ1bmRlZmluZWRcIiYmdCl7dmFyIG49bmV3IERhdGUscj1uLmdldEhvdXJzKCkrXCI6XCIrbi5nZXRNaW51dGVzKCkrXCI6XCIrbi5nZXRTZWNvbmRzKCk7Y29uc29sZS5sb2cocixlKX19LGlzVHJ1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGU9PVwidW5kZWZpbmVkXCI/ITE6dHlwZW9mIGU9PVwic3RyaW5nXCI/KGU9ZS50b0xvd2VyQ2FzZSgpLGU9PT1cInRydWVcInx8ZT09PVwiMVwifHxlPT09XCJvblwiKTplPyEwOiExfSx0b1N0cmluZzpmdW5jdGlvbih0KXtpZih0eXBlb2YgdD09XCJ1bmRlZmluZWRcIilyZXR1cm5cInVuZGVmaW5lZFwiO2lmKHR5cGVvZiB0PT1cInN0cmluZ1wiKXJldHVybiB0O2lmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KT09PVwiW29iamVjdCBBcnJheV1cIilyZXR1cm4gdC5qb2luKFwiLFwiKTtpZihlLnNpemUodCk+MCl7dmFyIG49XCJcIjtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYobis9citcIjpcIit0W3JdK1wiO1wiKTtyZXR1cm4gbn1yZXR1cm4gdC50b1N0cmluZygpfSxleGlzdHM6ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlIT1cInVuZGVmaW5lZFwiJiZlIT1udWxsfSxmaXJzdEdyZWF0ZXJUaGFuMDpmdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9YXJndW1lbnRzLmxlbmd0aDtlPHQ7ZSsrKXt2YXIgbj1hcmd1bWVudHNbZV07aWYobj4wKXJldHVybiBufXJldHVybiAwfSxjbG9uZU9iamVjdDpmdW5jdGlvbihlKXtpZihudWxsPT1lfHxcIm9iamVjdFwiIT10eXBlb2YgZSlyZXR1cm4gZTt2YXIgdD1lLmNvbnN0cnVjdG9yKCk7Zm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHRbbl09ZVtuXSk7cmV0dXJuIHR9LHNhZmVHZXQ6ZnVuY3Rpb24odCxuKXtyZXR1cm4gbj1lLmV4aXN0cyhuKT9uOlwiXCIsZS5leGlzdHModCk/dDpufSxnZXRCcm93c2VyTmFtZTpmdW5jdGlvbigpe3ZhciBlPW5hdmlnYXRvci51c2VyQWdlbnQsdD1uYXZpZ2F0b3IuYXBwTmFtZSxuLHI7cmV0dXJuKHI9ZS5pbmRleE9mKFwiT3BlcmFcIikpIT0tMXx8KHI9ZS5pbmRleE9mKFwiT1BSL1wiKSkhPS0xP3Q9XCJPcGVyYVwiOihyPWUuaW5kZXhPZihcIkFuZHJvaWRcIikpIT0tMT90PVwiQW5kcm9pZFwiOihyPWUuaW5kZXhPZihcIkNocm9tZVwiKSkhPS0xP3Q9XCJDaHJvbWVcIjoocj1lLmluZGV4T2YoXCJTYWZhcmlcIikpIT0tMT90PVwiU2FmYXJpXCI6KHI9ZS5pbmRleE9mKFwiRmlyZWZveFwiKSkhPS0xP3Q9XCJGaXJlZm94XCI6KHI9ZS5pbmRleE9mKFwiSUVNb2JpbGVcIikpIT0tMT90PVwiSW50ZXJuZXQgRXhwbG9yZXIgTW9iaWxlXCI6dD09XCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcInx8dD09XCJOZXRzY2FwZVwiP3Q9XCJJbnRlcm5ldCBFeHBsb3JlclwiOihuPWUubGFzdEluZGV4T2YoXCIgXCIpKzEpPChyPWUubGFzdEluZGV4T2YoXCIvXCIpKSYmKHQ9ZS5zdWJzdHJpbmcobixyKSx0LnRvTG93ZXJDYXNlKCk9PXQudG9VcHBlckNhc2UoKSYmKHQ9bmF2aWdhdG9yLmFwcE5hbWUpKSx0fSxnZXRCcm93c2VyRnVsbFZlcnNpb246ZnVuY3Rpb24oKXt2YXIgZT1uYXZpZ2F0b3IudXNlckFnZW50LHQ9bmF2aWdhdG9yLmFwcE5hbWUsbj1cIlwiK3BhcnNlRmxvYXQobmF2aWdhdG9yLmFwcFZlcnNpb24pLHIsaSxzLG8sdTtyZXR1cm4ocz1lLmluZGV4T2YoXCJPcGVyYVwiKSkhPS0xPyhuPWUuc3Vic3RyaW5nKHMrNiksKHM9ZS5pbmRleE9mKFwiVmVyc2lvblwiKSkhPS0xJiYobj1lLnN1YnN0cmluZyhzKzgpKSk6KHM9ZS5pbmRleE9mKFwiT1BSL1wiKSkhPS0xP249ZS5zdWJzdHJpbmcocys0KToocz1lLmluZGV4T2YoXCJBbmRyb2lkXCIpKSE9LTE/bj1lLnN1YnN0cmluZyhzKzExKToocz1lLmluZGV4T2YoXCJDaHJvbWVcIikpIT0tMT9uPWUuc3Vic3RyaW5nKHMrNyk6KHM9ZS5pbmRleE9mKFwiU2FmYXJpXCIpKSE9LTE/KG49ZS5zdWJzdHJpbmcocys3KSwocz1lLmluZGV4T2YoXCJWZXJzaW9uXCIpKSE9LTEmJihuPWUuc3Vic3RyaW5nKHMrOCkpKToocz1lLmluZGV4T2YoXCJGaXJlZm94XCIpKSE9LTE/bj1lLnN1YnN0cmluZyhzKzgpOnQ9PVwiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyXCI/KHU9bmV3IFJlZ0V4cChcIk1TSUUgKFswLTldezEsfVsuMC05XXswLH0pXCIpLHUuZXhlYyhlKSE9bnVsbCYmKG49cGFyc2VGbG9hdChSZWdFeHAuJDEpKSk6dD09XCJOZXRzY2FwZVwiPyh1PW5ldyBSZWdFeHAoXCJUcmlkZW50Ly4qcnY6KFswLTldezEsfVsuMC05XXswLH0pXCIpLHUuZXhlYyhlKSE9bnVsbCYmKG49cGFyc2VGbG9hdChSZWdFeHAuJDEpKSk6KGk9ZS5sYXN0SW5kZXhPZihcIiBcIikrMSk8KHM9ZS5sYXN0SW5kZXhPZihcIi9cIikpJiYobj1lLnN1YnN0cmluZyhzKzEpKSxuPW4udG9TdHJpbmcoKSwobz1uLmluZGV4T2YoXCI7XCIpKSE9LTEmJihuPW4uc3Vic3RyaW5nKDAsbykpLChvPW4uaW5kZXhPZihcIiBcIikpIT0tMSYmKG49bi5zdWJzdHJpbmcoMCxvKSksKG89bi5pbmRleE9mKFwiKVwiKSkhPS0xJiYobj1uLnN1YnN0cmluZygwLG8pKSxyPXBhcnNlSW50KFwiXCIrbiwxMCksaXNOYU4ocikmJihuPVwiXCIrcGFyc2VGbG9hdChuYXZpZ2F0b3IuYXBwVmVyc2lvbikpLG59LGJyb3dzZXJBY2NlcHRzTGFyZ2VVUkxzOmZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5BY3RpdmVYT2JqZWN0PT09bnVsbHx8ITB9fTtyZXR1cm4gZX0oKSx0PWZ1bmN0aW9uKCl7dmFyIHQ9XCJjc19cIixuPWZ1bmN0aW9uKCl7dmFyIG49dGhpcyxyPXR5cGVvZiBsb2NhbFN0b3JhZ2UhPVwidW5kZWZpbmVkXCI/bG9jYWxTdG9yYWdlOnt9O2UuZXh0ZW5kKHRoaXMse2dldDpmdW5jdGlvbihlKXtyZXR1cm4gclt0K2VdfSxzZXQ6ZnVuY3Rpb24oZSxuKXtyW3QrZV09bn0saGFzOmZ1bmN0aW9uKGUpe3JldHVybiB0K2UgaW4gcn0scmVtb3ZlOmZ1bmN0aW9uKGUpe2RlbGV0ZSByW3QrZV19LGNsZWFyOmZ1bmN0aW9uKCl7Zm9yKHZhciBlIGluIHIpci5oYXNPd25Qcm9wZXJ0eShlKSYmZGVsZXRlIHJbZV19fSl9O3JldHVybiBufSgpLG49ZnVuY3Rpb24oZSx0KXt2YXIgbj1uZXcgSW1hZ2U7bi5vbmxvYWQ9ZnVuY3Rpb24oKXt0JiZ0KDIwMCl9LG4ub25lcnJvcj1mdW5jdGlvbigpe3QmJnQoKX0sbi5zcmM9ZX0scj1mdW5jdGlvbihlLHQpe3QmJnNldFRpbWVvdXQodCwwKX0saT1mdW5jdGlvbihlLHQsbil7biYmc2V0VGltZW91dChuLDApfSxzPWZ1bmN0aW9uKCl7cmV0dXJue2RpcjpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbH0sYXBwZW5kOmZ1bmN0aW9uKGUsdCxuKXt9LHdyaXRlOmZ1bmN0aW9uKGUsdCxuKXt9LGRlbGV0ZUZpbGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4hMX0scmVhZDpmdW5jdGlvbihlLHQpe3JldHVybiBudWxsfX19KCksbz1mdW5jdGlvbihlLHQpe3R5cGVvZiBlbmdpbmUhPVwidW5kZWZpbmVkXCImJnQmJnNldFRpbWVvdXQodCwwKTt2YXIgbj1lbmdpbmUuY3JlYXRlSHR0cENsaWVudCgpLHI9bi5jcmVhdGVSZXF1ZXN0KFwiR0VUXCIsZSxudWxsKTtyLnN0YXJ0KCksdCYmc2V0VGltZW91dCh0LDApfSx1PWZ1bmN0aW9uKCl7dmFyIGU9e1BMQVRGT1JNOlwiZ2VuZXJpY1wiLGh0dHBHZXQ6bixodHRwUG9zdDppLFN0b3JhZ2U6dCxJTzpzLGdldENyb3NzUHVibGlzaGVySWQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZ2V0QXBwTmFtZTpmdW5jdGlvbigpe3JldHVybiBDb25zdGFudHMuVU5LTk9XTl9WQUxVRX0sZ2V0QXBwVmVyc2lvbjpmdW5jdGlvbihlKXtyZXR1cm4gQ29uc3RhbnRzLlVOS05PV05fVkFMVUV9LGdldFZpc2l0b3JJZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldERldmljZU5hbWUoKSsgKyhuZXcgRGF0ZSkrfn4oTWF0aC5yYW5kb20oKSoxZTMpfSxnZXRWaXNpdG9ySWRTdWZmaXg6ZnVuY3Rpb24oKXtyZXR1cm5cIjcyXCJ9LGdldERldmljZU5hbWU6ZnVuY3Rpb24oKXtyZXR1cm5cIlwifSxnZXRQbGF0Zm9ybVZlcnNpb246ZnVuY3Rpb24oKXtyZXR1cm5cIlwifSxnZXRQbGF0Zm9ybU5hbWU6ZnVuY3Rpb24oKXtyZXR1cm5cImpzXCJ9LGdldFJ1bnRpbWVOYW1lOmZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sZ2V0UnVudGltZVZlcnNpb246ZnVuY3Rpb24oKXtyZXR1cm5cIlwifSxnZXRSZXNvbHV0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sZ2V0TGFuZ3VhZ2U6ZnVuY3Rpb24oKXtyZXR1cm5cIlwifSxnZXRQYWNrYWdlTmFtZTpmdW5jdGlvbigpe3JldHVyblwiXCJ9LGlzQ29ubmVjdGlvbkF2YWlsYWJsZTpmdW5jdGlvbigpe3JldHVybiEwfSxpc0NvbXBhdGlibGU6ZnVuY3Rpb24oKXtyZXR1cm4hMH0sYXV0b1NlbGVjdDpmdW5jdGlvbigpe30saXNDcm9zc1B1Ymxpc2hlcklkQ2hhbmdlZDpmdW5jdGlvbigpe3JldHVybiExfX07cmV0dXJuIGV9KCksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGYoKXtyZXR1cm4gdHlwZW9mIGVuZ2luZSE9XCJ1bmRlZmluZWRcIiYmdHlwZW9mIGVuZ2luZS5zdGF0cyE9XCJ1bmRlZmluZWRcIn1mdW5jdGlvbiBsKCl7cmV0dXJuIGUuaXNOb3RFbXB0eShlbmdpbmUuc3RhdHMuZGV2aWNlLmlkKT9lbmdpbmUuc3RhdHMuZGV2aWNlLmlkOmUuaXNOb3RFbXB0eShlbmdpbmUuc3RhdHMubmV0d29yay5tYWMpP2VuZ2luZS5zdGF0cy5uZXR3b3JrLm1hYzpudWxsfWZ1bmN0aW9uIGMoKXtpZihyPT1udWxsKXt2YXIgZT1sKCk7ZSE9bnVsbD8ocj1lLHU9XCIzMVwiLGE9ZSk6KHI9KyhuZXcgRGF0ZSkrfn4oTWF0aC5yYW5kb20oKSoxZTMpLHU9XCI3MlwiLGE9bnVsbCl9fXZhciBuPXRoaXMscj1udWxsLHU9bnVsbCxhPW51bGw7cmV0dXJue1BMQVRGT1JNOlwidHJpbGl0aGl1bVwiLGh0dHBHZXQ6byxodHRwUG9zdDppLFN0b3JhZ2U6dCxJTzpzLGdldENyb3NzUHVibGlzaGVySWQ6ZnVuY3Rpb24oKXtyZXR1cm4gYygpLGF9LGdldEFwcE5hbWU6ZnVuY3Rpb24oKXtyZXR1cm4gZS5pc05vdEVtcHR5KGVuZ2luZS5zdGF0cy5hcHBsaWNhdGlvbi5uYW1lKT9lbmdpbmUuc3RhdHMuYXBwbGljYXRpb24ubmFtZTpDb25zdGFudHMuVU5LTk9XTl9WQUxVRX0sZ2V0QXBwVmVyc2lvbjpmdW5jdGlvbih0KXtyZXR1cm4gZS5pc05vdEVtcHR5KGVuZ2luZS5zdGF0cy5hcHBsaWNhdGlvbi52ZXJzaW9uKT9lbmdpbmUuc3RhdHMuYXBwbGljYXRpb24udmVyc2lvbjpDb25zdGFudHMuVU5LTk9XTl9WQUxVRX0sZ2V0VmlzaXRvcklkOmZ1bmN0aW9uKCl7cmV0dXJuIGMoKSxyfSxnZXRWaXNpdG9ySWRTdWZmaXg6ZnVuY3Rpb24oKXtyZXR1cm4gdX0sZ2V0RGV2aWNlTmFtZTpmdW5jdGlvbigpe3JldHVybiBlLnNhZmVHZXQoZW5naW5lLnN0YXRzLmRldmljZS5wbGF0Zm9ybSxcIlwiKX0sZ2V0UGxhdGZvcm1WZXJzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGUuc2FmZUdldChlbmdpbmUuc3RhdHMuZGV2aWNlLnZlcnNpb24sXCJcIil9LGdldFBsYXRmb3JtTmFtZTpmdW5jdGlvbigpe3JldHVyblwianNcIn0sZ2V0UnVudGltZU5hbWU6ZnVuY3Rpb24oKXtyZXR1cm5cInRyaWxpdGhpdW1cIn0sZ2V0UnVudGltZVZlcnNpb246ZnVuY3Rpb24oKXtyZXR1cm5cIlwifSxnZXRSZXNvbHV0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHR5cGVvZiBzY3JlZW4hPVwidW5kZWZpbmVkXCImJnR5cGVvZiBzY3JlZW4uaGVpZ2h0IT1cInVuZGVmaW5lZFwiJiZ0eXBlb2Ygc2NyZWVuLndpZHRoIT1cInVuZGVmaW5lZFwiP3NjcmVlbi5oZWlnaHQrXCJ4XCIrc2NyZWVuLndpZHRoOlwiXCJ9LGdldExhbmd1YWdlOmZ1bmN0aW9uKCl7cmV0dXJuXCJcIn0sZ2V0UGFja2FnZU5hbWU6ZnVuY3Rpb24oKXtyZXR1cm5cIlwifSxpc0Nvbm5lY3Rpb25BdmFpbGFibGU6ZnVuY3Rpb24oKXtyZXR1cm4hMH0saXNDb21wYXRpYmxlOmZ9fSgpO3UuYXV0b1NlbGVjdD1mdW5jdGlvbigpe2EuaXNDb21wYXRpYmxlKCkmJmUuZXh0ZW5kKHUsYSl9O3ZhciBmPXR5cGVvZiB3aW5kb3chPVwidW5kZWZpbmVkXCImJnR5cGVvZiBkb2N1bWVudCE9XCJ1bmRlZmluZWRcIixsLGM7Zj8obD13aW5kb3csYz1kb2N1bWVudCk6KGw9e30sYz17bG9jYXRpb246e2hyZWY6XCJcIn0sdGl0bGU6XCJcIixVUkw6XCJcIixyZWZlcnJlcjpcIlwiLGNvb2tpZTpcIlwifSk7dmFyIGU9ZXx8e307ZS5maWx0ZXJNYXA9ZnVuY3Rpb24odCxuKXtmb3IodmFyIHIgaW4gdCllLmluZGV4T2YocixuKT09LTEmJmRlbGV0ZSB0W3JdfSxlLmdldEtleXM9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdO2ZvcihuIGluIGUpKCF0fHx0LnRlc3QobikpJiZlLmhhc093blByb3BlcnR5KG4pJiYocltyLmxlbmd0aF09bik7cmV0dXJuIHJ9O3ZhciBkPWZ1bmN0aW9uKCl7dmFyIGU9W1wicGxheVwiLFwicGF1c2VcIixcImVuZFwiLFwiYnVmZmVyXCIsXCJrZWVwLWFsaXZlXCIsXCJoYlwiLFwiY3VzdG9tXCIsXCJhZF9wbGF5XCIsXCJhZF9wYXVzZVwiLFwiYWRfZW5kXCIsXCJhZF9jbGlja1wiXTtyZXR1cm57UExBWTowLFBBVVNFOjEsRU5EOjIsQlVGRkVSOjMsS0VFUF9BTElWRTo0LEhFQVJUX0JFQVQ6NSxDVVNUT006NixBRF9QTEFZOjcsQURfUEFVU0U6OCxBRF9FTkQ6OSxBRF9DTElDSzoxMCx0b1N0cmluZzpmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX19fSgpLHY9ZnVuY3Rpb24oKXt2YXIgZT1bZC5FTkQsZC5QTEFZLGQuUEFVU0UsZC5CVUZGRVJdO3JldHVybntJRExFOjAsUExBWUlORzoxLFBBVVNFRDoyLEJVRkZFUklORzozLHRvRXZlbnRUeXBlOmZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfX19KCksbT17QURQTEFZOmQuQURfUExBWSxBRFBBVVNFOmQuQURfUEFVU0UsQURFTkQ6ZC5BRF9FTkQsQURDTElDSzpkLkFEX0NMSUNLfSxnPXtTVFJFQU1TRU5TRV9WRVJTSU9OOlwiNC4xNDEyLjA1XCIsREVGQVVMVF9QTEFZRVJOQU1FOlwic3RyZWFtc2Vuc2VcIixERUZBVUxUX0hFQVJUQkVBVF9JTlRFUlZBTDpbe3BsYXlpbmd0aW1lOjZlNCxpbnRlcnZhbDoxZTR9LHtwbGF5aW5ndGltZTpudWxsLGludGVydmFsOjZlNH1dLERFRkFVTFRfS0VFUF9BTElWRV9JTlRFUlZBTDoxMmU1LERFRkFVTFRfUEFVU0VEX09OX0JVRkZFUklOR19JTlRFUlZBTDo1MDAsQzFfVkFMVUU6XCIxOVwiLEMxMF9WQUxVRTpcImpzXCIsTlNfQVBfQzEyTV9WQUxVRTpcIjFcIixOU19OQ19WQUxVRTpcIjFcIixQQUdFX05BTUVfTEFCRUw6XCJuYW1lXCIsUkVTVFJJQ1RFRF9VUkxfTEVOR1RIX0xJTUlUOjIwNDgsVVJMX0xFTkdUSF9MSU1JVDo0MDk2LExBQkVMU19PUkRFUjpbXCJjMVwiLFwiYzJcIixcImNhMlwiLFwiY2IyXCIsXCJjYzJcIixcImNkMlwiLFwibnNfc2l0ZVwiLFwiY2FfbnNfc2l0ZVwiLFwiY2JfbnNfc2l0ZVwiLFwiY2NfbnNfc2l0ZVwiLFwiY2RfbnNfc2l0ZVwiLFwibnNfdnNpdGVcIixcImNhX25zX3ZzaXRlXCIsXCJjYl9uc192c2l0ZVwiLFwiY2NfbnNfdnNpdGVcIixcImNkX25zX3ZzaXRlXCIsXCJuc19hcF9hblwiLFwiY2FfbnNfYXBfYW5cIixcImNiX25zX2FwX2FuXCIsXCJjY19uc19hcF9hblwiLFwiY2RfbnNfYXBfYW5cIixcIm5zX2FwX3BuXCIsXCJuc19hcF9wdlwiLFwiYzEyXCIsXCJjYTEyXCIsXCJjYjEyXCIsXCJjYzEyXCIsXCJjZDEyXCIsXCJuc19ha1wiLFwibnNfbnNfYXBfaHdcIixcIm5hbWVcIixcIm5zX2FwX25pXCIsXCJuc19hcF9lY1wiLFwibnNfYXBfZXZcIixcIm5zX2FwX2RldmljZVwiLFwibnNfYXBfaWRcIixcIm5zX2FwX2NzZlwiLFwibnNfYXBfYmlcIixcIm5zX2FwX3BmbVwiLFwibnNfYXBfcGZ2XCIsXCJuc19hcF92ZXJcIixcImNhX25zX2FwX3ZlclwiLFwiY2JfbnNfYXBfdmVyXCIsXCJjY19uc19hcF92ZXJcIixcImNkX25zX2FwX3ZlclwiLFwibnNfYXBfc3ZcIixcIm5zX2FwX2N2XCIsXCJuc190eXBlXCIsXCJjYV9uc190eXBlXCIsXCJjYl9uc190eXBlXCIsXCJjY19uc190eXBlXCIsXCJjZF9uc190eXBlXCIsXCJuc19yYWRpb1wiLFwibnNfbmNcIixcIm5zX2FwX3VpXCIsXCJjYV9uc19hcF91aVwiLFwiY2JfbnNfYXBfdWlcIixcImNjX25zX2FwX3VpXCIsXCJjZF9uc19hcF91aVwiLFwibnNfYXBfZ3NcIixcIm5zX3N0X3N2XCIsXCJuc19zdF9wdlwiLFwibnNfc3RfaXRcIixcIm5zX3N0X2lkXCIsXCJuc19zdF9lY1wiLFwibnNfc3Rfc3BcIixcIm5zX3N0X3NxXCIsXCJuc19zdF9jblwiLFwibnNfc3RfZXZcIixcIm5zX3N0X3BvXCIsXCJuc19zdF9jbFwiLFwibnNfc3RfZWxcIixcIm5zX3N0X3BiXCIsXCJuc19zdF9oY1wiLFwibnNfc3RfbXBcIixcImNhX25zX3N0X21wXCIsXCJjYl9uc19zdF9tcFwiLFwiY2NfbnNfc3RfbXBcIixcImNkX25zX3N0X21wXCIsXCJuc19zdF9tdlwiLFwiY2FfbnNfc3RfbXZcIixcImNiX25zX3N0X212XCIsXCJjY19uc19zdF9tdlwiLFwiY2RfbnNfc3RfbXZcIixcIm5zX3N0X3BuXCIsXCJuc19zdF90cFwiLFwibnNfc3RfcHRcIixcIm5zX3N0X3BhXCIsXCJuc19zdF9hZFwiLFwibnNfc3RfbGlcIixcIm5zX3N0X2NpXCIsXCJuc19hcF9qYlwiLFwibnNfYXBfcmVzXCIsXCJuc19hcF9jMTJtXCIsXCJuc19hcF9pbnN0YWxsXCIsXCJuc19hcF91cGRhdGVkXCIsXCJuc19hcF9sYXN0cnVuXCIsXCJuc19hcF9jc1wiLFwibnNfYXBfcnVuc1wiLFwibnNfYXBfdXNhZ2VcIixcIm5zX2FwX2ZnXCIsXCJuc19hcF9mdFwiLFwibnNfYXBfZGZ0XCIsXCJuc19hcF9idFwiLFwibnNfYXBfZGJ0XCIsXCJuc19hcF9kaXRcIixcIm5zX2FwX2FzXCIsXCJuc19hcF9kYXNcIixcIm5zX2FwX2l0XCIsXCJuc19hcF91Y1wiLFwibnNfYXBfYXVzXCIsXCJuc19hcF9kYXVzXCIsXCJuc19hcF91c1wiLFwibnNfYXBfZHVzXCIsXCJuc19hcF91dFwiLFwibnNfYXBfb2NcIixcIm5zX2FwX3V4Y1wiLFwibnNfYXBfdXhzXCIsXCJuc19hcF9sYW5nXCIsXCJuc19hcF9hclwiLFwibnNfYXBfbWlzc1wiLFwibnNfdHNcIixcIm5zX3N0X2NhXCIsXCJuc19zdF9jcFwiLFwibnNfc3RfZXJcIixcImNhX25zX3N0X2VyXCIsXCJjYl9uc19zdF9lclwiLFwiY2NfbnNfc3RfZXJcIixcImNkX25zX3N0X2VyXCIsXCJuc19zdF9wZVwiLFwibnNfc3RfdWlcIixcImNhX25zX3N0X3VpXCIsXCJjYl9uc19zdF91aVwiLFwiY2NfbnNfc3RfdWlcIixcImNkX25zX3N0X3VpXCIsXCJuc19zdF9iY1wiLFwibnNfc3RfYnRcIixcIm5zX3N0X2JwXCIsXCJuc19zdF9wY1wiLFwibnNfc3RfcHBcIixcIm5zX3N0X2JyXCIsXCJuc19zdF91YlwiLFwibnNfc3Rfdm9cIixcIm5zX3N0X3dzXCIsXCJuc19zdF9wbFwiLFwibnNfc3RfcHJcIixcIm5zX3N0X2VwXCIsXCJuc19zdF90eVwiLFwibnNfc3RfY3RcIixcIm5zX3N0X2NzXCIsXCJuc19zdF9nZVwiLFwibnNfc3Rfc3RcIixcIm5zX3N0X2R0XCIsXCJuc19zdF9kZVwiLFwibnNfc3RfcHVcIixcIm5zX3N0X2N1XCIsXCJuc19zdF9mZWVcIixcIm5zX2FwX2kxXCIsXCJuc19hcF9pMlwiLFwibnNfYXBfaTNcIixcIm5zX2FwX2k0XCIsXCJuc19hcF9pNVwiLFwibnNfYXBfaTZcIixcImMzXCIsXCJjYTNcIixcImNiM1wiLFwiY2MzXCIsXCJjZDNcIixcImM0XCIsXCJjYTRcIixcImNiNFwiLFwiY2M0XCIsXCJjZDRcIixcImM1XCIsXCJjYTVcIixcImNiNVwiLFwiY2M1XCIsXCJjZDVcIixcImM2XCIsXCJjYTZcIixcImNiNlwiLFwiY2M2XCIsXCJjZDZcIixcImMxMFwiLFwiYzExXCIsXCJjMTNcIixcImMxNFwiLFwiYzE1XCIsXCJjMTZcIixcImM3XCIsXCJjOFwiLFwiYzlcIl19LHk9ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGwoZSx0KXt2YXIgbj10W2VdO24hPW51bGwmJihmW2VdPW4pfXZhciB0PXRoaXMsbj0wLHI9MCxpPTAscz0wLG89MCx1PTAsYSxmO2UuZXh0ZW5kKHRoaXMse3Jlc2V0OmZ1bmN0aW9uKG4pe24hPW51bGwmJm4ubGVuZ3RoPjA/ZS5maWx0ZXJNYXAoZixuKTpmPXt9LGYuaGFzT3duUHJvcGVydHkoXCJuc19zdF9jbFwiKXx8KGYubnNfc3RfY2w9XCIwXCIpLGYuaGFzT3duUHJvcGVydHkoXCJuc19zdF9wblwiKXx8KGYubnNfc3RfcG49XCIxXCIpLGYuaGFzT3duUHJvcGVydHkoXCJuc19zdF90cFwiKXx8KGYubnNfc3RfdHA9XCIxXCIpLHQuc2V0UGF1c2VzKDApLHQuc2V0U3RhcnRzKDApLHQuc2V0QnVmZmVyaW5nVGltZSgwKSx0LnNldEJ1ZmZlcmluZ1RpbWVzdGFtcCgtMSksdC5zZXRQbGF5YmFja1RpbWUoMCksdC5zZXRQbGF5YmFja1RpbWVzdGFtcCgtMSl9LHNldExhYmVsczpmdW5jdGlvbihuLHIpe24hPW51bGwmJmUuZXh0ZW5kKGYsbiksdC5zZXRSZWdpc3RlcnMoZixyKX0sZ2V0TGFiZWxzOmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldExhYmVsOmZ1bmN0aW9uKGUsbil7dmFyIHI9e307cltlXT1uLHQuc2V0TGFiZWxzKHIsbnVsbCl9LGdldExhYmVsOmZ1bmN0aW9uKGUpe3JldHVybiBmW2VdfSxnZXRDbGlwSWQ6ZnVuY3Rpb24oKXtyZXR1cm4odHlwZW9mIGE9PVwidW5kZWZpbmVkXCJ8fGE9PW51bGwpJiZ0LnNldENsaXBJZChcIjFcIiksYX0sc2V0Q2xpcElkOmZ1bmN0aW9uKGUpe2E9ZX0sc2V0UmVnaXN0ZXJzOmZ1bmN0aW9uKGUscyl7dmFyIHU9ZS5uc19zdF9jbjt1IT1udWxsJiYodC5zZXRDbGlwSWQodSksZGVsZXRlIGUubnNfc3RfY24pLHU9ZS5uc19zdF9idCx1IT1udWxsJiYoaT1OdW1iZXIodSksZGVsZXRlIGUubnNfc3RfYnQpLGwoXCJuc19zdF9jbFwiLGUpLGwoXCJuc19zdF9wblwiLGUpLGwoXCJuc19zdF90cFwiLGUpLGwoXCJuc19zdF91YlwiLGUpLGwoXCJuc19zdF9iclwiLGUpO2lmKHM9PXYuUExBWUlOR3x8cz09bnVsbCl1PWUubnNfc3Rfc3EsdSE9bnVsbCYmKHI9TnVtYmVyKHUpLGRlbGV0ZSBlLm5zX3N0X3NxKTtzIT12LkJVRkZFUklORyYmKHU9ZS5uc19zdF9wdCx1IT1udWxsJiYobz1OdW1iZXIodSksZGVsZXRlIGUubnNfc3RfcHQpKTtpZihzPT12LlBBVVNFRHx8cz09di5JRExFfHxzPT1udWxsKXU9ZS5uc19zdF9wYyx1IT1udWxsJiYobj1OdW1iZXIodSksZGVsZXRlIGUubnNfc3RfcGMpfSxjcmVhdGVMYWJlbHM6ZnVuY3Rpb24oaSxzKXt2YXIgbz1zfHx7fTtvLm5zX3N0X2NuPXQuZ2V0Q2xpcElkKCksby5uc19zdF9idD1TdHJpbmcodC5nZXRCdWZmZXJpbmdUaW1lKCkpO2lmKGk9PWQuUExBWXx8aT09bnVsbClvLm5zX3N0X3NxPVN0cmluZyhyKTtpZihpPT1kLlBBVVNFfHxpPT1kLkVORHx8aT09ZC5LRUVQX0FMSVZFfHxpPT1kLkhFQVJUX0JFQVR8fGk9PW51bGwpby5uc19zdF9wdD1TdHJpbmcodC5nZXRQbGF5YmFja1RpbWUoKSksby5uc19zdF9wYz1TdHJpbmcobik7cmV0dXJuIGUuZXh0ZW5kKG8sdC5nZXRMYWJlbHMoKSksb30saW5jcmVtZW50UGF1c2VzOmZ1bmN0aW9uKCl7bisrfSxpbmNyZW1lbnRTdGFydHM6ZnVuY3Rpb24oKXtyKyt9LGdldEJ1ZmZlcmluZ1RpbWU6ZnVuY3Rpb24oKXt2YXIgZT1pO3JldHVybiBzPj0wJiYoZSs9KyhuZXcgRGF0ZSktcyksZX0sc2V0QnVmZmVyaW5nVGltZTpmdW5jdGlvbihlKXtpPWV9LGdldFBsYXliYWNrVGltZTpmdW5jdGlvbigpe3ZhciBlPW87cmV0dXJuIHU+PTAmJihlKz0rKG5ldyBEYXRlKS11KSxlfSxzZXRQbGF5YmFja1RpbWU6ZnVuY3Rpb24oZSl7bz1lfSxnZXRQbGF5YmFja1RpbWVzdGFtcDpmdW5jdGlvbigpe3JldHVybiB1fSxzZXRQbGF5YmFja1RpbWVzdGFtcDpmdW5jdGlvbihlKXt1PWV9LGdldEJ1ZmZlcmluZ1RpbWVzdGFtcDpmdW5jdGlvbigpe3JldHVybiBzfSxzZXRCdWZmZXJpbmdUaW1lc3RhbXA6ZnVuY3Rpb24oZSl7cz1lfSxnZXRQYXVzZXM6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0UGF1c2VzOmZ1bmN0aW9uKGUpe249ZX0sZ2V0U3RhcnRzOmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldFN0YXJ0czpmdW5jdGlvbihlKXtyPWV9fSksZj17fSx0LnJlc2V0KCl9O3JldHVybiB0fSgpLGI9ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMsbj1udWxsLHIsaT0wLHM9MCxvPTAsdT0wLGE9MCxmLGw9MCxjPSExO2UuZXh0ZW5kKHRoaXMse3Jlc2V0OmZ1bmN0aW9uKG4pe24hPW51bGwmJm4ubGVuZ3RoPjA/ZS5maWx0ZXJNYXAoZixuKTpmPXt9LHQuc2V0UGxheWxpc3RJZCgrKG5ldyBEYXRlKStcIl9cIitsKSx0LnNldEJ1ZmZlcmluZ1RpbWUoMCksdC5zZXRQbGF5YmFja1RpbWUoMCksdC5zZXRQYXVzZXMoMCksdC5zZXRTdGFydHMoMCksdC5zZXRSZWJ1ZmZlckNvdW50KDApLGM9ITF9LHNldExhYmVsczpmdW5jdGlvbihuLHIpe24hPW51bGwmJmUuZXh0ZW5kKGYsbiksdC5zZXRSZWdpc3RlcnMoZixyKX0sZ2V0TGFiZWxzOmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldExhYmVsOmZ1bmN0aW9uKGUsbil7dmFyIHI9e307cltlXT1uLHQuc2V0TGFiZWxzKHIsbnVsbCl9LGdldExhYmVsOmZ1bmN0aW9uKGUpe3JldHVybiBmW2VdfSxnZXRDbGlwOmZ1bmN0aW9uKCl7cmV0dXJuIG59LGdldFBsYXlsaXN0SWQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0UGxheWxpc3RJZDpmdW5jdGlvbihlKXtyPWV9LHNldFJlZ2lzdGVyczpmdW5jdGlvbihlLHQpe3ZhciBuPWUubnNfc3Rfc3A7biE9bnVsbCYmKGk9TnVtYmVyKG4pLGRlbGV0ZSBlLm5zX3N0X3NwKSxuPWUubnNfc3RfYmMsbiE9bnVsbCYmKG89TnVtYmVyKG4pLGRlbGV0ZSBlLm5zX3N0X2JjKSxuPWUubnNfc3RfYnAsbiE9bnVsbCYmKHU9TnVtYmVyKG4pLGRlbGV0ZSBlLm5zX3N0X2JwKSxuPWUubnNfc3RfaWQsbiE9bnVsbCYmKHI9bixkZWxldGUgZS5uc19zdF9pZCksdCE9di5CVUZGRVJJTkcmJihuPWUubnNfc3RfcGEsbiE9bnVsbCYmKGE9TnVtYmVyKG4pLGRlbGV0ZSBlLm5zX3N0X3BhKSk7aWYodD09di5QQVVTRUR8fHQ9PXYuSURMRXx8dD09bnVsbCluPWUubnNfc3RfcHAsbiE9bnVsbCYmKHM9TnVtYmVyKG4pLGRlbGV0ZSBlLm5zX3N0X3BwKX0sY3JlYXRlTGFiZWxzOmZ1bmN0aW9uKG4sdSl7dmFyIGE9dXx8e307YS5uc19zdF9icD1TdHJpbmcodC5nZXRCdWZmZXJpbmdUaW1lKCkpLGEubnNfc3Rfc3A9U3RyaW5nKGkpLGEubnNfc3RfaWQ9U3RyaW5nKHIpLG8+MCYmKGEubnNfc3RfYmM9U3RyaW5nKG8pKTtpZihuPT1kLlBBVVNFfHxuPT1kLkVORHx8bj09ZC5LRUVQX0FMSVZFfHxuPT1kLkhFQVJUX0JFQVR8fG49PW51bGwpYS5uc19zdF9wYT1TdHJpbmcodC5nZXRQbGF5YmFja1RpbWUoKSksYS5uc19zdF9wcD1TdHJpbmcocyk7aWYobj09ZC5QTEFZfHxuPT1udWxsKXQuZGlkRmlyc3RQbGF5T2NjdXJyZWQoKXx8KGEubnNfc3RfcGI9XCIxXCIsdC5zZXRGaXJzdFBsYXlPY2N1cnJlZCghMCkpO3JldHVybiBlLmV4dGVuZChhLHQuZ2V0TGFiZWxzKCkpLGF9LGluY3JlbWVudFN0YXJ0czpmdW5jdGlvbigpe2krK30saW5jcmVtZW50UGF1c2VzOmZ1bmN0aW9uKCl7cysrLG4uaW5jcmVtZW50UGF1c2VzKCl9LHNldFBsYXlsaXN0Q291bnRlcjpmdW5jdGlvbihlKXtsPWV9LGluY3JlbWVudFBsYXlsaXN0Q291bnRlcjpmdW5jdGlvbigpe2wrK30sYWRkUGxheWJhY2tUaW1lOmZ1bmN0aW9uKGUpe2lmKG4uZ2V0UGxheWJhY2tUaW1lc3RhbXAoKT49MCl7dmFyIHI9ZS1uLmdldFBsYXliYWNrVGltZXN0YW1wKCk7bi5zZXRQbGF5YmFja1RpbWVzdGFtcCgtMSksbi5zZXRQbGF5YmFja1RpbWUobi5nZXRQbGF5YmFja1RpbWUoKStyKSx0LnNldFBsYXliYWNrVGltZSh0LmdldFBsYXliYWNrVGltZSgpK3IpfX0sYWRkQnVmZmVyaW5nVGltZTpmdW5jdGlvbihlKXtpZihuLmdldEJ1ZmZlcmluZ1RpbWVzdGFtcCgpPj0wKXt2YXIgcj1lLW4uZ2V0QnVmZmVyaW5nVGltZXN0YW1wKCk7bi5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoLTEpLG4uc2V0QnVmZmVyaW5nVGltZShuLmdldEJ1ZmZlcmluZ1RpbWUoKStyKSx0LnNldEJ1ZmZlcmluZ1RpbWUodC5nZXRCdWZmZXJpbmdUaW1lKCkrcil9fSxnZXRCdWZmZXJpbmdUaW1lOmZ1bmN0aW9uKCl7dmFyIGU9dTtyZXR1cm4gbi5nZXRCdWZmZXJpbmdUaW1lc3RhbXAoKT49MCYmKGUrPSsobmV3IERhdGUpLW4uZ2V0QnVmZmVyaW5nVGltZXN0YW1wKCkpLGV9LHNldEJ1ZmZlcmluZ1RpbWU6ZnVuY3Rpb24oZSl7dT1lfSxnZXRQbGF5YmFja1RpbWU6ZnVuY3Rpb24oKXt2YXIgZT1hO3JldHVybiBuLmdldFBsYXliYWNrVGltZXN0YW1wKCk+PTAmJihlKz0rKG5ldyBEYXRlKS1uLmdldFBsYXliYWNrVGltZXN0YW1wKCkpLGV9LHNldFBsYXliYWNrVGltZTpmdW5jdGlvbihlKXthPWV9LGdldFN0YXJ0czpmdW5jdGlvbigpe3JldHVybiBpfSxzZXRTdGFydHM6ZnVuY3Rpb24oZSl7aT1lfSxnZXRQYXVzZXM6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0UGF1c2VzOmZ1bmN0aW9uKGUpe3M9ZX0sZ2V0UmVidWZmZXJDb3VudDpmdW5jdGlvbigpe3JldHVybiBvfSxpbmNyZW1lbnRSZWJ1ZmZlckNvdW50OmZ1bmN0aW9uKCl7bysrfSxzZXRSZWJ1ZmZlckNvdW50OmZ1bmN0aW9uKGUpe289ZX0sZGlkRmlyc3RQbGF5T2NjdXJyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gY30sc2V0Rmlyc3RQbGF5T2NjdXJyZWQ6ZnVuY3Rpb24oZSl7Yz1lfX0pLG49bmV3IHksZj17fSx0LnJlc2V0KCl9O3JldHVybiB0fSgpLHc9ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbih0LG4pe2Z1bmN0aW9uIHEoZSl7dmFyIHQ9MDtpZihrIT1udWxsKWZvcih2YXIgbj0wO248ay5sZW5ndGg7bisrKXt2YXIgcj1rW25dLGk9ci5wbGF5aW5ndGltZTtpZighaXx8ZTxpKXt0PXIuaW50ZXJ2YWw7YnJlYWt9fXJldHVybiB0fWZ1bmN0aW9uIFIoKXtYKCk7dmFyIGU9cSh3LmdldENsaXAoKS5nZXRQbGF5YmFja1RpbWUoKSk7aWYoZT4wKXt2YXIgdD1PPjA/TzplO0M9c2V0VGltZW91dChXLHQpfU89MH1mdW5jdGlvbiBVKCl7WCgpO3ZhciBlPXEody5nZXRDbGlwKCkuZ2V0UGxheWJhY2tUaW1lKCkpO089ZS13LmdldENsaXAoKS5nZXRQbGF5YmFja1RpbWUoKSVlLEMhPW51bGwmJlgoKX1mdW5jdGlvbiB6KCl7Tz0wLF89MCxNPTB9ZnVuY3Rpb24gVygpe00rKzt2YXIgZT1tdChkLkhFQVJUX0JFQVQsbnVsbCk7cnQoZSksTz0wLFIoKX1mdW5jdGlvbiBYKCl7QyE9bnVsbCYmKGNsZWFyVGltZW91dChDKSxDPW51bGwpfWZ1bmN0aW9uIFYoKXtKKCksTj1zZXRUaW1lb3V0KCQsTCl9ZnVuY3Rpb24gJCgpe3ZhciBlPW10KGQuS0VFUF9BTElWRSxudWxsKTtydChlKSx5KyssVigpfWZ1bmN0aW9uIEooKXtOIT1udWxsJiYoY2xlYXJUaW1lb3V0KE4pLE49bnVsbCl9ZnVuY3Rpb24gSygpe0coKSxyLmlzUGF1c2VPbkJ1ZmZlcmluZ0VuYWJsZWQoKSYmYXQodi5QQVVTRUQpJiYoeD1zZXRUaW1lb3V0KFEsQSkpfWZ1bmN0aW9uIFEoKXtpZihQPT12LlBMQVlJTkcpe3cuaW5jcmVtZW50UmVidWZmZXJDb3VudCgpLHcuaW5jcmVtZW50UGF1c2VzKCk7dmFyIGU9bXQoZC5QQVVTRSxudWxsKTtydChlKSx5KyssUD12LlBBVVNFRH19ZnVuY3Rpb24gRygpe3ghPW51bGwmJihjbGVhclRpbWVvdXQoeCkseD1udWxsKX1mdW5jdGlvbiBZKGUpe3JldHVybiBlPT12LlBMQVlJTkd8fGU9PXYuUEFVU0VEfWZ1bmN0aW9uIFooKXtsJiYoY2xlYXJUaW1lb3V0KGwpLGw9bnVsbCl9ZnVuY3Rpb24gZXQoZSl7cmV0dXJuIGU9PWQuUExBWT92LlBMQVlJTkc6ZT09ZC5QQVVTRT92LlBBVVNFRDplPT1kLkJVRkZFUj92LkJVRkZFUklORzplPT1kLkVORD92LklETEU6bnVsbH1mdW5jdGlvbiB0dCh0LG4scil7WigpO2lmKHIpbD1zZXRUaW1lb3V0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7dHQoZSx0KX19KHQsbikscik7ZWxzZSBpZihjdCh0KSl7dmFyIGk9cHQoKSxzPWEsbz1sdChuKSx1PXM+PTA/by1zOjA7b3QocHQoKSxuKSx1dCh0LG4pLGR0KHB0KCkpLGh0KHQpO2Zvcih2YXIgZj0wLGM9Ri5sZW5ndGg7ZjxjO2YrKylGW2ZdKGksdCxuLHUpO250KG4pLHcuc2V0UmVnaXN0ZXJzKG4sdCksdy5nZXRDbGlwKCkuc2V0UmVnaXN0ZXJzKG4sdCk7dmFyIGg9bXQodi50b0V2ZW50VHlwZSh0KSxuKTtlLmV4dGVuZChoLG4pLGF0KG0pJiYocnQoaCksUD1tLHkrKyl9fWZ1bmN0aW9uIG50KGUpe3ZhciB0PWUubnNfc3RfbXA7dCE9bnVsbCYmKEg9dCxkZWxldGUgZS5uc19zdF9tcCksdD1lLm5zX3N0X212LHQhPW51bGwmJihCPXQsZGVsZXRlIGUubnNfc3RfbXYpLHQ9ZS5uc19zdF9lYyx0IT1udWxsJiYoeT1OdW1iZXIodCksZGVsZXRlIGUubnNfc3RfZWMpfWZ1bmN0aW9uIHJ0KGUsdCl7dD09PXVuZGVmaW5lZCYmKHQ9ITApLHQmJnN0KGUpO3ZhciBuPXIuZ2V0UGl4ZWxVUkwoKTtpZihFKXtpZighaXQoKSl7dmFyIGk9SS5hbSxzPUkuZXQsbz1pLm5ld0FwcGxpY2F0aW9uTWVhc3VyZW1lbnQoRSxzLkhJRERFTixlLG4pO0UuZ2V0UXVldWUoKS5vZmZlcihvKX19ZWxzZSBuJiZ1Lmh0dHBHZXQocChuLGUpKX1mdW5jdGlvbiBpdCgpe3ZhciBlPUUuZ2V0QXBwQ29udGV4dCgpLHQ9RS5nZXRTYWx0KCksbj1FLmdldFBpeGVsVVJMKCk7cmV0dXJuIGU9PW51bGx8fHQ9PW51bGx8fHQubGVuZ3RoPT0wfHxuPT1udWxsfHxuLmxlbmd0aD09MH1mdW5jdGlvbiBzdCh0KXtqPW10KG51bGwpLGUuZXh0ZW5kKGosdCl9ZnVuY3Rpb24gb3QodCxuKXt2YXIgcj1sdChuKTtpZih0PT12LlBMQVlJTkcpdy5hZGRQbGF5YmFja1RpbWUociksVSgpLEooKTtlbHNlIGlmKHQ9PXYuQlVGRkVSSU5HKXcuYWRkQnVmZmVyaW5nVGltZShyKSxHKCk7ZWxzZSBpZih0PT12LklETEUpe3ZhciBpPWUuZ2V0S2V5cyh3LmdldENsaXAoKS5nZXRMYWJlbHMoKSk7dy5nZXRDbGlwKCkucmVzZXQoaSl9fWZ1bmN0aW9uIHV0KGUsdCl7dmFyIG49bHQodCkscj1mdCh0KTtmPXIsZT09di5QTEFZSU5HPyhSKCksVigpLHcuZ2V0Q2xpcCgpLnNldFBsYXliYWNrVGltZXN0YW1wKG4pLGF0KGUpJiYody5nZXRDbGlwKCkuaW5jcmVtZW50U3RhcnRzKCksdy5nZXRTdGFydHMoKTwxJiZ3LnNldFN0YXJ0cygxKSkpOmU9PXYuUEFVU0VEP2F0KGUpJiZ3LmluY3JlbWVudFBhdXNlcygpOmU9PXYuQlVGRkVSSU5HPyh3LmdldENsaXAoKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAobiksVCYmSygpKTplPT12LklETEUmJnooKX1mdW5jdGlvbiBhdChlKXtyZXR1cm4gZSE9di5QQVVTRUQmJmUhPXYuSURMRXx8UCE9di5JRExFJiZQIT1udWxsP2UhPXYuQlVGRkVSSU5HJiZQIT1lOiExfWZ1bmN0aW9uIGZ0KHQpe3ZhciBuPS0xO3JldHVybiB0Lmhhc093blByb3BlcnR5KFwibnNfc3RfcG9cIikmJihuPWUuZ2V0SW50ZWdlcih0Lm5zX3N0X3BvKSksbn1mdW5jdGlvbiBsdChlKXt2YXIgdD0tMTtyZXR1cm4gZS5oYXNPd25Qcm9wZXJ0eShcIm5zX3RzXCIpJiYodD1OdW1iZXIoZS5uc190cykpLHR9ZnVuY3Rpb24gY3QoZSl7cmV0dXJuIGUhPW51bGwmJnB0KCkhPWV9ZnVuY3Rpb24gaHQoZSl7bT1lLGE9KyhuZXcgRGF0ZSl9ZnVuY3Rpb24gcHQoKXtyZXR1cm4gbX1mdW5jdGlvbiBkdChlKXtjPWV9ZnVuY3Rpb24gdnQoKXtyZXR1cm4gY31mdW5jdGlvbiBtdCgpe3ZhciB0LG47YXJndW1lbnRzLmxlbmd0aD09MT8odD12LnRvRXZlbnRUeXBlKG0pLG49YXJndW1lbnRzWzBdKToodD1hcmd1bWVudHNbMF0sbj1hcmd1bWVudHNbMV0pO3ZhciBpPXt9O2lmKHR5cGVvZiBkb2N1bWVudCE9XCJ1bmRlZmluZWRcIil7dmFyIHM9ZG9jdW1lbnQ7aS5jNz1zLlVSTCxpLmM4PXMudGl0bGUsaS5jOT1zLnJlZmVycmVyfXJldHVybiBuIT1udWxsJiZlLmV4dGVuZChpLG4pLGkuaGFzT3duUHJvcGVydHkoXCJuc190c1wiKXx8KGkubnNfdHM9U3RyaW5nKCsobmV3IERhdGUpKSksdCE9bnVsbCYmIWkuaGFzT3duUHJvcGVydHkoXCJuc19zdF9ldlwiKSYmKGkubnNfc3RfZXY9ZC50b1N0cmluZyh0KSksci5pc1BlcnNpc3RlbnRMYWJlbHNTaGFyZWQoKSYmRSYmZS5leHRlbmQoaSxFLmdldExhYmVscygpKSxlLmV4dGVuZChpLHIuZ2V0TGFiZWxzKCkpLGd0KHQsaSksdy5jcmVhdGVMYWJlbHModCxpKSx3LmdldENsaXAoKS5jcmVhdGVMYWJlbHModCxpKSxpLmhhc093blByb3BlcnR5KFwibnNfc3RfbXBcIil8fChpLm5zX3N0X21wPUgpLGkuaGFzT3duUHJvcGVydHkoXCJuc19zdF9tdlwiKXx8KGkubnNfc3RfbXY9QiksaS5oYXNPd25Qcm9wZXJ0eShcIm5zX3N0X3ViXCIpfHwoaS5uc19zdF91Yj1cIjBcIiksaS5oYXNPd25Qcm9wZXJ0eShcIm5zX3N0X2JyXCIpfHwoaS5uc19zdF9icj1cIjBcIiksaS5oYXNPd25Qcm9wZXJ0eShcIm5zX3N0X3BuXCIpfHwoaS5uc19zdF9wbj1cIjFcIiksaS5oYXNPd25Qcm9wZXJ0eShcIm5zX3N0X3RwXCIpfHwoaS5uc19zdF90cD1cIjFcIiksaS5oYXNPd25Qcm9wZXJ0eShcIm5zX3N0X2l0XCIpfHwoaS5uc19zdF9pdD1cImNcIiksaS5uc19zdF9zdj1nLlNUUkVBTVNFTlNFX1ZFUlNJT04saS5uc190eXBlPVwiaGlkZGVuXCIsaX1mdW5jdGlvbiBndCh0LG4pe3ZhciByPW58fHt9O3IubnNfc3RfZWM9U3RyaW5nKHkpO2lmKCFyLmhhc093blByb3BlcnR5KFwibnNfc3RfcG9cIikpe3ZhciBpPWYscz1sdChyKTtpZih0PT1kLlBMQVl8fHQ9PWQuS0VFUF9BTElWRXx8dD09ZC5IRUFSVF9CRUFUfHx0PT1udWxsJiZtPT12LlBMQVlJTkcpaSs9cy13LmdldENsaXAoKS5nZXRQbGF5YmFja1RpbWVzdGFtcCgpO3IubnNfc3RfcG89ZS5nZXRJbnRlZ2VyKGkpfXJldHVybiB0PT1kLkhFQVJUX0JFQVQmJihyLm5zX3N0X2hjPVN0cmluZyhNKSkscn1mdW5jdGlvbiB5dChlKXt2YXIgdD1sdChlKTt0PDAmJihlLm5zX3RzPVN0cmluZygrKG5ldyBEYXRlKSkpfWZ1bmN0aW9uIGJ0KGUsdCxuKXt0PXR8fHt9LHQubnNfc3RfYWQ9MSxlPj1kLkFEX1BMQVkmJmU8PWQuQURfQ0xJQ0smJnIubm90aWZ5KGUsdCxuKX1mdW5jdGlvbiB3dChlLHQpe3Iubm90aWZ5KGQuQ1VTVE9NLGUsdCl9dmFyIHI9dGhpcyxpPTUwMCxzLG89bnVsbCxhPTAsZj0wLGwsYyxtLHk9MCx3PW51bGwsRSxTPSEwLHgsVD0hMCxOLEMsaz1nLkRFRkFVTFRfSEVBUlRCRUFUX0lOVEVSVkFMLEw9Zy5ERUZBVUxUX0tFRVBfQUxJVkVfSU5URVJWQUwsQT1nLkRFRkFVTFRfUEFVU0VEX09OX0JVRkZFUklOR19JTlRFUlZBTCxPPTAsTT0wLF89MCxEPSExLFAsSCxCLGosRixJPXt9O3UuYXV0b1NlbGVjdCgpLGUuZXh0ZW5kKHRoaXMse3Jlc2V0OmZ1bmN0aW9uKHQpe3cucmVzZXQodCksdy5zZXRQbGF5bGlzdENvdW50ZXIoMCksdy5zZXRQbGF5bGlzdElkKCsobmV3IERhdGUpK1wiXzFcIiksdy5nZXRDbGlwKCkucmVzZXQodCksdCE9bnVsbCYmIXQuaXNFbXB0eSgpP2UuZmlsdGVyTWFwKHMsdCk6cz17fSx5PTEsTT0wLFUoKSx6KCksSigpLEcoKSxaKCksbT12LklETEUsYz1udWxsLGE9LTEsUD1udWxsLEg9Zy5ERUZBVUxUX1BMQVlFUk5BTUUsQj1nLlNUUkVBTVNFTlNFX1ZFUlNJT04saj1udWxsfSxzZXRQYXVzZU9uQnVmZmVyaW5nSW50ZXJ2YWw6ZnVuY3Rpb24oZSl7QT1lfSxnZXRQYXVzZU9uQnVmZmVyaW5nSW50ZXJ2YWw6ZnVuY3Rpb24oKXtyZXR1cm4gQX0sc2V0S2VlcEFsaXZlSW50ZXJ2YWw6ZnVuY3Rpb24oZSl7TD1lfSxnZXRLZWVwQWxpdmVJbnRlcnZhbDpmdW5jdGlvbigpe3JldHVybiBMfSxzZXRIZWFydGJlYXRJbnRlcnZhbHM6ZnVuY3Rpb24oZSl7az1lfSxub3RpZnk6ZnVuY3Rpb24oKXt2YXIgdCxuLHMsbztuPWFyZ3VtZW50c1swXSxhcmd1bWVudHMubGVuZ3RoPT0zPyhzPWFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50c1syXSk6KHM9e30sbz1hcmd1bWVudHNbMV0pLHQ9ZXQobik7dmFyIHU9ZS5leHRlbmQoe30scyk7eXQodSksdS5oYXNPd25Qcm9wZXJ0eShcIm5zX3N0X3BvXCIpfHwodS5uc19zdF9wbz1lLmdldEludGVnZXIobykudG9TdHJpbmcoKSk7aWYobj09ZC5QTEFZfHxuPT1kLlBBVVNFfHxuPT1kLkJVRkZFUnx8bj09ZC5FTkQpci5pc1BhdXNlUGxheVN3aXRjaERlbGF5RW5hYmxlZCgpJiZZKG0pJiZZKHQpJiYobSE9di5QTEFZSU5HfHx0IT12LlBBVVNFRHx8ISFsKT90dCh0LHUsaSk6dHQodCx1KTtlbHNle3ZhciBhPW10KG4sdSk7ZS5leHRlbmQoYSx1KSxydChhLCExKSx5Kyt9fSxnZXRMYWJlbHM6ZnVuY3Rpb24oKXtyZXR1cm4gc30sZ2V0U3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gbX0sc2V0TGFiZWxzOmZ1bmN0aW9uKHQpe3QhPW51bGwmJihzPT1udWxsP3M9dDplLmV4dGVuZChzLHQpKX0sZ2V0TGFiZWw6ZnVuY3Rpb24oZSl7cmV0dXJuIHNbZV19LHNldExhYmVsOmZ1bmN0aW9uKGUsdCl7dD09bnVsbD9kZWxldGUgc1tlXTpzW2VdPXR9LHNldFBpeGVsVVJMOmZ1bmN0aW9uKGUpe2lmKGU9PW51bGx8fGUubGVuZ3RoPT0wKXJldHVybiBudWxsO3ZhciB0PWRlY29kZVVSSUNvbXBvbmVudHx8dW5lc2NhcGUsbj1lLmluZGV4T2YoXCI/XCIpO2lmKG4+PTApe2lmKG48ZS5sZW5ndGgtMSl7dmFyIGk9ZS5zdWJzdHJpbmcobisxKS5zcGxpdChcIiZcIik7Zm9yKHZhciBzPTAsdT1pLmxlbmd0aDtzPHU7cysrKXt2YXIgYT1pW3NdLGY9YS5zcGxpdChcIj1cIik7Zi5sZW5ndGg9PTI/ci5zZXRMYWJlbChmWzBdLHQoZlsxXSkpOmYubGVuZ3RoPT0xJiZyLnNldExhYmVsKGcuUEFHRV9OQU1FX0xBQkVMLHQoZlswXSkpfWU9ZS5zdWJzdHJpbmcoMCxuKzEpfX1lbHNlIGUrPVwiP1wiO3JldHVybiBvPWUsb30sZ2V0UGl4ZWxVUkw6ZnVuY3Rpb24oKXtyZXR1cm4gbz9vOnR5cGVvZiBuc19wIT1cInVuZGVmaW5lZFwiJiZ0eXBlb2YgbnNfcC5zcmM9PVwic3RyaW5nXCI/bz1uc19wLnNyYy5yZXBsYWNlKC8mYW1wOy8sXCImXCIpLnJlcGxhY2UoLyZuc19fdD1cXGQrLyxcIlwiKTp0eXBlb2YgbnNfcGl4ZWxVcmw9PVwic3RyaW5nXCI/bz1uc19waXhlbFVybC5yZXBsYWNlKC8mYW1wOy8sXCImXCIpLnJlcGxhY2UoLyZuc19fdD1cXGQrLyxcIlwiKTpudWxsfSxpc1BlcnNpc3RlbnRMYWJlbHNTaGFyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gU30sc2V0UGVyc2lzdGVudExhYmVsc1NoYXJlZDpmdW5jdGlvbihlKXtTPWV9LGlzUGF1c2VPbkJ1ZmZlcmluZ0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gVH0sc2V0UGF1c2VPbkJ1ZmZlcmluZ0VuYWJsZWQ6ZnVuY3Rpb24oZSl7VD1lfSxpc1BhdXNlUGxheVN3aXRjaERlbGF5RW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBEfSxzZXRQYXVzZVBsYXlTd2l0Y2hEZWxheUVuYWJsZWQ6ZnVuY3Rpb24oZSl7RD1lfSxzZXRQYXVzZVBsYXlTd2l0Y2hEZWxheTpmdW5jdGlvbihlKXtlJiZlPjAmJihpPWUpfSxnZXRQYXVzZVBsYXlTd2l0Y2hEZWxheTpmdW5jdGlvbigpe3JldHVybiBpfSxzZXRDbGlwOmZ1bmN0aW9uKGUsdCl7dmFyIG49ITE7cmV0dXJuIG09PXYuSURMRSYmKHcuZ2V0Q2xpcCgpLnJlc2V0KCksdy5nZXRDbGlwKCkuc2V0TGFiZWxzKGUsbnVsbCksdCYmdy5pbmNyZW1lbnRTdGFydHMoKSxuPSEwKSxufSxzZXRQbGF5bGlzdDpmdW5jdGlvbihlKXt2YXIgdD0hMTtyZXR1cm4gbT09di5JRExFJiYody5pbmNyZW1lbnRQbGF5bGlzdENvdW50ZXIoKSx3LnJlc2V0KCksdy5nZXRDbGlwKCkucmVzZXQoKSx3LnNldExhYmVscyhlLG51bGwpLHQ9ITApLHR9LGltcG9ydFN0YXRlOmZ1bmN0aW9uKHQpe3Jlc2V0KCk7dmFyIG49ZS5leHRlbmQoe30sdCk7dy5zZXRSZWdpc3RlcnMobixudWxsKSx3LmdldENsaXAoKS5zZXRSZWdpc3RlcnMobixudWxsKSxudChuKSx5Kyt9LGV4cG9ydFN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGp9LGdldFZlcnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gZy5TVFJFQU1TRU5TRV9WRVJTSU9OfSxhZGRMaXN0ZW5lcjpmdW5jdGlvbihlKXtGLnB1c2goZSl9LHJlbW92ZUxpc3RlbmVyOmZ1bmN0aW9uKHQpe0Yuc3BsaWNlKGUuaW5kZXhPZih0LEYpLDEpfSxnZXRDbGlwOmZ1bmN0aW9uKCl7cmV0dXJuIHcuZ2V0Q2xpcCgpfSxnZXRQbGF5bGlzdDpmdW5jdGlvbigpe3JldHVybiB3fX0pLGUuZXh0ZW5kKHRoaXMse2FkTm90aWZ5OmJ0LGN1c3RvbU5vdGlmeTp3dCx2aWV3Tm90aWZ5OmZ1bmN0aW9uKGUsdCl7ZT1lfHxyLmdldFBpeGVsVVJMKCksZSYmaChlLHQpfX0pLG5zXy5jb21TY29yZSYmKEk9bnNfLmNvbVNjb3JlLmV4cG9ydHMsRT1JLmMoKSkscz17fSx5PTEsbT12LklETEUsdz1uZXcgYix4PW51bGwsVD0hMCxDPW51bGwsTT0wLHooKSxOPW51bGwsbD1udWxsLEQ9ITEsUD1udWxsLGY9MCxGPVtdLHIucmVzZXQoKSx0JiZyLnNldExhYmVscyh0KSxuJiZyLnNldFBpeGVsVVJMKG4pfTtyZXR1cm4gZnVuY3Rpb24odCl7ZnVuY3Rpb24gcyhlLHQpe3JldHVybiBuW2ldfHx1KGUsdCl9ZnVuY3Rpb24gbygpe2k9LTE7Zm9yKHZhciBlPTA7ZTw9cjtlKyspaWYobi5oYXNPd25Qcm9wZXJ0eShlKSl7aT1lO2JyZWFrfXJldHVybiBuc18uU3RyZWFtU2Vuc2UuYWN0aXZlSW5kZXg9aSxpfWZ1bmN0aW9uIHUoZSx0KXtyZXR1cm4gZT1lfHxudWxsLHQ9dHx8bnVsbCxlJiZ0eXBlb2YgZT09XCJvYmplY3RcIiYmKHQ9ZSxlPW51bGwpLG5bKytyXT1uZXcgbnNfLlN0cmVhbVNlbnNlKHQsZSksbygpLG5bcl19ZnVuY3Rpb24gYSgpe3ZhciBlPSExLHQ9aTtpZih0eXBlb2YgYXJndW1lbnRzWzBdPT1cIm51bWJlclwiJiZpc0Zpbml0ZShhcmd1bWVudHNbMF0pKXQ9YXJndW1lbnRzWzBdO2Vsc2UgaWYoYXJndW1lbnRzWzBdaW5zdGFuY2VvZiBuc18uU3RyZWFtU2Vuc2UpZm9yKHZhciByIGluIG4paWYobltyXT09PWFyZ3VtZW50c1swXSl7dD1yO2JyZWFrfXJldHVybiBuLmhhc093blByb3BlcnR5KHQpJiYoZT1uW3RdLGRlbGV0ZSBuW3RdLGUucmVzZXQoKSxvKCkpLGV9ZnVuY3Rpb24gZihlKXtyZXR1cm4gZT1lfHx7fSxzKCkuc2V0UGxheWxpc3QoZSkscygpLmdldFBsYXlsaXN0KCl9ZnVuY3Rpb24gbChlLHQsbil7cmV0dXJuIGU9ZXx8e30sdHlwZW9mIHQ9PVwibnVtYmVyXCImJihlLm5zX3N0X2NuPXQpLHMoKS5zZXRDbGlwKGUsbikscygpLmdldENsaXAoKX1mdW5jdGlvbiBjKGUsdCxuKXtyZXR1cm4gdHlwZW9mIGU9PVwidW5kZWZpbmVkXCI/ITE6KG49bnx8bnVsbCx0PXR8fHt9LHMoKS5ub3RpZnkoZSx0LG4pKX1mdW5jdGlvbiBoKGUpe3R5cGVvZiBlIT1cInVuZGVmaW5lZFwiJiZzKCkuc2V0TGFiZWxzKGUpfWZ1bmN0aW9uIHAoKXtyZXR1cm4gcygpLmdldExhYmVscygpfWZ1bmN0aW9uIGQoZSl7dHlwZW9mIGUhPVwidW5kZWZpbmVkXCImJnMoKS5nZXRQbGF5bGlzdCgpLnNldExhYmVscyhlKX1mdW5jdGlvbiB2KCl7cmV0dXJuIHMoKS5nZXRQbGF5bGlzdCgpLmdldExhYmVscygpfWZ1bmN0aW9uIG0oZSl7dHlwZW9mIGUhPVwidW5kZWZpbmVkXCImJnMoKS5nZXRDbGlwKCkuc2V0TGFiZWxzKGUpfWZ1bmN0aW9uIGcoKXtyZXR1cm4gcygpLmdldENsaXAoKS5nZXRMYWJlbHMoKX1mdW5jdGlvbiB5KGUpe3JldHVybiBzKCkucmVzZXQoZXx8e30pfWZ1bmN0aW9uIGIoZSl7cmV0dXJuIHMoKS5nZXRQbGF5bGlzdCgpLnJlc2V0KGV8fHt9KX1mdW5jdGlvbiB3KGUpe3JldHVybiBzKCkuZ2V0Q2xpcCgpLnJlc2V0KGV8fHt9KX1mdW5jdGlvbiBFKGUpe3JldHVybiBlPWV8fHt9LHMoKS52aWV3Tm90aWZ5KG51bGwsZSl9ZnVuY3Rpb24gUyhlLHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjImJihlPWFyZ3VtZW50c1sxXSx0PWFyZ3VtZW50c1syXSksZT1lfHx7fSx0eXBlb2YgdD09XCJudW1iZXJcIiYmKGUubnNfc3RfcG89dCkscygpLmN1c3RvbU5vdGlmeShlLHQpfWZ1bmN0aW9uIHgoKXtyZXR1cm4gcygpLmV4cG9ydFN0YXRlKCl9ZnVuY3Rpb24gVChlKXtzKCkuaW1wb3J0U3RhdGUoZSl9dmFyIG49e30scj0tMSxpPS0xO2UuZXh0ZW5kKHQse2FjdGl2ZUluZGV4OmksbmV3SW5zdGFuY2U6dSxcIm5ld1wiOnUsZGVzdHJveUluc3RhbmNlOmEsZGVzdHJveTphLG5ld1BsYXlsaXN0OmYsbmV3Q2xpcDpsLG5vdGlmeTpjLHNldExhYmVsczpoLGdldExhYmVsczpwLHNldFBsYXlsaXN0TGFiZWxzOmQsZ2V0UGxheWxpc3RMYWJlbHM6dixzZXRDbGlwTGFiZWxzOm0sZ2V0Q2xpcExhYmVsczpnLHJlc2V0SW5zdGFuY2U6eSxyZXNldFBsYXlsaXN0OmIscmVzZXRDbGlwOncsdmlld0V2ZW50OkUsY3VzdG9tRXZlbnQ6UyxleHBvcnRTdGF0ZTp4LGltcG9ydFN0YXRlOlR9KX0odCksdH0oKTtyZXR1cm4gdy5BZEV2ZW50cz1tLHcuUGxheWVyRXZlbnRzPWQsbnNfLlN0cmVhbWluZ1RhZz1uc18uU3RyZWFtaW5nVGFnfHxmdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gaCgpe2lmKCFuc18uY29tU2NvcmUmJmUuZXhpc3RzKHQpKXtmPWUuaXNUcnVlKHQuZGVidWcpO2lmKGUuZXhpc3RzKHQuY3VzdG9tZXJDMikpe3ZhciBuPXQuc2VjdXJlP1wiaHR0cHM6Ly9zYlwiOlwiaHR0cFwiKyhkb2N1bWVudC5sb2NhdGlvbi5ocmVmLmNoYXJBdCg0KT09XCJzXCI/XCJzOi8vc2JcIjpcIjovL2JcIik7YS5zZXRQaXhlbFVSTChuK1wiLnNjb3JlY2FyZHJlc2VhcmNoLmNvbS9wP2MxPTJcIiksYS5zZXRMYWJlbChcImMyXCIsdC5jdXN0b21lckMyKX1lbHNlIGEuc2V0UGl4ZWxVUkwoXCJcIiksZiYmY29uc29sZS5sb2coXCJXYXJuaW5nOiBjdXN0b21lckMyIGlzIG5vdCBwcm92aWRlZCAob3IgaW5jb3JyZWN0KSBpbiB0aGUgU3RyZWFtaW5nVGFnIGNvbmZpZ3VyYXRpb24uXCIpfWEuc2V0TGFiZWwoXCJuc19zdF9pdFwiLFwiclwiKX1mdW5jdGlvbiBwKHQpe3JldHVybiBlLmV4aXN0cyh0KXx8KHQ9e30pLGUuZXhpc3RzKHQubnNfc3RfY2kpfHwodC5uc19zdF9jaT1cIjBcIiksZS5leGlzdHModC5jMyl8fCh0LmMzPVwiKm51bGxcIiksZS5leGlzdHModC5jNCl8fCh0LmM0PVwiKm51bGxcIiksZS5leGlzdHModC5jNil8fCh0LmM2PVwiKm51bGxcIiksdH1mdW5jdGlvbiBtKGUpe3JldHVybiBpPjAmJmU+PWk/cys9ZS1pOnM9MCxzfWZ1bmN0aW9uIGcoZSl7YS5nZXRTdGF0ZSgpIT12LklETEUmJmEuZ2V0U3RhdGUoKSE9di5QQVVTRUQ/YS5ub3RpZnkoZC5FTkQsbShlKSk6YS5nZXRTdGF0ZSgpPT12LlBBVVNFRCYmYS5ub3RpZnkoZC5FTkQscyl9ZnVuY3Rpb24geShlKXtyZXR1cm4gYihcIm5zX3N0X2NpXCIsbyxlKSYmYihcImMzXCIsbyxlKSYmYihcImM0XCIsbyxlKSYmYihcImM2XCIsbyxlKX1mdW5jdGlvbiBiKHQsbixyKXtpZihlLmV4aXN0cyh0KSYmZS5leGlzdHMobikmJmUuZXhpc3RzKHIpKXt2YXIgaT1uW3RdLHM9clt0XTtyZXR1cm4gZS5leGlzdHMoaSkmJmUuZXhpc3RzKHMpJiZpPT09c31yZXR1cm4hMX1mdW5jdGlvbiBFKHQsbil7Zyh0KSxyKys7dmFyIHU9e25zX3N0X2NuOnIsbnNfc3RfcG46XCIxXCIsbnNfc3RfdHA6XCIwXCJ9O2UuZXh0ZW5kKHUsbiksYS5zZXRDbGlwKHUpLG89bixpPXQscz0wLGEubm90aWZ5KGQuUExBWSxzKX1mdW5jdGlvbiBTKHQpe3ZhciBuPSsobmV3IERhdGUpO2cobikscisrLHQ9cCh0KTt2YXIgbz17bnNfc3RfY246cixuc19zdF9wbjpcIjFcIixuc19zdF90cDpcIjFcIixuc19zdF9hZDpcIjFcIn07ZS5leHRlbmQobyx0KSxhLnNldENsaXAobykscz0wLGEubm90aWZ5KGQuUExBWSxzKSxpPW4sdT0hMX1mdW5jdGlvbiB4KGUsdCl7dmFyIG49KyhuZXcgRGF0ZSk7ZT1wKGUpLGM9PWwuTm9uZSYmKGM9dCksdSYmYz09dD95KGUpPyhhLmdldENsaXAoKS5zZXRMYWJlbHMoZSksYS5nZXRTdGF0ZSgpIT12LlBMQVlJTkcmJihpPW4sYS5ub3RpZnkoZC5QTEFZLHMpKSk6RShuLGUpOkUobixlKSx1PSEwLGM9dH12YXIgbj10aGlzLHI9MCxpPTAscz0wLG89bnVsbCx1PSExLGE9bmV3IHcsZj0hMSxsPXtOb25lOjAsQXVkaW9Db250ZW50OjEsVmlkZW9Db250ZW50OjJ9LGM9bC5Ob25lO2UuZXh0ZW5kKHRoaXMse3BsYXlBZHZlcnRpc2VtZW50OmZ1bmN0aW9uKCl7ZiYmY29uc29sZSYmY29uc29sZS53YXJuKFwiQ2FsbGluZyBkZXByZWNhdGVkIGZ1bmN0aW9uICdwbGF5QWR2ZXJ0aXNlbWVudCcuIFBsZWFzZSBjYWxsICdwbGF5VmlkZW9BZHZlcnRpc2VtZW50JyBvciAncGxheUF1ZGlvQWR2ZXJ0aXNlbWVudCcgZnVuY3Rpb25zIGluc3RlYWQuXCIpO3ZhciBlPXtuc19zdF9jdDpcInZhXCJ9O1MoZSl9LHBsYXlWaWRlb0FkdmVydGlzZW1lbnQ6ZnVuY3Rpb24odCl7dmFyIG49e25zX3N0X2N0OlwidmFcIn07dCYmZS5leHRlbmQobix0KSxTKG4pfSxwbGF5QXVkaW9BZHZlcnRpc2VtZW50OmZ1bmN0aW9uKHQpe3ZhciBuPXtuc19zdF9jdDpcImFhXCJ9O3QmJmUuZXh0ZW5kKG4sdCksUyhuKX0scGxheUNvbnRlbnRQYXJ0OmZ1bmN0aW9uKHQpe2YmJmNvbnNvbGUmJmNvbnNvbGUud2FybihcIkNhbGxpbmcgZGVwcmVjYXRlZCBmdW5jdGlvbiAncGxheUNvbnRlbnRQYXJ0Jy4gUGxlYXNlIGNhbGwgJ3BsYXlWaWRlb0NvbnRlbnRQYXJ0JyBvciAncGxheUF1ZGlvQ29udGVudFBhcnQnIGZ1bmN0aW9ucyBpbnN0ZWFkLlwiKTt2YXIgbj17bnNfc3RfY3Q6XCJ2Y1wifTt0JiZlLmV4dGVuZChuLHQpLHgobixsLlZpZGVvQ29udGVudCl9LHBsYXlWaWRlb0NvbnRlbnRQYXJ0OmZ1bmN0aW9uKHQpe3ZhciBuPXtuc19zdF9jdDpcInZjXCJ9O3QmJmUuZXh0ZW5kKG4sdCkseChuLGwuVmlkZW9Db250ZW50KX0scGxheUF1ZGlvQ29udGVudFBhcnQ6ZnVuY3Rpb24odCl7dmFyIG49e25zX3N0X2N0OlwiYWNcIn07dCYmZS5leHRlbmQobix0KSx4KG4sbC5BdWRpb0NvbnRlbnQpfSxzdG9wOmZ1bmN0aW9uKCl7dmFyIGU9KyhuZXcgRGF0ZSk7YS5ub3RpZnkoZC5QQVVTRSxtKGUpKX19KSxoKCl9O3JldHVybiBmdW5jdGlvbihlKXt9KHQpLHR9KCk7cmV0dXJuIHR9KCksd30oKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L3ZlbmRvci9jb21zY29yZS9zdHJlYW1zZW5zZS5qc1xuICoqLyIsInZhciBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG52YXIgc2VjdGlvbnMgPSByZXF1aXJlKCdzZWN0aW9ucycpO1xudmFyIGxvY2FsZSA9IHJlcXVpcmUoJ2xvY2FsZScpO1xudmFyIHN1cnZleSA9IHJlcXVpcmUoJ3N1cnZleScpO1xudmFyIGNsYXNzZXMgPSByZXF1aXJlKCdjbGFzc2VzJyk7XG5cbnZhciBLcnV4ID0gcmVxdWlyZSgna3J1eCcpO1xudmFyIFByZWRpY2F0ZSA9IHJlcXVpcmUoJ3ByZWRpY2F0ZScpO1xuXG52YXIgYW5hbHl0aWNzID0gcmVxdWlyZSgnYW5hbHl0aWNzJyk7XG5cbnZhciBsYXlvdXQgPSByZXF1aXJlKCdhZHZlcnRzL2xheW91dCcpO1xudmFyIGJyZWFrcG9pbnRzID0gcmVxdWlyZSgnYWR2ZXJ0cy9icmVha3BvaW50cycpO1xudmFyIGFkUmVnaXN0ZXIgPSByZXF1aXJlKCdhZHZlcnRzL2FkUmVnaXN0ZXInKTtcbnZhciBhZFVuaXQgPSByZXF1aXJlKCdhZHZlcnRzL2FkVW5pdCcpO1xudmFyIGtleVZhbHVlcyA9IHJlcXVpcmUoJ2FkdmVydHMva2V5VmFsdWVzJyk7XG52YXIgYWRTdWl0ZXMgPSByZXF1aXJlKCdhZHZlcnRzL2FkU3VpdGVzJyk7XG52YXIgZGZwcFJlcXVlc3QgPSByZXF1aXJlKCdhZHZlcnRzL2RmcHBSZXF1ZXN0Jyk7XG52YXIgcHVic3ViID0gcmVxdWlyZSgncHVic3ViJyk7XG52YXIgU3RhdHMgPSByZXF1aXJlKCdzdGF0cycpO1xudmFyIEFuYWx5dGljc0hlbHBlciA9IHJlcXVpcmUoJ2FuYWx5dGljcy9oZWxwZXInKTtcblxudmFyIGFkZExvYWRFdmVudCA9IHJlcXVpcmUoJ2V2ZW50cycpO1xudmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2dlcicpKCdpbml0Jyk7XG5cbi8qKlxuICogSW5pdGlhbGlzZSBiYmNkb3Rjb20uIENhbGxlZCBpbiB0aGUgc2NvcGUgb2YgdGhlIG1haW4gYmJjZG90Y29tIG9iamVjdFxuICpcbiAqIEBwYXJhbSBwYXJhbXNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbml0IChwYXJhbXMpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB0cnkge1xuICAgICAgICB2YXIgeCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBsZW4sXG4gICAgICAgICAgICB3aW5kb3dMb2NhdGlvbiA9IGNvbmZpZy5nZXRXaW5kb3dMb2NhdGlvbigpLFxuICAgICAgICAgICAgd2luZG93RG9jdW1lbnQgPSBjb25maWcuZ2V0V2luZG93RG9jdW1lbnQoKTtcblxuICAgICAgICBsb2cuaW5mbygnYmJjZG90Y29tLmluaXQoKSB3aXRoIHBhcmFtczogJywgcGFyYW1zKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQkJDQ09NLTgwMTI6IFRoaXMgcGFnZSB1c2VzIGxpdmUgc3RyZWFtLCBzaG91bGRuJ3QgaW5jbHVkZSAnbXB1JyBpbiBhZHNUb0Rpc3BsYXlcbiAgICAgICAgICovXG4gICAgICAgIGlmKC9eXFwvbmV3c1xcL3dvcmxkXFwvdXNfYW5kX2NhbmFkYVxcL3N0YXRlcy8udGVzdCh3aW5kb3dMb2NhdGlvbi5wYXRobmFtZSkgJiYgcGFyYW1zLmFkc1RvRGlzcGxheSl7XG4gICAgICAgICAgICBsb2cuaW5mbygnYmJjZG90Y29tIGZpbHRlciBhZHMgJywgcGFyYW1zLmFkc1RvRGlzcGxheSk7XG4gICAgICAgICAgICBwYXJhbXMuYWRzVG9EaXNwbGF5ID0gcGFyYW1zLmFkc1RvRGlzcGxheS5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFlbGVtZW50LmluY2x1ZGVzKCdtcHUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdXRpbHMuYWRkSHRtbFRhZ0NsYXNzKGNsYXNzZXMuY2xhc3NOYW1lcygnaW5pdCcsICdyZXNwb25zaXZlJykpO1xuICAgICAgICBTdGF0cy5pbml0KCk7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5pc0FjdGl2ZSgnYWRzJykgJiYgIWNvbmZpZy5pc1Nwb3J0QXBwKCkpIHtcblxuICAgICAgICAgICAgY29uZmlnLmluaXQocGFyYW1zKTtcblxuICAgICAgICAgICAgdXRpbHMuYWRkSHRtbFRhZ0NsYXNzKGNsYXNzZXMuZnJvbUNvbmZpZyhjb25maWcsIHdpbmRvdykpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExvYWQgc3R5bGVzaGVldHNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5pc0FzeW5jKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoLyhzYW5kYm94fGludCkoLmRldikqLmJiYy5jbyovLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpIHx8IC9bP3wmXWFkcy1kZWJ1Zy8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikgfHwgZG9jdW1lbnQuY29va2llLmluZGV4T2YoJ2Fkcy1kZWJ1Zz0nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuYXBwZW5kTGlua1RvSGVhZChjb25maWcuZ2V0QXNzZXRQcmVmaXgoKSArICdzdHlsZS9kaXN0L2JiY2RvdGNvbS1hc3luYy5kZXYuY3NzJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuYXBwZW5kTGlua1RvSGVhZChjb25maWcuZ2V0QXNzZXRQcmVmaXgoKSArICdzdHlsZS9kaXN0L2JiY2RvdGNvbS1hc3luYy5jc3MnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5pc0FzeW5jKCkgJiYgY29uZmlnLmlzSUU3KCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoLyhzYW5kYm94fGludCkoLmRldikqLmJiYy5jbyovLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpIHx8IC9bP3wmXWFkcy1kZWJ1Zy8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikgfHwgZG9jdW1lbnQuY29va2llLmluZGV4T2YoJ2Fkcy1kZWJ1Zz0nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuYXBwZW5kTGlua1RvSGVhZChjb25maWcuZ2V0QXNzZXRQcmVmaXgoKSArICdzdHlsZS9kaXN0L2JiY2RvdGNvbS5kZXYuY3NzJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuYXBwZW5kTGlua1RvSGVhZChjb25maWcuZ2V0QXNzZXRQcmVmaXgoKSArICdzdHlsZS9kaXN0L2JiY2RvdGNvbS5jc3MnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGF5b3V0LmRpc2FibGVSZXNldCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERpc2FibGUgcmVzaXplIGluIG9sZGVyIElFIGJyb3dzZXJzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChjb25maWcuaXNJRTgoKSkge1xuICAgICAgICAgICAgICAgIGxheW91dC5kaXNhYmxlUmVzZXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZWN0aW9uc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZWN0aW9ucy5idWlsZCh0cnVlKTtcbiAgICAgICAgICAgIGlmIChzZWN0aW9ucy5nZXRTZWN0aW9uKDApID09PSAnc3BvcnQnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludHMuc2V0R3JvdXBTdGFydCg0LCA5MDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFyYW1zLmxheW91dCA9PT0gJ2dyb3VwNScpe1xuICAgICAgICAgICAgICAgIHZhciBjb3B5ID0gT2JqZWN0LmFzc2lnbih7fSwgYnJlYWtwb2ludHMuZ2V0R3JvdXAoNCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzLnNldEdyb3VwKDUsIGNvcHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzLnNldEdyb3VwRmluaXNoKDQsIDEyNzkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExheW91dFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsYXlvdXQuaW5pdChicmVha3BvaW50cy5nZXRHcm91cHMoKSk7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmNsaWVudFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgLy8gQSBoYWNrIHRvIGFsbG93IHVzIHRvIHNwZWNpZnkgdGhlIGNsaWVudFdpZHRoIGluIHVuaXQgdGVzdGluZ1xuICAgICAgICAgICAgICAgIGxheW91dC5zZXRDbGllbnRXaWR0aChwYXJhbXMuY2xpZW50V2lkdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJyZWFrcG9pbnQgb3ZlcnJpZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChwYXJhbXMuY3VzdG9tQnJlYWtwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50cy5zZXRHcm91cHMocGFyYW1zLmN1c3RvbUJyZWFrcG9pbnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBERlBQIFJlZ2lzdGVyIGFkc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAocGFyYW1zLmFkc1RvRGlzcGxheSkge1xuICAgICAgICAgICAgICAgIGZvciAoaT0wLGxlbj1wYXJhbXMuYWRzVG9EaXNwbGF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkUmVnaXN0ZXIucmVnaXN0ZXJBZChwYXJhbXMuYWRzVG9EaXNwbGF5W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTG9jYWxlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChwYXJhbXMubG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAoeCBpbiBwYXJhbXMubG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmxvY2FsZURhdGEuaGFzT3duUHJvcGVydHkoeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZS5zZXQoeCwgcGFyYW1zLmxvY2FsZURhdGFbeF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEtydXhcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gS3J1eCBiZWhhdmlvdXJhbCBhZHZlcnQgdGFyZ2V0dGluZ1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5pc0tydXhFbmFibGVkKCkpe1xuICAgICAgICAgICAgICAgIChuZXcgS3J1eCgpKS53cml0ZUtydXgoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBZCBFeGNsdXNpb25zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChuZXcgUHJlZGljYXRlKCkpLnNldCh3aW5kb3dEb2N1bWVudC50aXRsZSArICcgJyArIHV0aWxzLmdldE1ldGFOYW1lQ29udGVudCgnZGVzY3JpcHRpb24nKSk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWQgVW5pdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZFVuaXQuaW5pdChsYXlvdXQuZ2V0Q2xpZW50V2lkdGgoKSwgdGhpcy5zZXJ2ZXJzaWRlQWRVbml0czJ0bzksIHNlY3Rpb25zLmdldFNlY3Rpb25zKCdhZHZlcnQnKSwgc2VjdGlvbnMuZ2V0U2VjdGlvbnMoKSk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogS2V5IFZhbHVlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBrZXlWYWx1ZXMuaW5pdCh3aW5kb3dMb2NhdGlvbiwgd2luZG93RG9jdW1lbnQsIGNvbmZpZy5nZXRUeXBlKCkpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFkIFN1aXRlcyAtIHVzZWQgdG8gZGlzcGxheSBhIGNlcnRhaW4gc2V0IG9mIGFkcyBhbGwgdGhlIHRpbWUgdXNpbmcgP2Fkcz1iaWdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRTdWl0ZXMuaW5pdCh3aW5kb3dMb2NhdGlvbi5ocmVmKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBERlBQIFJlcXVlc3RzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRmcHBSZXF1ZXN0LmluaXQoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmFkc1RvRGlzcGxheSAhPT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmFkc1RvRGlzcGxheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZGZwcFJlcXVlc3QucmVxdWVzdEFkcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiorXG4gICAgICAgICAgICAgKiBTdXJ2ZXlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3VydmV5LmluaXQoKTtcblxuICAgICAgICAgICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMucmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSUU4IG9yIGVhcmxpZXJcbiAgICAgICAgICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29ubWVzc2FnZScsIHRoaXMucmVjZWl2ZU1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYW5hbHl0aWNzLmluaXQoKTtcblxuICAgICAgICAvLyBUcmlnZ2VyIGFuIGluaXQgZXZlbnQgd2l0aCB1c2VmdWwgaW5mb3JtYXRpb25cbiAgICAgICAgcHVic3ViLnRyaWdnZXIoJ2JiY2RvdGNvbTppbml0OmNvbXBsZXRlJywge1xuICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAvLyBTdGF0cyBpcyB1c2VkIHRvIHVwZGF0ZSBiYmNkb3Rjb20uc3RhdHMuZGF0YSBmb3IgSlMgdmFyaWFibGUgY29sbGVjdGlvbiBieSBtUHVsc2VcbiAgICAgICAgICAgIHN0YXRzOiB7XG4gICAgICAgICAgICAgICAgcGFnZVR5cGU6IEFuYWx5dGljc0hlbHBlci5nZXRQYWdlVHlwZSgpLFxuICAgICAgICAgICAgICAgIHByaW1hcnlBZFVuaXQ6IGFkVW5pdC5nZXRBZFVuaXQxKCksXG4gICAgICAgICAgICAgICAgc2Vjb25kYXJ5QWRVbml0OiBhZFVuaXQuZ2V0QWRVbml0czJ0bzkoKSxcbiAgICAgICAgICAgICAgICBhZHNFbmFibGVkOiBjb25maWcuaXNBZHNFbmFibGVkKCksXG4gICAgICAgICAgICAgICAgaXNBc3luYzogY29uZmlnLmlzQXN5bmMoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGxvZyAmJiBsb2cuZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmxvZyhlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZExvYWRFdmVudChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgeCwgYWRzID0gYWRSZWdpc3Rlci5nZXRBZHMoKTtcbiAgICAgICAgICAgIHRoaXMuZG9tTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghY29uZmlnLmlzQXN5bmMoKSkge1xuICAgICAgICAgICAgICAgIGZvciAoeCBpbiBhZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkcy5oYXNPd25Qcm9wZXJ0eSh4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRzW3hdLmRpc2FibGVTY3JlZW5SZWFkZXJGb3JBZENvbnRlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIHV0aWxzLmxvZyhlKTtcbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSlcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvaW5pdC5qc1xuICoqLyIsIi8qXG4gKiBBTFdBWVMgUkVRVUlSRUQgSU5URVJOQVRJT05BTCBmb3IgYW5hbHl0aWNzLmpzLCBpcnJlc3BlY3RpdmUgb2YgYWRzIGJlaW5nIGVuYWJsZWRcbiAqL1xuaW1wb3J0IHtQQUxfRU5WX0xJVkV9IGZyb20gJ2NvbW1vbi9mZWF0dXJlU3dpdGNoL2NvbnN0cyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAndXRpbHMnO1xuXG5jb25zdCBBRFNfRU5BQkxFRF9IVE1MX0NMQVNTID0gJ2Fkcy1lbmFibGVkJztcbmNvbnN0IEFOQUxZVElDUyA9IHtcbiAgICBDT01TQ09SRToge1xuICAgICAgICBIVFRQOiAnaHR0cDovL2Iuc2NvcmVjYXJkcmVzZWFyY2guY29tL2InLFxuICAgICAgICBIVFRQUzogJ2h0dHBzOi8vc2Iuc2NvcmVjYXJkcmVzZWFyY2guY29tL2InLFxuICAgICAgICBXRUJTSVRFX1NVSVRFX0xJVkU6ICdiYmMnLFxuICAgICAgICBXRUJTSVRFX1NVSVRFX1RFU1Q6ICdiYmMtZ2xvYmFsLXRlc3QnLFxuICAgICAgICBBUFBfU1VJVEVfTElWRTogJ2JiYycsXG4gICAgICAgIEFQUF9TVUlURV9URVNUOiAnYmJjLWdsb2JhbC10ZXN0JyxcbiAgICAgICAgQ1VTVE9NRVJfSURfTElWRTogMTkyOTM4NzQsXG4gICAgICAgIENVU1RPTUVSX0lEX1RFU1Q6IDE4ODk3NjEyXG4gICAgfSxcbiAgICBTU0M6IHtcbiAgICAgICAgSFRUUDogJ2h0dHA6Ly9zc2MuYXBpLmJiYy5jb20nLFxuICAgICAgICBIVFRQUzogJ2h0dHBzOi8vc3NjLmFwaS5iYmMuY29tJ1xuICAgIH1cbn07XG5cbi8qKlxuICogSW5pdGlhbCBEZWZhdWx0IENvbmZpZ1xuICogQHByaXZhdGVcbiAqL1xudmFyIF9jb25maWcgPSB7XG4gICAgcmVmZXJyZXI6ICcnLFxuICAgIHdpbmRvd0xvY2F0aW9uOiBnZXRXaW5Mb2MoKSxcbiAgICB3aW5kb3dEb2N1bWVudDogZ2V0V2luRG9jKCksXG4gICAgc2V0dGluZ3M6IHtcbiAgICAgICAgYWRzOiB0cnVlLFxuICAgICAgICBhbmFseXRpY3M6IHRydWUsICAgICAgLy8gR2xvYmFsIEN1cnJlbmN5IFByb3ZpZGVyc1xuICAgICAgICBjb21TY29yZTogdHJ1ZSAgICAgIC8vIENvbVNjb3JlIG9ubHlcbiAgICB9LFxuICAgIHNlY3Rpb25zOiBbXSxcbiAgICBwYWdlVHlwZTogJycsXG4gICAgaGVhZGxpbmU6ICcnLFxuICAgIGFzeW5jOiBmYWxzZSxcbiAgICBkaXNhYmxlQWRzSW5pdGlhbExvYWQ6IGZhbHNlLFxuICAgIGRheEVudmlyb25tZW50czogW1xuICAgICAgICAnYmJjLWdsb2JhbCdcbiAgICBdLFxuICAgIG91dGJyYWluRW5hYmxlZDogdHJ1ZSxcbiAgICBrcnV4RW5hYmxlZDogdHJ1ZSxcbiAgICBjb250aW51b3VzUGxheVBhZ2U6IGZhbHNlLFxuICAgIHN0aWNreVBsYXllclBhZ2U6IGZhbHNlLFxuICAgIGllVmVyc2lvbjoge1xuICAgICAgICBpZTc6IGZhbHNlLFxuICAgICAgICBpZTg6IGZhbHNlLFxuICAgICAgICBpZTk6IGZhbHNlXG4gICAgfSxcbiAgICB2ZXJzaW9uOiAnJyxcbiAgICBwcmVmaXhlczoge1xuICAgICAgICBhc3NldFByZWZpeDogJycsXG4gICAgICAgIGpzUHJlZml4OiAnJyxcbiAgICAgICAgc3dmUHJlZml4OiAnJyxcbiAgICAgICAgY3NzUHJlZml4OiAnJ1xuICAgIH0sXG4gICAgZmVhdHVyZXM6IHt9LFxuICAgIHBhbEVudjogUEFMX0VOVl9MSVZFLFxuICAgIGFwcE5hbWU6IG51bGxcbn07XG5cbmNsYXNzIENvbmZpZyB7XG5cbiAgICBpbml0KHNlcnZlckNvbmYsIGRhdGEsIGxvY2F0aW9uLCBkb2N1bWVudCkge1xuICAgICAgICAvLyBBL0IgVGVzdGluZyAtIENvb2tpZVxuICAgICAgICBpZiAodXRpbHMuZ2V0Q29va2llKCd0ZXN0X2dyb3VwJykgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPD0gMC4xKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuc2V0Q29va2llKCd0ZXN0X2dyb3VwJywgJ2EnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuc2V0Q29va2llKCd0ZXN0X2dyb3VwJywgJ2InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBCQkNDT00tNzYyMzogYWRkaW5nIGJldGEgYXMgZWFybHkgYXMgYmJjZG90Y29tIGlzIGluaXRpYWxpc2VkXG4gICAgICAgIGlmICgodXRpbHMuZ2V0Q29va2llKCd0ZXN0X2dyb3VwJykgPT09ICdhJyAmJiBiYmNkb3Rjb20uc2VjdGlvbnMuZ2V0U2VjdGlvbnMoKVswXSA9PT0gJ3dvcmxkc2VydmljZScpIHx8IC9bP3wmXWFkcy1iZXRhLy50ZXN0KF9jb25maWcud2luZG93TG9jYXRpb24pKSB7XG4gICAgICAgICAgICBiYmNkb3Rjb20udXRpbHMuYWRkSHRtbFRhZ0NsYXNzKGJiY2RvdGNvbS5jbGFzc2VzLmNsYXNzTmFtZXMoJ2JldGEnKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9eXFwvbmV3c1xcL2VsZWN0aW9uXFwvdXMyMDE2Ly50ZXN0KF9jb25maWcud2luZG93TG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgICAgICBiYmNkb3Rjb20udXRpbHMuYWRkSHRtbFRhZ0NsYXNzKGJiY2RvdGNvbS5jbGFzc2VzLmNsYXNzTmFtZXMoJ25ld3MtZWxlY3Rpb24tdXMyMDE2JykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2VydmVyQ29uZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMucmVoeWRyYXRlKHNlcnZlckNvbmYpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0V2luZG93TG9jYXRpb24obG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFdpbmRvd0RvY3VtZW50KGRvY3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0Fkc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgYmJjZG90Y29tLnV0aWxzLmFkZEh0bWxUYWdDbGFzcyhBRFNfRU5BQkxFRF9IVE1MX0NMQVNTKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWZlcnJlciA9ICh0eXBlb2Ygd2luZG93Lm9yYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5vcmIucmVmZXJyZXIgIT09ICd1bmRlZmluZWQnID9cbiAgICAgICAgICAgIHdpbmRvdy5vcmIucmVmZXJyZXIgOiBfY29uZmlnLndpbmRvd0RvY3VtZW50LnJlZmVycmVyKTtcbiAgICAgICAgdGhpcy5zZXRSZWZlcnJlcihyZWZlcnJlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9wdWxhdGVzIHRoZSBjbGllbnQtc2lkZSBjb25maWcgd2l0aCBjb25maWcgcHJvdmlkZWQgYnkgdGhlIHNlcnZlci5cbiAgICAgKiBDYWxsZWQgZnJvbSBiYmNkb3Rjb20uYXBpLnNldENvbmZpZ1xuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmYgLSBTZXJ2ZXItc2lkZSBwcm92aWRlZCBjb25maWdcbiAgICAgKi9cbiAgICByZWh5ZHJhdGUoY29uZikge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmYgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2VjdGlvbnNcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLnNlY3Rpb25zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRTZWN0aW9ucyhjb25mLnNlY3Rpb25zKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYWdlIFR5cGVcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLnR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFR5cGUoY29uZi50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdG9yeSBIZWFkbGluZVxuICAgICAgICBpZiAodHlwZW9mIGNvbmYuaGVhZGxpbmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldEhlYWRsaW5lKGNvbmYuaGVhZGxpbmUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkcyBFbmFibGVkXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi5hZHNFbmFibGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRBZHNFbmFibGVkKGNvbmYuYWRzRW5hYmxlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb3cgQWR2ZXJ0aXNpbmcgLSB2YXJpYWJsZSBuYW1lIHVzZWQgaW4gQ2FuZHkgaXMgYWxsb3dBZHZlcnRpc2luZ1xuICAgICAgICBpZiAodHlwZW9mIGNvbmYuYWxsb3dBZHZlcnRpc2luZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QWRzRW5hYmxlZChjb25mLmFsbG93QWR2ZXJ0aXNpbmcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE91dGJyYWluIEVuYWJsZWRcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLm91dGJyYWluRW5hYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0T3V0YnJhaW5FbmFibGVkKGNvbmYub3V0YnJhaW5FbmFibGVkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBLcnV4IEVuYWJsZWRcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLmtydXhFbmFibGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRLcnV4RW5hYmxlZChjb25mLmtydXhFbmFibGVkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbmFseXRpY3MgRW5hYmxlZFxuICAgICAgICBpZiAodHlwZW9mIGNvbmYuYW5hbHl0aWNzRW5hYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QW5hbHl0aWNzRW5hYmxlZChjb25mLmFuYWx5dGljc0VuYWJsZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbVNjb3JlIEVuYWJsZWRcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLmNvbVNjb3JlRW5hYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29tU2NvcmVFbmFibGVkKGNvbmYuY29tU2NvcmVFbmFibGVkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBc3luYyBFbmFibGVkXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi5hc3luY0VuYWJsZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldEFzeW5jKGNvbmYuYXN5bmNFbmFibGVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoL15cXC9uZXdzXFwvdG9waWNzLy50ZXN0KF9jb25maWcud2luZG93TG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnNldEFzeW5jKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIExvYWQgYWRzIGluaXRpYWxseSBkaXNhYmxlZCwgdXNlZCBvbmx5IGluIGFzeW5jIG1vZGVcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLmRpc2FibGVJbml0aWFsTG9hZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGlzYWJsZUluaXRpYWxMb2FkKGNvbmYuZGlzYWJsZUluaXRpYWxMb2FkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZCBLZXl3b3JkIC0gdmFyaWFibGUgbmFtZSB1c2VkIGluIENhbmR5IGlzIGFkQ2FtcGFpZ25LZXl3b3JkXG4gICAgICAgIHZhciBrZXl3b3JkID0gKHR5cGVvZiBjb25mLmFkS2V5d29yZCAhPT0gJ3VuZGVmaW5lZCcpID8gY29uZi5hZEtleXdvcmQgOiBjb25mLmFkQ2FtcGFpZ25LZXl3b3JkO1xuICAgICAgICBpZiAodHlwZW9mIGtleXdvcmQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBiYmNkb3Rjb20uYWR2ZXJ0cy5rZXlWYWx1ZXMuc2V0KCdrZXl3b3JkJywga2V5d29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2luZG93IExvY2F0aW9uXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi51cmwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFdpbmRvd0xvY2F0aW9uKGJiY2RvdGNvbS51dGlscy5jcmVhdGVXaW5kb3dMb2NhdGlvbihjb25mLnVybCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZlYXR1cmVzXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi5mZWF0dXJlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RmVhdHVyZXMoY29uZi5mZWF0dXJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUEFMIEVOVlxuICAgICAgICBpZiAodHlwZW9mIGNvbmYucGFsRW52ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRQYWxFbnYoY29uZi5wYWxFbnYpO1xuICAgICAgICB9XG4gICAgICAgIC8vIExvY2FsZVxuICAgICAgICBpZiAoYmJjZG90Y29tLmxvY2FsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25mLmFkdmVydGlzZW1lbnRUZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGJiY2RvdGNvbS5sb2NhbGUuc2V0KCdhZHZlcnRpc2VtZW50VGV4dCcsIGNvbmYuYWR2ZXJ0aXNlbWVudFRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25mLmFkdmVydEluZm9QYWdlVXJsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGJiY2RvdGNvbS5sb2NhbGUuc2V0KCdhZHZlcnRJbmZvUGFnZVVybCcsIGNvbmYuYWR2ZXJ0SW5mb1BhZ2VVcmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25mLmluQXNzb2NpYXRpb25XaXRoVGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBiYmNkb3Rjb20ubG9jYWxlLnNldCgnaW5Bc3NvY2lhdGlvbldpdGhUZXh0JywgY29uZi5pbkFzc29jaWF0aW9uV2l0aFRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25mLnNwb25zb3JlZEJ5VGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBiYmNkb3Rjb20ubG9jYWxlLnNldCgnc3BvbnNvcmVkQnlUZXh0JywgY29uZi5zcG9uc29yZWRCeVRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25mLmFkc0J5R29vZ2xlVGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBiYmNkb3Rjb20ubG9jYWxlLnNldCgnYWRzQnlHb29nbGVUZXh0JywgY29uZi5hZHNCeUdvb2dsZVRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElzIENvbnRpbnVvdXMgUGxheSBQYWdlICh3ZWJhcHAvcHJvZHVjdCBwcm92aWRlcylcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLmlzQ29udGludW91c1BsYXlQYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRDb250aW51b3VzUGxheVBhZ2UoY29uZi5pc0NvbnRpbnVvdXNQbGF5UGFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXMgU3RpY2t5IFBsYXllciBQYWdlICh3ZWJhcHAvcHJvZHVjdCBwcm92aWRlcylcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLmlzU3RpY2t5UGxheWVyUGFnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RpY2t5UGxheWVyUGFnZShjb25mLmlzU3RpY2t5UGxheWVyUGFnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRDb25maWcoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnO1xuICAgIH1cblxuICAgIHNldERhdGEoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB0eXBlb2YgZGF0YS5hZHMgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB0eXBlb2YgZGF0YS5zdGF0cyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHR5cGVvZiBkYXRhLnN0YXRzUHJvdmlkZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2YXIgbnVtUHJvdmlkZXJzID0gNSxcbiAgICAgICAgICAgICAgICBwcm92aWRlcnMgPSBwYXJzZUludChkYXRhLnN0YXRzUHJvdmlkZXIsIDEwKS50b1N0cmluZygyKTtcbiAgICAgICAgICAgIGlmIChwcm92aWRlcnMubGVuZ3RoICE9PSBudW1Qcm92aWRlcnMpIHtcbiAgICAgICAgICAgICAgICAvLyBQYWQgYmluYXJ5IGxpc3Qgb2YgcHJvdmlkZXJzXG4gICAgICAgICAgICAgICAgLy8gZWcgZGVjaW1hbCA9IDMsIHRoZXJlZm9yZSBpbiBiaW5hcnkgPSAxMSwgbm90IDAwMDExIHdoaWNoIHdlIG5lZWQgYmVsb3cgZm9yIHN1YnN0cmluZ1xuICAgICAgICAgICAgICAgIHdoaWxlIChwcm92aWRlcnMubGVuZ3RoIDwgbnVtUHJvdmlkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVycyA9ICcwJyArIHByb3ZpZGVycztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3RhdHMgUHJvdmlkZXIgVmFsdWVzOlxuICAgICAgICAgICAgICogLSAxICBBR09GXG4gICAgICAgICAgICAgKiAtIDIgIFNpdGVzdGF0ICAgIFJlbW92ZWQgKEJCQ0NPTS01Njc0KVxuICAgICAgICAgICAgICogLSA0ICBOaWVsc2VuIFVTXG4gICAgICAgICAgICAgKiAtIDggIE5pZWxzZW4gTlpcbiAgICAgICAgICAgICAqIC0gMTYgTmllbHNlbiBBVVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBfY29uZmlnLnNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgICdhZHMnOiAoZGF0YS5hZHMgPT09IDEgJiYgX2NvbmZpZy5zZXR0aW5ncy5hZHMgIT09IGZhbHNlKSxcbiAgICAgICAgICAgICAgICAnYW5hbHl0aWNzJzogKGRhdGEuc3RhdHMgPT09IDEgJiYgX2NvbmZpZy5zZXR0aW5ncy5hbmFseXRpY3MgIT09IGZhbHNlKSxcbiAgICAgICAgICAgICAgICAvLyBJbnN0cnVjdGlvbnM6IHdoZW4gYWRkaW5nIG5ldywgaW5jcmVhc2UgbnVtUHJvdmlkZXJzIGFib3ZlLCB1cGRhdGUgdGhlIFwidmFyIHNldHRpbmdzXCIgZGVmYXVsdHMgYXQgdG9wIG9mIHBhZ2UgYW5kIGFkZCB0byB3d3NjcmlwdHMuaW5pIGluIHRoZSBzYW1lIG9yZGVyXG4gICAgICAgICAgICAgICAgJ25pZWxzZW4tYXUnOiAoZGF0YS5zdGF0cyA9PT0gMSAmJiBwYXJzZUludChwcm92aWRlcnMuc3Vic3RyKDAsIDEpLCAxMCkpLFxuICAgICAgICAgICAgICAgICduaWVsc2VuLW56JzogKGRhdGEuc3RhdHMgPT09IDEgJiYgcGFyc2VJbnQocHJvdmlkZXJzLnN1YnN0cigxLCAxKSwgMTApKSxcbiAgICAgICAgICAgICAgICAnbmllbHNlbi11cyc6IChkYXRhLnN0YXRzID09PSAxICYmIHBhcnNlSW50KHByb3ZpZGVycy5zdWJzdHIoMiwgMSksIDEwKSksXG4gICAgICAgICAgICAgICAgJ3NpdGVzdGF0JzogMCwgIC8vIHJlbW92ZWQgKEJCQ0NPTS01Njc0KVxuICAgICAgICAgICAgICAgICdhZ29mJzogMCwgIC8vIHJlbW92ZSAoQkJDQ09NLTcwNDYpXG4gICAgICAgICAgICAgICAgLy8gSW5zdHJ1Y3Rpb25zOiB3aGVuIGFkZGluZyBuZXcsIGluY3JlYXNlIG51bVByb3ZpZGVycyBhYm92ZSwgdXBkYXRlIHRoZSBcInZhciBzZXR0aW5nc1wiIGRlZmF1bHRzIGF0IHRvcCBvZiBwYWdlIGFuZCBhZGQgdG8gd3dzY3JpcHRzLmluaSBpbiB0aGUgc2FtZSBvcmRlclxuICAgICAgICAgICAgICAgICdjb21TY29yZSc6IF9jb25maWcuc2V0dGluZ3MuY29tU2NvcmVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPZmZlcnMgdGhlIGFiaWxpdHkgZm9yIGEgcHJvZHVjdCB0byBzcGVjaWZ5IHdoYXQgc2VjdGlvbnMgc2hvdWxkIGJlIGFuZCBmb3IgdXMgbm90XG4gICAgICogdG8gZGVyaXZlIHRoZSBzZWN0aW9ucyBmcm9tIHRoZSBwYWdlIFVyaS4gIFRoaXMgaW5mb3JtYXRpb24gaXMgdXNlZCB3aXRoaW4gYmJjZG90Y29tLnNlY3Rpb25zIG9iamVjdFxuICAgICAqL1xuICAgIHNldFNlY3Rpb25zKHNlY3RzKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VjdHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAoc2VjdHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIF9jb25maWcuc2VjdGlvbnMgPSBzZWN0cztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX2NvbmZpZy5zZWN0aW9ucyA9IHNlY3RzLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfY29uZmlnLnNlY3Rpb25zID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRTZWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuc2VjdGlvbnM7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBQYWdlIFR5cGUgZWcgU1RPUlksIElOREVYLCBWSURFT1xuICAgICAqL1xuICAgIHNldFR5cGUodHlwZSkge1xuICAgICAgICBfY29uZmlnLnBhZ2VUeXBlID0gdHlwZS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIGdldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLnBhZ2VUeXBlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZlYXR1cmUgU3dpdGNoXG4gICAgICovXG4gICAgc2V0RmVhdHVyZXMoZmVhdHVyZXMpIHtcbiAgICAgICAgX2NvbmZpZy5mZWF0dXJlcyA9IGZlYXR1cmVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRGZWF0dXJlcygpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuZmVhdHVyZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUEFMIEVOVlxuICAgICAqL1xuICAgIHNldFBhbEVudihwYWxFbnYpIHtcbiAgICAgICAgX2NvbmZpZy5wYWxFbnYgPSBwYWxFbnY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFBhbEVudigpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcucGFsRW52O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3J5IEhlYWRsaW5lXG4gICAgICovXG4gICAgc2V0SGVhZGxpbmUoc3RyKSB7XG4gICAgICAgIF9jb25maWcuaGVhZGxpbmUgPSBzdHI7XG4gICAgfVxuXG4gICAgZ2V0SGVhZGxpbmUoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmhlYWRsaW5lO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHNldCB0aGUgbG9hZGluZyBvZiBhZHMgaW4gREZQIHRvIGJlIGRvbmUgQXN5bmNocm9ub3VzbHlcbiAgICAgKiBAcGFyYW0gaXNBc3luY1xuICAgICAqL1xuICAgIHNldEFzeW5jKGlzQXN5bmMpIHtcbiAgICAgICAgX2NvbmZpZy5hc3luYyA9IGlzQXN5bmM7XG4gICAgfVxuXG4gICAgaXNBc3luYygpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuYXN5bmM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBkaXNhYmxlIGFkcyBsb2FkaW5nIGluaXRpYWxseSBpbiBERlAgdW50aWwgdGhlIHJlZnJlc2ggbWV0aG9kIGlzIGNhbGxlZCAoT25seSBhdmFpbGFibGUgaW4gQXN5bmMgTW9kZSlcbiAgICAgKiBAcGFyYW0gaXNEaXNhYmxlQWRzSW5pdGlhbExvYWRcbiAgICAgKi9cbiAgICBzZXREaXNhYmxlSW5pdGlhbExvYWQoaXNEaXNhYmxlQWRzSW5pdGlhbExvYWQpIHtcbiAgICAgICAgX2NvbmZpZy5kaXNhYmxlQWRzSW5pdGlhbExvYWQgPSBpc0Rpc2FibGVBZHNJbml0aWFsTG9hZDtcbiAgICB9XG5cbiAgICBpc0Rpc2FibGVJbml0aWFsTG9hZCgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuZGlzYWJsZUFkc0luaXRpYWxMb2FkO1xuICAgIH1cblxuXG4gICAgaXNUb3BMZXZlbFNpdGUoc2l0ZSkge1xuICAgICAgICB2YXIgcGF0aG5hbWUgPSBfY29uZmlnLndpbmRvd0xvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBwYXRobmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcGF0aG5hbWUuaW5kZXhPZignLycgKyBzaXRlKSA9PT0gMCk7XG4gICAgfVxuXG4gICAgaXNTcG9ydEFwcCgpIHtcbiAgICAgICAgdmFyIHBhdGhuYW1lID0gX2NvbmZpZy53aW5kb3dMb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICAgIGhyZWYgPSBfY29uZmlnLndpbmRvd0xvY2F0aW9uLmhyZWY7XG4gICAgICAgIHJldHVybiAodHlwZW9mIHBhdGhuYW1lICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAocGF0aG5hbWUuaW5kZXhPZignLmFwcCcpICE9PSAtMSB8fCAodHlwZW9mIGhyZWYgIT09ICd1bmRlZmluZWQnICYmIChocmVmLmluZGV4T2YoJy5hcHAnKSAhPT0gLTEpKSkgJiZcbiAgICAgICAgKHBhdGhuYW1lLmluZGV4T2YoJy9zcG9ydCcpID09PSAwIHx8ICh0eXBlb2YgaHJlZiAhPT0gJ3VuZGVmaW5lZCcgJiYgKGhyZWYuaW5kZXhPZignYW5hbHl0aWNzLWRlYnVnJykgIT09IC0xKSkpKTtcbiAgICB9XG5cblxuICAgIGlzQWN0aXZlKGtleSkge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBfY29uZmlnLnNldHRpbmdzW2tleV0gIT09ICd1bmRlZmluZWQnID8gX2NvbmZpZy5zZXR0aW5nc1trZXldIDogZmFsc2UpO1xuICAgIH1cblxuICAgIGlzQWRzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBY3RpdmUoJ2FkcycpO1xuICAgIH1cblxuICAgIHNldEFkc0VuYWJsZWQoZW5hYmxlZCkge1xuICAgICAgICBfY29uZmlnLnNldHRpbmdzLmFkcyA9IGVuYWJsZWQ7XG4gICAgfVxuXG5cbiAgICBzZXRBbmFseXRpY3NFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgLyogT25jZSBpdCBoYXMgYmVlbiBkaXNhYmxlIHRvIG5vdCBhbGxvdyBpdCB0byBiZSBlbmFibGVkICovXG4gICAgICAgIF9jb25maWcuc2V0dGluZ3MuYW5hbHl0aWNzID0gKF9jb25maWcuc2V0dGluZ3MuYW5hbHl0aWNzICE9PSAwICYmIF9jb25maWcuc2V0dGluZ3MuYW5hbHl0aWNzICE9PSBmYWxzZSA/IGVuYWJsZWQgOiAwKTtcbiAgICB9XG5cbiAgICBpc0FuYWx5dGljc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQWN0aXZlKCdhbmFseXRpY3MnKTtcbiAgICB9XG5cblxuICAgIHNldENvbVNjb3JlRW5hYmxlZChlbmFibGVkKSB7XG4gICAgICAgIC8qIE9uY2UgaXQgaGFzIGJlZW4gZGlzYWJsZSB0byBub3QgYWxsb3cgaXQgdG8gYmUgZW5hYmxlZCAqL1xuICAgICAgICBfY29uZmlnLnNldHRpbmdzLmNvbVNjb3JlID0gKF9jb25maWcuc2V0dGluZ3MuY29tU2NvcmUgIT09IDAgJiYgX2NvbmZpZy5zZXR0aW5ncy5jb21TY29yZSAhPT0gZmFsc2UgPyBlbmFibGVkIDogMCk7XG4gICAgfVxuXG4gICAgaXNDb21TY29yZUVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQWN0aXZlKCdjb21TY29yZScpICYmIHRoaXMuaXNBY3RpdmUoJ2FuYWx5dGljcycpO1xuICAgIH1cblxuICAgIHNldE91dGJyYWluRW5hYmxlZChlbmFibGVkKSB7XG4gICAgICAgIF9jb25maWcub3V0YnJhaW5FbmFibGVkID0gZW5hYmxlZDtcbiAgICB9XG5cbiAgICBpc091dGJyYWluRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcub3V0YnJhaW5FbmFibGVkO1xuICAgIH1cblxuICAgIHNldEtydXhFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgX2NvbmZpZy5rcnV4RW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgfTtcblxuICAgIGlzS3J1eEVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmtydXhFbmFibGVkO1xuICAgIH07XG5cbiAgICBzZXRDb250aW51b3VzUGxheVBhZ2UodmFsdWUpIHtcbiAgICAgICAgX2NvbmZpZy5jb250aW51b3VzUGxheVBhZ2UgPSAodmFsdWUgPT09IHRydWUpO1xuICAgIH1cblxuICAgIGlzQ29udGludW91c1BsYXlQYWdlKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5jb250aW51b3VzUGxheVBhZ2U7XG4gICAgfVxuXG4gICAgc2V0U3RpY2t5UGxheWVyUGFnZSh2YWx1ZSkge1xuICAgICAgICBfY29uZmlnLnN0aWNreVBsYXllclBhZ2UgPSAodmFsdWUgPT09IHRydWUpO1xuICAgIH1cblxuICAgIGlzU3RpY2t5UGxheWVyUGFnZSgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuc3RpY2t5UGxheWVyUGFnZTtcbiAgICB9XG5cbiAgICBzZXRJRTcodmFsdWUpIHtcbiAgICAgICAgX2NvbmZpZy5pZVZlcnNpb24uaWU3ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgaXNJRTcoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmllVmVyc2lvbi5pZTc7XG4gICAgfVxuXG4gICAgc2V0SUU4KHZhbHVlKSB7XG4gICAgICAgIF9jb25maWcuaWVWZXJzaW9uLmllOCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGlzSUU4KCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5pZVZlcnNpb24uaWU4O1xuICAgIH1cblxuICAgIHNldElFOSh2YWx1ZSkge1xuICAgICAgICBfY29uZmlnLmllVmVyc2lvbi5pZTkgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBpc0lFOSgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuaWVWZXJzaW9uLmllOTtcbiAgICB9XG5cbiAgICAvLyBUT0RPIC0gS0IgMTQwMjI1IEludmVzdGlnYXRlIHdoZXJlIHRoZXNlIHByZWZpeCBhcmUgc2V0IGFuZCByZW1vdmUgd2hlbiBhcHByb3ByaWF0ZS5cbiAgICBzZXRBc3NldFByZWZpeChwcmVmaXgpIHtcbiAgICAgICAgX2NvbmZpZy5wcmVmaXhlcy5hc3NldFByZWZpeCA9IHByZWZpeDtcbiAgICB9XG5cbiAgICBnZXRBc3NldFByZWZpeCgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcucHJlZml4ZXMuYXNzZXRQcmVmaXg7XG4gICAgfVxuXG4gICAgc2V0QXBwTmFtZShhcHBOYW1lKSB7XG4gICAgICAgIF9jb25maWcuYXBwTmFtZSA9IGFwcE5hbWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldEFwcE5hbWUoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmFwcE5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVE9ETyAtIEtCIDE1MDYyOSBEZXByZWNhdGUgdGhlIGZvbGxvd2luZyBhbmQganVzdCB1c2UgZ2V0L3NldEFzc2V0UHJlZml4KCksIGhhdmluZyBvbmUgZm9yIGVhY2ggZm9sZGVyIGlzIHJlZHVuZGFudFxuICAgICAqIE4mSyB1c2VzIHRoZXNlIGFzIGZpbGVzIGFyZSB1cGxvYWRlZCB0byBkaWZmZXJlbnQgZGlyZWN0b3JpZXNcbiAgICAgKi9cbiAgICBzZXRKc1ByZWZpeChwcmVmaXgpIHtcbiAgICAgICAgX2NvbmZpZy5wcmVmaXhlcy5qc1ByZWZpeCA9IHByZWZpeDtcbiAgICB9XG5cbiAgICBnZXRKc1ByZWZpeCgpIHtcbiAgICAgICAgcmV0dXJuIChfY29uZmlnLnByZWZpeGVzLmpzUHJlZml4ICE9PSAnJyA/IF9jb25maWcucHJlZml4ZXMuanNQcmVmaXggOiB0aGlzLmdldEFzc2V0UHJlZml4KCkgKyAnc2NyaXB0Jyk7XG4gICAgfVxuXG4gICAgc2V0U3dmUHJlZml4KHByZWZpeCkge1xuICAgICAgICBfY29uZmlnLnByZWZpeGVzLnN3ZlByZWZpeCA9IHByZWZpeDtcbiAgICB9XG5cbiAgICBnZXRTd2ZQcmVmaXgoKSB7XG4gICAgICAgIHJldHVybiAoX2NvbmZpZy5wcmVmaXhlcy5zd2ZQcmVmaXggIT09ICcnID8gX2NvbmZpZy5wcmVmaXhlcy5zd2ZQcmVmaXggOiB0aGlzLmdldEFzc2V0UHJlZml4KCkgKyAnc3dmJyk7XG4gICAgfVxuXG4gICAgc2V0Q3NzUHJlZml4KHByZWZpeCkge1xuICAgICAgICBfY29uZmlnLnByZWZpeGVzLmNzc1ByZWZpeCA9IHByZWZpeDtcbiAgICB9XG5cbiAgICBnZXRDc3NQcmVmaXgoKSB7XG4gICAgICAgIHJldHVybiAoX2NvbmZpZy5wcmVmaXhlcy5jc3NQcmVmaXggIT09ICcnID8gX2NvbmZpZy5wcmVmaXhlcy5jc3NQcmVmaXggOiB0aGlzLmdldEFzc2V0UHJlZml4KCkgKyAnc3R5bGUnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUT0RPIEVORCAtIERlcHJlY2F0ZSB0aGUgZm9sbG93aW5nIGFuZCBqdXN0IHVzZSBnZXQvc2V0QXNzZXRQcmVmaXgoKSwgaGF2aW5nIG9uZSBmb3IgZWFjaCBmb2xkZXIgaXMgcmVkdW5kYW50XG4gICAgICovXG5cbiAgICBzZXRWZXJzaW9uKHYpIHtcbiAgICAgICAgX2NvbmZpZy52ZXJzaW9uID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0VmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcudmVyc2lvbjtcbiAgICB9XG5cbiAgICBzZXRXaW5kb3dMb2NhdGlvbihsb2NhdGlvbikge1xuICAgICAgICBfY29uZmlnLndpbmRvd0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFdpbmRvd0xvY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy53aW5kb3dMb2NhdGlvbjtcbiAgICB9XG5cbiAgICBzZXRXaW5kb3dEb2N1bWVudChkb2N1bWVudCkge1xuICAgICAgICBfY29uZmlnLndpbmRvd0RvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFdpbmRvd0RvY3VtZW50KCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy53aW5kb3dEb2N1bWVudDtcbiAgICB9XG5cbiAgICBzZXRSZWZlcnJlcihyZWYpIHtcbiAgICAgICAgX2NvbmZpZy5yZWZlcnJlciA9IHJlZjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0UmVmZXJyZXIoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLnJlZmVycmVyO1xuICAgIH1cblxuICAgIGdldEFuYWx5dGljc0NvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIEFOQUxZVElDUztcbiAgICB9XG5cbiAgICBnZXRBbmFseXRpY3NVcmkodmVuZG9yKSB7XG4gICAgICAgIHJldHVybiBiYmNkb3Rjb20uYW5hbHl0aWNzLmNvbVNjb3JlLnNzY0hlbHBlci5nZXRBbmFseXRpY3NMb2NhdGlvbigpO1xuICAgIH1cblxuICAgIHNldERheEVudmlyb25tZW50cyhkYXhFbnZpcm9ubWVudHMgPSBbXSkge1xuICAgICAgICBfY29uZmlnLmRheEVudmlyb25tZW50cyA9IGRheEVudmlyb25tZW50cztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0RGF4RW52aXJvbm1lbnRzKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5kYXhFbnZpcm9ubWVudHM7XG4gICAgfVxuXG4gICAgZ2V0QW5hbHl0aWNzU3VpdGUodmVuZG9yKSB7XG4gICAgICAgIHZhciB0ZXN0RW52ID0gaXNUZXN0RW52KF9jb25maWcud2luZG93TG9jYXRpb24uaHJlZik7XG4gICAgICAgIGlmICh0aGlzLmlzU3BvcnRBcHAoKSkge1xuICAgICAgICAgICAgcmV0dXJuICh0ZXN0RW52ID8gQU5BTFlUSUNTLkNPTVNDT1JFLkFQUF9TVUlURV9URVNUIDogQU5BTFlUSUNTLkNPTVNDT1JFLkFQUF9TVUlURV9MSVZFKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRlc3RFbnYgPyBBTkFMWVRJQ1MuQ09NU0NPUkUuV0VCU0lURV9TVUlURV9URVNUIDogQU5BTFlUSUNTLkNPTVNDT1JFLldFQlNJVEVfU1VJVEVfTElWRSk7XG4gICAgfVxuXG4gICAgZ2V0QW5hbHl0aWNzQWNjdElkKCkge1xuICAgICAgICByZXR1cm4gKGlzVGVzdEVudihfY29uZmlnLndpbmRvd0xvY2F0aW9uLmhyZWYpID8gQU5BTFlUSUNTLkNPTVNDT1JFLkNVU1RPTUVSX0lEX1RFU1QgOiBBTkFMWVRJQ1MuQ09NU0NPUkUuQ1VTVE9NRVJfSURfTElWRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGVzdGluZyBvbmx5XG4gICAgICovXG4gICAgcigpIHtcbiAgICAgICAgdGhpcy5zZXRXaW5kb3dMb2NhdGlvbihnZXRXaW5Mb2MoKSk7XG4gICAgICAgIHRoaXMuc2V0V2luZG93RG9jdW1lbnQoZ2V0V2luRG9jKCkpO1xuICAgICAgICB0aGlzLnNldFJlZmVycmVyKCcnKTtcbiAgICAgICAgdGhpcy5zZXRTZWN0aW9ucyhbXSk7XG4gICAgICAgIF9jb25maWcuc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBhZHM6IHRydWUsXG4gICAgICAgICAgICBhbmFseXRpY3M6IHRydWUsXG4gICAgICAgICAgICBjb21TY29yZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNldElFNyhmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0SUU4KGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRBc3NldFByZWZpeCgnJyk7XG4gICAgICAgIHRoaXMuc2V0T3V0YnJhaW5FbmFibGVkKHRydWUpO1xuICAgICAgICB0aGlzLnNldEtydXhFbmFibGVkKHRydWUpO1xuICAgICAgICB0aGlzLnNldFN0aWNreVBsYXllclBhZ2UoZmFsc2UpO1xuICAgICAgICB0aGlzLnNldENvbnRpbnVvdXNQbGF5UGFnZShmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0SGVhZGxpbmUoJycpO1xuICAgICAgICB0aGlzLnNldFR5cGUoJycpO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgQ29uZmlnO1xuXG5mdW5jdGlvbiBnZXRXaW5Mb2MoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbjtcbn1cblxuZnVuY3Rpb24gZ2V0V2luRG9jKCkge1xuICAgIHJldHVybiB3aW5kb3cuZG9jdW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzVGVzdEVudihocmVmKSB7XG4gICAgcmV0dXJuICgvKHNhbmRib3h8aW50fHRlc3R8c3RhZ2UpKC5kZXYpKi5iYmMuY28qLykudGVzdChocmVmKTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jb25maWcuanNcbiAqKi8iLCJleHBvcnQgY29uc3QgUEFMX0VOVl9MSVZFID0gJ2xpdmUnO1xuZXhwb3J0IGNvbnN0IFBBTF9FTlZfU1RBR0UgPSAnc3RhZ2UnO1xuZXhwb3J0IGNvbnN0IFBBTF9FTlZfVEVTVCA9ICd0ZXN0JztcbmV4cG9ydCBjb25zdCBQQUxfRU5WX0lOVCA9ICdpbnQnO1xuZXhwb3J0IGNvbnN0IFBBTF9FTlZfU0FOREJPWCA9ICdzYW5kYm94JztcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jb21tb24vZmVhdHVyZVN3aXRjaC9jb25zdHMuanNcbiAqKi8iLCIvKlxuICogQUxXQVlTIFJFUVVJUkVEIElOVEVSTkFUSU9OQUwgZm9yIGFuYWx5dGljcy5qcywgaXJyZXNwZWN0aXZlIG9mIGFkcyBiZWluZyBlbmFibGVkXG4gKi9cblxuLyoqXG4gKiBUaGVyZSBhcmUgc3VidGxlIGRpZmZlcmVuY2VzIG9mIHNlY3Rpb24vc3Vic2VjdGlvbiBjbGFzc2lmaWNhdGlvbnMgYmV0d2VlbiBhZHZlcnRpc2luZyBhbmQgYW5hbHl0aWNzXG4gKiBiYXNlZCBvbiBEb3VibGVjbGljayB0YXJnZXR0aW5nIGFuZCBBbmFseXRpY3MgdHJhY2tpbmcgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcbnZhciBzZWN0aW9ucyA9IFtdO1xudmFyIGFkdmVydFNlY3Rpb25zID0gW107XG52YXIgYW5hbHl0aWNzU2VjdGlvbnMgPSBbXTtcblxuLyoqXG4gKiBTdGFuZGFyZGlzZSBVcmkgaW5jb25zaXN0ZW5jaWVzXG4gKi9cbnZhciBjbGVhbnVwUGF0aCA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICB2YXIgd3NMYW5nID0gbmV3IFJlZ0V4cCgnXihhZnJpcXVlfGFyYWJpY3xhemVyaXxiZW5nYWxpfGJ1cm1lc2V8Z2FodXphfGhhdXNhfGhpbmRpfGluZG9uZXNpYXxqYXBhbmVzZXxreXJneXp8bXVuZG8nXG4gICAgICAgICsgJ3xuYWlkaGVhY2hkYW58bmVwYWxpfG5ld3lkZGlvbnxwYXNodG98cGVyc2lhbnxwb3J0dWd1ZXNlfHJ1c3NpYW58c2luaGFsYXxzb21hbGl8c3dhaGlsaXx0YWppa3x0YW1pbCdcbiAgICAgICAgKyAnfHR1cmtjZXx1a2NoaW5hfHVrcmFpbmlhbnx1cmR1fHV6YmVrfHZpZXRuYW1lc2V8emhvbmd3ZW4pJyk7XG4gICAgcmV0dXJuIHBhdGhcbiAgICAgICAgLnJlcGxhY2UoL1xcPy4qJC8sICcnKSAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBldmVyeXRoaW5nIGFmdGVyID8gaW4gdXJsXG4gICAgICAgIC5yZXBsYWNlKC9cXCMuKiQvLCAnJykgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZXZlcnl0aGluZyBhZnRlciAjIGluIHVybFxuICAgICAgICAucmVwbGFjZSgvXm5ld3NcXC8odWt8d29ybGR8dXN8YXNpYSlcXC8oaGVhbHRoKSg/IS0pLywgXCJuZXdzLyQyXCIpLy8gY29udmVydCAvbmV3cy91ay9oZWFsdGggdG8gL25ld3MvaGVhbHRoIChyZW0gZWRpdGlvbiwgb25seSBvbiBpbmRleCwgbm90IG9uIHN0b3J5KVxuICAgICAgICAucmVwbGFjZSgvKF98XFwtfFxcLyk/W0EtWjAtOV17Nyw4fSQvLCAnJykgICAgIC8vIHJlbW92ZSBzdG9yeSBJZCAvMTIzNDU2NzgsIF8xMjM0NTY3OCBvciAtMTIzNDU2NzhcbiAgICAgICAgLnJlcGxhY2UoL1xcL1thLXowLTldK1xcLnN0bS8sICcnKSAgICAgICAgICAgICAvLyByZW1vdmUgZnJvbSBvbGQgQ1BTIHBhZ2VzIGVnIC9kZWZhdWx0LnN0bVxuICAgICAgICAucmVwbGFjZSgvX2FuZF8vLCAnLScpICAgICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IGVudGVydGFpbm1lbnRfYW5kX2FydHMgdG8gZW50ZXJ0YWlubWVudC1hcnRzXG4gICAgICAgIC5yZXBsYWNlKC9fL2csICctJykgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdhbnQgY29uc2lzdGVuY3kgYmV0d2VlbiBkZXNrdG9wIGFuZCByZXNwb25zaXZlXG4gICAgICAgIC5yZXBsYWNlKC9ebmV3c1xcLyhlbmdsYW5kfG5vcnRoZXJuLWlyZWxhbmR8c2NvdGxhbmR8d2FsZXMpKCR8LXxcXC8pLywgXCJuZXdzL3VrLyQxJDJcIikgICAvLyBhZGQgJy91ay8nXG4gICAgICAgIC5yZXBsYWNlKC9ebmV3c1xcL3VrLShbYS16XSspKC0oW2Etel0rKSk/LywgXCJuZXdzL3VrLyQxLyQzXCIpICAvLyBjb252ZXJ0IC9uZXdzL3VrLXdhbGVzLXNvdXRoLWVhc3Qtd2FsZXMgdG8gL25ld3MvdWsvd2FsZXMvc291dGgtZWFzdC13YWxlc1xuICAgICAgICAucmVwbGFjZSgvXm5ld3NcXC8od29ybGQpLShhZnJpY2F8YXNpYXxldXJvcGUpKC0oW2Etel0rKSk/LywgXCJuZXdzLyQxLyQyLyQ0XCIpICAvLyBjb252ZXJ0IC9uZXdzL3dvcmxkLWFzaWEgdG8gL25ld3Mvd29ybGQvYXNpYSAgKG5vIGh5cGhlbiBpbiBuYW1lKVxuICAgICAgICAucmVwbGFjZSgvXm5ld3NcXC8od29ybGQpLShbYS16XFwtXSspLywgXCJuZXdzLyQxLyQyL1wiKSAgLy8gY29udmVydCAvbmV3cy93b3JsZC1sYXRpbi1hbWVyaWNhIHRvIC9uZXdzL3dvcmxkL2xhdGluLWFtZXJpY2EgKGh5cGhlbiBpbiBuYW1lKVxuICAgICAgICAucmVwbGFjZSgvXihuZXdzYmVhdCkoJHwtfFxcLykvLCBcIm5ld3MvJDEkMlwiKSAgICAgLy8gY29udmVydCAvbmV3c2JlYXQvMTIzNDUgdG8gL25ld3MvbmV3c2JlYXQvMTIzNDVcbiAgICAgICAgLnJlcGxhY2UoL15zcG9ydFxcLzAvLCAnc3BvcnQnKSAgICAgICAgICAgICAgIC8vIHJlbW92ZSAvMC9cbiAgICAgICAgLnJlcGxhY2UoL15zcG9ydFxcL2JldGEvLCAnc3BvcnQnKSAgICAgICAgICAgIC8vIHJlbW92ZSAvYmV0YS9cbiAgICAgICAgLnJlcGxhY2UoL15zcG9ydFxcLyguKilcXC9zcG9ydHMoJHxcXC8pLywgXCJzcG9ydC8kMSQyXCIpIC8vIHJlcGxhY2UgL3Nwb3J0L19fXy9zcG9ydHMvIHdpdGggL3Nwb3J0L19fXy9cbiAgICAgICAgLnJlcGxhY2UoL21hcmtldC1kYXRhXFwvb3ZlcnZpZXcvLCAnbWFya2V0LWRhdGEnKSAgLy8gbWFya2V0IGRhdGEgZnJvbnQtcGFnZSBpcyAnL292ZXJ2aWV3J1xuICAgICAgICAucmVwbGFjZSgvXihwcm9ncmFtbWVzKS8sIFwibmV3cy8kMVwiKSAgICAgICAgIC8vIGNvbnZlcnQgL3Byb2dyYW1tZXMvY2xpY2sgdG8gL25ld3MvcHJvZ3JhbW1lcy9jbGlja1xuICAgICAgICAucmVwbGFjZSh3c0xhbmcsIFwid29ybGRzZXJ2aWNlLyQxXCIpICAgICAgICAgIC8vIGNvbnZlcnQgL2FyYWJpYyB0byAvd29ybGRzZXJ2aWNlL2FyYWJpY1xuICAgICAgICAucmVwbGFjZSgvXnd3aHAvLCAnJykgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IC93d2hwIHRvIC9cbiAgICAgICAgLnJlcGxhY2UoL1xcLmFwcCQvLCAnJykgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSAnLmFwcCcgZWcgL3Nwb3J0L2Zvb3RiYWxsLmFwcCBmb3IgUGhvbmVHYXBcbiAgICAgICAgLnJlcGxhY2UoL1xcLyskLywgJycpOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyBzbGFzaFxufTtcblxuLyoqXG4gKiBTZWN0aW9uIGV4Y2VwdGlvbnMgZm9yIGFkdmVydFxuICovXG52YXIgYnVpbGRBZHZlcnRTZWN0aW9ucyA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBwYXRoID0gcGF0aFxuICAgICAgICAucmVwbGFjZSgvXm5ld3NcXC93b3JsZFxcLyhbYS16XSspKC0oW2Etel0rKSk/LywgXCJuZXdzL3dvcmxkJDEkM1wiKSAgIC8vIC9uZXdzL3dvcmxkL3VzLWNhbmFkYS8gLT4gL25ld3Mvd29ybGR1c2NhbmFkYS9cbiAgICAgICAgLnJlcGxhY2UoL3Byb2dyYW1tZXNcXC9hc2lhYnVzaW5lc3NyZXBvcnQvLCAnYXNpYWJ1c2luZXNzJykgICAgICAgICAvLyAvcHJvZ3JhbW1lcy9hc2lhYnVzaW5lc3NyZXBvcnQgLT4gL2FzaWFidXNpbmVzc1xuICAgICAgICAucmVwbGFjZSgvcHJvZ3JhbW1lc1xcL2NsaWNrJC8sIFwiY2xpY2tvbmxpbmVcIikgICAgICAgICAgICAgICAgICAgICAgLy8gL3Byb2dyYW1tZXMvY2xpY2sgLT4gL2NsaWNrb25saW5lXG4gICAgICAgIC5yZXBsYWNlKC93b3JsZHNlcnZpY2VcXC8vLCBcIlwiKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAvd29ybGRzZXJ2aWNlL2FyYWJpYyAtPiAvYXJhYmljXG4gICAgcmV0dXJuIHBhdGguc3BsaXQoJy8nKTtcbn07XG5cbi8qKlxuICogU2VjdGlvbiBleGNlcHRpb25zIGZvciBhbmFseXRpY3NcbiAqL1xudmFyIGJ1aWxkQW5hbHl0aWNzU2VjdGlvbnMgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgcGF0aCA9IHBhdGhcbiAgICAgICAgLnJlcGxhY2UoL15zcGVjaWFsZmVhdHVyZXMvLCBcIm5ld3Mvc3BlY2lhbGZlYXR1cmVzXCIpICAvLyAvc3BlY2lhbGZlYXR1cmVzLyAtPiAvbmV3cy9zcGVjaWFsZmVhdHVyZXMvXG4gICAgICAgIC5yZXBsYWNlKC9ec3BvcnRcXC8oLiopXFwvKDIwWzAtOV17Mn0pKCR8XFwvKS8sIFwic3BvcnQvJDEtJDIkM1wiKTsgIC8vIHJlcGxhY2UgL3Nwb3J0L2JsYWgvMjAxNC8gd2l0aCAvc3BvcnQvYmxhaC0yMDE0L1xuICAgIHJldHVybiBwYXRoLnNwbGl0KCcvJyk7XG59O1xuXG4vKipcbiAqIEJ1aWxkIHVwIGFuIGFycmF5IG9mIHNlY3Rpb25zXG4gKi9cbnZhciBidWlsZCA9IGZ1bmN0aW9uKGlzQ3VycmVudFVyaSwgaHJlZikge1xuICAgIHZhciBwYXRoID0gJycsXG4gICAgICAgIF9zZWN0aW9ucyA9IFtdLFxuICAgICAgICBfYWR2ZXJ0U2VjdGlvbnMgPSBbXSxcbiAgICAgICAgX2FuYWx5dGljc1NlY3Rpb25zID0gW10sXG4gICAgICAgIFVOS05PV04gPSAndW5rbm93bicsXG4gICAgICAgIHJlc3VsdDtcbiAgICBpZiAodHlwZW9mIGhyZWYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJlc3VsdCA9IGhyZWYubWF0Y2goL2h0dHAofHMpOlxcL1xcL1thLXowLTlcXC0uXSsoLmNvbXwuY28udWt8Lm5ldCkoXFwvKT8oLiopPy8pO1xuICAgICAgICBpZiAocmVzdWx0KSB7ICAgICAgICAgICAgLy8gZWcgaHR0cDovL3d3dy5iYmMuY29tL2hlbGxvL3dvcmxkID0+IGhlbGxvL3dvcmxkXG4gICAgICAgICAgICBwYXRoID0gcmVzdWx0W3Jlc3VsdC5sZW5ndGgtMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBocmVmLm1hdGNoKC9eXFwvKC4qKT8vKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvLyBlZyAvID0+ICcnXG4gICAgICAgICAgICAgICAgLy8gZWcgL2hlbGxvL3dvcmxkID0+IGhlbGxvL3dvcmxkXG4gICAgICAgICAgICAgICAgcGF0aCA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoLTFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gVU5LTk9XTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChjb25maWcuZ2V0U2VjdGlvbnMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHNlY3Rpb25zIGZyb20gVXJpXG4gICAgICAgIHZhciB1cmkgPSBiYmNkb3Rjb20uYW5hbHl0aWNzSGVscGVyLmdldFVyaUZvclNlY3Rpb25zKCk7XG4gICAgICAgIGlmICh0eXBlb2YgdXJpID09PSAndW5kZWZpbmVkJyB8fCB1cmkgPT09ICcnIHx8IHVyaSA9PT0gbnVsbCB8fCB1cmkuaW5kZXhPZignaHR0cCcpICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBVbmtub3duIHdpbmRvdy5sb2NhdGlvblxuICAgICAgICAgICAgcGF0aCA9IFVOS05PV047XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSB1cmkubWF0Y2goL2h0dHAofHMpOlxcL1xcL1thLXowLTlcXC0uXSsoLmNvbXwuY28udWt8Lm5ldCkoXFwvKT8oLiopPy8pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHBhdGggPSByZXN1bHRbcmVzdWx0Lmxlbmd0aC0xXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IFVOS05PV047XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBVc2Ugc2VjdGlvbnMgZGVmaW5lZCBpbiB0aGUgSHRtbCBwYWdlIChsaWtlbHkgaW5qZWN0ZWQgd2l0aCBzZXJ2ZXItc2lkZSB2YWx1ZXMpXG4gICAgICAgIC8vIENvbnZlcnQgYXJyYXkgZWcgW1wibmV3c1wiLCBcIndvcmxkXCIsIFwiYXNpYVwiLCBcImluZGlhXCJdIHRvIHVyaSBwYXRoIGVnIFwiL25ld3Mvd29ybGQvYXNpYS9pbmRpYVwiXG4gICAgICAgIHBhdGggPSBjb25maWcuZ2V0U2VjdGlvbnMoKS5qb2luKCcvJyk7XG4gICAgfVxuICAgIHBhdGggPSBwYXRoIHx8ICcnO1xuICAgIHBhdGggPSBjbGVhbnVwUGF0aChwYXRoKTtcbiAgICBpZiAocGF0aCA9PT0gJycpIHtcbiAgICAgICAgLy8gSG9tZXBhZ2VcbiAgICAgICAgX3NlY3Rpb25zID0gX2FkdmVydFNlY3Rpb25zID0gX2FuYWx5dGljc1NlY3Rpb25zID0gWydob21lcGFnZSddO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIF9zZWN0aW9ucyA9IHBhdGguc3BsaXQoJy8nKTtcbiAgICAgICAgX2FkdmVydFNlY3Rpb25zID0gYnVpbGRBZHZlcnRTZWN0aW9ucyhwYXRoKTtcbiAgICAgICAgX2FuYWx5dGljc1NlY3Rpb25zID0gYnVpbGRBbmFseXRpY3NTZWN0aW9ucyhwYXRoKTtcbiAgICB9XG4gICAgaWYgKGlzQ3VycmVudFVyaSkge1xuICAgICAgICAvLyBQZXJzaXN0IGN1cnJlbnQgcGFnZSdzIHNlY3Rpb25zIGFzIGdsb2JhbHNcbiAgICAgICAgc2VjdGlvbnMgPSBfc2VjdGlvbnM7XG4gICAgICAgIGFkdmVydFNlY3Rpb25zID0gX2FkdmVydFNlY3Rpb25zO1xuICAgICAgICBhbmFseXRpY3NTZWN0aW9ucyA9IF9hbmFseXRpY3NTZWN0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIFtfc2VjdGlvbnMsIF9hZHZlcnRTZWN0aW9ucywgX2FuYWx5dGljc1NlY3Rpb25zXTtcbn07XG5cbi8qKlxuICogTG9hZCBjb3JyZWN0IGFycmF5IGVnICdzZWN0aW9ucycsICdhZHZlcnRTZWN0aW9ucycsICdhbmFseXRpY3NTZWN0aW9ucydcbiAqL1xudmFyIGdldEFycmF5ID0gZnVuY3Rpb24odHlwZSkge1xuICAgIHR5cGUgPSAodHlwZW9mIHR5cGUgPT09ICd1bmRlZmluZWQnID8gJycgOiB0eXBlKTtcbiAgICByZXR1cm4gKHR5cGUgPT09ICdhZHZlcnQnID8gYWR2ZXJ0U2VjdGlvbnMgOiAodHlwZSA9PT0gJ2FuYWx5dGljcycgPyBhbmFseXRpY3NTZWN0aW9ucyA6IHNlY3Rpb25zKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBidWlsZDogYnVpbGQsXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHNlY3Rpb24gb2YgdGhlIGhpZXJhcmNoeVxuICAgICAqXG4gICAgICogV2l0aCBhIGhlaXJhcmNoeSBvZiBcIm5ld3M+d29ybGQ+YXNpYVwiOlxuICAgICAqIGVnIGdldFNlY3Rpb24oMCkgICAgICAgICAgICAgICAgICA9PiAnbmV3cydcbiAgICAgKiBlZyBnZXRTZWN0aW9uKDEsICdhbmFseXRpY3MnKTsgICAgPT4gJ3dvcmxkYXNpYSdcbiAgICAgKiBlZyBnZXRTZWN0aW9uKDEsICdhZHZlcnQnLCB0cnVlKTsgPT4gJ3dvcmxkJ1xuICAgICAqXG4gICAgICogQHBhcmFtIGludGVnZXIgb2Zmc2V0IFdoaWNoIHNlY3Rpb25cbiAgICAgKiBAcGFyYW0gc3RyaW5nIHR5cGUgKG9wdGlvbmFsKSBXaGV0aGVyIHRvIGdyYWIgc2VjdGlvbiBmb3IgJ2FkdmVydCcgb3IgJ2FuYWx5dGljcydcbiAgICAgKiBAcGFyYW0gYm9vbGVhbiByZWxvYWREYXRhIChvcHRpb25hbCkgUmVidWlsZCBzZWN0aW9ucyBkYXRhIGJhc2VkIG9uIG5ldy9jdXJyZW50IHdpbmRvdy5sb2NhdGlvblxuICAgICAqIEByZXR1cm4gbWl4ZWQgc3RyaW5nfGJvb2xlYW4gUmV0dXJucyBmYWxzZSBpZiBvZmZzZXQgZG9lcyBub3QgZXhpc3RcbiAgICAgKi9cbiAgICBnZXRTZWN0aW9uOiBmdW5jdGlvbihvZmZzZXQsIHR5cGUsIHJlbG9hZERhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAoKHR5cGVvZiByZWxvYWREYXRhICE9PSAndW5kZWZpbmVkJyAmJiByZWxvYWREYXRhID09PSB0cnVlKSkge1xuICAgICAgICAgICAgICAgIGJ1aWxkKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ID0gcGFyc2VJbnQob2Zmc2V0LCAxMCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGdldEFycmF5KHR5cGUpICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICYmIHR5cGVvZiBnZXRBcnJheSh0eXBlKVtvZmZzZXRdICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICYmIGdldEFycmF5KHR5cGUpW29mZnNldF0gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEFycmF5KHR5cGUpW29mZnNldF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGllcmFyY2h5IGluIGEgc2VjdGlvbnMgYXJyYXlcbiAgICAgKlxuICAgICAqIFdpdGggYSBoaWVyYXJjaHkgb2YgXCJuZXdzPndvcmxkPmFzaWFcIjpcbiAgICAgKiBlZyBnZXRTZWN0aW9ucygpICAgICAgICAgICAgICAgICAgPT4gYXJyYXkoJ25ld3MnLCAnd29ybGQnLCAnYXNpYScpXG4gICAgICogZWcgZ2V0U2VjdGlvbnMoJ2FuYWx5dGljcycpOyAgICAgID0+IGFycmF5KCduZXdzJywgJ3dvcmxkYXNpYScpXG4gICAgICogZWcgZ2V0U2VjdGlvbnMoJ2FkdmVydCcsIHRydWUpOyAgID0+IGFycmF5KCduZXdzJywgJ3dvcmxkJywgJ2FzaWEnKVxuICAgICAqIGVnIGdldFNlY3Rpb25zKClbMl0gICAgICAgICAgICAgICA9PiAnYXNpYSdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHJpbmcgdHlwZSAob3B0aW9uYWwpIFdoZXRoZXIgdG8gZ3JhYiBzZWN0aW9uIGZvciAnYWR2ZXJ0JyBvciAnYW5hbHl0aWNzJ1xuICAgICAqIEBwYXJhbSBib29sZWFuIHJlbG9hZERhdGEgKG9wdGlvbmFsKSBSZWJ1aWxkIHNlY3Rpb25zIGRhdGEgYmFzZWQgb24gbmV3L2N1cnJlbnQgd2luZG93LmxvY2F0aW9uXG4gICAgICogQHJldHVybiBhcnJheSBTZWN0aW9uKHMpIGZvciBnaXZlbiBsaW5rXG4gICAgICovXG4gICAgZ2V0U2VjdGlvbnM6IGZ1bmN0aW9uKHR5cGUsIHJlbG9hZERhdGEpIHtcbiAgICAgICAgaWYgKCh0eXBlb2YgcmVsb2FkRGF0YSAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVsb2FkRGF0YSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgIGJ1aWxkKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRBcnJheSh0eXBlKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgaGllcmFyY2h5IGluIGEgc2VjdGlvbnMgYXJyYXkgZm9yIGEgZ2l2ZW4gVXJpLiAgU29tZXRpbWVzIHVzZWQgZm9yIHRyYW5zbGF0aW5nIGEgbGluaydzIGhyZWZcbiAgICAgKiBpbnRvIHNlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmluZyB1cmkgZWcgaHR0cDovL3d3dy5iYmMuY29tL2hlbGxvL3dvcmxkIG9yIC9oZWxsby93b3JsZFxuICAgICAqIEBwYXJhbSBzdHJpbmcgdHlwZSAob3B0aW9uYWwpIFdoZXRoZXIgdG8gZ3JhYiBzZWN0aW9uIGZvciAnYWR2ZXJ0JyBvciAnYW5hbHl0aWNzJ1xuICAgICAqIEByZXR1cm4gYXJyYXkgU2VjdGlvbihzKSBmb3IgZ2l2ZW4gbGlua1xuICAgICAqL1xuICAgIGdldFNlY3Rpb25zRm9yVXJpOiBmdW5jdGlvbih1cmksIHR5cGUpIHtcbiAgICAgICAgdXJpID0gKHR5cGVvZiB1cmkgPT09ICd1bmRlZmluZWQnIHx8IHVyaSA9PT0gbnVsbCA/ICcnIDogdXJpKTtcbiAgICAgICAgdHlwZSA9ICh0eXBlb2YgdHlwZSA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IHR5cGUpO1xuICAgICAgICB2YXIgZGF0YSA9IGJ1aWxkKGZhbHNlLCB1cmkpO1xuICAgICAgICByZXR1cm4gKHR5cGUgPT09ICdhZHZlcnQnID8gZGF0YVsxXSA6ICh0eXBlID09PSAnYW5hbHl0aWNzJyA/IGRhdGFbMl0gOiBkYXRhWzBdKSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZyBvbmx5LlxuICAgICAqL1xuICAgIHI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWN0aW9ucyA9IFtdO1xuICAgICAgICBhZHZlcnRTZWN0aW9ucyA9IFtdO1xuICAgICAgICBhbmFseXRpY3NTZWN0aW9ucyA9IFtdO1xuICAgIH1cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvc2VjdGlvbnMuanNcbiAqKi8iLCJ2YXIgZGF0YSA9IHtcbiAgICBhZHZlcnRpc2VtZW50VGV4dDogICAgICAgICAgXCJBZHZlcnRpc2VtZW50XCIsXG4gICAgaW5Bc3NvY2lhdGlvbldpdGhUZXh0OiAgICAgIFwiaW4gYXNzb2NpYXRpb24gd2l0aFwiLFxuICAgIHNwb25zb3JlZEJ5VGV4dDogICAgICAgICAgICBcImlzIHNwb25zb3JlZCBieVwiLFxuICAgIGFkdmVydGlzaW5nUGFydG5lcnNUZXh0OiAgICBcIkFkdmVydGlzaW5nIFBhcnRuZXJzXCIsXG4gICAgYWRzQnlHb29nbGVUZXh0OiAgICAgICAgICAgIFwiQWRzIGJ5IEdvb2dsZVwiLFxuICAgIGFkdmVydEluZm9QYWdlVXJsOiAgICAgICAgICBcImh0dHA6Ly93d3cuYmJjLmNvbS9wcml2YWN5L2Nvb2tpZXMvaW50ZXJuYXRpb25hbC9cIixcbiAgICBhc3NvY2lhdGlvbkluZm9QYWdlVXJsOiAgICAgXCJodHRwczovL2FkdmVydGlzaW5nLmJiY3dvcmxkd2lkZS5jb20vYmJjLXN0b3J5d29ya3MtY29udGVudC1kZWZpbml0aW9ucy9cIixcbiAgICBnb29nbGVBZHNQYWdlVXJsOiAgICAgICAgICAgXCJodHRwOi8vd3d3LmJiYy5jby51ay9iYmMuY29tL2ZhcS9hZHNfYnlfZ29vZ2xlLnNodG1sXCJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdldDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiBkYXRhW2ZpZWxkXTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGZpZWxkLCB0ZXh0KSB7XG4gICAgICAgIGRhdGFbZmllbGRdID0gdGV4dDtcbiAgICB9LFxuICAgIGdldERhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9sb2NhbGUuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBwcm92aWRlcnM6IHtcbiAgICAgICAgZURpZ2l0YWxSZXNlYXJjaDoge1xuICAgICAgICAgICAga2V5OiAnSU5TLXZ0MjktNjY2MTg4OTU0JyxcbiAgICAgICAgICAgIHVybDogYmJjZG90Y29tLmFzc2V0UHJlZml4ICsgJ3NjcmlwdC92ZW5kb3IvZWRyL2Vkci5taW4uanMnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFkc0VuYWJsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChiYmNkb3Rjb20uZGF0YSAhPT0gdW5kZWZpbmVkKSAmJiAoKGJiY2RvdGNvbS5kYXRhLmEgIT09IHVuZGVmaW5lZCAmJiBiYmNkb3Rjb20uZGF0YS5hID09PSAxKVxuICAgICAgICAgICAgfHwgIChiYmNkb3Rjb20uZGF0YS5hZHMgIT09IHVuZGVmaW5lZCAmJiBiYmNkb3Rjb20uZGF0YS5hZHMgPT09IDEpKTtcbiAgICB9LFxuICAgIHN1cnZleUVuYWJsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGJiY2RvdGNvbS5mbGFnICE9PSB1bmRlZmluZWQgJiYgYmJjZG90Y29tLmZsYWcucyA9PT0gMTtcbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGJiY2RvdGNvbS5zdXJ2ZXkuYWRzRW5hYmxlZCgpICYmIGJiY2RvdGNvbS5zdXJ2ZXkuc3VydmV5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5FRFJTdXJ2ZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgYmJjZG90Y29tLnN1cnZleS5sb2FkU2NyaXB0KGRvY3VtZW50LCBiYmNkb3Rjb20uc3VydmV5LnByb3ZpZGVycy5lRGlnaXRhbFJlc2VhcmNoLnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGxvYWRTY3JpcHQ6IGZ1bmN0aW9uIChkb2MsIHBhdGgsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLFxuICAgICAgICAgICAgYSA9ICdhc3luYycsXG4gICAgICAgICAgICBiID0gJ2RlZmVyJztcbiAgICAgICAgcy5zZXRBdHRyaWJ1dGUoYSwgYSk7XG4gICAgICAgIHMuc2V0QXR0cmlidXRlKGIsIGIpO1xuICAgICAgICBzLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgcy5zcmMgPSBwYXRoO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzLm9ubG9hZCA9IGNhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHMpO1xuICAgIH1cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvc3VydmV5LmpzXG4gKiovIiwiLyoqXG4gKiBAbW9kdWxlIENsYXNzZXNcbiAqXG4gKi9cblxudmFyIENMQVNTX0JBU0UgPSAnYmJjZG90Y29tJztcbnZhciBDTEFTU19TRVAgPSAnLSc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gYXJiaXRyYXJ5IG51bWJlciBvZiBzdHJpbmcgYXJndW1lbnRzLCByZXR1cm4gYSBjbGFzcyBuYW1lIGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBhcmd1bWVudHNcbiAqIHByZWZpeGVkIHdpdGggQ0xBU1NfQkFTRSBhbmQgY29uY2F0ZW5hdGVkIHVzaW5nIENMQVNTX1NFUFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNsYXNzTmFtZSgpIHtcbiAgICByZXR1cm4gW0NMQVNTX0JBU0VdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKS5qb2luKENMQVNTX1NFUCk7XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gYXJiaXRyYXJ5IG51bWJlciBvZiBzdHJpbmcgb3IgYXJyYXkgYXJndW1lbnRzLCByZXR1cm4gYSBzcGFjZS1jb25jYXRlbmF0ZWQgbGlzdCBvZiBjbGFzc2VzXG4gKiBjcmVhdGVkIGJ5IHBhc3NpbmcgZWFjaCBhcmd1bWVudCB0aHJvdWdoIGNsYXNzTmFtZSgpXG4gKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcbiAgICB2YXIgaSwgY2xhc3NlcyA9IFtdLCBhcnIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZS5hcHBseShudWxsLCB1dGlscy5pc1N0cmluZyhhcnJbaV0pID8gW2FycltpXV0gOiBhcnJbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcblxuICAgIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXMsXG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiB0aGUgYmJjZG90Y29tLmNvbmZpZyBvYmplY3QgYW5kIG9wdGlvbmFsbHkgdGhlIGN1cnJlbnQgcm9vdCBjb250ZXh0ICh3aW5kb3cpXG4gICAgICogcmV0dXJuIGEgc3BhY2UtY29uY2F0ZW5hdGVkIGxpc3Qgb2YgY2xhc3NlcyB3aGljaCBzaG91bGQgYmUgYWRkZWQgdG8gc29tZSB0b3AgbGV2ZWwgRE9NIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWdcbiAgICAgKiBAcGFyYW0gcm9vdE92ZXJyaWRlXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBmcm9tQ29uZmlnOiBmdW5jdGlvbiAoY29uZmlnLCByb290T3ZlcnJpZGUpIHtcbiAgICAgICAgdmFyIGZpbmFsUm9vdCA9IHJvb3RPdmVycmlkZSB8fCB3aW5kb3c7XG4gICAgICAgIHZhciBjbGFzc2VzID0gW107XG5cbiAgICAgICAgaWYgKGNvbmZpZy5pc0FzeW5jKCkpIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnYXN5bmMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuaXNBZHNFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnYWRzLWVuYWJsZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaW5hbFJvb3QuY29uZmlnICYmIGZpbmFsUm9vdC5jb25maWcuc2VydmljZSkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKFsnc2VydmljZScsIGZpbmFsUm9vdC5jb25maWcuc2VydmljZV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgY2xhc3Nlcyk7XG4gICAgfVxufTtcblxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvY2xhc3Nlcy5qc1xuICoqLyIsInZhciBzZWN0aW9ucyA9IHJlcXVpcmUoJ3NlY3Rpb25zJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnY29uZmlnJyk7XG5cbnZhciBLcnV4ID0gZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qKlxuICAgICAqIEtlZXAgbGlzdCB1cCB0byBkYXRlIHdpdGggaHR0cHM6Ly9jb25mbHVlbmNlLmRldi5iYmMuY28udWsvZGlzcGxheS9iYmNjb20vS3J1eCtDb250cm9sK1RhZytyZWZlcmVuY2VcbiAgICAgKi9cblxuICAgIHRoaXMuY29uZmlnTWFwID0ge1xuICAgICAgICAnd3dzY3JpcHRzJzogJ0pjRHBuMTFNJyxcbiAgICAgICAgJ2F1dG9zJzogJ0pjRHBuMTFNJyxcbiAgICAgICAgJ2hvbWVwYWdlJzogJ0pBOG1JdE9IJyxcbiAgICAgICAgJ25ld3MnOiAnSlpUV3BHc00nLFxuICAgICAgICAnc3BvcnQnOiAnSlpoNy0xdEwnLFxuICAgICAgICAnd2VhdGhlcic6ICdKY0xxbGRXbCcsXG4gICAgICAgICdjYXBpdGFsJzogJ0pjRHBWWEVTJyxcbiAgICAgICAgJ2N1bHR1cmUnOiAnSmNEcFFtOWMnLFxuICAgICAgICAnZWFydGgnOiAnSmNEcGdkQkonLFxuICAgICAgICAnZnV0dXJlJzogJ0pjRHBEdXJRJyxcbiAgICAgICAgJ3RyYXZlbCc6ICdKY0RvLWcxSScsXG4gICAgICAgICd3b3JsZHNlcnZpY2UnOiB7XG4gICAgICAgICAgICAnYmVuZ2FsaSc6ICdLTGNyTlhSRCcsXG4gICAgICAgICAgICAnbmVwYWxpJzogJ0tMY3JaeVl2JyxcbiAgICAgICAgICAgICdwYXNodG8nOiAnS0xjcnVVRjAnLFxuICAgICAgICAgICAgJ3NpbmhhbGEnOiAnS0xjcnphdXYnLFxuICAgICAgICAgICAgJ3RhbWlsJzogJ0tMY3I0OTR3JyxcbiAgICAgICAgICAgICdidXJtZXNlJzogJ0tMY3ItRVpkJyxcbiAgICAgICAgICAgICdqYXBhbmVzZSc6ICdLTGNzRTYxaycsXG4gICAgICAgICAgICAna3lyZ3l6JzogJ0tMY3NMejl0JyxcbiAgICAgICAgICAgICd1emJlayc6ICdLTGNzUjNUaScsXG4gICAgICAgICAgICAnYXplcmknOiAnS0xjc1doME8nLFxuICAgICAgICAgICAgJ3VrcmFpbmlhbic6ICdLTGNzY1JfOCcsXG4gICAgICAgICAgICAnYWZyaXF1ZSc6ICdLQVFfS1NheScsXG4gICAgICAgICAgICAnYXJhYmljJzogJ0pjTHF5RU0xJyxcbiAgICAgICAgICAgICdtdW5kbyc6ICdKY0xxMmcxZycsXG4gICAgICAgICAgICAncnVzc2lhbic6ICdKY0xxdFpoOCcsXG4gICAgICAgICAgICAndHVya2NlJzogJ0pzQTJHT3oyJyxcbiAgICAgICAgICAgICdwb3J0dWd1ZXNlJzogJ0pzQTJOOGRCJyxcbiAgICAgICAgICAgICdzd2FoaWxpJzogJ0pzQTJZVFlNJyxcbiAgICAgICAgICAgICdoaW5kaSc6ICdKc0EyMGRkSycsXG4gICAgICAgICAgICAnaGF1c2EnOiAnSnNBMjdUaGEnLFxuICAgICAgICAgICAgJ2dhaHV6YSc6ICdLQVFfQnZvXycsXG4gICAgICAgICAgICAnc29tYWxpJzogJ0tBUV9RS0FPJyxcbiAgICAgICAgICAgICdwZXJzaWFuJzogJ0tCUm13Tm1TJyxcbiAgICAgICAgICAgICd1cmR1JzogJ0tCUm1kamREJyxcbiAgICAgICAgICAgICd1a2NoaW5hJzoge1xuICAgICAgICAgICAgICAgICdzaW1wJzogJ0tDQ05GSy1GJyxcbiAgICAgICAgICAgICAgICAndHJhZCc6ICdLQ0NOanFzSydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAndmlldG5hbWVzZSc6ICdLQlJPcXRsbycsXG4gICAgICAgICAgICAnemhvbmd3ZW4nOiB7XG4gICAgICAgICAgICAgICAgJ3NpbXAnOiAnS0JSbGQ4MU0nLFxuICAgICAgICAgICAgICAgICd0cmFkJzogJ0tCUk8zcGwxJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn07XG5cbktydXgucHJvdG90eXBlLmdldEtydXhJZCA9IGZ1bmN0aW9uKHNlY3Rpb25zQXJyYXkpIHtcbiAgICB2YXIgY29uZmlnTWFwID0gdGhpcy5jb25maWdNYXA7XG4gICAgaWYgKCFzZWN0aW9uc0FycmF5IHx8IHNlY3Rpb25zQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIEtydXggSUQgYmFzZWQgb24gdGhlIHNlY3Rpb25zXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGksIG47XG4gICAgICAgIGZvciAoaSA9IDAsIG4gPSBzZWN0aW9uc0FycmF5Lmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgdmFyIGsgPSBzZWN0aW9uc0FycmF5W2ldO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ01hcC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ01hcCA9IGNvbmZpZ01hcFtrXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFRyeSB0aGUgcHJldmlvdXMgbWV0aG9kXG4gICAgICAgIHJldHVybiB0aGlzLmdldEtydXhJZE1ldGhvZDIoc2VjdGlvbnNBcnJheSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZ01hcCAmJiAodHlwZW9mIGNvbmZpZ01hcCA9PT0gXCJzdHJpbmdcIiB8fCBjb25maWdNYXAgaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBjb25maWdNYXA7IC8vIFNlYXJjaCBhYm92ZSB3b3JrZWQsIHJldHVyblxuICAgIH1cblxuICAgIC8vIFRyeSB0aGUgcHJldmlvdXMgbWV0aG9kXG4gICAgcmV0dXJuIHRoaXMuZ2V0S3J1eElkTWV0aG9kMihzZWN0aW9uc0FycmF5KTtcbn07XG5cbktydXgucHJvdG90eXBlLmdldEtydXhJZE1ldGhvZDIgPSBmdW5jdGlvbiAoc2VjdGlvbnNBcnJheSkge1xuICAgIHZhciBrcnV4SWQ7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZ01hcFtzZWN0aW9uc0FycmF5WzFdXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBrcnV4SWQgPSB0aGlzLmNvbmZpZ01hcFtzZWN0aW9uc0FycmF5WzFdXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZ01hcFtzZWN0aW9uc0FycmF5WzBdXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBrcnV4SWQgPSB0aGlzLmNvbmZpZ01hcFtzZWN0aW9uc0FycmF5WzBdXTtcbiAgICB9XG5cbiAgICBpZiAoa3J1eElkICYmICh0eXBlb2Yga3J1eElkID09PSBcInN0cmluZ1wiIHx8IGtydXhJZCBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgICAgcmV0dXJuIGtydXhJZDsgLy8gU2VhcmNoIGFib3ZlIHdvcmtlZCwgcmV0dXJuXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuS3J1eC5wcm90b3R5cGUud3JpdGVLcnV4ID0gZnVuY3Rpb24ocHJvdmlkZWRLcnV4SWQpIHtcbiAgICBpZiAod2luZG93LmJiY2RvdGNvbSAmJiBiYmNkb3Rjb20uZGF0YS5zdGF0cyA9PT0gMSAmJiAhY29uZmlnLmlzU3BvcnRBcHAoKSkge1xuICAgICAgICB2YXIga3J1eElkID0gcHJvdmlkZWRLcnV4SWQgfHwgdGhpcy5nZXRLcnV4SWQoc2VjdGlvbnMuZ2V0U2VjdGlvbnMoKSk7XG5cbiAgICAgICAgaWYgKGtydXhJZCkge1xuICAgICAgICAgICAgZG9jdW1lbnQud3JpdGUoJzxzY3JpcHQgY2xhc3M9XCJreGN0XCIgZGF0YS1pZD1cIicgKyBrcnV4SWQgKyAnXCIgZGF0YS10aW1pbmc9XCJhc3luY1wiIGRhdGEtdmVyc2lvbj1cIjEuOVwiIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj4nXG4gICAgICAgICAgICAgICAgKyAnaWYgKHdpbmRvdy5iYmNkb3Rjb20gJiYgKGJiY2RvdGNvbS5kYXRhLmFkcyA9PSAxIHx8IGJiY2RvdGNvbS5kYXRhLnN0YXRzID09IDEpKSB7J1xuICAgICAgICAgICAgICAgICsgJyAgICB3aW5kb3cuS3J1eHx8KChLcnV4PWZ1bmN0aW9uKCl7S3J1eC5xLnB1c2goYXJndW1lbnRzKX0pLnE9W10pOydcbiAgICAgICAgICAgICAgICArICcgICAgKGZ1bmN0aW9uKCl7J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgdmFyIGs9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtrLnR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIjtrLmFzeW5jPXRydWU7J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgdmFyIG0sc3JjPShtPWxvY2F0aW9uLmhyZWYubWF0Y2goL1xcXFxia3hzcmM9KFteJl0rKS8pKSYmZGVjb2RlVVJJQ29tcG9uZW50KG1bMV0pOydcbiAgICAgICAgICAgICAgICArICcgICAgICAgIGsuc3JjID0gL15odHRwcz86XFxcXC9cXFxcLyhbYS16MC05X1xcXFwtXFxcXC5dK1xcXFwuKT9rcnhkXFxcXC5uZXQoOlxcXFxkezEsNX0pP1xcXFwvL2kudGVzdChzcmMpID8gJ1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgICAgc3JjIDogc3JjID09PSBcImRpc2FibGVcIiA/IFwiXCIgOidcbiAgICAgICAgICAgICAgICArICcgICAgICAgIChsb2NhdGlvbi5wcm90b2NvbD09PVwiaHR0cHM6XCI/XCJodHRwczpcIjpcImh0dHA6XCIpK1wiLy9jZG4ua3J4ZC5uZXQvY29udHJvbHRhZz9jb25maWQ9JyArIGtydXhJZCArICdcIjsnXG4gICAgICAgICAgICAgICAgKyAnICAgICAgICB2YXIgcz1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXTtzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGsscyk7J1xuICAgICAgICAgICAgICAgICsgJyAgICB9KCkpOydcbiAgICAgICAgICAgICAgICArICd9J1xuICAgICAgICAgICAgICAgICsgZGVjb2RlVVJJQ29tcG9uZW50KCclM0MnKSArICcvc2NyaXB0PicpO1xuICAgICAgICAgICAgZG9jdW1lbnQud3JpdGUoJzxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPidcbiAgICAgICAgICAgICAgICArICcgICAgaWYgKHdpbmRvdy5iYmNkb3Rjb20gJiYgKGJiY2RvdGNvbS5kYXRhLmFkcyA9PSAxIHx8IGJiY2RvdGNvbS5kYXRhLnN0YXRzID09IDEpKSB7J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgd2luZG93LktydXh8fCgoS3J1eD1mdW5jdGlvbigpe0tydXgucS5wdXNoKGFyZ3VtZW50cyk7fSkucT1bXSk7J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgKGZ1bmN0aW9uKCl7J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgICAgIGZ1bmN0aW9uICByZXRyaWV2ZShuKXsnXG4gICAgICAgICAgICAgICAgKyAnICAgICAgICAgICAgICAgIHZhciAgbSwgIGs9XCJreFwiK247J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgICAgICAgICBpZiAgKHdpbmRvdy5sb2NhbFN0b3JhZ2UpICB7J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgICAgICAgICAgICAgcmV0dXJuICB3aW5kb3cubG9jYWxTdG9yYWdlW2tdICB8fCAgXCJcIjsnXG4gICAgICAgICAgICAgICAgKyAnICAgICAgICAgICAgICAgIH0gIGVsc2UgIGlmICAobmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpICB7J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgICAgICAgICAgICAgbSAgPSAgZG9jdW1lbnQuY29va2llLm1hdGNoKGsrXCI9KFteO10qKVwiKTsnXG4gICAgICAgICAgICAgICAgKyAnICAgICAgICAgICAgICAgICAgICByZXR1cm4gIChtICAmJiAgdW5lc2NhcGUobVsxXSkpICB8fCAgXCJcIjsnXG4gICAgICAgICAgICAgICAgKyAnICAgICAgICAgICAgICAgIH0gIGVsc2UgIHsnXG4gICAgICAgICAgICAgICAgKyAnICAgICAgICAgICAgICAgICAgICByZXR1cm4gIFwiXCI7J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgICAgICAgICB9J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgICAgIH0nXG4gICAgICAgICAgICAgICAgKyAnICAgICAgICAgICAgS3J1eC51c2VyICA9ICByZXRyaWV2ZShcInVzZXJcIik7J1xuICAgICAgICAgICAgICAgICsgJyAgICAgICAgICAgIEtydXguc2VnbWVudHMgID0gIHJldHJpZXZlKFwic2Vnc1wiKSAgJiYgIHJldHJpZXZlKFwic2Vnc1wiKS5zcGxpdChcIixcIikgIHx8ICBbXTsnXG4gICAgICAgICAgICAgICAgKyAnICAgICAgICB9KSgpOydcbiAgICAgICAgICAgICAgICArICcgICAgfSdcbiAgICAgICAgICAgICAgICArIGRlY29kZVVSSUNvbXBvbmVudCgnJTNDJykgKyAnL3NjcmlwdD4nKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS3J1eDtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9rcnV4LmpzXG4gKiovIiwidmFyIGtleVZhbHVlcyA9IHJlcXVpcmUoJ2FkdmVydHMva2V5VmFsdWVzJyk7XG52YXIgZGZwcFJlcXVlc3QgPSByZXF1aXJlKCdhZHZlcnRzL2RmcHBSZXF1ZXN0Jyk7XG5cbnZhciBQcmVkaWNhdGUgPSBmdW5jdGlvbiBQcmVkaWNhdGUgKCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdGhpcy5leGNsdXNpb25zID0gW107XG4gICAgdGhpcy5pbmNsdXNpb25zID0gW107XG4gICAgdGhpcy5wcmVkaWNhdGVzID0ge1xuICAgICAgICBhaXJsaW5lOntcbiAgICAgICAgICAgIHJ1bGVzOntcbiAgICAgICAgICAgICAgICAxOnsgLy8gZWFjaCBydWxlIGlzIGFuIE9SXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOntcbiAgICAgICAgICAgICAgICAgICAgICAgIDE6WydhaXInLCdwbGFuZScsJ2ZsaWdodCcsJ2pldCcsJ2F2aWF0aW9uJ10sICAgIC8vIGVhY2ggbGluZSBpcyBhbiBBTkRcbiAgICAgICAgICAgICAgICAgICAgICAgIDI6Wydhc2gnLCdib21iJywnY3Jhc2gnLCdkZWFkJywnZGV0b25hdCcsJ2Rpc2FzdGVyJywnZGlzcnVwdCcsJ2VtZXJnZW5jJywnZmlyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY2lkZW50JywnaW5qdXInLCdraWxsJywnbWlzc2luZycsJ3BhY2thZ2UnLCdwYXNzZW5nZXInLCdjcmV3Jywnc2VhcmNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2NvcmUnLCdzdHJhbmQnLCdzdHJpa2UnLCd2b2xjYW4nLCd3cmVjayddIC8vZWFjaCBsaW5lIGlzIGFuIEFORFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTpcIiFjXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIDI6e1xuICAgICAgICAgICAgICAgICAgICBtYXRjaDp7XG4gICAgICAgICAgICAgICAgICAgICAgICAxOlsnb3NhbWEnLCdiaW4gbGFkZW4nLCd0d2luIHRvd2VycycsJzlcXC8xMSxzZXB0ZW1iZXIgMTEnLCcxMSBzZXB0ZW1iZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhbC1xYWVkYScsJ2FsIHFhZWRhJ11cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6XCIhY1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2aW9sZW5jZTp7XG4gICAgICAgICAgICBydWxlczp7XG4gICAgICAgICAgICAgICAgMTp7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOntcbiAgICAgICAgICAgICAgICAgICAgICAgIDE6WydyaW90JywndmlvbGVuJywnbG9vdCcsJ3VucmVzdCcsJ3VucnVseScsJ2F0dGFjaycsJ2Rpc3R1cmJhbmNlJywnc2hvdCcsJ2Rpc29yZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYW5hcmNoJywnY2hhb3RpYycsJ2NoYW9zJywndW5ydWxpbmVzcycsJ21pbmRsZXNzJywnc3RlYWxpbmcnLCdzdG9sZW4nLCd0aGlldicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RoZWZ0JywnYXJzb24nLCdjcmlzaXMnLCdkaXNhcnJheScsJ2Rpc2NvcmQnLCdsYXdsZXNzbmVzcycsJ2NyaW1pbmFsJywndmFuZGFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGh1ZycsJ2VuZ3VsZicsJ2ZsYW1lJywnYnVybiddXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOlwiIWNcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2Vuc2l0aXZlOntcbiAgICAgICAgICAgIHJ1bGVzOntcbiAgICAgICAgICAgICAgICAxOntcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2g6e1xuICAgICAgICAgICAgICAgICAgICAgICAgMTpbJ3Zpb2xlbmNlJywgJ2ZpcmVhcm1zJywgJ2FybXMnLCAndG9iYWNjbycsICdoeWdpZW5lJywgJ3JlbGlnaW8nLCAnY3JpbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lsbGVnYWwnLCAncG9saXRpYycsICdwb3JubycsICdwYWVkb3BoaWxlJywgJ2dvb2dsZScsICdpbnRlcm5ldCddXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOlwiIWNcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZXhjbHVzaW9ucyBFeGNsdXNpb25zIGNhbiBlaXRoZXIgYmUgYW4gYXJyYXkgXCJbJ2FpcmxpbmUnLCd2aW9sZW5jZSddXCIgb3IgYSBzdHJpbmcgXCJhaXJsaW5lLHZpb2xlbmNlXCJcbiAgICAgKi9cbiAgICB0aGlzLnNldEFkRXhjbHVzaW9uID0gZnVuY3Rpb24oZXhjbHVzaW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIGV4Y2x1c2lvbnMgPT09ICd1bmRlZmluZWQnIHx8IGV4Y2x1c2lvbnMgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGZvciAoZSBpbiBleGNsdXNpb25zKSB7XG4gICAgICAgICAgICBpZiAoZXhjbHVzaW9ucy5oYXNPd25Qcm9wZXJ0eShlKSkge1xuICAgICAgICAgICAgICAgIGRmcHBSZXF1ZXN0LnNldEV4Y2x1c2lvbihleGNsdXNpb25zW2VdKTtcbiAgICAgICAgICAgICAgICAvLyBBZGRpbmcgdGhlIE5FVyBHUFQgd2F5IHRoaXMgd2F5IHNvIHRoYXQgd2hlbiBnZXRQcmVyb2xsQWRUYWcgaXMgY2FsbGVkIGl0IGlzIHBvcHVsYXRlZC5cbiAgICAgICAgICAgICAgICBrZXlWYWx1ZXMuc2V0KCdleGNsX2NhdCcsIGV4Y2x1c2lvbnMuam9pbignLCcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlWYWx1ZXMuc2V0KCchYycsIGV4Y2x1c2lvbnMuam9pbignLCcpKTtcbiAgICB9O1xuXG59O1xuXG5QcmVkaWNhdGUucHJvdG90eXBlLmdldEV4Y2x1c2lvbnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5leGNsdXNpb25zO1xufTtcblxuUHJlZGljYXRlLnByb3RvdHlwZS5nZXRJbmNsdXNpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5jbHVzaW9ucztcbn07XG5cblByZWRpY2F0ZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oY29udGVudE1ldGFEYXRhKSB7XG4gICAgdmFyIHgsXG4gICAgICAgIG4sXG4gICAgICAgIGtleSxcbiAgICAgICAgbnVtYmVyVG9NYXRjaCxcbiAgICAgICAgbnVtYmVyTWF0Y2hlZDtcbiAgICBjb250ZW50TWV0YURhdGEgPSBjb250ZW50TWV0YURhdGEudG9Mb3dlckNhc2UoKTtcbiAgICBmb3Ioa2V5IGluIHRoaXMucHJlZGljYXRlcykge1xuICAgICAgICBmb3IoeCBpbiB0aGlzLnByZWRpY2F0ZXNba2V5XS5ydWxlcykge1xuICAgICAgICAgICAgbnVtYmVyVG9NYXRjaCA9IDA7XG4gICAgICAgICAgICBudW1iZXJNYXRjaGVkID0gMDtcbiAgICAgICAgICAgIGZvcihuIGluIHRoaXMucHJlZGljYXRlc1trZXldLnJ1bGVzW3hdLm1hdGNoKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyVG9NYXRjaCsrO1xuICAgICAgICAgICAgICAgIHZhciBleHAgPSBuZXcgUmVnRXhwKHRoaXMucHJlZGljYXRlc1trZXldLnJ1bGVzW3hdLm1hdGNoW25dLmpvaW4oJ3wnKSk7XG4gICAgICAgICAgICAgICAgaWYgKGV4cC50ZXN0KGNvbnRlbnRNZXRhRGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyTWF0Y2hlZCsrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE11c3QgbWF0Y2ggZWFjaCBsaXN0IGFzIGl0J3MgYW4gQU5EIG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgwICE9PSBudW1iZXJNYXRjaGVkICYmIG51bWJlclRvTWF0Y2ggPT09IG51bWJlck1hdGNoZWQpIHtcbiAgICAgICAgICAgICAgICBpZignIWMnID09PSB0aGlzLnByZWRpY2F0ZXNba2V5XS5ydWxlc1t4XS52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBFeGNsdXNpb25zXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhjbHVzaW9ucy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5jbHVzaW9uc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluY2x1c2lvbnMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNldEFkRXhjbHVzaW9uKHRoaXMuZXhjbHVzaW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByZWRpY2F0ZTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9wcmVkaWNhdGUuanNcbiAqKi8iLCJ2YXIgc2VjdGlvbnMgPSByZXF1aXJlKCcuLi9zZWN0aW9ucycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIGtleVZhbHVlcyA9IHt9LFxuICAgIGtleXdvcmRPYmogPSBmYWxzZSxcbiAgICBhc3NldFR5cGVNYXAgPSB7XG4gICAgICAgICdBVicgICAgOiAnbWVkaWFfYXNzZXQnLFxuICAgICAgICAnSU5ERVgnIDogJ2luZGV4J1xuICAgIH07XG5cbnZhciBzZXRTdG9yeUlkID0gZnVuY3Rpb24gKHdpbmRvd0xvY2F0aW9uSHJlZikge1xuICAgIGlmICgvKFswLTldezcsOH0pJC8udGVzdCh3aW5kb3dMb2NhdGlvbkhyZWYuc3BsaXQoXCI/XCIpWzBdLnNwbGl0KFwiI1wiKVswXSkpIHtcbiAgICAgICAga2V5VmFsdWVzWydzdG9yeV9pZCddID0gUmVnRXhwLiQxO1xuICAgIH1cbn07XG5cbnZhciBzZXRDVHlwZSA9IGZ1bmN0aW9uICh3aW5kb3dMb2NhdGlvbkhyZWYpIHtcbiAgICB3aW5kb3dMb2NhdGlvbkhyZWYgPSB3aW5kb3dMb2NhdGlvbkhyZWYuc3BsaXQoXCI/XCIpWzBdLnNwbGl0KFwiI1wiKVswXTtcbiAgICBrZXlWYWx1ZXNbJ2N0eXBlJ10gPSAoL1swLTldezcsOH0kLy50ZXN0KHdpbmRvd0xvY2F0aW9uSHJlZikpID8gJ2NvbnRlbnQnIDogJ2luZGV4Jztcbn07XG5cbnZhciBzZXRBc3NldFR5cGUgPSBmdW5jdGlvbiAod2luZG93TG9jYXRpb25IcmVmLCBhc3NldFR5cGUpIHtcbiAgICBpZiAodHlwZW9mIGtleVZhbHVlc1snYXNzZXRfdHlwZSddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBBc3NldCB0eXBlIElOREVYIHdpbGwgYmUgc2V0IGZvciBJbmRleCBhbmQgRmVhdHVyZSBJbmRleGVzIGFuZCBzaG91bGQgb3ZlcnJpZGUgdGhlIHVzZSBvZiB0aGUgdXJsXG4gICAgICAgIGlmIChhc3NldFR5cGUgJiYgdHlwZW9mIGFzc2V0VHlwZSA9PT0gJ3N0cmluZycgJiYgYXNzZXRUeXBlTWFwW2Fzc2V0VHlwZV0pIHtcbiAgICAgICAgICAgIGtleVZhbHVlc1snYXNzZXRfdHlwZSddID0gYXNzZXRUeXBlTWFwW2Fzc2V0VHlwZV07XG4gICAgICAgIH0gZWxzZSB7IC8vIElmIGFuIGFzc2V0IHR5cGUgb2YgQVYgb3IgSU5ERVggaGFzIG5vdCBiZWVuIGRlZmluZWQgdXNlIHRoZSB1cmwgdG8gd29yayBvdXQgdGhlIHR5cGVcbiAgICAgICAgICAgIHdpbmRvd0xvY2F0aW9uSHJlZiA9IHdpbmRvd0xvY2F0aW9uSHJlZi5zcGxpdChcIj9cIilbMF0uc3BsaXQoXCIjXCIpWzBdO1xuICAgICAgICAgICAga2V5VmFsdWVzWydhc3NldF90eXBlJ10gPSAoL1swLTldezcsOH0kLy50ZXN0KHdpbmRvd0xvY2F0aW9uSHJlZikpID8gJ3N0b3J5JyA6ICdpbmRleCc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsIGxpdmUgZXhwZXJpZW5jZSBwYWdlcyBzaG91bGQgb3ZlcnJpZGUgdGhlIGFzc2V0IHR5cGVcbiAgICAgICAgaWYgKC9cXC8oc3BvcnR8bmV3cylcXC9saXZlXFwvLy50ZXN0KHdpbmRvd0xvY2F0aW9uSHJlZikpIHtcbiAgICAgICAgICAgIGtleVZhbHVlc1snYXNzZXRfdHlwZSddID0gJ2xpdmVfZXZlbnQnIDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBzZXRSZWZlcnJlciA9IGZ1bmN0aW9uKHJlZmVycmVyKSB7XG4gICAgLy8gUmVmZXJyZXIgS2V5VmFsdWVcbiAgICB2YXIgbWF0Y2hBcnIgPSByZWZlcnJlci5tYXRjaCgvXihodHRwW3NdPzpcXC9cXC9bYS16MC05XFwuXSpiYmNcXC4oY29cXC51a3xjb20pKSguKikkLyk7XG4gICAgaWYobWF0Y2hBcnIpIHtcbiAgICAgICAgLy8gV2l0aGluIGJiYyB3ZWJzaXRlXG4gICAgICAgIHZhciByZWZTdHJpbmc7XG4gICAgICAgIHJlZlN0cmluZyA9IG1hdGNoQXJyWzNdLnJlcGxhY2UoL2RlZmF1bHQuc3RtJHxcXC18XFwvfF8vZyxcIlwiKTtcbiAgICAgICAgaWYocmVmU3RyaW5nLmxlbmd0aCA+IDAgJiYgcmVmU3RyaW5nLmxlbmd0aCA8PSA2NCkge1xuICAgICAgICAgICAga2V5VmFsdWVzWydyZWZlcnJlciddID0gZXNjYXBlKHJlZlN0cmluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXlWYWx1ZXNbJ3JlZmVycmVyJ10gPSBcIlwiO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2F0Y2ggZXhjZXB0aW9uc1xuICAgICAgICBrZXlWYWx1ZXNbJ3JlZmVycmVyJ10gPSBcIm5vbmJiY1wiO1xuICAgIH1cbn07XG5cbnZhciBzZXRSZWZlcnJlckRvbWFpbiA9IGZ1bmN0aW9uKHJlZmVycmVyKSB7XG4gICAgdmFyIHJlZkRvbWFpbiA9ICByZWZlcnJlci5tYXRjaCgvXihodHRwW3NdPzpcXC9cXC8pKFthLXowLTlcXC5dKikoKD86XFwvKD86XFx3fC18XFwrfFxcLikrKSopKFxcLy4qKSQvKTtcbiAgICBpZiAocmVmRG9tYWluKSB7XG4gICAgICAgIGtleVZhbHVlc1sncmVmZXJyZXJfZG9tYWluJ10gPSByZWZEb21haW5bMl07XG4gICAgfSBlbHNlIHtcbiAgICAgICAga2V5VmFsdWVzWydyZWZlcnJlcl9kb21haW4nXSA9IFwiXCI7XG4gICAgfVxufTtcblxuLy8gQmVoYXZpb3JhbCB0YXJnZXRpbmcgYWRzZXJ2ZXIgaW50ZWdyYXRpb25cbnZhciBzZXRSc2kgPSBmdW5jdGlvbih3aW5kb3dEb2N1bWVudCkge1xuICAgIHZhciBpLFxuICAgICAgICByc2lfc2VncyA9IFtdLFxuICAgICAgICBzZWdzX2VuZCxcbiAgICAgICAgc2Vnc19iZWc7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3dEb2N1bWVudC5jb29raWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlZ3NfYmVnID0gd2luZG93RG9jdW1lbnQuY29va2llLmluZGV4T2YoJ3JzaV9zZWdzPScpO1xuICAgICAgICBrZXlWYWx1ZXNbJ3JzaSddID0gW107XG4gICAgICAgIGlmIChzZWdzX2JlZyA+PSAwKSB7XG4gICAgICAgICAgICBzZWdzX2JlZyA9IHdpbmRvd0RvY3VtZW50LmNvb2tpZS5pbmRleE9mKCc9JyxzZWdzX2JlZykgKyAxO1xuICAgICAgICAgICAgaWYgKHNlZ3NfYmVnID4gMCkge1xuICAgICAgICAgICAgICAgIHNlZ3NfZW5kID0gd2luZG93RG9jdW1lbnQuY29va2llLmluZGV4T2YoJzsnLHNlZ3NfYmVnKTtcbiAgICAgICAgICAgICAgICBpZiAoc2Vnc19lbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZ3NfZW5kID0gd2luZG93RG9jdW1lbnQuY29va2llLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcnNpX3NlZ3MgPSB3aW5kb3dEb2N1bWVudC5jb29raWUuc3Vic3RyaW5nKHNlZ3NfYmVnLHNlZ3NfZW5kKS5zcGxpdCgnfCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCByc2lfc2Vncy5sZW5ndGggJiYgaSA8IDIwOyBpKyspIHtcbiAgICAgICAgICAgIGtleVZhbHVlc1sncnNpJ10ucHVzaChyc2lfc2Vnc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgc2V0V29ybGRTZXJ2aWNlVGl0bGUgPSBmdW5jdGlvbih3aW5kb3dMb2NhdGlvblBhdGhuYW1lKSB7XG4gICAgdmFyIHRpdGxlO1xuICAgIGlmIChzZWN0aW9ucy5nZXRTZWN0aW9uKDApID09PSAnd29ybGRzZXJ2aWNlJykge1xuICAgICAgICB0aXRsZSA9IHdpbmRvd0xvY2F0aW9uUGF0aG5hbWUuc3BsaXQoJy8nKS5wb3AoKS5zcGxpdCgnXycpO1xuICAgICAgICBpZiAodHlwZW9mIHRpdGxlWzFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAga2V5VmFsdWVzWydrZXl3b3JkJ10gPSB0aXRsZVsxXSArICh0eXBlb2YgdGl0bGVbMl0gIT09ICd1bmRlZmluZWQnID8gJ18nK3RpdGxlWzJdIDogJycpO1xuICAgICAgICB9XG4gICAgICAgIHRpdGxlLnNoaWZ0KCk7XG4gICAgICAgIGtleVZhbHVlc1sndGl0bGUnXSA9IHRpdGxlLmpvaW4oJ18nKTtcbiAgICB9XG59O1xuXG5cbnZhciBzZXRLZXl3b3JkUGFydHMgPSBmdW5jdGlvbihrZXl3b3JkKSB7XG4gICAgdmFyIGtleXdvcmRQYXJ0cyA9IGtleXdvcmQubWF0Y2goLygoKD8hKHNwb25zb3I6KSkuKSopKHNwb25zb3I6KFteLF0rKSw/KC4qKSk/Lyk7XG4gICAgaWYgKGtleXdvcmRQYXJ0cyAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2Yga2V5d29yZFBhcnRzWzVdICE9PSAndW5kZWZpbmVkJyAmJiBrZXl3b3JkUGFydHNbNV0gIT09ICcnICYmXG4gICAgICAgIHR5cGVvZiBrZXl3b3JkUGFydHNbNl0gIT09ICd1bmRlZmluZWQnICYmIGtleXdvcmRQYXJ0c1s2XSAhPT0gJycpIHtcbiAgICAgICAga2V5d29yZE9iaiA9IHtcbiAgICAgICAgICAgIGhyZWY6IGtleXdvcmRQYXJ0c1s2XSxcbiAgICAgICAgICAgIHRpdGxlOiB1dGlscy5jYXBpdGFsaXplKGtleXdvcmRQYXJ0c1s1XSlcbiAgICAgICAgfTtcbiAgICAgICAga2V5VmFsdWVzWydrZXl3b3JkJ10gPSBrZXl3b3JkUGFydHNbNV0ucmVwbGFjZSgvIC9nLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAga2V5VmFsdWVzWydrZXl3b3JkJ10gPSBrZXl3b3JkO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKHdpbmRvd0xvY2F0aW9uLCB3aW5kb3dEb2N1bWVudCwgYXNzZXRUeXBlKSB7XG4gICAgICAgIGtleVZhbHVlc1snZG9tYWluJ10gPSB3aW5kb3dMb2NhdGlvbi5ob3N0bmFtZTtcbiAgICAgICAgc2V0U3RvcnlJZCh3aW5kb3dMb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgc2V0Q1R5cGUod2luZG93TG9jYXRpb24uaHJlZik7XG4gICAgICAgIHNldEFzc2V0VHlwZSh3aW5kb3dMb2NhdGlvbi5ocmVmLCBhc3NldFR5cGUpO1xuICAgICAgICBzZXRSZWZlcnJlcih3aW5kb3dEb2N1bWVudC5yZWZlcnJlcik7XG4gICAgICAgIHNldFJlZmVycmVyRG9tYWluKHdpbmRvd0RvY3VtZW50LnJlZmVycmVyKTtcbiAgICAgICAgc2V0UnNpKHdpbmRvd0RvY3VtZW50KTtcbiAgICAgICAgc2V0V29ybGRTZXJ2aWNlVGl0bGUod2luZG93TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH0sXG4gICAgZ2V0QWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGtleVZhbHVlcztcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBrZXlWYWx1ZXNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpID8ga2V5VmFsdWVzW2tleV0gOiBmYWxzZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdrZXl3b3JkJykge1xuICAgICAgICAgICAgICAgICAgICBzZXRLZXl3b3JkUGFydHModmFsdWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGtleVZhbHVlc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBzZXRBcnJheTogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5VmFsdWVzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAga2V5VmFsdWVzW2tleV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGtleVZhbHVlc1trZXldLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRLZXl3b3JkUGFydHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ga2V5d29yZE9iajtcbiAgICB9LFxuICAgIHI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBrZXlWYWx1ZXMgPSB7fTtcbiAgICAgICAga2V5d29yZE9iaiA9IGZhbHNlO1xuICAgIH1cbn07XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2tleVZhbHVlcy5qc1xuICoqLyIsInZhciBMb2cgPSByZXF1aXJlKCdsb2dnZXInKSgnYWR2ZXJ0czpkZnBwUmVxdWVzdCcpO1xudmFyIExheW91dCA9IHJlcXVpcmUoJ2FkdmVydHMvbGF5b3V0Jyk7XG52YXIgT2JqZWN0cyA9IHJlcXVpcmUoJ29iamVjdHMnKTtcbnZhciBLZXlWYWx1ZXMgPSByZXF1aXJlKCdhZHZlcnRzL2tleVZhbHVlcycpO1xudmFyIEFkUmVnaXN0ZXIgPSByZXF1aXJlKCdhZHZlcnRzL2FkUmVnaXN0ZXInKTtcbnZhciBQdWJTdWIgPSByZXF1aXJlKCdwdWJzdWInKTtcbnZhciBBZFVuaXQgPSByZXF1aXJlKCdhZHZlcnRzL2FkVW5pdCcpO1xudmFyIENvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIFNlY3Rpb25zID0gcmVxdWlyZSgnc2VjdGlvbnMnKTtcbnZhciBVdGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG52YXIgU2xvdERlZmVycmVkID0gcmVxdWlyZSgnYWR2ZXJ0cy9zbG90RGVmZXJyZWQnKTtcblxudmFyIEFEX0lEX1BSRUZJWCA9ICdiYmNjb21fJztcblxudmFyIHNldEtydXhEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgS3J1eCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBLcnV4LnNlZ21lbnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZyhcImtzZ1wiLCBLcnV4LnNlZ21lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIEtydXgudXNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoXCJrdWlkXCIsIEtydXgudXNlcik7XG4gICAgICAgIH1cbiAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZyhcImtob3N0XCIsIGVuY29kZVVSSUNvbXBvbmVudChsb2NhdGlvbi5ob3N0bmFtZSkpO1xuICAgIH1cbn07XG5cbnZhciBnZXRBZERhdGEgPSBmdW5jdGlvbiAoYWROYW1lKSB7XG4gICAgdmFyIGFkID0ge1xuICAgICAgICBhZFNpemVzOiBMYXlvdXQuZ2V0QWRDdXJyZW50R3JvdXBTaXplcyhhZE5hbWUpXG4gICAgfTtcbiAgICAvLyBSZXNldCBhZCBzbG90IG5hbWUgYmFjayB0byBhc3luYyBvbmUgaWYgcmVxdWlyZWRcbiAgICBhZC5kb21JZCA9IChPYmplY3RzKCdiYmNkb3Rjb20uY29uZmlnLmlzQXN5bmMnKSkgPyBBRF9JRF9QUkVGSVggKyBhZE5hbWUgOiBhZE5hbWU7XG4gICAgcmV0dXJuIGFkO1xufTtcblxudmFyIHNldHVwUmVuZGVyRW5kZWRDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuYWRkRXZlbnRMaXN0ZW5lcignc2xvdFJlbmRlckVuZGVkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgYWRJZCA9IGV2ZW50LnNsb3QuZ2V0VGFyZ2V0aW5nKFwic2xvdFwiKTtcbiAgICAgICAgICAgIGFkSWQgPSBhZElkWzBdLnJlcGxhY2UoJ2JiY2NvbV8nLCAnJyk7XG4gICAgICAgICAgICB2YXIgYWQgPSBBZFJlZ2lzdGVyLmdldEFkKGFkSWQpO1xuICAgICAgICAgICAgdmFyIHNsb3RFbGVtZW50SWQgPSBldmVudC5zbG90LmdldFNsb3RFbGVtZW50SWQoKTtcblxuICAgICAgICAgICAgTG9nKGFkSWQsIHNsb3RFbGVtZW50SWQsICdpc0VtcHR5JywgZXZlbnQuaXNFbXB0eSk7XG4gICAgICAgICAgICBpZiAoYWQgJiYgYWQuaXNSZW5kZXJlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWQuc2V0UmVuZGVyZWQodHJ1ZSk7XG4gICAgICAgICAgICBhZC5zZXRFdmVudFNpemUoZXZlbnQuc2l6ZSk7XG4gICAgICAgICAgICBhZC5yZW5kZXJJZlJlYWR5KCk7XG4gICAgICAgICAgICBQdWJTdWIudHJpZ2dlcignYWQ6cmVuZGVyOmNvbXBsZXRlJywgc2xvdEVsZW1lbnRJZCwgZXZlbnQuaXNFbXB0eSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxudmFyIERGUFBSZXF1ZXN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2xvdHMgPSB7fTtcbn07XG5cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIENvbmZpZy5pc0Fkc0VuYWJsZWQoKSAmJlxuICAgICAgICAgICAgdHlwZW9mIGdvb2dsZXRhZyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBrZXlWYWx1ZXMgPSBLZXlWYWx1ZXMuZ2V0QWxsKCk7XG4gICAgICAgICAgICAgICAgdmFyIGtleTtcblxuICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoXCJmcmRcIiwgJzEnKTtcblxuICAgICAgICAgICAgICAgIGlmIChBZFVuaXQuZ2V0UHJldmlld1VpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoXCJ1aWRcIiwgQWRVbml0LmdldFByZXZpZXdVaWQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGtleVZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5VmFsdWVzLmhhc093blByb3BlcnR5KGtleSkgJiYga2V5VmFsdWVzW2tleV0gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKGtleSwga2V5VmFsdWVzW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ2VzaScsICcwJyk7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBLUlVYXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc2V0S3J1eERhdGEoKTtcblxuICAgICAgICAgICAgICAgIC8vIEJCQ0NPTS03NjMxXG4gICAgICAgICAgICAgICAgaWYgKFNlY3Rpb25zLmdldFNlY3Rpb24oMCkgPT09ICd3ZWF0aGVyJykge1xuICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuYWRkRXZlbnRMaXN0ZW5lcignaW1wcmVzc2lvblZpZXdhYmxlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4sIGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNsb3QuZ2V0U2xvdEVsZW1lbnRJZCgpID09PSAnbXB1Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JiY2NvbV9tcHUnKS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGFnTmFtZSA9PT0gXCJTQ1JJUFRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzLmFkZEJvZHlUYWdDbGFzcygnYmJjY29tX3Nsb3RfbXB1JyArIChNYXRoLmZsb29yKGVsLmNsaWVudEhlaWdodCAvIDEwMCkgKiAxMDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogIFNJTkdMRSBSRVFVRVNUIE1PREUgQWQgU2V0dXBcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuZW5hYmxlU2luZ2xlUmVxdWVzdCgpO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogIFNZTkMvQVNOWUMgRGlmZmVyZW5jZXNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdHMoJ2JiY2RvdGNvbS5jb25maWcuaXNBc3luYycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5lbmFibGVTeW5jUmVuZGVyaW5nKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdHMoJ2JiY2RvdGNvbS5jb25maWcuaXNEaXNhYmxlSW5pdGlhbExvYWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLmRpc2FibGVJbml0aWFsTG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldHVwUmVuZGVyRW5kZWRDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgTG9nLmVycm9yKCdVbmFibGUgdG8gc2V0dXAgYWRzJywgZSk7XG4gICAgfVxufTtcblxuREZQUFJlcXVlc3QucHJvdG90eXBlLnJlcXVlc3RBZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBDb25maWcuaXNBZHNFbmFibGVkKCkgJiZcbiAgICAgICAgICAgIHR5cGVvZiBnb29nbGV0YWcgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBPYmplY3RzKCdhZFVuaXQuZ2V0JywgYmJjZG90Y29tLmFkdmVydHMpXG4gICAgICAgICkge1xuXG4gICAgICAgICAgICBpZiAoQWRSZWdpc3Rlci5nZXRBZENvdW50KCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBObyBhZHMgaW4gcmVnaXN0ZXJcbiAgICAgICAgICAgICAgICAvLyBXZSBzdGlsbCB3YW50IHRvIGVuYWJsZSBzZXJ2aWNlcyBmb3IgYWZ0ZXItaW5pdGlhbC1sb2FkIGFkc1xuICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5lbmFibGVTZXJ2aWNlcygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgYWREYXRhLFxuICAgICAgICAgICAgICAgICAgICBhZFVuaXQgPSBPYmplY3RzKCdhZFVuaXQuZ2V0JywgYmJjZG90Y29tLmFkdmVydHMpLFxuICAgICAgICAgICAgICAgICAgICBhZHMgPSBBZFJlZ2lzdGVyLmdldEFkcygpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpIGluIGFkcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZERhdGEgPSBnZXRBZERhdGEoYWRzW2ldLmdldEFkSWQoKS5yZXBsYWNlKEFEX0lEX1BSRUZJWCwgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZERhdGEgJiYgYWREYXRhLmRvbUlkLmluZGV4T2YoJ2Fkc2Vuc2UnKSA9PT0gLTEgJiYgYWREYXRhLmFkU2l6ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2xvdHNbYWREYXRhLmRvbUlkXSA9IGdvb2dsZXRhZy5kZWZpbmVTbG90KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFVuaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkRGF0YS5hZFNpemVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZERhdGEuZG9tSWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zbG90c1thZERhdGEuZG9tSWRdLnNldFRhcmdldGluZygnc2xvdCcsIGFkRGF0YS5kb21JZC5yZXBsYWNlKEFEX0lEX1BSRUZJWCwgJycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqICBJTlRFUlNUSVRJQUwgQWQgU2V0dXBcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBBZFJlZ2lzdGVyLnJlZ2lzdGVyQWQoJ2ludGVyc3RpdGlhbCcpO1xuICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5kZWZpbmVPdXRPZlBhZ2VTbG90KE9iamVjdHMoJ2FkVW5pdC5nZXQnLCBiYmNkb3Rjb20uYWR2ZXJ0cyksICdiYmNjb21faW50ZXJzdGl0aWFsJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VGFyZ2V0aW5nKCdzbG90JywgJ2ludGVyc3RpdGlhbCcpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGtleVNsb3RzID0gT2JqZWN0LmtleXModGhpcy5zbG90cyk7XG4gICAgICAgICAgICAgICAga2V5U2xvdHMucHVzaCgnYmJjY29tX2ludGVyc3RpdGlhbCcpO1xuXG4gICAgICAgICAgICAgICAgZ29vZ2xldGFnLmVuYWJsZVNlcnZpY2VzKCk7XG5cbiAgICAgICAgICAgICAgICBQdWJTdWIudHJpZ2dlcignYWRzOnJlcXVlc3RlZCcsIGtleVNsb3RzKTtcblxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgTG9nLmVycm9yKCdVbmFibGUgdG8gcmVxdWVzdCBhZHMnLCBlKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJlZnJlc2ggYWRzIGluIGFzeW5jaHJvbm91cyBsb2FkZWQgcGFnZXNcbiAqIFRoZXJlIGlzIGFuIHN5bmMgdmVyc2lvbiBvZiByZWZyZXNoaW5nIGFkcyBpbiBhcGkuanMgZm9yIHZlcnRpY2FscyBhcyBhbiBpbnRlcmltXG4gKi9cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5yZWZyZXNoQWQgPSBmdW5jdGlvbiAoZG9tSWQpIHtcbiAgICB2YXIgYWQgPSBBZFJlZ2lzdGVyLmdldEFkKGRvbUlkLnJlcGxhY2UoJ2JiY2NvbV8nLCAnJykpO1xuICAgIGlmIChhZCkge1xuICAgICAgICBnb29nbGV0YWcucHViYWRzKCkucmVmcmVzaChbdGhpcy5zbG90c1tkb21JZF1dKTtcbiAgICAgICAgYWQuaW5qZWN0QWR2ZXJ0aXNlbWVudFRleHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBMb2cud2FybignTm8gJyArIGRvbUlkLnJlcGxhY2UoJ2JiY2NvbV8nLCAnJykgKyAnIGFkIGZvdW5kIHRvIHJlZnJlc2gnKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IGFkIGluIEFKQVggb3IgaW5maW5pdGUgbG9hZGVkIHBhZ2VzXG4gKi9cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5yZWdpc3RlckFkID0gZnVuY3Rpb24gKGRvbUlkLCBncm91cHMpIHtcbiAgICB2YXIgYWQgPSBBZFJlZ2lzdGVyLnJlZ2lzdGVyQWQoZG9tSWQpLFxuICAgICAgICBjdXJyZW50R3JvdXBJZCA9IExheW91dC5nZXRDdXJyZW50R3JvdXBJZCgpO1xuXG4gICAgaWYgKGFkICYmICFhZC5oYXNBbnlHcm91cEFscmVhZHlCZWVuUmVnaXN0ZXJlZChbZ3JvdXBzXSkgJiYgZ3JvdXBzLmluZGV4T2YoY3VycmVudEdyb3VwSWQpID49IDApIHtcblxuICAgICAgICBMb2coJ1JlZ2lzdGVyaW5nIGFkOiAnICsgZG9tSWQgKyAnIGZvciBncm91cHMgJyArIGdyb3Vwcyk7XG4gICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYWRVbml0ID0gT2JqZWN0cygnYWRVbml0LmdldCcsIGJiY2RvdGNvbS5hZHZlcnRzKSxcbiAgICAgICAgICAgICAgICBhZERhdGEgPSBnZXRBZERhdGEoYWQuZ2V0QWRJZCgpLnJlcGxhY2UoQURfSURfUFJFRklYLCAnJykpO1xuXG4gICAgICAgICAgICB0aGlzLnNsb3RzW2FkRGF0YS5kb21JZF0gPSBnb29nbGV0YWcuZGVmaW5lU2xvdChcbiAgICAgICAgICAgICAgICBhZFVuaXQsXG4gICAgICAgICAgICAgICAgYWREYXRhLmFkU2l6ZXMsXG4gICAgICAgICAgICAgICAgYWREYXRhLmRvbUlkXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTtcbiAgICAgICAgICAgIHRoaXMuc2xvdHNbYWREYXRhLmRvbUlkXS5zZXRUYXJnZXRpbmcoJ3Nsb3QnLCBhZERhdGEuZG9tSWQucmVwbGFjZShBRF9JRF9QUkVGSVgsICcnKSk7XG5cbiAgICAgICAgICAgIFNsb3REZWZlcnJlZChkb21JZCwgZ3JvdXBzKTtcbiAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKFt0aGlzLnNsb3RzW2FkRGF0YS5kb21JZF1dKTtcbiAgICAgICAgICAgIGdvb2dsZXRhZy5kaXNwbGF5KFwiYmJjY29tX1wiICsgYWQuZ2V0QWRJZCgpKTtcbiAgICAgICAgICAgIGFkLmluamVjdEFkdmVydGlzZW1lbnRUZXh0KCk7XG5cbiAgICAgICAgICAgIFB1YlN1Yi50cmlnZ2VyKCdhZHM6cmVxdWVzdGVkJywgZG9tSWQpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy53YXJuKCdObyAnICsgZG9tSWQucmVwbGFjZSgnYmJjY29tXycsICcnKSArICcgYWQgZm91bmQgdG8gcmVnaXN0ZXIgKGZvciBncm91cHMgJyArIGdyb3VwcyArICcgKScpO1xuICAgIH1cbn07XG5cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5zZXRFeGNsdXNpb24gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldENhdGVnb3J5RXhjbHVzaW9uKGtleSk7XG4gICAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBERlBQUmVxdWVzdDtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2RmcHBSZXF1ZXN0LmpzXG4gKiovIiwidmFyIGNsaWVudFdpZHRoLFxuICAgIGFkU2l6ZUxlZXdheUFnYWluc3RTbG90U2l6ZSA9IDIwLFxuICAgIGFkU2l6ZUxlZXdheUFnYWluc3RTbG90U2l6ZVdpdGhOb0JvcmRlciA9IDMwLFxuICAgIGluaXRpYWxHcm91cCA9IGZhbHNlLFxuICAgIGluaXRpYWxHcm91cElkID0gZmFsc2UsXG4gICAgY3VycmVudEdyb3VwLFxuICAgIGN1cnJlbnRHcm91cElkLFxuICAgIGN1cnJlbnRHcm91cFNpemVzID0ge30sXG4gICAgbGF5b3V0RGlzYWJsZVJlc2V0ID0gZmFsc2U7XG5cbnZhciBsb2cgPSByZXF1aXJlKCdsb2dnZXInKSgnYWR2ZXJ0czpsYXlvdXQnKTtcbnZhciBjbGFzc2VzID0gcmVxdWlyZSgnY2xhc3NlcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcblxuLyoqXG4gKiBVc2UgcGFnZSB3aWR0aCB0byBkZXRlcm1pbmUgR3JvdXBJRCBhbmQgR3JvdXBTaXplc1xuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVDdXJyZW50R3JvdXBBbmRTaXplcyAoZ3JvdXBzKSAge1xuICAgIHZhciB4LFxuICAgICAgICBzbG90LFxuICAgICAgICBzbG90U2l6ZXM7XG4gICAgZm9yICh4IGluIGdyb3Vwcykge1xuICAgICAgICB1dGlscy5yZW1vdmVIdG1sVGFnQ2xhc3MoY2xhc3Nlcy5jbGFzc05hbWUoJ2dyb3VwJywgeCkpO1xuICAgICAgICBpZiAoKHR5cGVvZiBncm91cHNbeF0uZiA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpZW50V2lkdGggPD0gZ3JvdXBzW3hdLmYpICYmXG4gICAgICAgICAgICBjbGllbnRXaWR0aCA+PSBncm91cHNbeF0uc1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGN1cnJlbnRHcm91cElkID0gKyh4KTtcbiAgICAgICAgICAgIGN1cnJlbnRHcm91cCA9IGdyb3Vwc1t4XTtcblxuICAgICAgICAgICAgaWYgKCFpbml0aWFsR3JvdXAgJiYgIWluaXRpYWxHcm91cElkKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbEdyb3VwID0gY3VycmVudEdyb3VwO1xuICAgICAgICAgICAgICAgIGluaXRpYWxHcm91cElkID0gY3VycmVudEdyb3VwSWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHV0aWxzLmFkZEh0bWxUYWdDbGFzcyhjbGFzc2VzLmNsYXNzTmFtZSgnZ3JvdXAnLCBjdXJyZW50R3JvdXBJZCkpO1xuXG4gICAgICAgICAgICAvLyBTdHJpcCBvdXQgc2l6ZXMgbm90IGNvbXBhdGlibGUgd2l0aCBwYWdlIHdpZHRoXG4gICAgICAgICAgICBmb3IgKHNsb3QgaW4gY3VycmVudEdyb3VwLnNsb3RzKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEdyb3VwU2l6ZXNbc2xvdF0gPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHNsb3RTaXplcyBpbiBjdXJyZW50R3JvdXAuc2xvdHNbc2xvdF0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjbGllbnRXaWR0aCkgPj0gY3VycmVudEdyb3VwLnNsb3RzW3Nsb3RdW3Nsb3RTaXplc11bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cFNpemVzW3Nsb3RdLnB1c2goY3VycmVudEdyb3VwLnNsb3RzW3Nsb3RdW3Nsb3RTaXplc10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0FkU2l6ZVN1aXRhYmxlRm9yQ3VycmVudEdyb3VwIChhZCkge1xuICAgIHZhciBzbG90SW5kZXgsXG4gICAgICAgIHNsb3RTaXplcyA9IGJiY2RvdGNvbS5hZHZlcnRzLmxheW91dC5nZXRBZEN1cnJlbnRHcm91cFNpemVzKGFkLmdldEFkTmFtZSgpKSxcbiAgICAgICAgbGVld2F5ID0gKHR5cGVvZiBhZC5hZFR5cGUgIT09ICd1bmRlZmluZWQnICYmIChhZC5hZFR5cGUgPT09ICdwcm9tbycgfHwgYWQuYWRUeXBlID09PSAnZmVhdHVyZScpKVxuICAgICAgICAgICAgPyBhZFNpemVMZWV3YXlBZ2FpbnN0U2xvdFNpemVXaXRoTm9Cb3JkZXJcbiAgICAgICAgICAgIDogYWRTaXplTGVld2F5QWdhaW5zdFNsb3RTaXplO1xuXG4gICAgZm9yIChzbG90SW5kZXggPSAwOyBzbG90SW5kZXggPCBzbG90U2l6ZXMubGVuZ3RoOyBzbG90SW5kZXgrKykge1xuICAgICAgICAvKlxuICAgICAgICAgKiBUSEUgRk9MTE9XSU5HIERFVEVDVFMgSEVJR0hUIElOQ0xVRElORyBUSEUgQURWRVJUSVNJTkcgVEVYVCBBUyBUUllJTkcgVE8gREVURUNUIEhFSUdIVCBPTiBUSEVcbiAgICAgICAgICogQURfQ09OVEFJTkVSIERPRVMgTk9UIFdPUksgSU4gSUU4LiBUSEUgQUQgSVMgSU5KRUNURUQgT1VUU0lERSBPRiBUSElTIEFEX0NPTlRBSU5FUlxuICAgICAgICAgKi9cblxuICAgICAgICBpZiAoTWF0aC5hYnMoc2xvdFNpemVzW3Nsb3RJbmRleF1bMF0gLSBhZC5nZXRXaWR0aCgpKSA8PSBsZWV3YXkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKHNsb3RTaXplc1tzbG90SW5kZXhdWzFdIC0gYWQuZ2V0Q3JlYXRpdmVIZWlnaHQoKSkgPD0gbGVld2F5KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkU2hvd0FkIChhZCkge1xuICAgIHJldHVybiBhZC5jdXJyZW50U2xvdEhhc0dyb3VwKGN1cnJlbnRHcm91cElkKSAmJiBpc0FkU2l6ZVN1aXRhYmxlRm9yQ3VycmVudEdyb3VwKGFkKTtcbn1cblxudmFyIHNob3dPckhpZGVBZEZvckN1cnJlbnRHcm91cCA9IGZ1bmN0aW9uIChhZCkge1xuICAgIGlmIChiYmNkb3Rjb20uZG9tTG9hZGVkICYmICFhZC5pc1Jlc3BvbnNpdmUpIHtcbiAgICAgICAgaWYgKHNob3VsZFNob3dBZChhZCkpIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnPT09IE9wZW5pbmcgJyArIGFkLmdldEFkSWQoKSArICcgZm9yIGN1cnJlbnQgc2xvdCA9PT0nKTtcbiAgICAgICAgICAgIGFkLm9wZW4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnPT09IFNodXR0aW5nICcgKyBhZC5nZXRBZElkKCkgKyAnIGZvciBjdXJyZW50IHNsb3QgPT09Jyk7XG4gICAgICAgICAgICBhZC5zaHV0KCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiAoZ3JvdXBzKSB7XG4gICAgICAgIGNsaWVudFdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoOyAvLyBUT0RPIC0gQSBiZXR0ZXIgd2F5IHRvIGRldGVjdCB3aWR0aCBpbmxpbmUgd2l0aCBtZWRpYSBzZWxlY3RvcnNcbiAgICAgICAgZGV0ZXJtaW5lQ3VycmVudEdyb3VwQW5kU2l6ZXMoZ3JvdXBzKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBtb3ZlQWQ6IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgICAvL3ZhciBpRnJhbWUsXG4gICAgICAgIC8vICAgIGlGcmFtZURvY3VtZW50LFxuICAgICAgICAvLyAgICBpRnJhbWVCb2R5LFxuICAgICAgICAvLyAgICBpRnJhbWVJbm5lckhUTUwsXG4gICAgICAgIC8vICAgIGRvbUZyb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmcm9tKSxcbiAgICAgICAgLy8gICAgZG9tVG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0byk7XG4gICAgICAgIC8vaWYgKGZyb20gIT09IHRvICYmIGRvbUZyb20gIT09IG51bGwgJiYgZG9tVG8gIT09IG51bGwpIHtcbiAgICAgICAgLy8gICAgaUZyYW1lID0gZG9tRnJvbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaWZyYW1lJylbMF07XG4gICAgICAgIC8vICAgIGlmICh0eXBlb2YgaUZyYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyAgICAgICAgaUZyYW1lRG9jdW1lbnQgPSBpRnJhbWUuY29udGVudERvY3VtZW50IHx8IGlGcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICAgICAgICAvLyAgICAgICAgaWYgKGlGcmFtZURvY3VtZW50KSB7XG4gICAgICAgIC8vICAgICAgICAgICAgaUZyYW1lQm9keSA9IGlGcmFtZURvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgIC8vICAgICAgICAgICAgaUZyYW1lSW5uZXJIVE1MID0gZG9tRnJvbS5pbm5lckhUTUwucmVwbGFjZSgvPGlmcmFtZS4qPi4qPFxcL2lmcmFtZT4vLCBpRnJhbWVCb2R5LmlubmVySFRNTCk7XG4gICAgICAgIC8vICAgICAgICB9XG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy8gICAgZG9tVG8uaW5uZXJIVE1MID0gaUZyYW1lSW5uZXJIVE1MIHx8IGRvbUZyb20uaW5uZXJIVE1MO1xuICAgICAgICAvLyAgICBkb21Gcm9tLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAvL31cbiAgICAgICAgLy9kb21Gcm9tID0gZG9tVG8gPSBudWxsO1xuICAgIH0sXG4gICAgc2V0Q2xpZW50V2lkdGg6IGZ1bmN0aW9uICh3aWR0aCkge1xuICAgICAgICBjbGllbnRXaWR0aCA9IHdpZHRoO1xuICAgIH0sXG4gICAgZ2V0Q2xpZW50V2lkdGg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudFdpZHRoO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudEdyb3VwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50R3JvdXA7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50R3JvdXBJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudEdyb3VwSWQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZ1xuICAgICAqL1xuICAgIHNldEN1cnJlbnRHcm91cElkOiBmdW5jdGlvbiAoZ3JvdXBJZCkge1xuICAgICAgICBjdXJyZW50R3JvdXBJZCA9IGdyb3VwSWQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUT0RPIC0gRGVwcmVjYXRlIGluIGZhdm91ciBvZiB1c2luZyB0aGUgbWV0aG9kIGJlbG93XG4gICAgICogQHJldHVybnMgYXJyYXkgb2YgYWxsIGN1cnJlbnQgZ3JvdXAgYWQgc2xvdCBzaXplc1xuICAgICAqL1xuICAgIGdldEN1cnJlbnRHcm91cFNpemVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50R3JvdXBTaXplcztcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFNob3VsZCB1c2UgdGhpcyBhcyBvcHBvc2VkIHRvIHRoZSBtZXRob2QgYWJvdmVcbiAgICAgKiBAcGFyYW0gYWRJZFxuICAgICAqIEByZXR1cm5zIGFycmF5IG9mIGN1cnJlbnQgc2xvdCBzaXplcyBmb3IgYW4gYWRcbiAgICAgKi9cbiAgICBnZXRBZEN1cnJlbnRHcm91cFNpemVzOiBmdW5jdGlvbiAoYWRJZCkge1xuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRHcm91cFNpemVzW2FkSWRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRHcm91cFNpemVzW2FkSWRdO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjdXJyZW50R3JvdXBTaXplc1thZElkLnNsaWNlKDAsIGFkSWQuaW5kZXhPZignXycpKV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEdyb3VwU2l6ZXNbYWRJZC5zbGljZSgwLCBhZElkLmluZGV4T2YoJ18nKSldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIG92ZXJyaWRlR3JvdXBTaXplczogZnVuY3Rpb24gKHNsb3RzKSB7XG4gICAgICAgIHZhciBzbG90O1xuICAgICAgICBjdXJyZW50R3JvdXBTaXplcyA9IFtdO1xuICAgICAgICBmb3IgKHNsb3QgaW4gc2xvdHMpIHtcbiAgICAgICAgICAgIGN1cnJlbnRHcm91cFNpemVzW3Nsb3RdID0gc2xvdHNbc2xvdF07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRpc2FibGVSZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBsYXlvdXREaXNhYmxlUmVzZXQgPSB0cnVlO1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGxheW91dERpc2FibGVSZXNldCkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCdsYXlvdXREaXNhYmxlUmVzZXQgaXMgc2V0IHRvJywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGFkLFxuICAgICAgICAgICAgICAgIGFkcyA9IGJiY2RvdGNvbS5hZHZlcnRzLmFkUmVnaXN0ZXIuZ2V0QWRzKCk7XG5cbiAgICAgICAgICAgIGJiY2RvdGNvbS5hZHZlcnRzLmxheW91dC5pbml0KGJiY2RvdGNvbS5hZHZlcnRzLmJyZWFrcG9pbnRzLmdldEdyb3VwcygpKTtcblxuICAgICAgICAgICAgZm9yIChhZCBpbiBhZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWRzLmhhc093blByb3BlcnR5KGFkKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBOb3cgbGV0cyBjaGVjayBpZiB0aGUgYWQgaXMgc3RpbGwgc3VpdGFibGUgZm9yIGRpc3BsYXlpbmcgaW4gaXRzIGN1cnJlbnQgZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgc2hvd09ySGlkZUFkRm9yQ3VycmVudEdyb3VwKGFkc1thZF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZy5cbiAgICAgKi9cbiAgICByOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxheW91dERpc2FibGVSZXNldCA9IGZhbHNlO1xuICAgICAgICBjdXJyZW50R3JvdXAgPSB7fTtcbiAgICAgICAgY3VycmVudEdyb3VwSWQgPSAwO1xuICAgICAgICBjdXJyZW50R3JvdXBTaXplcyA9IHt9O1xuICAgIH1cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9sYXlvdXQuanNcbiAqKi8iLCIvKlxuICogQUxXQVlTIFJFUVVJUkVEIElOVEVSTkFUSU9OQUwgZm9yIGFuYWx5dGljcy5qcywgaXJyZXNwZWN0aXZlIG9mIGFkcyBiZWluZyBlbmFibGVkXG4gKlxuICogVVNBR0VcbiAqXG4gKiBDcmVhdGVzIG5hbWVzcGFjZS9vYmplY3RzOlxuICogICBiYmNkb3Rjb20ub2JqZWN0cygnYmJjZG90Y29tLmRhdGEuc3RhdHMnLCAnY3JlYXRlJylcbiAqICAgPT4gdmFyIHdpbmRvdy5iYmNkb3Rjb20uZGF0YSA9IHt9OyAgdmFyIHdpbmRvdy5iYmNkb3Rjb20uZGF0YS5zdGF0cyA9IHt9O1xuICpcbiAqIFJldHVybnMgb2JqZWN0LCBtZXRob2QgcmVzdWx0IG9yIHByb3BlcnR5IHJlc3VsdCBkZXBlbmRpbmcgb24gd2hldGhlciBpdCdzIGFuIG9iamVjdCwgbWV0aG9kIG9yIHByb3BlcnR5LlxuICogICBiYmNkb3Rjb20ub2JqZWN0cygnYmJjZG90Y29tLmRhdGEuc3RhdHMnKVxuICogICA9PiB2YXIgaXNFeGlzdHMgPSBiYmNkb3Rjb20uZGF0YS5zdGF0cztcbiAqXG4gKiBSZXR1cm4gdGhlIHZhbHVlIG9mIGEgZnVuY3Rpb24gd2l0aCBwYXNzZWQgaW4gYSBwYXJhbTpcbiAqICAgYmJjZG90Y29tLm9iamVjdHMoJ2JiY2RvdGNvbS5jb25maWcuaXNBY3RpdmUnLCAnYW5hbHl0aWNzJylcbiAqICAgPT4gdmFyIGlzQW5hbHl0aWNzQWN0aXZlID0gYmJjZG90Y29tLmNvbmZpZy5pc0FjdGl2ZSgnYW5hbHl0aWNzJyk7XG4gKlxuICogUmV0dXJucyB0cnVlIGlmIG1ldGhvZC9vYmplY3QgZXhpc3RzOlxuICogICBiYmNkb3Rjb20ub2JqZWN0cygnc2xvdCcsIGJiY2RvdGNvbS5hZHZlcnRzKVxuICogICA9PiB2YXIgbWV0aG9kRXhpc3RzID0gKHR5cGVvZiBiYmNkb3Rjb20uYWR2ZXJ0cy5zbG90ICE9PSAndW5kZWZpbmVkJyA/IHRydWUgOiBmYWxzZSk7XG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHJOYW1lKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGxlbixcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgbmFtZVBhcnRzID0gc3RyTmFtZS5zcGxpdChcIi5cIiksXG4gICAgICAgIG9iaiA9IChhcmdzWzFdICE9PSBudWxsICYmIHR5cGVvZiBhcmdzWzFdID09PSAnb2JqZWN0JykgPyBhcmdzWzFdIDogd2luZG93O1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IG5hbWVQYXJ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAob2JqW25hbWVQYXJ0c1tpXV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJiBhcmdzWzFdID09PSAnY3JlYXRlJykge1xuICAgICAgICAgICAgICAgIG9ialtuYW1lUGFydHNbaV1dID0ge307XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gQ2hlY2tpbmcgZm9yIGFuIG9iamVjdHMgZXhpc3RlbmNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ialtuYW1lUGFydHNbaV1dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gIT09ICd1bmRlZmluZWQnICYmIGFyZ3NbMV0gIT09IG51bGwgJiYgb2JqW25hbWVQYXJ0c1tpXV0oYXJnc1sxXSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmpbbmFtZVBhcnRzW2ldXShhcmdzWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqW25hbWVQYXJ0c1tpXV0oKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ialtuYW1lUGFydHNbaV1dKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb2JqID0gb2JqW25hbWVQYXJ0c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL29iamVjdHMuanNcbiAqKi8iLCJ2YXIgcmVnaXN0ZXIgPSB7fSxcbiAgICBmYWN0b3J5LFxuICAgIGN1cnJlbnRBZElkLFxuICAgIHNwb25zb3JBZE92ZXJyaWRlID0geyAvL0JCQ0NPTS03NjA4ICYmIEJCQ0NPTS03NjMwXG4gICAgICAgIFwibmV3c1wiIDoge1xuICAgICAgICAgICAgXCJidXNpbmVzc1wiIDogdHJ1ZSxcbiAgICAgICAgICAgIFwidGVjaG5vbG9neVwiIDogdHJ1ZSxcbiAgICAgICAgICAgIFwiKlwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcInNwb3J0XCIgOiB7XG4gICAgICAgICAgICBcImdvbGZcIiA6IHRydWUsXG4gICAgICAgICAgICBcInRlbm5pc1wiIDogdHJ1ZSxcbiAgICAgICAgICAgIFwiZm9vdGJhbGxcIiA6IHRydWUsXG4gICAgICAgICAgICBcImZvcm11bGExXCIgOiB0cnVlLFxuICAgICAgICAgICAgXCJlcXVlc3RyaWFuXCIgOiB0cnVlLFxuICAgICAgICAgICAgXCJob3JzZS1yYWNpbmdcIiA6IHRydWUsXG4gICAgICAgICAgICBcIm9seW1waWNzXCIgOiB0cnVlLFxuICAgICAgICAgICAgXCJtb3ZlLWxpa2UtbmV2ZXItYmVmb3JlXCI6IHRydWUsXG4gICAgICAgICAgICBcImhvbWUtb2YtdGhlLWVuZ2xpc2gtcHJlbWllci1sZWFndWVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiKlwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcIipcIiA6IHtcbiAgICAgICAgICAgIFwiKlwiIDogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKlxuICAgICAqIFRPRE8gLSBUaGluayBhYm91dCBtb3ZpbmcgdGhpcyBsb2dpYyBpbnRvIHNlcGFyYXRlIGFkIHR5cGVzIHRoYXQgZXh0ZW5kIHRoZSBzdGFuZGFyZCBhZCB0eXBlXG4gICAgICpcbiAgICAgKiBPUFRJT05TXG4gICAgICogLSBpc1Jlc3BvbnNpdmUgKEFkIGRvZXMgbm90IGNoZWNrIHRvIHNlZSBpZiBpdCBpcyBzdGlsbCBzdWl0YWJsZSBmb3IgdGhlIGN1cnJlbnQgc2xvdCBhcyB0aGUgYWQgd2lsbCB3b3JrIGluIGEgcmVzcG9uc2l2ZSBlbnZpcm9ubWVudCBhbmQgZG9lcyBub3Qgc2h1dClcbiAgICAgKiAtIGFsbG93U2NyZWVuUmVhZGVyIChBbGxvd3MgZm9yIHRhYmJpbmcgdGhyb3VnaCBlbGVtZW50cyB3aXRoaW4gYW4gYWQpXG4gICAgICogLSBoYXNBZFRleHQgKERpc3BsYXlzIGFzc29jaWF0ZWQgYWQgdGV4dCBzdWNoIGFzIElTIFNQT05TT1JFRCBCWSlcbiAgICAgKiAtIGFkVHlwZSAoQWxsb3dzIGRpZmZlcmVudCBzbG90IHJlbmRlcmVycyBhbmQgY2xhc3NlcyB0byBiZSB1c2VkKVxuICAgICAqIC0gaXNEZnBwUmVxdWVzdCAoV2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGRmcCByZXF1ZXN0IGFzIGl0IGlzIGEgZGlmZmVyZW50IGFkIHR5cGUpXG4gICAgICpcbiAgICAgKi9cbiAgICBhZENvbmZpZyA9IHtcbiAgICAgICAgXCJ3YWxscGFwZXJcIjoge1xuICAgICAgICAgICAgXCJpc1Jlc3BvbnNpdmVcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcImludGVyc3RpdGlhbFwiOiB7XG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibmF0aXZlXCI6IHtcbiAgICAgICAgICAgIFwiYWxsb3dTY3JlZW5SZWFkZXJcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaXNSZXNwb25zaXZlXCI6IHRydWUsXG4gICAgICAgICAgICBcImhhc0FkVGV4dFwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcImFkc2Vuc2VcIjoge1xuICAgICAgICAgICAgXCJhZFR5cGVcIjogXCJhZHNlbnNlXCIsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJpc0RmcHBSZXF1ZXN0XCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJ0ZW1wbGF0ZVwiOiAnYWRzZW5zZSdcbiAgICAgICAgfSxcbiAgICAgICAgXCJvdXRicmFpblwiOiB7XG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcIm91dGJyYWluXCIsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJpc0RmcHBSZXF1ZXN0XCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFwicHJvbW9cIjoge1xuICAgICAgICAgICAgLyogY2F0Y2ggYWxsICovXG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcInByb21vXCIsXG4gICAgICAgICAgICBcImhhc0FkVGV4dFwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcImlucmVhZFwiOiB7XG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcImlucmVhZFwiLFxuICAgICAgICAgICAgXCJpc1Jlc3BvbnNpdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaGFzQWRUZXh0XCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BvbnNvclwiOiB7XG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcInNwb25zb3JcIixcbiAgICAgICAgICAgIFwiaXNSZXNwb25zaXZlXCI6IHRydWUsXG4gICAgICAgICAgICBcInNpemVcIjogWzg4LDMxXSxcbiAgICAgICAgICAgIFwib3ZlcnJpZGVcIjogc3BvbnNvckFkT3ZlcnJpZGVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtb2R1bGVcIjoge1xuICAgICAgICAgICAgXCJhZFR5cGVcIjogXCJtb2R1bGVcIixcbiAgICAgICAgICAgIFwiaXNSZXNwb25zaXZlXCI6IHRydWUsXG4gICAgICAgICAgICBcInNpemVcIjogWzg4LDMxXSxcbiAgICAgICAgICAgIFwib3ZycmlkZVwiOiBzcG9uc29yQWRPdmVycmlkZVxuICAgICAgICB9LFxuICAgICAgICBcIm1vZHVsZV93b3JsZGlucGljdHVyZXNcIjoge1xuICAgICAgICAgICAgXCJhZFR5cGVcIjogXCJtb2R1bGVfd29ybGRpbnBpY3R1cmVzXCIsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcInNwb25zb3Jfc2VjdGlvblwiOiB7XG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcInNwb25zb3Jfc2VjdGlvblwiLFxuICAgICAgICAgICAgXCJpc1Jlc3BvbnNpdmVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInNpemVcIjogWzg4LDMxXSxcbiAgICAgICAgICAgIFwib3ZlcnJpZGVcIjogc3BvbnNvckFkT3ZlcnJpZGVcbiAgICAgICAgfSxcbiAgICAgICAgXCJhZF9mZWF0dXJlX3JjXCI6IHtcbiAgICAgICAgICAgIFwiYWRUeXBlXCI6IFwiZmVhdHVyZVwiLFxuICAgICAgICAgICAgXCJoYXNBZFRleHRcIjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgXCJzcG9uc29yX2Jhbm5lclwiOiB7XG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcInNwb25zb3JfYmFubmVyXCIsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic2l6ZVwiOiBbODgsMzFdLFxuICAgICAgICAgICAgXCJvdmVycmlkZVwiOiBzcG9uc29yQWRPdmVycmlkZVxuICAgICAgICB9XG4gICAgfTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc2V0QWRGYWN0b3J5OiBmdW5jdGlvbiAoYWRGYWN0b3J5KSB7XG4gICAgICAgIGZhY3RvcnkgPSBhZEZhY3Rvcnk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYWRJZCBlZyBtcHUsIGxlYWRlcmJvYXJkXG4gICAgICovXG4gICAgcmVnaXN0ZXJBZDogZnVuY3Rpb24gKGFkSWQpIHtcbiAgICAgICAgdmFyIHNlY3Rpb24gPSBiYmNkb3Rjb20uc2VjdGlvbnMuZ2V0U2VjdGlvbigwKXx8XCIqXCIsXG4gICAgICAgICAgICBzdWJfc2VjdGlvbiA9IGJiY2RvdGNvbS5zZWN0aW9ucy5nZXRTZWN0aW9uKDEpfHxcIipcIixcbiAgICAgICAgICAgIG92ZXJyaWRlID0gYWRDb25maWdbYWRJZF0gJiYgYWRDb25maWdbYWRJZF1bXCJvdmVycmlkZVwiXT8gYWRDb25maWdbYWRJZF1bXCJvdmVycmlkZVwiXSA6IGZhbHNlO1xuICAgICAgICBpZiAob3ZlcnJpZGUgJiYgb3ZlcnJpZGVbc2VjdGlvbl0gJiYgIW92ZXJyaWRlW3NlY3Rpb25dW3N1Yl9zZWN0aW9uXSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFkSWQgIT09ICcnICYmIHR5cGVvZiByZWdpc3RlclthZElkXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyW2FkSWRdID0gbmV3IGJiY2RvdGNvbS5hZHZlcnRzLmFkKGFkSWQpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhZENvbmZpZ1thZElkXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZWdpc3RlclthZElkXS5zZXRDb25maWcoYWRDb25maWdbYWRJZF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWRDb25maWdbYWRJZC5zbGljZSgwLCBhZElkLmluZGV4T2YoJ18nKSldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyW2FkSWRdLnNldENvbmZpZyhhZENvbmZpZ1thZElkLnNsaWNlKDAsIGFkSWQuaW5kZXhPZignXycpKV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpc3RlclthZElkXTtcbiAgICB9LFxuICAgIHNldEN1cnJlbnRBZElkOiBmdW5jdGlvbiAoYWRJZCkge1xuICAgICAgICBjdXJyZW50QWRJZCA9IGFkSWQ7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50QWRJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudEFkSWQ7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50QWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVE9ETyAtIFJlbW92ZSBpZiBhbmQgZWxzZSBhbmQgcmV0dXJuIHJlZ2lzdGVyW2N1cnJlbnRBZElkXSBvbmNlIGFwcHMgdXNlIHRoZSBjb3JyZWN0IEFQSSBiYmNkb3Rjb20uc2hvdygpXG4gICAgICAgIGlmIChiYmNkb3Rjb20uY29uZmlnLmlzQWN0aXZlKCdhZHMnKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50QWRJZCAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVnaXN0ZXJbY3VycmVudEFkSWRdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdGVyW2N1cnJlbnRBZElkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2V0QmFzZUNvbnRlbnQ6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7fVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24gKCkge30sXG4gICAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHt9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRBZDogZnVuY3Rpb24gKGFkSWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZWdpc3RlclthZElkXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByZWdpc3RlclthZElkXTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0QWRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlcjtcbiAgICB9LFxuICAgIGdldEFkQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGs7XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIGZvciAoayBpbiByZWdpc3Rlcikge1xuICAgICAgICAgICAgaWYgKHJlZ2lzdGVyLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfSxcbiAgICAvLyBUT0RPIC0gRm9yIHRlc3RzIG9ubHksIGZpeCBsYXRlci5cbiAgICByOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlZ2lzdGVyID0ge307XG4gICAgICAgIGN1cnJlbnRBZElkID0gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFJlZ2lzdGVyLmpzXG4gKiovIiwiLyoqXG4gKiBJbnRlcm5hbCBtYXAgb2YgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb25zLiBFYWNoIHByb3BlcnR5IGlzIGFuIGV2ZW50IHdpdGggdGhlIGNvcnJlc3BvbmRpbmdcbiAqIHZhbHVlIGJlaW5nIGFuIGFycmF5IG9mIHRoZSBsaXN0ZW5lcnMgd2hpY2ggYXJlIGJvdW5kIHRvIHRoYXQgZXZlbnQuXG4gKlxuICogQHR5cGUge3t9fVxuICovXG52YXIgbGlzdGVuZXJzID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogQmluZCBhIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIGEgcGFydGljdWxhciBldmVudCBvciBsaXN0IG9mIHNwYWNlIHNlcGFyYXRlZCBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IHRvIHdoaWNoIHdlIHdhbnQgdG8gbGlzdGVuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkXG4gICAgICovXG4gICAgb246IGZ1bmN0aW9uIChldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXZlbnQgaGFuZGxlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBldmVudHMgPSBldmVudC5zcGxpdCgnICcpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbZXZlbnRzW2ldXSA9IGxpc3RlbmVyc1tldmVudHNbaV1dIHx8IFtdO1xuICAgICAgICAgICAgbGlzdGVuZXJzW2V2ZW50c1tpXV0ucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlciBhbiBldmVudCBjYWxsaW5nIGFueSBsaXN0ZW5lcnMgd2hpY2ggYXJlIGJvdW5kIHdpdGggdGhlIGFyZ3VtZW50cyBnaXZlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gdHJpZ2dlclxuICAgICAqIEBwYXJhbSB7Li4uKn0gYXJndW1lbnRzIEFueSBhcmd1bWVudHMgd2hpY2ggc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgbGlzdGVuZXIgZnVuY3Rpb25zXG4gICAgICovXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGlmICghbGlzdGVuZXJzLmhhc093blByb3BlcnR5KGV2ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdGVuZXJzW2V2ZW50XS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2V2ZW50XVtpXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVbmJpbmQgbGlzdGVuZXIocykgZnJvbSBhIHBhcnRpY3VsYXIgZXZlbnQuIElmIGEgbGlzdGVuZXIgZnVuY3Rpb24gaXMgZ2l2ZW4sIG9ubHkgdGhpcyBsaXN0ZW5lclxuICAgICAqIGlzIHVuYm91bmQuIElmIG5vIGxpc3RlbmVyIGlzIGdpdmVuLCBhbGwgbGlzdGVuZXJzIGZvciBhIHBhcnRpY3VsYXIgZXZlbnQgYXJlIHVuYm91bmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IHdob3NlIGxpc3RlbmVyKHMpIHdlIHdhbnQgdG8gdW5iaW5kXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbj19IGxpc3RlbmVyIE9wdGlvbmFsIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHVuYmluZFxuICAgICAqL1xuICAgIG9mZjogZnVuY3Rpb24gKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIWxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobGlzdGVuZXJzW2V2ZW50XS5pbmRleE9mKGxpc3RlbmVyKSA+PSAwKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShsaXN0ZW5lcnNbZXZlbnRdLmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lcnNbZXZlbnRdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1tldmVudF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBldmVudCBsaXN0ZW5lcnMgZm9yIGFsbCBldmVudHMuXG4gICAgICovXG4gICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGlzdGVuZXJzID0ge307XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvcHVic3ViLmpzXG4gKiovIiwiLyoqXG4gKiBiYmNkb3Rjb20uYWR2ZXJ0cy5hZFVuaXQgaXMgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyB0aGUgY29ycmVjdCBhZFVuaXRzICh1c2VkIHRvIGJlIGNhbGxlZCAnem9uZScpIHRvIERGUC5cbiAqXG4gKiBhZFVuaXRzIGlzIGEgZm9yd2FyZC1zbGFzaCBkZWxpbWl0ZWQgc3RyaW5nIGZvciB0YXJnZXR0aW5nIHRoZSBiZXN0IGFkdmVydHMgdG8gYSBwYWdlLlxuICpcbiAqIGVnIC80ODE3L2JiY2NvbS5xYS5zaXRlLm1vYmlsZS5uZXdzL3Nwb3J0X2hvbWVwYWdlX2ludFxuICogICAgICAgICAgWyAgICAgIGFkIHVuaXQgMSAgICAgICAgIF0gWyAgICBhZCB1bml0IDIgICBdXG4gKi9cbnZhciBrZXlWYWx1ZXMgPSByZXF1aXJlKCdhZHZlcnRzL2tleVZhbHVlcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcbnZhciBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcbnZhciBhZFVuaXRXZWJTZXJ2aWNlID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFVuaXRXZWJTZXJ2aWNlJyk7XG5cbnZhciB6b25lRGF0YSA9IHt9LFxuICAgIERGUF9JRCA9ICcvNDgxNy8nLFxuICAgIERGUF9TVUlURV9ERUZBVUxUID0gJ2Rlc2t0b3AnLFxuICAgIERGUF9TVUlURV9ERVZJQ0VfV0lEVEhfU1dJVENIID0gOTAwLFxuICAgIEFEX1VOSVRfREVGQVVMVCA9ICdiYmNjb20ubGl2ZS5zaXRlLm5ld3MvJyxcbiAgICBBRF9VTklUXzJfREVGQVVMVCA9ICdfZGVmYXVsdCcsXG4gICAgVU5LTk9XTiA9ICd1bmtub3duJyxcbiAgICBDSEFOTkVMX0tFWSA9ICdjaGFubmVsJyxcbiAgICBTRUNUSU9OX0tFWSA9ICdzZWN0bicsXG4gICAgU1VCX1NFQ1RJT05fS0VZID0gJ3N1YnNlY3QnLFxuICAgIGFkVW5pdCA9IEFEX1VOSVRfREVGQVVMVCxcbiAgICBjdXN0b21BZFVuaXQgPSBmYWxzZSxcbiAgICBkZnBTdWl0ZSA9IERGUF9TVUlURV9ERUZBVUxULFxuICAgIGFkVW5pdHMydG85ID0gJycsXG4gICAgcHJldmlld1VpZCA9IGZhbHNlLFxuICAgIHF1ZXJ5U3RyaW5nT3ZlcnJpZGUgPSBmYWxzZSxcbiAgICBhbGxvd2VkU2l0ZXMgPSB7XG4gICAgICAgIC8qIERlc2t0b3AgYWRVbml0cyAqL1xuICAgICAgICBsaXZlOiAnYmJjY29tLmxpdmUuc2l0ZS5uZXdzLycsXG4gICAgICAgIHd3dzogJ2JiY2NvbS5saXZlLnNpdGUud3d3LycsXG4gICAgICAgIHNwZWNpYWxzOiAnYmJjY29tLmxpdmUuc2l0ZS5zcGVjaWFsZmVhdHVyZXMvJyxcbiAgICAgICAgcHJldmlldzogJ2JiY2NvbS5wcmV2aWV3LnNpdGUudGVzdC8nLFxuICAgICAgICB0ZXN0OiAnYmJjY29tLnRlc3Quc2l0ZS5mbGFzaC8nLFxuICAgICAgICAvKiBNb2JpbGUgYWRVbml0cyAqL1xuICAgICAgICBsaXZlX21vYmlsZTogJ2JiY2NvbS5saXZlLnNpdGUubW9iaWxlLm5ld3MvJyxcbiAgICAgICAgd3d3X21vYmlsZTogJ2JiY2NvbS5saXZlLnNpdGUubW9iaWxlLnd3dy8nLFxuICAgICAgICBzcGVjaWFsc19tb2JpbGU6ICdiYmNjb20ubGl2ZS5zaXRlLnNwZWNpYWxmZWF0dXJlcy8nLFxuICAgICAgICBwcmV2aWV3X21vYmlsZTogJ2JiY2NvbS5wcmV2aWV3LnNpdGUubW9iaWxlLm5ld3MvJyxcbiAgICAgICAgdGVzdF9tb2JpbGU6ICdiYmNjb20ucWEuc2l0ZS5tb2JpbGUubmV3cy8nLFxuICAgICAgICAvKiBXb3JsZFNlcnZpY2UgYWRVbml0cyAtIHVzZWQgZm9yIHRlc3Rpbmcgb25seSAqL1xuICAgICAgICB0ZXN0X2FyYWJpYzogJ2JiY3dzLnRlc3Quc2l0ZS5tb2JpbGUuYXJhYmljLycsXG4gICAgICAgIHRlc3RfcnVzc2lhbjogJ2JiY3dzLnRlc3Quc2l0ZS5tb2JpbGUucnVzc2lhbi8nLFxuICAgICAgICAvKiBCQkMgRWFydGggKi9cbiAgICAgICAgbGl2ZV9lYXJ0aDogJ2JiY2VhcnRoLmNvbS8nLFxuICAgICAgICB0ZXN0X2VhcnRoOiAnYmJjZWFydGgudGVzdC5jb20vJyxcbiAgICAgICAgLyogQU1QIEFkIFVuaXRzICovXG4gICAgICAgIHRlc3RfYW1wX25ld3M6ICdiYmNjb20udGVzdC5hbXAubmV3cy8nLFxuICAgICAgICBsaXZlX2FtcF9uZXdzOiAnYmJjY29tLmxpdmUuYW1wLm5ld3MvJ1xuICAgIH0sXG4gICAgV09STERfU0VSVklDRV9BRF9VTklUX1BSRUZJWCA9IHtcbiAgICAgICAgbGl2ZV9kZXNrdG9wOiAnYmJjd29ybGRzZXJ2aWNlLmxpdmUuc2l0ZS4nLFxuICAgICAgICB0ZXN0X2Rlc2t0b3A6ICdiYmN3b3JsZHNlcnZpY2UudGVzdC5zaXRlLicsXG4gICAgICAgIGxpdmVfbW9iaWxlOiAnYmJjd3MubGl2ZS5zaXRlLm1vYmlsZS4nLFxuICAgICAgICB0ZXN0X21vYmlsZTogJ2JiY3dzLnRlc3Quc2l0ZS5tb2JpbGUuJ1xuICAgIH0sXG4gICAgV09STERfU0VSVklDRV9BRF9VTklUX1NVRkZJWF9NQVAgPSB7XG4gICAgICAgIGphcGFuZXNlOiAnamFwYW4nXG4gICAgfSxcbiAgICBWRVJUSUNBTFNfQURfVU5JVFNfUFJFRklYID0ge1xuICAgICAgICBsaXZlOiAnYmJjY29tLmxpdmUuc2l0ZS4nLFxuICAgICAgICB0ZXN0OiAnYmJjY29tLnRlc3Quc2l0ZS4nXG4gICAgfSxcbiAgICBBRF9VTklUMl9FWENFUFRJT05TID0ge1xuICAgICAgICAnXlxcL3Nwb3J0XFwvZm9vdGJhbGxcXC90ZWFtc1xcLyhsaXZlcnBvb2x8bWFuY2hlc3Rlci1jaXR5KSc6ICdzcG9ydF9mb290YmFsbCQxX2NvbnRlbnQnLFxuICAgICAgICAnXlxcL25ld3NcXC9lbGVjdGlvblxcL3VzMjAxNic6ICduZXdzX3VzY2FuYWRhX2NvbnRlbnQnXG4gICAgfSxcbiAgICBzZWN0aW9ucyxcbiAgICBhZFNlY3Rpb25zLFxuICAgIHdpbmRvd0xvY2F0aW9uID0gJyc7XG5cblxuLyoqXG4gKiBCYXNlZCBvbiB2aXNpdG9yJ3MgYnJvd3NlciB3aWR0aCwgZGV0ZXJtaW5lIHdoZWh0ZXIgdG8gcmV0dXJuIG1vYmlsZSBvciBkZXNrdG9wIHN1aXRlLlxuICovXG52YXIgYXNzaWduRGZwU3VpdGUgPSBmdW5jdGlvbiAoY2xpZW50V2lkdGgpIHtcbiAgICBpZiAoY2xpZW50V2lkdGggPCBERlBfU1VJVEVfREVWSUNFX1dJRFRIX1NXSVRDSCkge1xuICAgICAgICBkZnBTdWl0ZSA9ICdtb2JpbGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRmcFN1aXRlID0gJ2Rlc2t0b3AnO1xuICAgIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSB3b3JsZCBzZXJ2aWNlIHN1ZmZpeCB0byBhZGQgdG8gdGhlIHByaW1hcnkgYWRVbml0LiBCYXNpY2FsbHkgYWRTZWN0aW9uc1swXSBydW4gdGhyb3VnaFxuICogV09STERfU0VSVklDRV9BRF9VTklUX1NVRkZJWF9NQVAgdG8gc2VlIGlmIHRoZXJlIGlzIGFuIG92ZXJyaWRlIGFuZCBzb21lIHNwZWNpYWwgcnVsZXMgZm9yIENoaW5hXG4gKlxuICogZWcgYmJjd29ybGRzZXJ2aWNlLmxpdmUuc2l0ZS48c3VmZml4Pi9cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG52YXIgZ2V0V29ybGRTZXJ2aWNlQWRVbml0U3VmZml4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhZFVuaXRTdWZmaXggPSBXT1JMRF9TRVJWSUNFX0FEX1VOSVRfU1VGRklYX01BUFthZFNlY3Rpb25zWzBdXSB8fCBhZFNlY3Rpb25zWzBdO1xuICAgIGlmIChhZFNlY3Rpb25zWzBdID09PSAnemhvbmd3ZW4nIHx8IGFkU2VjdGlvbnNbMF0gPT09ICd1a2NoaW5hJykge1xuICAgICAgICBhZFVuaXRTdWZmaXggKz0gYWRTZWN0aW9uc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoZGZwU3VpdGUgPT09ICdkZXNrdG9wJyAmJiBhZFVuaXRTdWZmaXggPT09J3J1c3NpYW4nKSB7IC8vQkJDQ09NLTc3MTNcbiAgICAgICAgYWRVbml0U3VmZml4ID0gXCJydXNzaWFcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRVbml0U3VmZml4O1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgQWRVbml0IDFcbiAqIGVnIC80ODE3L2JiY2NvbS5xYS5zaXRlLm1vYmlsZS5uZXdzL3Nwb3J0X2hvbWVwYWdlX2ludFxuICogICAgICAgICAgWyAgICAgIGFkIHVuaXQgMSAgICAgICAgIF0gWyAgICBhZCB1bml0IDIgICBdXG4gKi9cbnZhciBkZXJpdmVBZFVuaXQxID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtRG90UmVnRXhwID0gbmV3IFJlZ0V4cCgnKG0uc3RhZ2UufG0uKWJiYy5jbyhtfG1cXC98LnVrfC51a1xcLyknKSxcbiAgICAgICAgaXNUZXN0RW52ID0gdXRpbHMuaXNUZXN0RW52KCksXG4gICAgICAgIGFkVW5pdE92ZXJyaWRlID0gdXRpbHMuZ2V0VXJpUGFyYW1CeU5hbWUoJ2FkLXVuaXQnLCBmYWxzZSksXG4gICAgICAgIHNpdGVPdmVycmlkZSA9IHV0aWxzLmdldFVyaVBhcmFtQnlOYW1lKCdzaXRlJywgZmFsc2UpLFxuICAgICAgICB1aWRPdmVycmlkZSA9IHV0aWxzLmdldFVyaVBhcmFtQnlOYW1lKCd1aWQnLCBmYWxzZSk7XG5cbiAgICAvLyBVc2VyIG92ZXJyaWRlIGZvciBwcmV2aWV3aW5nIGFuIGFkdmVydCBjcmVhdGl2ZVxuICAgIGlmICh1aWRPdmVycmlkZSkge1xuICAgICAgICBwcmV2aWV3VWlkID0gdWlkT3ZlcnJpZGU7XG4gICAgfVxuICAgIGlmICghdXRpbHMuaXNMaXZlRW52KCkgJiYgYWRVbml0T3ZlcnJpZGUpIHtcbiAgICAgICAgLy8gQWxsb3cgYWQgdW5pdCB0byBiZSBvdmVycmlkZGVuIHVuIHRoZSBVUklcbiAgICAgICAgYWRVbml0ID0gYWRVbml0T3ZlcnJpZGUgKyAnLyc7XG4gICAgICAgIHF1ZXJ5U3RyaW5nT3ZlcnJpZGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc2l0ZU92ZXJyaWRlID09PSAncHJldmlldycpIHtcbiAgICAgICAgYWRVbml0ID0gYWxsb3dlZFNpdGVzLnByZXZpZXc7XG4gICAgICAgIHF1ZXJ5U3RyaW5nT3ZlcnJpZGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc2l0ZU92ZXJyaWRlICYmIHR5cGVvZihhbGxvd2VkU2l0ZXNbc2l0ZU92ZXJyaWRlXSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIFVzZXIgb3ZlcnJpZGUgb2Ygc2l0ZVxuICAgICAgICBhZFVuaXQgPSBhbGxvd2VkU2l0ZXNbc2l0ZU92ZXJyaWRlXTtcbiAgICAgICAgcXVlcnlTdHJpbmdPdmVycmlkZSA9IHRydWU7XG5cbiAgICB9IGVsc2UgaWYgKHNlY3Rpb25zWzBdID09PSAnd29ybGRzZXJ2aWNlJyAmJiB0eXBlb2YgYWRTZWN0aW9uc1swXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gV29ybGQgU2VydmljZVxuICAgICAgICAvLyBiYmN3b3JsZHNlcnZpY2UubGl2ZS5zaXRlLjxhZFNlY3Rpb25zWzBdPi8gZWcgYmJjd29ybGRzZXJ2aWNlLmxpdmUuc2l0ZS5hcmFiaWMvXG4gICAgICAgIGFkVW5pdCA9IFdPUkxEX1NFUlZJQ0VfQURfVU5JVF9QUkVGSVhbKGlzVGVzdEVudiA/ICd0ZXN0JyA6ICdsaXZlJykgKyAnXycgKyBkZnBTdWl0ZV0gKyBnZXRXb3JsZFNlcnZpY2VBZFVuaXRTdWZmaXgoKSArICcvJztcblxuICAgIH0gZWxzZSBpZiAoL14oZWFydGgpJC8udGVzdChhZFNlY3Rpb25zWzBdKSkge1xuICAgICAgICAvLyBFYXJ0aFxuICAgICAgICBhZFVuaXQgPSAoaXNUZXN0RW52ID8gYWxsb3dlZFNpdGVzLnRlc3RfZWFydGggOiBhbGxvd2VkU2l0ZXMubGl2ZV9lYXJ0aCk7XG5cbiAgICB9IGVsc2UgaWYgKGlzVGVzdEVudikge1xuICAgICAgICAvLyBWaXNpdG9yIGlzIG9uIHNhbmRib3gvaW50L3Rlc3QsIHRoZXJlZm9yZSBzaG93IHRlc3QgYWR2ZXJ0cyBmcm9tIHRlc3Qgc2l0ZVxuICAgICAgICBhZFVuaXQgPSAoZGZwU3VpdGUgPT09ICdkZXNrdG9wJyA/IGFsbG93ZWRTaXRlcy50ZXN0IDogYWxsb3dlZFNpdGVzLnRlc3RfbW9iaWxlKTtcblxuICAgIH0gZWxzZSBpZiAoc2VjdGlvbnNbMF0gPT09ICdob21lcGFnZScpIHtcbiAgICAgICAgLy8gSG9tZXBhZ2VcbiAgICAgICAgYWRVbml0ID0gKGRmcFN1aXRlID09PSAnZGVza3RvcCcgPyBhbGxvd2VkU2l0ZXMud3d3IDogYWxsb3dlZFNpdGVzLnd3d19tb2JpbGUpO1xuXG4gICAgfSBlbHNlIGlmICgvXihhdXRvc3xjYXBpdGFsfGN1bHR1cmV8ZnV0dXJlfHRyYXZlbCkkLy50ZXN0KGFkU2VjdGlvbnNbMF0pKSB7XG4gICAgICAgIC8vIFZlcnRpY2Fsc1xuICAgICAgICB2YXIgc2l0ZSA9IGFkU2VjdGlvbnNbMF0ucmVwbGFjZSgvYXV0b3MvLCAnYXV0bycpO1xuICAgICAgICBhZFVuaXQgPSBWRVJUSUNBTFNfQURfVU5JVFNfUFJFRklYWyhpc1Rlc3RFbnYgPyAndGVzdCcgOiAnbGl2ZScpXSArIHNpdGUgKyAnLyc7XG5cbiAgICB9IGVsc2UgaWYgKG1Eb3RSZWdFeHAudGVzdCh3aW5kb3dMb2NhdGlvbi5ocmVmKSkge1xuICAgICAgICAvLyBNb2JpbGUgdnMgRGVza3RvcFxuICAgICAgICBhZFVuaXQgPSAoZGZwU3VpdGUgPT09ICdkZXNrdG9wJyA/IGFsbG93ZWRTaXRlcy5saXZlIDogYWxsb3dlZFNpdGVzLmxpdmVfbW9iaWxlKTtcblxuICAgIH0gZWxzZSBpZiAoLyguY29tfC5jby51a3wubmV0KVxcL3NwZWNpYWxmZWF0dXJlc1xcLy8udGVzdCh3aW5kb3dMb2NhdGlvbi5ocmVmKSkge1xuICAgICAgICAvLyBTcGVjaWFsIEZlYXR1cmVzXG4gICAgICAgIGFkVW5pdCA9IChkZnBTdWl0ZSA9PT0gJ2Rlc2t0b3AnID8gYWxsb3dlZFNpdGVzLnNwZWNpYWxzIDogYWxsb3dlZFNpdGVzLnNwZWNpYWxzX21vYmlsZSk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZhdWx0IHNpdGUgKG5lZWRzIHRvIGJlIHRoZSByaWdodCBkZWZhdWx0IGZvciBtb2JpbGUvZGVza3RvcCBiYXNlZCBvbiB3aWR0aClcbiAgICAgICAgYWRVbml0ID0gKGRmcFN1aXRlID09PSAnbW9iaWxlJyA/IGFsbG93ZWRTaXRlcy5saXZlX21vYmlsZSA6IEFEX1VOSVRfREVGQVVMVCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBVc2luZyB0aGUgY3VycmVudCBwYWdlLCBkZXRlcm1pbmUgd2hhdCB0aGUgem9uZSBzaG91bGQgYmUuICBVc2VzIHNlY3Rpb25zIHRvIGJyZWFrXG4gKiBkb3duIHRoZSBwYXRoIG9mIHRoZSBVcmkgaW50byBsb2dpY2FsIHNlY3Rpb25zLlxuICovXG52YXIgZGVyaXZlQWRVbml0MnRvOUZyb21VcmkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIHBhdHRlcm4sXG4gICAgICAgIHJlLFxuICAgICAgICBvdXQgPSBBRF9VTklUXzJfREVGQVVMVCxcbiAgICAgICAgdXJsUGF0aCA9ICcvJyArIGFkU2VjdGlvbnMuam9pbignLycpO1xuXG4gICAgaWYgKHR5cGVvZiBhZFNlY3Rpb25zICE9PSAndW5kZWZpbmVkJyAmJiBhZFNlY3Rpb25zLmxlbmd0aCAhPT0gMCAmJiBhZFNlY3Rpb25zWzBdICE9PSBVTktOT1dOKSB7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIGFsbCBzZWN0aW9uIHBhcnRzIGFyZSBkZWZpbmVkIChtYWtlIGVtcHR5IGlmIG5vdClcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgICAgICAgYWRTZWN0aW9uc1tpXSA9ICh0eXBlb2YgYWRTZWN0aW9uc1tpXSA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IGFkU2VjdGlvbnNbaV0pO1xuICAgICAgICAgICAgc2VjdGlvbnNbaV0gPSAodHlwZW9mIHNlY3Rpb25zW2ldID09PSAndW5kZWZpbmVkJyA/ICcnIDogc2VjdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFZlcnkgU3BlY2lmaWMgRXhjZXB0aW9uc1xuICAgICAgICBmb3IgKHBhdHRlcm4gaW4gQURfVU5JVDJfRVhDRVBUSU9OUykge1xuICAgICAgICAgICAgcmUgPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xuICAgICAgICAgICAgaWYgKHJlLnRlc3QodXJsUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3VuZCBwYXR0ZXJuIG1hdGNoXG4gICAgICAgICAgICAgICAgLy8gZWcge1wiXFwvc3BvcnRcXC9mb290YmFsbFxcLyhoZWxsb3x3b3JsZClcIjogXCJzcG9ydF9mb290YmFsbCQxX2NvbnRlbnRcIn0gPT4gXCJzcG9ydF9mb290YmFsbGhlbGxvX2NvbnRlbnRcIlxuICAgICAgICAgICAgICAgIG91dCA9IEFEX1VOSVQyX0VYQ0VQVElPTlNbcGF0dGVybl0ucmVwbGFjZSgnJDEnLCBSZWdFeHAuJDEpLnJlcGxhY2UoJyQyJywgUmVnRXhwLiQyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBCcm9hZCBFeGNlcHRpb25zXG4gICAgICAgIGlmIChvdXQgPT09IEFEX1VOSVRfMl9ERUZBVUxUKSB7XG4gICAgICAgICAgICBpZiAoYWRTZWN0aW9uc1swXSA9PT0gJ2hvbWVwYWdlJykge1xuICAgICAgICAgICAgICAgIC8vIEJCQyBIb21lcGFnZSBlZyB3d3cuYmJjLmNvbS9cbiAgICAgICAgICAgICAgICBvdXQgPSAnYmJjX2hvbWVwYWdlX2ludCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkU2VjdGlvbnNbMV0gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgLy8gRnJvbnRwYWdlIC0gTmV3cy9TcG9ydC9XZWF0aGVyL2JsYWggZWcgbmV3c19ob21lcGFnZV9pbnRcbiAgICAgICAgICAgICAgICBvdXQgPSBhZFNlY3Rpb25zWzBdICsgJ19ob21lcGFnZV9pbnQnO1xuICAgICAgICAgICAgICAgIGFkU2VjdGlvbnNbMV0gPSAnaG9tZXBhZ2UnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhZFNlY3Rpb25zWzBdID09PSAnbmV3cycgJiYgc2VjdGlvbnNbMV0gPT09ICd3b3JsZCcgJiYgc2VjdGlvbnNbMl0gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgLy8gL25ld3Mvd29ybGQgY29tcGxpY2F0aW9ucyAtIE5PVEUgYWRTZWN0aW9ucyB2cyBzZWN0aW9uc1xuICAgICAgICAgICAgICAgIC8vIGVnIHNlY3Rpb25zPS9uZXdzL3dvcmxkL2FzaWEvaW5kaWEgYW5kIGFkU2VjdGlvbnM9L25ld3Mvd29ybGRhc2lhL2luZGlhID0+IG5ld3NfYXNpYV9jb250ZW50IHdpdGggc2VjdG49aW5kaWFcbiAgICAgICAgICAgICAgICBvdXQgPSBhZFNlY3Rpb25zWzBdICsgJ18nICsgc2VjdGlvbnNbMl0gKyAnX2NvbnRlbnQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhZFNlY3Rpb25zWzBdID09PSAnc3BlY2lhbGZlYXR1cmVzJykge1xuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWxzIGVnIGhvcml6b25zYnVzaW5lc3NfaG9tZSwgaG9yaXpvbnNidXNpbmVzc19lcGlzb2Rlc1xuICAgICAgICAgICAgICAgIC8vIGVnIC9zcGVjaWFsZmVhdHVyZXMvaG9yaXpvbnNidXNpbmVzcy9cbiAgICAgICAgICAgICAgICBvdXQgPSBhZFNlY3Rpb25zWzFdICsgJ18nICsgKGFkU2VjdGlvbnNbMl0gPT09ICcnID8gJ2hvbWUnIDogYWRTZWN0aW9uc1syXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkU2VjdGlvbnNbMF0gPT09ICd6aG9uZ3dlbicgfHwgYWRTZWN0aW9uc1swXSA9PT0gJ3VrY2hpbmEnKSB7XG4gICAgICAgICAgICAgICAgLy8gZS5nLiBodHRwOi8vd3d3LmJiYy5jb20vemhvbmd3ZW4vdHJhZC93b3JsZCA+IHpob25nd2VudHJhZF93b3JsZF9jb250ZW50XG4gICAgICAgICAgICAgICAgb3V0ID0gYWRTZWN0aW9uc1swXSArIGFkU2VjdGlvbnNbMV0gKyAnXycgKyAoYWRTZWN0aW9uc1syXSA9PT0gJycgPyAnaG9tZScgOiBhZFNlY3Rpb25zWzJdKSArICdfY29udGVudCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFN0YW5kYXJkXG4gICAgICAgICAgICAgICAgLy8gZWcgL25ld3MvYnVzaW5lc3NcbiAgICAgICAgICAgICAgICBvdXQgPSBhZFNlY3Rpb25zWzBdICsgJ18nICsgYWRTZWN0aW9uc1sxXSArICdfY29udGVudCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5VmFsdWVzLnNldChDSEFOTkVMX0tFWSwgYWRTZWN0aW9uc1swXSk7XG4gICAgICAgIGtleVZhbHVlcy5zZXQoU0VDVElPTl9LRVksIGFkU2VjdGlvbnNbMV0pO1xuICAgICAgICBrZXlWYWx1ZXMuc2V0KFNVQl9TRUNUSU9OX0tFWSwgYWRTZWN0aW9uc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQucmVwbGFjZSgvLS8sICcnKTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIEFkVW5pdCAyIHRvIDlcbiAqIGVnIC80ODE3L2JiY2NvbS5xYS5zaXRlLm1vYmlsZS5uZXdzL3Nwb3J0X2hvbWVwYWdlX2ludFxuICogICAgICAgICAgWyAgICAgIGFkIHVuaXQgMSAgICAgICAgIF0gWyAgICBhZCB1bml0IDIgICBdXG4gKi9cbnZhciBkZXJpdmVBZFVuaXQydG85ID0gZnVuY3Rpb24gKHNlcnZlcnNpZGVBZFVuaXRzMnRvOSkge1xuICAgIGlmICh0eXBlb2Ygc2VydmVyc2lkZUFkVW5pdHMydG85ICE9PSBcInVuZGVmaW5lZFwiICYmIHNlcnZlcnNpZGVBZFVuaXRzMnRvOSA9PT0gJ2ZyYW1ld29ya3NfYmFybGVzcXVlJykge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMucHJvY2Vzc1pvbmVEYXRhKHdpbmRvd0xvY2F0aW9uLnBhdGhuYW1lLCBhZFVuaXRXZWJTZXJ2aWNlLnpvbmVzKTtcbiAgICAgICAgYWRVbml0czJ0bzkgPSBkYXRhLnpvbmU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VydmVyc2lkZUFkVW5pdHMydG85ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhZFVuaXRzMnRvOSA9IHNlcnZlcnNpZGVBZFVuaXRzMnRvOTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhZFVuaXRzMnRvOSA9IGRlcml2ZUFkVW5pdDJ0bzlGcm9tVXJpKCk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24gKGNsaWVudFdpZHRoLCBzZXJ2ZXJzaWRlQWRVbml0czJ0bzksIGFkU2VjdGlvbnNBcnJheSwgc2VjdGlvbnNBcnJheSkge1xuICAgICAgICB3aW5kb3dMb2NhdGlvbiA9IGNvbmZpZy5nZXRXaW5kb3dMb2NhdGlvbigpO1xuICAgICAgICBzZWN0aW9ucyA9IHNlY3Rpb25zQXJyYXk7XG4gICAgICAgIGFkU2VjdGlvbnMgPSBhZFNlY3Rpb25zQXJyYXk7XG4gICAgICAgIGlmICh0eXBlb2YgY2xpZW50V2lkdGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGFzc2lnbkRmcFN1aXRlKGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBkZXJpdmVBZFVuaXQxKCk7XG4gICAgICAgIGRlcml2ZUFkVW5pdDJ0bzkoc2VydmVyc2lkZUFkVW5pdHMydG85KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY3VzdG9tQWRVbml0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIERGUF9JRCArIGFkVW5pdCArIGFkVW5pdHMydG85O1xuICAgICAgICB9IGVsc2UgaWYgKHF1ZXJ5U3RyaW5nT3ZlcnJpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBERlBfSUQgKyBhZFVuaXQgKyAoY3VzdG9tQWRVbml0LmluZGV4T2YoJy8nKSAhPT0gLTEgPyBjdXN0b21BZFVuaXQuc3BsaXQoJy8nKVsxXSA6ICcvJyArIEFEX1VOSVRfMl9ERUZBVUxUKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBERlBfSUQgKyBjdXN0b21BZFVuaXQgKyAoY3VzdG9tQWRVbml0LmluZGV4T2YoJy8nKSAhPT0gLTEgPyAnJyA6ICcvJyArIEFEX1VOSVRfMl9ERUZBVUxUKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0VWlkOiBmdW5jdGlvbiAob3ZlcnJpZGVVaWQpIHtcbiAgICAgICAgcHJldmlld1VpZCA9IG92ZXJyaWRlVWlkO1xuICAgIH0sXG4gICAgc2V0QWRVbml0OiBmdW5jdGlvbiAob3ZlcnJpZGVBZFVuaXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvdmVycmlkZUFkVW5pdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mKGFsbG93ZWRTaXRlc1tvdmVycmlkZUFkVW5pdF0pKSB7XG4gICAgICAgICAgICAgICAgYWRVbml0ID0gYWxsb3dlZFNpdGVzW292ZXJyaWRlQWRVbml0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgvKGJiY2NvbVxcLih0ZXN0fGxpdmUpXFwuc2l0ZXxiYmNlYXJ0aFxcLmNvbXxiYmNlYXJ0aFxcLnRlc3RcXC5jb20pLy50ZXN0KG92ZXJyaWRlQWRVbml0KSkge1xuICAgICAgICAgICAgICAgIGN1c3RvbUFkVW5pdCA9IG92ZXJyaWRlQWRVbml0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRQcmV2aWV3VWlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBwcmV2aWV3VWlkO1xuICAgIH0sXG4gICAgZ2V0QWRVbml0MTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYWRVbml0LmVuZHNXaXRoKCcvJykgPyBhZFVuaXQuc3Vic3RyKDAsIGFkVW5pdC5sZW5ndGggLSAxKSA6IGFkVW5pdDtcbiAgICB9LFxuICAgIGdldEFkVW5pdHMydG85OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhZFVuaXRzMnRvOTtcbiAgICB9LFxuICAgIC8qXG4gICAgICogTk9URSAtIFRoaXMgbG9naWMgaXMgb25seSBoZXJlIGZvciBzaXRlcyB0aGF0IGFyZSBzZXJ2ZWQgb2YgQ0ROXG4gICAgICogVE9ETyAtIFJlbmFtZSB2YXJzIGZyb20gem9uZSB0byBhZFVuaXQgKE5ldyB0ZXJtaW5vbG9neSlcbiAgICAgKi9cbiAgICBwcm9jZXNzWm9uZURhdGE6IGZ1bmN0aW9uIChocmVmLCB6b25lKSB7XG4gICAgICAgIHZhciB4LCB6O1xuICAgICAgICBpZiAoKCd1bmRlZmluZWQnID09PSB0eXBlb2Ygem9uZS51cmkgfHwgLTEgIT09IGhyZWYuaW5kZXhPZih6b25lLnVyaSkpICYmICd1bmRlZmluZWQnICE9PSB0eXBlb2Ygem9uZS5kYXRhKSB7XG4gICAgICAgICAgICBmb3IgKHggaW4gem9uZS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgem9uZURhdGFbeF0gPSB6b25lLmRhdGFbeF07XG4gICAgICAgICAgICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2Ygem9uZS56b25lcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHogaW4gem9uZS56b25lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2Ygem9uZS56b25lc1t6XS51cmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmID0gaHJlZi5yZXBsYWNlKHpvbmUudXJpLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3Nab25lRGF0YShocmVmLCB6b25lLnpvbmVzW3pdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gem9uZURhdGE7XG4gICAgfSxcbiAgICAvKlxuICAgICAqIEZvciB0ZXN0aW5nIG9ubHksIG1heSBsb29rIGF0IG5ld2luZyB1cCBhIG5ldyBvYmplY3QgZWFjaCB0aW1lLlxuICAgICAqL1xuICAgIHI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93TG9jYXRpb24gPSAnJztcbiAgICAgICAgYWRVbml0ID0gQURfVU5JVF9ERUZBVUxUO1xuICAgICAgICBhZFVuaXRzMnRvOSA9IEFEX1VOSVRfMl9ERUZBVUxUO1xuICAgICAgICBkZnBTdWl0ZSA9IERGUF9TVUlURV9ERUZBVUxUO1xuICAgICAgICBjdXN0b21BZFVuaXQgPSBmYWxzZTtcbiAgICAgICAgcHJldmlld1VpZCA9IGZhbHNlO1xuICAgICAgICBxdWVyeVN0cmluZ092ZXJyaWRlID0gZmFsc2U7XG4gICAgfVxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkVW5pdC5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHpvbmVzOntcbiAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICB1cmk6XCIvXCIsXG4gICAgICAgICAgICBzaXRlOlwiYmJjY29tLmxpdmUuc2l0ZS5tb2JpbGUubmV3c1wiLFxuICAgICAgICAgICAgem9uZTpcIlwiXG4gICAgICAgIH0sXG4gICAgICAgIHpvbmVzOltcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB1cmk6XCJzcGVjaWFsZmVhdHVyZXMvXCIsXG4gICAgICAgICAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICAgICAgICAgIHpvbmU6XCJuZXdzX3NwZWNpYWxmZWF0dXJlc19jb250ZW50XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHpvbmVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVyaTpcImhvcml6b25zYnVzaW5lc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmU6XCJob3Jpem9uc2J1c2luZXNzX2hvbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmVzOltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVyaTpcIi9tZWdhdHJlbmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b25lOlwiaG9yaXpvbnNidXNpbmVzc19vdGhlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJpOlwiL2NsaXBzLWxpYnJhcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b25lOlwiaG9yaXpvbnNidXNpbmVzc19jbGlwc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJpOlwiL2VwaXNvZGVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9uZTpcImhvcml6b25zYnVzaW5lc3NfZXBpc29kZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVyaTpcIi9lcGlzb2RlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9uZTpcImhvcml6b25zYnVzaW5lc3NfZXBpc29kZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVyaTpcInd3c2NyaXB0cy9cIixcbiAgICAgICAgICAgICAgICBkYXRhOntcbiAgICAgICAgICAgICAgICAgICAgem9uZTpcInd3c2NyaXB0c19jb250ZW50XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHpvbmVzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVyaTpcInRlc3QvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b25lOlwid3dzY3JpcHRzX3Rlc3RfY29udGVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVyaTpcIm9yYi13ZWItc2VydmljZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmU6XCJ3d3NjcmlwdHNfdGVzdF9vcmJ3ZWJzZXJ2aWNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH1cbn07XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRVbml0V2ViU2VydmljZS5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFkSUQsIGdyb3Vwcykge1xuXG4gICAgdmFyIGFkLFxuICAgICAgICBzbG90LFxuICAgICAgICBzbG90RG9tQ2hpbGRFbGVtZW50O1xuXG4gICAgdmFyIGN1cnJlbnRHcm91cElkID0gYmJjZG90Y29tLmFkdmVydHMubGF5b3V0LmdldEN1cnJlbnRHcm91cElkKCk7XG5cbiAgICBpZiAod2luZG93LmJiY2RvdGNvbSAmJiBiYmNkb3Rjb20uYWQpIHtcbiAgICAgICAgYWQgPSBiYmNkb3Rjb20uYWQoYWRJRCk7XG4gICAgICAgIGlmICh0eXBlb2YgYWQgIT09ICd1bmRlZmluZWQnICYmICFhZC5oYXNBbnlHcm91cEFscmVhZHlCZWVuUmVnaXN0ZXJlZChbZ3JvdXBzXSkpIHtcbiAgICAgICAgICAgIGFkLnJlZ2lzdGVyU2xvdEdyb3Vwcyhncm91cHMpO1xuICAgICAgICAgICAgaWYgKGdyb3Vwcy5pbmRleE9mKGN1cnJlbnRHcm91cElkKSA+PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBhZC5zZXRDdXJyZW50U2xvdEdyb3Vwcyhncm91cHMpO1xuXG4gICAgICAgICAgICAgICAgc2xvdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYmNjb21fJyArIGFkLmdldEFkSWQoKSArICdfJyArIGdyb3Vwcy5qb2luKCdfJykpO1xuICAgICAgICAgICAgICAgIHNsb3REb21DaGlsZEVsZW1lbnQgPSAoc2xvdC5maXJzdEVsZW1lbnRDaGlsZCB8fCBzbG90LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIGlmIChzbG90RG9tQ2hpbGRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHNsb3REb21DaGlsZEVsZW1lbnQuaWQgPSAnYmJjY29tXycgKyBhZC5nZXRBZElkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJiY2RvdGNvbS51dGlscy5hZGRUYWdDbGFzcyhzbG90LCAnYmJjY29tXycgKyBhZC5hZFR5cGUgKyAnX3Nsb3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL3Nsb3REZWZlcnJlZC5qc1xuICoqLyIsImltcG9ydCBjb21TY29yZSBmcm9tICdhbmFseXRpY3MvY29tU2NvcmUnO1xuaW1wb3J0IHN0cmVhbVNlbnNlIGZyb20gJ2FuYWx5dGljcy9zdHJlYW1TZW5zZSc7XG5pbXBvcnQgc3NjSGVscGVyIGZyb20gJ2FuYWx5dGljcy9zc2NIZWxwZXInO1xuaW1wb3J0IHtzZXRPdmVycmlkZX0gZnJvbSAnYW5hbHl0aWNzL21ldHJpY3Mvb3ZlcnJpZGVzJztcblxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmFzc2lnbihjb21TY29yZSwge1xuICAgIHN0cmVhbVNlbnNlOiBzdHJlYW1TZW5zZSxcbiAgICBzc2NIZWxwZXI6IHNzY0hlbHBlcixcbiAgICBzZXRNZXRyaWNPdmVycmlkZTogc2V0T3ZlcnJpZGVcbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9pbmRleC5qc1xuICoqLyIsImltcG9ydCBjb25maWcgZnJvbSAnY29uZmlnJztcbmltcG9ydCB1dGlscyBmcm9tICd1dGlscydcbmltcG9ydCBoZWxwZXIgZnJvbSAnYW5hbHl0aWNzL2hlbHBlcic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJ2xvZ2dlcic7XG5pbXBvcnQge2dldENvcmVLZXlWYWx1ZXMsIGFwcGVuZFBhZ2VDb3JlS2V5VmFsdWVzLCBhcHBlbmROb25QYWdlQ29yZUtleVZhbHVlc30gZnJvbSAnYW5hbHl0aWNzL2NvbVNjb3JlSGVscGVycyc7XG5pbXBvcnQgc3RyZWFtU2Vuc2UgZnJvbSAnYW5hbHl0aWNzL3N0cmVhbVNlbnNlJztcbmltcG9ydCBnZXRVc2VyVHJhY2tpbmdDb29raWUgZnJvbSAnYW5hbHl0aWNzL3V0aWxzL2dldFVzZXJUcmFja2luZ0Nvb2tpZSc7XG5pbXBvcnQgZ2V0U2VjdGlvblN0cmluZ3MgZnJvbSAnYW5hbHl0aWNzL3V0aWxzL2dldFNlY3Rpb25TdHJpbmdzJztcbmltcG9ydCBnZXRQYWdlVHlwZSBmcm9tICdhbmFseXRpY3MvdXRpbHMvZ2V0UGFnZVR5cGUnO1xuaW1wb3J0IGdldFRpbWVzdGFtcCBmcm9tICdhbmFseXRpY3MvdXRpbHMvZ2V0VGltZXN0YW1wJztcbmltcG9ydCB7c2FuaXRpc2VLZXlWYWx1ZXN9IGZyb20gJ2FuYWx5dGljcy91dGlscy9zYW5pdGlzZVZhbHVlcydcbmltcG9ydCBNZXRyaWNzQnVpbGRlciBmcm9tICdhbmFseXRpY3MvbWV0cmljcy9tZXRyaWNzQnVpbGRlcic7XG5pbXBvcnQge2dldE92ZXJyaWRlc30gZnJvbSAnYW5hbHl0aWNzL21ldHJpY3Mvb3ZlcnJpZGVzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IGxvZyA9IExvZ2dlcignYW5hbHl0aWNzOmNvbVNjb3JlJyk7XG5jb25zdCBERUxBWV9UUkFDS0lOR19DT09LSUUgPSAnY2twZl9nbmxjcyc7ICAvLyBDb21TY29yZSBzcGVjaWZpY1xuXG5jbGFzcyBDb21TY29yZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wbGF5bGlzdENvdW50ID0gMDtcbiAgICAgICAgdGhpcy52aWRlb0V2ZW50Q291bnRlciA9IDA7XG4gICAgICAgIHRoaXMuYWxsb3dMaW5rVHJhY2tpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzUGxheWxpc3RTdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudXNlclRyYWNraW5nQ29va2llVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50cmFja2luZ1JlcXVlc3RzID0geydodHRwJzogW10sICdjb29raWUnOiBbXX07XG4gICAgICAgIHRoaXMua2V5VmFsdWVzID0ge307XG4gICAgICAgIHRoaXMuaXNTY3dIYW5kbGVyVXNlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVkIGluIGJiY2RvdGNvbS5pbml0XG4gICAgICogTm90ZTogc29tZSBwYWdlcyBzdWNoIGFzIC9ibG9ncyBkbyBub3QgcnVuIGJiY2RvdGNvbS5pbml0KCkgZ3JycnJcbiAgICAgKi9cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLnVzZXJUcmFja2luZ0Nvb2tpZVZhbHVlID0gZ2V0VXNlclRyYWNraW5nQ29va2llKCk7XG4gICAgICAgIGhlbHBlci5wcm9jZXNzRGVsYXlUcmFja2luZ0Nvb2tpZShERUxBWV9UUkFDS0lOR19DT09LSUUsIHRoaXMudHJhY2tpbmdSZXF1ZXN0cyk7XG5cbiAgICAgICAgdGhpczo6c2V0dXBTdHJlYW1TZW5zZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRTY3dGb3JBcHAoKSB7XG4gICAgICAgIGxvZygnZ2V0U2N3Rm9yQXBwKCkgY2FsbGVkIHRvIGdldCBcInNjd1wiJyk7XG4gICAgICAgIHRoaXMuaXNTY3dIYW5kbGVyVXNlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0QXBwUGFnZVRyYWNraW5nOiAocGFnZU5hbWUsIHVyaSwgcGFnZVR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFwcCh7cGFnZU5hbWV9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRBcHBOYW1lOiBhcHBOYW1lID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFwcCh7YXBwTmFtZX0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldEFwcFZlcnNpb25OdW1iZXI6IGFwcFZlcnNpb24gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXBwKHthcHBWZXJzaW9ufSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRBcHBPczogYXBwT3MgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXBwKHthcHBPc30pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXBwVHJhY2tQYWdlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXRBcHAoa2V5VmFsdWUpIHtcbiAgICAgICAgdmFyIGNvbmY7XG4gICAgICAgIGZvciAoY29uZiBpbiBrZXlWYWx1ZSkge1xuICAgICAgICAgICAgc3dpdGNoIChjb25mKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXBwTmFtZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5VmFsdWVzLmJfYXBwX25hbWUgPSBrZXlWYWx1ZVtjb25mXSArIFwifGFwcFwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5VmFsdWVbY29uZl0gPT09IFwiaG9yaXpvbnNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZXlWYWx1ZXMuYl9zaXRlX2NoYW5uZWwgPSAnbmV3cyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXBwVmVyc2lvbic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5VmFsdWVzLmJfYXBwX2ltcF92ZXIgPSBrZXlWYWx1ZVtjb25mXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXBwT3MnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmtleVZhbHVlcy5iX2FwcF9vcyA9IGtleVZhbHVlW2NvbmZdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwYWdlTmFtZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5VmFsdWVzLm5hbWUgPSBrZXlWYWx1ZVtjb25mXTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEFsbG93TGlua1RyYWNraW5nKGVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5hbGxvd0xpbmtUcmFja2luZyA9IChlbmFibGVkID8gdHJ1ZSA6IGZhbHNlKTtcbiAgICB9XG5cbiAgICBnZXRUcmFja2luZ1JlcXVlc3RzKHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAndW5kZWZpbmVkJyB8fCAodHlwZSAhPT0gJ2h0dHAnICYmIHR5cGUgIT09ICdjb29raWUnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHR5cGUgcHJvdmlkZWQgdG8gZ2V0VHJhY2tpbmdSZXF1ZXN0cygpIFwiJyArIHR5cGUgKyAnXCInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50cmFja2luZ1JlcXVlc3RzW3R5cGVdO1xuICAgIH1cblxuICAgIGdldFRyYWNraW5nVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBzZXRVc2VyVHJhY2tpbmdDb29raWUodmFsKSB7XG4gICAgICAgIHRoaXMudXNlclRyYWNraW5nQ29va2llVmFsdWUgPSB2YWw7XG4gICAgfVxuXG4gICAgZ2V0VXNlclRyYWNraW5nQ29va2llKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyVHJhY2tpbmdDb29raWVWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZy5cbiAgICAgKi9cbiAgICByKCkge1xuICAgICAgICB0aGlzLnVzZXJUcmFja2luZ0Nvb2tpZVZhbHVlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWxsb3dMaW5rVHJhY2tpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyYWNraW5nUmVxdWVzdHMgPSB7J2h0dHAnOiBbXSwgJ2Nvb2tpZSc6IFtdfTtcbiAgICAgICAgc3RyZWFtU2Vuc2UudmlkZW9FdmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5pc1BsYXlsaXN0U3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB1dGlscy5kZWxldGVDb29raWUoREVMQVlfVFJBQ0tJTkdfQ09PS0lFKTtcbiAgICAgICAgdGhpcy52aWRlb0V2ZW50Q291bnRlciA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKiBQYWdlIFRyYWNraW5nXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFdlYnNpdGUgUGFnZSBUcmFja2luZ1xuICAgICAqL1xuICAgIHBhZ2UoKSB7XG4gICAgICAgIGlmICghY29uZmlnLmlzQ29tU2NvcmVFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIGxvZygnZGlkIG5vdCBkbyB0cmFja2luZyBiZWNhdXNlIGlzQ29tU2NvcmVFbmFibGVkPWZhbHNlJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBrZXlWYWx1ZXMgPSBnZXRDb3JlS2V5VmFsdWVzKCk7XG4gICAgICAgICAgICBrZXlWYWx1ZXMgPSBhcHBlbmRQYWdlQ29yZUtleVZhbHVlcyhrZXlWYWx1ZXMpO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihrZXlWYWx1ZXMsIHRoaXMua2V5VmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXM6OmRvVHJhY2soa2V5VmFsdWVzLCAncGFnZScpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWxsb3dMaW5rVHJhY2tpbmcpIHtcbiAgICAgICAgICAgICAgICBoZWxwZXIuYXBwbHlMaW5rVHJhY2tpbmdUb1BhZ2VFbGVtZW50cyh0aGlzLmxpbmsuYmluZCh0aGlzKSk7ICAvLyBOT1RFOiBwcm9jZXNzTGluaygpIG1ldGhvZCBpcyBjYWxsYmFja1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcignYmJjZG90Y29tLmFuYWx5dGljcy5wYWdlKCkgZXhjZXB0aW9uIFwiJyArIGV4Y2VwdGlvbi5tZXNzYWdlICsgJ1wiJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAqIExpbmsgVHJhY2tpbmdcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgdG8gcmVwb3J0IG9uIHRoZSBsaW5rIHdoaWNoIGhhcyBiZWVuIGNsaWNrZWRcbiAgICAgKlxuICAgICAqTm8gbG9uZ2VyIHRyYWNraW5nIGFkdmVydGlzaW5nIGJlY2F1c2Ugb2YgaXNzdWVzIG5vdCBvcGVuaW5nIGluIG5ldyB3aW5kb3cgKGNhbm5vdCByZWxpYWJseSBvcGVuIGluIG5ldyB3aW5kb3cgd2l0aCBKUylcbiAgICAgKkV4dGVybmFsIGxpbmtzIHdpbGwgZmlyZSByZXF1ZXN0IHRvIGFuYWx5dGljcyBpbW1lZGlhdGVseSwgdGhlbiBvcGVuIGxpbmsgKG5vdCBpbiBuZXcgdGFiL3dpbmRvdyBiZWNhdXNlIG5vdCBwb3NzaWJsZSBpbiBKUylcbiAgICAgKkludGVybmFsIGxpbmtzIHdpbGwgZHJvcCBhIGNvb2tpZSBhbmQgcGljayB1cCB0aGUgY2xpY2sgdHJhY2tpbmcgb24gdGhlIHN1YnNlcXVlbnQgcGFnZVxuICAgICAqXG4gICAgICogQHBhcmFtIG9iamVjdCBsaW5rT2JqIGlzIHRoZSA8YT4gY2xpY2tlZCwgZm9yIGV4YW1wbGU6XG4gICAgICogICAgICB7IGhyZWY6J2h0dHA6Ly93d3cuYmJjLmNvbS90cmF2ZWwnLCB0aXRsZTonVHJhdmVsIHdlYnNpdGUnLFxuICAgICogICAgICAgIHJldjonaGVsbG98d29ybGQnLCBkYXRhLXRyYWNrOidoZWxsb3x3b3JsZCd9XG4gICAgICogQHBhcmFtIG9iamVjdCBldmVudCBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBsaW5rKGxpbmtPYmosIGV2ZW50KSB7XG4gICAgICAgIC8vIFRpdGxlIG9mIHRoZSBwYWdlIGF0IHRoZSBvdGhlciBlbmQgb2YgdGhlIGxpbmsgKGdlbmVyYWxseSBkYXRhIGlzIHN0b3JlZCB3aXRoaW4gJ3RpdGxlJyBhdHRyaWJ1dGVcbiAgICAgICAgLy8gb2YgYW5jaG9yIDxhIGhyZWY9XCJcIiB0aXRsZT1cIlwiPi5cbiAgICAgICAgaWYgKCFjb25maWcuaXNDb21TY29yZUVuYWJsZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGlua09iaiA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGxpbmtPYmouaHJlZiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBLZXktVmFsdWVzIHRvIHNlbmRcbiAgICAgICAgdmFyIGtleVZhbHVlcyA9IGdldENvcmVLZXlWYWx1ZXMoKSxcbiAgICAgICAgICAgIHZhcnMgPSBoZWxwZXIuZ2V0TGlua1RyYWNraW5nUHJvcGVydGllcyhsaW5rT2JqKSxcbiAgICAgICAgICAgIHVyaSA9IGxpbmtPYmouaHJlZjsgLy9oZWxwZXIubm9ybWFsaXplVXJpKGxpbmtPYmouaHJlZik7XG5cbiAgICAgICAgaWYgKCF2YXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXRyaWNzQnVpbGRlciA9IG5ldyBNZXRyaWNzQnVpbGRlcjtcblxuICAgICAgICBjb25zdCBpc0JCQ1VyaSA9IGhlbHBlci5pc0JCQ1VyaSh1cmkpO1xuICAgICAgICBtZXRyaWNzQnVpbGRlci53aXRoKCdwZXYxJywge3ZhbHVlOiB1cmkuc3Vic3RyKDAsIDI1NSksIHByZVJlcXVpc2l0ZTogKCkgPT4gaXNCQkNVcml9KTtcbiAgICAgICAgbWV0cmljc0J1aWxkZXIud2l0aCgnZG9tYWluRnJvbVVybCcsIHttYXBOYW1lOiAncGV2MScsIGFyZ3M6W3VyaV0sIHByZVJlcXVpc2l0ZTogKCkgPT4gIWlzQkJDVXJpfSk7XG5cbiAgICAgICAgLy8gcGFnZVR5cGUgaXMgJ2luZGV4JywgJ3N0b3J5JywgJ21hcCcuXG4gICAgICAgIHZhcnMucGFnZVR5cGUgPSBnZXRQYWdlVHlwZShsaW5rT2JqLmhyZWYpLnN1YnN0cmluZygwLCAzKS5yZXBsYWNlKCd8JywgJycpO1xuICAgICAgICBrZXlWYWx1ZXMgPSBhcHBlbmROb25QYWdlQ29yZUtleVZhbHVlcyhrZXlWYWx1ZXMpO1xuICAgICAgICBrZXlWYWx1ZXMuYl9saW5rID0gdGhpczo6YnVpbGRQaXBlRGVsaW1pdGVkS2V5KHZhcnMpO1xuXG5cbiAgICAgICAga2V5VmFsdWVzID0gT2JqZWN0LmFzc2lnbihrZXlWYWx1ZXMsIG1ldHJpY3NCdWlsZGVyLmJ1aWxkKCkpO1xuICAgICAgICBoZWxwZXIudHJhY2tMaW5rKHRoaXM6OmRvVHJhY2ssIERFTEFZX1RSQUNLSU5HX0NPT0tJRSwgdXJpLCBldmVudCwga2V5VmFsdWVzKTsgIC8vIE5PVEU6IGRvVHJhY2soKSBtZXRob2QgaXMgY2FsbGJhY2tcbiAgICB9XG5cblxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgQ29tU2NvcmU7XG5cbi8qKlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFBSSVZBVEUgTUVUSE9EU1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cFN0cmVhbVNlbnNlKCkge1xuICAgIC8vIFByb3h5IG1ldGhvZHNcbiAgICB2YXIgaSwgbDtcbiAgICB2YXIgbWV0aG9kcyA9IFtcbiAgICAgICAgJ3N0YXJ0UGxheWxpc3QnLFxuICAgICAgICAnYWRSZXF1ZXN0JyxcbiAgICAgICAgJ2FkTWFuYWdlckxvYWRlZCcsXG4gICAgICAgICdzdGFydEFkdmVydCcsXG4gICAgICAgICdlbmRBZHZlcnQnLFxuICAgICAgICAnc3RhcnRQcm9ncmFtbWUnLFxuICAgICAgICAnc3RhcnRQYXVzZScsXG4gICAgICAgICdlbmRQYXVzZScsXG4gICAgICAgICdzdGFydFNlZWsnLFxuICAgICAgICAnZW5kU2VlaycsXG4gICAgICAgICdlbmRQcm9ncmFtbWUnLFxuICAgICAgICAnZW5kUGxheWxpc3QnLFxuICAgICAgICAnaXNQbGF5bGlzdFN0YXJ0ZWQnXG4gICAgXTtcbiAgICBmb3IgKGkgPSAwLCBsID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgQ29tU2NvcmUucHJvdG90eXBlW21ldGhvZHNbaV1dID1cbiAgICAgICAgICAgIHN0cmVhbVNlbnNlW21ldGhvZHNbaV1dLmJpbmQoc3RyZWFtU2Vuc2UpO1xuICAgIH1cblxuICAgIHN0cmVhbVNlbnNlLmluaXQoKTtcbn07XG5cbi8qKlxuICogTWFrZSByZXF1ZXN0IHRvIENvbVNjb3JlIGVuZHBvaW50XG4gKlxuICogQHBhcmFtIG9iamVjdCBjdXN0b21UcmFja2luZ0tleVZhbHVlcyBlZyB7fVxuICogQHBhcmFtIHN0cmluZyB0cmFja1R5cGUgZWcgcGFnZSwgbGluaywgdmlkZW9cbiAqIEBwYXJhbSBmdW5jdGlvbiBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSB0cmFja2luZyByZXF1ZXN0IGlzIGNvbXBsZXRlXG4gKiBAcGFyYW0gYm9vbGVhbiBtYWtlSW1hZ2VSZXF1ZXN0IHdoZXRoZXIgdG8gbWFrZSByZXF1ZXN0IG9yIG5vdFxuICogQHJldHVybiBtaXhlZCBib29sZWFufHN0cmluZyBmYWxzZT1Db21TY29yZSBkaXNhYmxlZFxuICovXG5mdW5jdGlvbiBkb1RyYWNrKGtleVZhbHVlcywgdHlwZSwgY2FsbGJhY2ssIG1ha2VJbWFnZVJlcXVlc3QpIHtcbiAgICB2YXIga2V5O1xuICAgIGlmICghY29uZmlnLmlzQW5hbHl0aWNzRW5hYmxlZCgpKSB7XG4gICAgICAgIGxvZygnZGlkIG5vdCBkbyB0cmFja2luZyBiZWNhdXNlIGlzQW5hbHl0aWNzRW5hYmxlZD1mYWxzZScpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnVzZXJUcmFja2luZ0Nvb2tpZVZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAvLyBKdXN0IGluIGNhc2UgcGFnZSBkb2Vzbid0IHJ1biBiYmNkb3Rjb20uaW5pdCgpO1xuICAgICAgICB0aGlzLnVzZXJUcmFja2luZ0Nvb2tpZVZhbHVlID0gZ2V0VXNlclRyYWNraW5nQ29va2llKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3ZlcnJpZGVzID0gZ2V0T3ZlcnJpZGVzKCk7XG4gICAgY29uc3QgZGVmYXVsdEMyID0gdHlwZW9mIGtleVZhbHVlcy5jMiAhPT0gJ3VuZGVmaW5lZCcgPyBrZXlWYWx1ZXMuYzIgOiAnJztcblxuICAgIHZhciB1cmwgPSAnPydcbiAgICAgICAgKyAnYzE9JyArICh0eXBlID09PSAncGFnZScgPyAyIDogMjIpXG4gICAgICAgICsgJyZjMj0nICsgXy5nZXQob3ZlcnJpZGVzLCAnYzInLCBkZWZhdWx0QzIpO1xuXG4gICAgaWYgKHR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgdGhpcy52aWRlb0V2ZW50Q291bnRlcisrO1xuICAgICAgICBrZXlWYWx1ZXMubnNfc3RfZWMgPSB0aGlzLnZpZGVvRXZlbnRDb3VudGVyO1xuICAgIH1cbiAgICAvLyBBcHBseSBPdmVycmlkZXNcbiAgICBrZXlWYWx1ZXMgPSBPYmplY3QuYXNzaWduKGtleVZhbHVlcywgb3ZlcnJpZGVzKTtcblxuICAgIC8vIEFwcGVuZCB0byBlbmQgb2YgcmVxdWVzdCAoZG8gbm90IHB1dCBhdCBmcm9udCEpXG4gICAga2V5VmFsdWVzLmM3ID0gY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCkuaHJlZi5yZXBsYWNlKC9cXC5hcHAkLywgJycpO1xuICAgIGtleVZhbHVlcy5jOCA9IGNvbmZpZy5nZXRXaW5kb3dEb2N1bWVudCgpLnRpdGxlO1xuICAgIGtleVZhbHVlcy5jOSA9IGRvY3VtZW50LnJlZmVycmVyO1xuICAgIGtleVZhbHVlcyA9IHNhbml0aXNlS2V5VmFsdWVzKGtleVZhbHVlcyk7XG4gICAgZm9yIChrZXkgaW4ga2V5VmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGxvZ0xpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbG9nTGluZS5pbm5lckhUTUwgPSBgJHtrZXl9OiAke2tleVZhbHVlc1trZXldfWA7XG5cbiAgICAgICAgaWYgKGtleSAhPT0gJ2MyJykge1xuICAgICAgICAgICAgLy8gRG8gbm90IGluY2x1ZGUgbGFiZWwgKGtleS12YWx1ZSkgaWYgZW1wdHkuICBEb24ndCBpbmNsdWRlICdjMicgaGVyZSBhcyBpbmNsdWRlZCBhYm92ZSAoZm9yIGVhc2lseSByZWFkaW5nIGh0dHAgcmVxdWVzdHMpLlxuICAgICAgICAgICAgdXJsICs9ICcmJyArIGtleSArICc9JyArIGhlbHBlci5lbmNvZGVWYWx1ZShrZXlWYWx1ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBtYWtlSW1hZ2VSZXF1ZXN0ID09PSAndW5kZWZpbmVkJyB8fCBtYWtlSW1hZ2VSZXF1ZXN0ID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMudHJhY2tpbmdSZXF1ZXN0c1snaHR0cCddLnB1c2godXJsKTtcbiAgICAgICAgaGVscGVyLmxvYWRUcmFja2luZ0ltYWdlKHVybCwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHJhY2tpbmdSZXF1ZXN0c1snY29va2llJ10ucHVzaCh1cmwpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxvZygnY29tU2NvcmUgZG9UcmFjayB1cmw6JyArIHVybCk7XG4gICAgY29uc3QgbG9nTGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGxvZ0xpbmUuaW5uZXJIVE1MID0gJ0RvVHJhY2s6ICcgKyB1cmw7XG4gICAgcmV0dXJuIHVybDtcbn07XG5cbi8qKlxuICogQ29uc3RydWN0IHBpcGUgZGVsaW1pdGVkIHZhbHVlXG4gKlxuICogUGlwZSBkZWxpbWl0ZWQgb3JkZXI6XG4gKiAtIDEuICBuYW1lIG9yIGNoYW5uZWwgb2YgY29udGVudCBiZWluZyBwcm9tb3RlZCAgZWcgL25ld3Mvc3RvcnktMTIzNCA9PiAnbmV3cydcbiAqIC0gMi4gIGNoYW5uZWwgZWcgbmV3c1xuICogLSAzLiAgbW9kdWxlIG5hbWUgZWcgY2Fyb3VzZWxcbiAqIC0gNC4gIGxpbmsgdHlwZSBlZyAndGV4dCcsICdpbWFnZScsICdpY29uJywgJ3ZpZGVvJ1xuICogLSA1LiAgbGluayBuYW1lIGVnIHJveWFsLWJhYnlpcy1ib3JuXG4gKiAtIDYuICBsaW5rIHBvc2l0aW9uIGVnIDFcbiAqIC0gNy4gIHRvdGFsIG51bWJlciBvZiBsaW5rcyBpbiBtb2R1bGUgZWcgMTBcbiAqIC0gOC4gIGV4dHJhIGxpbmsgaW5mbyBlZyBmYWNlYm9va1xuICogLSA5LiAgc2VjdGlvbiBlZyBuZXdzPndvcmxkXG4gKiAtIDEwLiBwYWdlIHR5cGUgZWcgaWR4fG5hLCBzdHl8bmFcbiAqIC0gMTEuIG1vZHVsZSBwbGFjZW1lbnQgKG5vdCBsaW5rIHBsYWNlbWVudCkgZWcgdG9wY2VudHJlXG4gKlxuICogQHBhcmFtIG9iamVjdCBkYXRhIE92ZXJyaWRlIHBhcmFtc1xuICovXG5mdW5jdGlvbiBidWlsZFBpcGVEZWxpbWl0ZWRLZXkoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgc2VjdGlvblN0cmluZ3MgPSBnZXRTZWN0aW9uU3RyaW5ncygpO1xuICAgIHZhciBrZXlzID0ge1xuICAgICAgICAvLyBOT1RFOiBPUkRFUiBJUyBJTVBPUlRBTlRcbiAgICAgICAgJ3Byb21vdGVkJzogJycsXG4gICAgICAgICdjaGFubmVsJzogc2VjdGlvblN0cmluZ3NbMF0sXG4gICAgICAgICdtb2R1bGVOYW1lJzogJycsXG4gICAgICAgICdsaW5rVHlwZSc6ICd0ZXh0JyxcbiAgICAgICAgJ2xpbmtOYW1lJzogJycsXG4gICAgICAgICdsaW5rUG9zaXRpb24nOiAnJyxcbiAgICAgICAgJ3RvdGFsTGlua3MnOiAnJyxcbiAgICAgICAgJ2V4dHJhTGlua0luZm8nOiAnJyxcbiAgICAgICAgJ3NlY3Rpb24nOiBzZWN0aW9uU3RyaW5nc1sxXSxcbiAgICAgICAgJ3BhZ2VUeXBlJzogJycsXG4gICAgICAgICdwbGFjZW1lbnQnOiAnJ1xuICAgICAgICAvLyBOT1RFOiBPUkRFUiBJUyBJTVBPUlRBTlRcbiAgICB9O1xuICAgIHZhciBkLFxuICAgICAgICBrLFxuICAgICAgICBwYXJ0cyA9IFtdO1xuICAgIGZvciAoZCBpbiBkYXRhKSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5c1tkXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBrZXkgd2l0aGluIGtleXMsIGRvIG5vdCBhZGQgYW55IG5ldyBrZXlzIGp1c3QgdGhlIHZhbHVlc1xuICAgICAgICAgICAga2V5c1tkXSA9ICh0eXBlb2YgZGF0YVtkXSA9PT0gJ3VuZGVmaW5lZCcgfHwgZGF0YVtkXSA9PT0gJycgfHwgZGF0YVtkXSA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgICA/ICcnIDogdXRpbHMudHJpbShkYXRhW2RdKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrIGluIGtleXMpIHtcbiAgICAgICAgcGFydHMucHVzaChrZXlzW2tdKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJ3wnKTtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL2NvbVNjb3JlLmpzXG4gKiovIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9nZXQuanNcbiAqKiBtb2R1bGUgaWQgPSAxNjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBpc0tleShwYXRoLCBvYmplY3QpID8gW3BhdGhdIDogY2FzdFBhdGgocGF0aCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fYmFzZUdldC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBzdHJpbmdUb1BhdGgodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2Nhc3RQYXRoLmpzXG4gKiogbW9kdWxlIGlkID0gMTY5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNBcnJheS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlTGVhZGluZ0RvdCA9IC9eXFwuLyxcbiAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZShmdW5jdGlvbihzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChyZUxlYWRpbmdEb3QudGVzdChzdHJpbmcpKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qc1xuICoqIG1vZHVsZSBpZCA9IDE3MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gQXNzaWduIGNhY2hlIHRvIGBfLm1lbW9pemVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9tZW1vaXplLmpzXG4gKiogbW9kdWxlIGlkID0gMTcyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19NYXBDYWNoZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA/IGVudHJpZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19IYXNoLmpzXG4gKiogbW9kdWxlIGlkID0gMTc1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19oYXNoQ2xlYXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gMTc3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19nZXROYXRpdmUuanNcbiAqKiBtb2R1bGUgaWQgPSAxNzhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNIb3N0T2JqZWN0ID0gcmVxdWlyZSgnLi9faXNIb3N0T2JqZWN0JyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOC05IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNGdW5jdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDE4MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9pc09iamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDE4MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0IGluIElFIDwgOS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSG9zdE9iamVjdCh2YWx1ZSkge1xuICAvLyBNYW55IGhvc3Qgb2JqZWN0cyBhcmUgYE9iamVjdGAgb2JqZWN0cyB0aGF0IGNhbiBjb2VyY2UgdG8gc3RyaW5nc1xuICAvLyBkZXNwaXRlIGhhdmluZyBpbXByb3Blcmx5IGRlZmluZWQgYHRvU3RyaW5nYCBtZXRob2RzLlxuICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gIGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0hvc3RPYmplY3Q7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9faXNIb3N0T2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTgyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19pc01hc2tlZC5qc1xuICoqIG1vZHVsZSBpZCA9IDE4M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19jb3JlSnNEYXRhLmpzXG4gKiogbW9kdWxlIGlkID0gMTg0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fcm9vdC5qc1xuICoqIG1vZHVsZSBpZCA9IDE4NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2ZyZWVHbG9iYWwuanNcbiAqKiBtb2R1bGUgaWQgPSAxODZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL190b1NvdXJjZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE4N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fZ2V0VmFsdWUuanNcbiAqKiBtb2R1bGUgaWQgPSAxODhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICByZXR1cm4gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9faGFzaERlbGV0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE4OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEdldDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19oYXNoR2V0LmpzXG4gKiogbW9kdWxlIGlkID0gMTkwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gZGF0YVtrZXldICE9PSB1bmRlZmluZWQgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19oYXNoSGFzLmpzXG4gKiogbW9kdWxlIGlkID0gMTkxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9faGFzaFNldC5qc1xuICoqIG1vZHVsZSBpZCA9IDE5MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fTGlzdENhY2hlLmpzXG4gKiogbW9kdWxlIGlkID0gMTkzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxOTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE5NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19hc3NvY0luZGV4T2YuanNcbiAqKiBtb2R1bGUgaWQgPSAxOTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvZXEuanNcbiAqKiBtb2R1bGUgaWQgPSAxOTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fbGlzdENhY2hlR2V0LmpzXG4gKiogbW9kdWxlIGlkID0gMTk4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19saXN0Q2FjaGVIYXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxOTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19saXN0Q2FjaGVTZXQuanNcbiAqKiBtb2R1bGUgaWQgPSAyMDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fTWFwLmpzXG4gKiogbW9kdWxlIGlkID0gMjAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzXG4gKiogbW9kdWxlIGlkID0gMjAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX2dldE1hcERhdGEuanNcbiAqKiBtb2R1bGUgaWQgPSAyMDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9faXNLZXlhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gMjA0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9sb2Rhc2gvX21hcENhY2hlR2V0LmpzXG4gKiogbW9kdWxlIGlkID0gMjA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19tYXBDYWNoZUhhcy5qc1xuICoqIG1vZHVsZSBpZCA9IDIwNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICBnZXRNYXBEYXRhKHRoaXMsIGtleSkuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19tYXBDYWNoZVNldC5qc1xuICoqIG1vZHVsZSBpZCA9IDIwN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL3RvU3RyaW5nLmpzXG4gKiogbW9kdWxlIGlkID0gMjA4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19iYXNlVG9TdHJpbmcuanNcbiAqKiBtb2R1bGUgaWQgPSAyMDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9fU3ltYm9sLmpzXG4gKiogbW9kdWxlIGlkID0gMjEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL2lzU3ltYm9sLmpzXG4gKiogbW9kdWxlIGlkID0gMjExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS9+L2xvZGFzaC9pc09iamVjdExpa2UuanNcbiAqKiBtb2R1bGUgaWQgPSAyMTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL19pc0tleS5qc1xuICoqIG1vZHVsZSBpZCA9IDIxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL34vbG9kYXNoL190b0tleS5qc1xuICoqIG1vZHVsZSBpZCA9IDIxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyogZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIGJiY2RvdGNvbSwgb3JiLCBzY3JlZW4gKi9cbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnY29uZmlnJyk7XG52YXIgc2VjdGlvbnMgPSByZXF1aXJlKCdzZWN0aW9ucycpO1xudmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2dlcicpKCdhbmFseXRpY3M6aGVscGVyJyk7XG52YXIgb2JqZWN0cyA9IHJlcXVpcmUoJ29iamVjdHMnKTtcblxudmFyIHNlY3Rpb25TdHJpbmdzID0gWycnLCAnJywgJycsICcnXSxcbiAgICBhbHJlYWR5TGlua2VkID0gZmFsc2UsXG4gICAgY2xpY2tMaXN0ZW5lciwgICAgICAvLyByZW1vdmUgbWUsIEkgZGFyZSB5b3UgOi1vXG4gICAgdmVydGljYWxzUmVnZXhwID0gL14oYXV0b3N8Y2FwaXRhbHxjdWx0dXJlfGVhcnRofGZ1dHVyZXx0cmF2ZWwpJC8sXG4gICAgTElOS19UUkFDS0lOR19TRUNUSU9OUyA9IFsnaG9tZXBhZ2UnLCAnbmV3cycsICdzcG9ydCcsICd3d3NjcmlwdHMnXSwgIC8vIFRMRHMgb24gd2Vic2l0ZSBwZXJtaXR0ZWQgdG8gaGF2ZSBsaW5rLXRyYWNraW5nXG4gICAgVFJBQ0tJTkdfVElNRU9VVCA9IDUwMCxcbiAgICBOVUwgPSAnbmEnO1xuXG52YXIgaXNCQkNVcmkgPSBmdW5jdGlvbiAodXJpKSB7XG4gICAgcmV0dXJuICgvXmh0dHAofHMpOlxcL1xcL1thLXowLTlcXC0uXSsuYmJjLmNvKG18LnVrKShcXC8pPyguKik/LykudGVzdCh1cmkpO1xufTtcblxudmFyIGlzTGl2ZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFRoaXMgaXMgYmFkLCB3ZSBzaG91bGQgYmUgZ2V0dGluZyB0aGUgc2l0ZXMgdG8gcmVwb3J0IHRoaXMgaW5zdGVhZCBvZiBpbnNwZWN0aW5nIHRoZSBVUkkuXG4gICAgdmFyIHJlID0gLyhuZXdzfHNwb3J0KVxcL2xpdmVcXC8vO1xuICAgIHJldHVybiByZS5leGVjKHNlY3Rpb25zLmdldFNlY3Rpb25zKCkuam9pbihcIi9cIikpICE9PSBudWxsO1xufTtcblxuLyoqXG4gKiBPdXRicmFpbiBsaW5rcyB0byB0cmFmZmljLm91dGJyYWluLmNvbSBidXQgY29tZXMgYmFjayB0byB0aGUgYmJjLmNvbSAodGhlcmVmb3JlIHVzZSB0aGUgbGluayB0cmFja2luZyBcImNvb2tpZSBkcm9wXCJcbiAqIG1ldGhvZCBvZiB0cmFja2luZylcbiAqIGVnIDxhIGhyZWY9XCJodHRwOi8vdHJhZmZpYy5vdXRicmFpbi5jb20vcmVkaXJlY3Q/PWh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL3N0b3J5LTEyMzQ1XCI+XG4gKi9cbnZhciBpc0V4dGVybmFsUmVkaXJlY3RUb0JCQ1VyaSA9IGZ1bmN0aW9uICh1cmkpIHtcbiAgICByZXR1cm4gKC9eaHR0cCh8cyk6XFwvXFwvdHJhZmZpY1xcLm91dGJyYWluXFwuY29tLykudGVzdCh1cmkpO1xufTtcblxuLyoqXG4gKiBVc2VzIHdpbmRvdy5sb2NhdGlvbiBvciBjb25maWcuc2V0U2VjdGlvbnMoW10pIHRvIGRlcml2ZSB2NiwgdjcgYW5kIHY4IHNlY3Rpb24gdmFsdWVzXG4gKi9cbnZhciBkZXRlcm1pbmVTZWN0aW9ucyA9IGZ1bmN0aW9uIChzZXBhcmF0b3IpIHtcbiAgICBpZiAodHlwZW9mIHNlcGFyYXRvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gJz4nO1xuICAgIH1cbiAgICB2YXIgc2VjdHMgPSBzZWN0aW9ucy5nZXRTZWN0aW9ucygnYW5hbHl0aWNzJywgdHJ1ZSk7XG4gICAgc2VjdGlvblN0cmluZ3MgPSBbJycsICcnLCAnJywgJyddO1xuICAgIC8vIGVnIHY2PW5ld3MgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzXG4gICAgc2VjdGlvblN0cmluZ3NbMF0gPSBzZWN0c1swXTtcbiAgICBpZiAodHlwZW9mIHNlY3RzWzFdICE9PSAndW5kZWZpbmVkJyAmJiBzZWN0c1sxXSkge1xuICAgICAgICBpZiAoc2VjdHNbMF0gPT09ICduZXdzJyAmJiAoc2VjdHNbMV0uaW5kZXhPZignd29ybGQnKSA9PT0gMCB8fCBzZWN0c1sxXSA9PT0gJ3NwZWNpYWxmZWF0dXJlcycpKSB7XG4gICAgICAgICAgICAvLyBHb2VzIHVwIHRvIDQgZGVlcCBlZyAvbmV3cy93b3JsZC9hc2lhL2luZGlhXG4gICAgICAgICAgICAvLyBPbmx5IC9uZXdzL3dvcmxkLyogJiAvbmV3cy9zcGVjaWFsZmVhdHVyZXMvKlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWN0c1szXSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VjdHNbM10gJiYgc2VjdHNbMl0pIHtcbiAgICAgICAgICAgICAgICAvLyBlZyB2Nz1uZXdzPndvcmxkPmFzaWEgICAgICAgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL3dvcmxkL2FzaWEvaW5kaWFcbiAgICAgICAgICAgICAgICAvLyBlZyB2OD1uZXdzPndvcmxkPmFzaWE+aW5kaWEgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL3dvcmxkL2FzaWEvaW5kaWFcbiAgICAgICAgICAgICAgICBzZWN0aW9uU3RyaW5nc1sxXSA9IHNlY3RzWzBdICsgc2VwYXJhdG9yICsgc2VjdHNbMV0gKyBzZXBhcmF0b3IgKyBzZWN0c1syXTtcbiAgICAgICAgICAgICAgICBzZWN0aW9uU3RyaW5nc1syXSA9IHNlY3Rpb25TdHJpbmdzWzFdICsgc2VwYXJhdG9yICsgc2VjdHNbM107XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWN0c1syXSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VjdHNbMl0pIHtcbiAgICAgICAgICAgICAgICAvLyBlZyB2Nz1uZXdzPndvcmxkPmFzaWEgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL3dvcmxkL2FzaWFcbiAgICAgICAgICAgICAgICAvLyBlZyB2OD1uZXdzPndvcmxkPmFzaWEgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL3dvcmxkL2FzaWFcbiAgICAgICAgICAgICAgICBzZWN0aW9uU3RyaW5nc1sxXSA9IHNlY3RzWzBdICsgc2VwYXJhdG9yICsgc2VjdHNbMV0gKyBzZXBhcmF0b3IgKyBzZWN0c1syXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZWcgdjc9bmV3cz53b3JsZCBmb3IgaHR0cDovL3d3dy5iYmMuY29tL25ld3Mvd29ybGRcbiAgICAgICAgICAgICAgICAvLyBlZyB2OD1uZXdzPndvcmxkIGZvciBodHRwOi8vd3d3LmJiYy5jb20vbmV3cy93b3JsZFxuICAgICAgICAgICAgICAgIHNlY3Rpb25TdHJpbmdzWzFdID0gc2VjdHNbMF0gKyBzZXBhcmF0b3IgKyBzZWN0c1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzZWN0c1swXSA9PT0gJ3Nwb3J0Jykge1xuICAgICAgICAgICAgLy8gR29lcyB1cCB0byA1IGRlZXAgLSBUUlkgVE8gS0VFUCBUSElTIEdFTkVSSUMgUExFQVNFIC0gTk8gRVZFTlQgU1BFQ0lGSUMgUlVMRVMhIVxuICAgICAgICAgICAgLy8gZWcgL3Nwb3J0L2NvbW1vbndlYWx0aC1nYW1lcy8yMDE0L3Jlc3VsdHMvc3BvcnRzL2JveGluZy9tZW5zLWhlYXZ5LTkxa2dcblxuICAgICAgICAgICAgLy8gZWcgdjc9c3BvcnQ+Zm9vdGJhbGwgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9zcG9ydC9mb290YmFsbC90ZWFtcy9YWVpcbiAgICAgICAgICAgIC8vIGVnIHY3PXNwb3J0PmNvbW1vbndlYWx0aC1nYW1lcy0yMDE0XG4gICAgICAgICAgICBzZWN0aW9uU3RyaW5nc1sxXSA9IHNlY3RzWzBdICsgc2VwYXJhdG9yICsgc2VjdHNbMV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlY3RzWzJdICE9PSAndW5kZWZpbmVkJyAmJiBzZWN0c1syXSkge1xuICAgICAgICAgICAgICAgIC8vIGVnIHY4PXNwb3J0PmZvb3RiYWxsPnRlYW1zIGZvciBodHRwOi8vd3d3LmJiYy5jb20vc3BvcnQvZm9vdGJhbGwvdGVhbXMvWFlaXG4gICAgICAgICAgICAgICAgLy8gZWcgdjg9c3BvcnQ+Y29tbW9ud2VhbHRoLWdhbWVzLTIwMTQ+cmVzdWx0c1xuICAgICAgICAgICAgICAgIHNlY3Rpb25TdHJpbmdzWzJdID0gc2VjdGlvblN0cmluZ3NbMV0gKyBzZXBhcmF0b3IgKyBzZWN0c1syXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlY3RzWzRdICE9PSAndW5kZWZpbmVkJyAmJiBzZWN0c1s0XSAmJiBzZWN0c1szXSAmJiBzZWN0c1syXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlZyB2OT1zcG9ydD5jb21tb253ZWFsdGgtZ2FtZXMtMjAxND5yZXN1bHRzPmJveGluZz5tZW5zLWhlYXZ5LTkxa2dcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvblN0cmluZ3NbM10gPSBzZWN0aW9uU3RyaW5nc1syXSArIHNlcGFyYXRvciArIHNlY3RzWzNdICsgc2VwYXJhdG9yICsgc2VjdHNbNF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VjdHNbM10gIT09ICd1bmRlZmluZWQnICYmIHNlY3RzWzNdICYmIHNlY3RzWzJdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVnIHY5PXNwb3J0PmZvb3RiYWxsPnRlYW1zPlhZWlxuICAgICAgICAgICAgICAgICAgICAvLyBlZyB2OT1zcG9ydD5jb21tb253ZWFsdGgtZ2FtZXMtMjAxND5yZXN1bHRzPmJveGluZz5tZW5zLWhlYXZ5LTkxa2dcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvblN0cmluZ3NbM10gPSBzZWN0aW9uU3RyaW5nc1syXSArIHNlcGFyYXRvciArIHNlY3RzWzNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFN0YW5kYXJkLCBkb24ndCBnbyBhcyBkZWVwIC0gb25seSAzIGRlZXBcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VjdHNbMl0gIT09ICd1bmRlZmluZWQnICYmIHNlY3RzWzJdKSB7XG4gICAgICAgICAgICAgICAgLy8gZWcgdjc9bmV3cz5idXNpbmVzcyAgICAgICAgICAgICBmb3IgaHR0cDovL3d3dy5iYmMuY29tL25ld3MvYnVzaW5lc3MvbWFya2V0X2RhdGEvb3ZlcnZpZXcvXG4gICAgICAgICAgICAgICAgLy8gZWcgdjg9bmV3cz5idXNpbmVzcz5tYXJrZXRfZGF0YSBmb3IgaHR0cDovL3d3dy5iYmMuY29tL25ld3MvYnVzaW5lc3MvbWFya2V0X2RhdGEvb3ZlcnZpZXcvXG4gICAgICAgICAgICAgICAgc2VjdGlvblN0cmluZ3NbMV0gPSBzZWN0c1swXSArIHNlcGFyYXRvciArIHNlY3RzWzFdO1xuICAgICAgICAgICAgICAgIHNlY3Rpb25TdHJpbmdzWzJdID0gc2VjdGlvblN0cmluZ3NbMV0gKyBzZXBhcmF0b3IgKyBzZWN0c1syXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZWcgdjc9bmV3cz5idXNpbmVzcyBmb3IgaHR0cDovL3d3dy5iYmMuY29tL25ld3MvYnVzaW5lc3MvXG4gICAgICAgICAgICAgICAgLy8gZWcgdjg9bmV3cz5idXNpbmVzcyBmb3IgaHR0cDovL3d3dy5iYmMuY29tL25ld3MvYnVzaW5lc3MvXG4gICAgICAgICAgICAgICAgc2VjdGlvblN0cmluZ3NbMV0gPSBzZWN0c1swXSArIHNlcGFyYXRvciArIHNlY3RzWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZWN0aW9uU3RyaW5nc1sxXSA9PT0gJycpIHtcbiAgICAgICAgc2VjdGlvblN0cmluZ3NbMV0gPSBzZWN0aW9uU3RyaW5nc1swXTtcbiAgICB9XG4gICAgaWYgKHNlY3Rpb25TdHJpbmdzWzJdID09PSAnJykge1xuICAgICAgICBzZWN0aW9uU3RyaW5nc1syXSA9IHNlY3Rpb25TdHJpbmdzWzFdO1xuICAgIH1cbiAgICByZXR1cm4gc2VjdGlvblN0cmluZ3M7XG59O1xuXG52YXIgZ2V0U3RvcnlIZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3BzSGVhZGxpbmUsXG4gICAgICAgIGhlYWRsaW5lID0gY29uZmlnLmdldEhlYWRsaW5lKCk7XG4gICAgaWYgKGhlYWRsaW5lICE9PSAnJykge1xuICAgICAgICAvLyBQb3B1bGF0ZWQgYnkgd2Vic2VydmljZSBvciB2aWEgXCJjb25maWcuc2V0SGVhZGxpbmUoJ1RoZSBzdG9yeSBoZWFkbGluZScpXCJcbiAgICAgICAgcmV0dXJuIGhlYWRsaW5lO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdy5jb25maWcgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuY29uZmlnLmFzc2V0ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAmJiB0eXBlb2Ygd2luZG93LmNvbmZpZy5hc3NldC5oZWFkbGluZSAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbmZpZy5hc3NldC5oZWFkbGluZSAhPT0gJydcbiAgICApIHtcbiAgICAgICAgLy8gUmVzcG9uc2l2ZSBOZXdzXG4gICAgICAgIHJldHVybiB3aW5kb3cuY29uZmlnLmFzc2V0LmhlYWRsaW5lO1xuICAgIH1cbiAgICBjcHNIZWFkbGluZSA9IHV0aWxzLmdldE1ldGFOYW1lQ29udGVudCgnSGVhZGxpbmUnKTtcbiAgICBpZiAoY3BzSGVhZGxpbmUgIT09ICcnKSB7XG4gICAgICAgIC8vIERlc2t0b3AgTmV3cyAmIFNwb3J0IChDUFMgc3RhY2spXG4gICAgICAgIHJldHVybiBjcHNIZWFkbGluZTtcbiAgICB9XG4gICAgcmV0dXJuICduYSc7XG59O1xuXG52YXIgZ2V0UGFnZUVkaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGVkaXRpb247XG5cbiAgICAvLyBEbyBub3QgcmV0dXJuIGVkaXRpb24gZm9yIGphcGFuZXNlIFtCQkNDT00tNzg0Ml1cbiAgICBpZiAoZ2V0VmVydGljYWwoKSA9PT0gJ2phcGFuZXNlJykge1xuICAgICAgICByZXR1cm4gTlVMO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2luZG93LmNvbmZpZyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5jb25maWcuYXNzZXQgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICYmIHR5cGVvZiB3aW5kb3cuY29uZmlnLmFzc2V0LmVkaXRpb24gIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25maWcuYXNzZXQuZWRpdGlvbiAhPT0gJydcbiAgICApIHtcbiAgICAgICAgLy8gUmVzcG9uc2l2ZSBOZXdzXG4gICAgICAgIHJldHVybiB3aW5kb3cuY29uZmlnLmFzc2V0LmVkaXRpb247XG4gICAgfVxuICAgIGVkaXRpb24gPSB1dGlscy5nZXRNZXRhTmFtZUNvbnRlbnQoJ0NQU19BVURJRU5DRScpO1xuICAgIGlmIChlZGl0aW9uICE9PSAnJykge1xuICAgICAgICAvLyBEZXNrdG9wIE5ld3MgJiBEZXNrdG9wIFNwb3J0IChDUFMgc3RhY2spICBBTFNPIFJlc3BvbnNpdmUgTmV3c1xuICAgICAgICByZXR1cm4gZWRpdGlvbjtcbiAgICB9XG4gICAgZWRpdGlvbiA9IHV0aWxzLmdldE1ldGFQcm9wZXJ0eUNvbnRlbnQoJ3d3aHAtZWRpdGlvbicpO1xuICAgIGlmIChlZGl0aW9uICE9PSAnJykge1xuICAgICAgICAvLyBJbnRlcm5hdGlvbmFsIGhvbWVwYWdlIGVkaXRpb25cbiAgICAgICAgcmV0dXJuIGVkaXRpb247XG4gICAgfVxuICAgIHJldHVybiBOVUw7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhZ2UgdHlwZVxuICogQHJldHVybnMge1N0cmluZ30gZWcgc3RvcnksIGluZGV4LCB2aWRlbywgc3RvcnktdmlkZW9cbiAqL1xudmFyIGdldFBhZ2VUeXBlID0gZnVuY3Rpb24gKGhyZWYpIHtcbiAgICBocmVmID0gaHJlZiB8fCBjb25maWcuZ2V0V2luZG93TG9jYXRpb24oKS5ocmVmO1xuICAgIHZhciBzID0gc2VjdGlvbnMuZ2V0U2VjdGlvbnNGb3JVcmkoaHJlZiwgJ2FuYWx5dGljcycpO1xuICAgIHZhciB0eXBlID0gY29uZmlnLmdldFR5cGUoKTtcblxuICAgIGlmIChzWzBdID09PSAnaG9tZXBhZ2UnKSB7XG4gICAgICAgIHR5cGUgPSAnSU5ERVgnO1xuICAgIH0gZWxzZSBpZiAoaXNMaXZlRXZlbnQoKSkge1xuICAgICAgICB0eXBlID0gJ0xJVkUtRVZFTlQnO1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLmlzU3RpY2t5UGxheWVyUGFnZSgpKSB7XG4gICAgICAgIHR5cGUgPSAnVklERU8tU1RJQ0tZJztcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICcnKSB7XG4gICAgICAgIGlmICh3aW5kb3cuY29uZmlnICYmIHdpbmRvdy5jb25maWcuYXNzZXQgJiYgd2luZG93LmNvbmZpZy5hc3NldC50eXBlKSB7XG4gICAgICAgICAgICAvLyBSZXNwb25zaXZlIE5ld3NcbiAgICAgICAgICAgIHR5cGUgPSB3aW5kb3cuY29uZmlnLmFzc2V0LnR5cGU7XG5cbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cub25lc3BvcnQgJiYgd2luZG93Lm9uZXNwb3J0LmNvbmZpZyAmJiB3aW5kb3cub25lc3BvcnQuY29uZmlnLm9tbml0dXJlQXNzZXRUeXBlKSB7XG4gICAgICAgICAgICAvLyBSZXNwb25zaXZlIFNwb3J0IChvbmVzcG9ydClcbiAgICAgICAgICAgIHR5cGUgPSB3aW5kb3cub25lc3BvcnQuY29uZmlnLm9tbml0dXJlQXNzZXRUeXBlOyAvLyBlZyBTVE9SWSwgSU5ERVgsIE1BUFxuXG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93LmJiYyAmJiBiYmMuZm10aiAmJiBiYmMuZm10ai5wYWdlICYmIGJiYy5mbXRqLnBhZ2UuYXNzZXRUeXBlKSB7XG4gICAgICAgICAgICAvLyBPbGQgTiZLL0NQUyBOZXdzICYgU3BvcnQgZGVza3RvcFxuICAgICAgICAgICAgdHlwZSA9IGJiYy5mbXRqLnBhZ2UuYXNzZXRUeXBlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdHlwZSBpcyBub3QgYSBzdHJpbmcgYXQgdGhpcyBwb2ludCwgbWFrZSBzdXJlIGl0IGlzIGFuZCBjb252ZXJ0IGl0IHRvIHVwcGVyIGNhc2VcbiAgICB0eXBlID0gdXRpbHMuaXNTdHJpbmcodHlwZSkgPyB0eXBlLnRvVXBwZXJDYXNlKCkgOiAnJztcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdBVic6XG4gICAgICAgIGNhc2UgJ01BUCc6XG4gICAgICAgIGNhc2UgJ01FRElBX0FTU0VUJzpcbiAgICAgICAgICAgIHR5cGUgPSAnVklERU8nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1NUWSc6XG4gICAgICAgICAgICB0eXBlID0gJ1NUT1JZJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdJRFgnOlxuICAgICAgICAgICAgdHlwZSA9ICdJTkRFWCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTEVQJzpcbiAgICAgICAgICAgIHR5cGUgPSAnTElWRS1FVkVOVCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTElWRV9FVkVOVCc6XG4gICAgICAgICAgICB0eXBlID0gJ0xJVkUtRVZFTlQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gJ1NUT1JZJyAmJiBjb25maWcuaXNDb250aW51b3VzUGxheVBhZ2UoKSkge1xuICAgICAgICB0eXBlID0gJ1NUT1JZLVZJREVPJztcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZSB8fCAoLy4qLShcXGR7Nyw5fSkkLy50ZXN0KGhyZWYpID8gJ1NUT1JZJyA6ICdJTkRFWCcpO1xufTtcblxudmFyIHNhbml0aXNlUGFnZU5hbWUgPSBmdW5jdGlvbiAocGFnZU5hbWUpIHtcbiAgICBwYWdlTmFtZSA9IHBhZ2VOYW1lLnJlcGxhY2UoL1wiL2csIFwiJ1wiKTsgLy8gcmVtb3ZlIGRvdWJsZSBxdW90ZXNcbiAgICBwYWdlTmFtZSA9IHBhZ2VOYW1lLnJlcGxhY2UoLyheYmJjIChuZXdzfHNwb3J0KSBcXC0gKS9pLCAnJyk7IC8vIFJlbW92ZSAnYmJjIG5ld3MgLSB0aXRsZScgZXRjXG4gICAgcGFnZU5hbWUgPSBwYWdlTmFtZS5yZXBsYWNlKC8oIFxcLSBiYmMgKG5ld3N8c3BvcnQpJCkvaSwgJycpOyAvLyBSZW1vdmUgJ3RpdGxlIC0gYmJjIG5ld3MnIGV0Y1xuICAgIHBhZ2VOYW1lID0gcGFnZU5hbWUucmVwbGFjZSgvKCBcXC0gQkJD44OL44Ol44O844K5JCkvaSwgJycpOyAvLyBSZW1vdmUgSmFwYW5lc2UgdGl0bGVcbiAgICByZXR1cm4gcGFnZU5hbWUudG9Mb3dlckNhc2UoKTtcbn07XG5cbi8qKlxuICogVXNlIGRvY3VtZW50LnRpdGxlIHRvIGdldCB0aXRsZSBvZiBwYWdlXG4gKi9cbnZhciBnZXRQYWdlTmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnLmdldFdpbmRvd0RvY3VtZW50KCkudGl0bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2FuaXRpc2VQYWdlTmFtZShjb25maWcuZ2V0V2luZG93RG9jdW1lbnQoKS50aXRsZSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBVc2UgdXJsIHRvIGdldCBwYWdlIHBhcmFtZXRlciB1c2VkIGJ5IGNvbVNjb3JlXG4gKi9cbnZhciBnZXRQYWdlTmFtZUNvbVNjb3JlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXRoID0gY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCkucGF0aG5hbWUucmVwbGFjZSgvXFwuYXBwJC8sICcnKSwgLy8gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICAgIHBhdGhTbGFzaGVzID0gcGF0aC50b0xvd2VyQ2FzZSgpLnNsaWNlKDEpOyAvLyB0cmltIGxlYWRpbmcgc2xhc2hcblxuICAgIGlmIChwYXRoU2xhc2hlcy5zbGljZSgtMSkgPT09ICcvJykgeyAvLyB0cmltIHRyYWlsaW5nIHNsYXNoXG4gICAgICAgIHBhdGhTbGFzaGVzID0gcGF0aFNsYXNoZXMuc2xpY2UoMCwgLTEpO1xuICAgIH1cblxuICAgIGxldCBwYXRoQml0cyA9IHBhdGhTbGFzaGVzLnNwbGl0KCcvJyk7XG4gICAgbGV0IHJlc3BvbnNlO1xuXG4gICAgY29uc3QgdmVydGljYWwgPSBnZXRWZXJ0aWNhbCgpO1xuXG4gICAgaWYgKHBhdGhCaXRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAodmVydGljYWwgPT09ICcnIHx8IHZlcnRpY2FsID09PSAnd3docCcpIHsgLy8gaG9tZXBhZ2VcbiAgICAgICAgICAgIHJlc3BvbnNlID0gJ2hvbWVwYWdlLmhvbWUnO1xuICAgICAgICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAnbmV3cycgfHwgdmVydGljYWwgPT09ICd3ZWF0aGVyJyB8fCB2ZXJ0aWNhbCA9PT0gJ3Nwb3J0JyB8fCB2ZXJ0aWNhbCA9PT0gJ2phcGFuZXNlJykge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB2ZXJ0aWNhbCArICcuaG9tZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGdldFBhZ2VOYW1lKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmVydGljYWwgPT09ICdzcG9ydCcgJiYgcGF0aEJpdHMubGVuZ3RoID4gMSAmJiBwYXRoQml0c1sxXSA9PT0gJzAnKSB7IC8vIHRyaW0gLzBcbiAgICAgICAgICAgIGlmIChwYXRoQml0cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHBhdGhCaXRzWzBdICsgJy5ob21lJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBwYXRoQml0c1swXSArICcuJyArIHBhdGhCaXRzLnNsaWNlKDIpLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ25ld3MnIHx8IHZlcnRpY2FsID09PSAnd2VhdGhlcicgfHwgdmVydGljYWwgPT09ICdzcG9ydCcgfHwgdmVydGljYWwgPT09ICdqYXBhbmVzZScpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlID0gcGF0aEJpdHMuam9pbignLicpLnJlcGxhY2UoL15uZXdzXFwuKHVrfHdvcmxkfHVzfGFzaWEpXFwuKGhlYWx0aCkoPyEtKS8sIFwibmV3cy4kMlwiKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gbm90IEdOTCwgdXNlIG9sZCB2YWx1ZSBiYXNlZCBvbiB0aXRsZVxuICAgICAgICAgICAgcmVzcG9uc2UgPSBnZXRQYWdlTmFtZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcblxudmFyIGdldFZlcnRpY2FsID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHBhdGggPSBjb25maWcuZ2V0V2luZG93TG9jYXRpb24oKS5wYXRobmFtZS5yZXBsYWNlKC9cXC5hcHAkLywgJycpOyAvLyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVcbiAgICBsZXQgcGF0aFNsYXNoZXMgPSBwYXRoLnRvTG93ZXJDYXNlKCkuc2xpY2UoMSk7IC8vIHRyaW0gbGVhZGluZyBzbGFzaFxuXG4gICAgaWYgKHBhdGhTbGFzaGVzLnNsaWNlKC0xKSA9PT0gJy8nKSB7IC8vIHRyaW0gdHJhaWxpbmcgc2xhc2hcbiAgICAgICAgcGF0aFNsYXNoZXMgPSBwYXRoU2xhc2hlcy5zbGljZSgwLCAtMSk7XG4gICAgfVxuXG4gICAgY29uc3QgcGF0aEJpdHMgPSBwYXRoU2xhc2hlcy5zcGxpdCgnLycpO1xuICAgIHJldHVybiBwYXRoQml0cy5sZW5ndGggPiAwID8gcGF0aEJpdHNbMF0gOiAnJztcbn1cblxuXG4vKipcbiAqIFVyaSBlbmNvZGUgdmFsdWVzIC0gQWxsIHZhbHVlcyBhcmUgZW5jb2RlZCBleGNlcHQgdGhvc2Ugd2hpY2ggYXJlIHJlcGxhY2VhYmxlIGVnIFwie2V2ZW50c31cIlxuICovXG52YXIgZW5jb2RlVmFsdWUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgaWYgKC9eXFx7W2EtekEtWjAtOVxcLV9dK1xcfSQvLnRlc3Qoc3RyKSkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cik7XG59O1xuXG4vKipcbiAqIERldGVybWluaW5nIHdoYXQgdHlwZSBvZiBsaW5rIHdhcyBjbGlja2VkIGFuZCB3aGF0IGV2ZW50IGFuZCBsaW5rVHJhY2tpbmdOYW1lIHNob3VsZCBiZSB1c2VkXG4gKlxuICogQHBhcmFtIG9iamVjdCBsaW5rT2JqIFRoZSBlbGVtZW50IGNsaWNrZWRcbiAqL1xudmFyIGdldExpbmtUcmFja2luZ1Byb3BlcnRpZXMgPSBmdW5jdGlvbiAobGlua09iaikge1xuICAgIHZhciB0ZXh0ID0gJycsXG4gICAgICAgIGxpbmtTZWN0aW9ucyA9IHNlY3Rpb25zLmdldFNlY3Rpb25zRm9yVXJpKGxpbmtPYmouaHJlZiwgJ2FuYWx5dGljcycpO1xuICAgIGlmICh0eXBlb2YgbGlua09iai50ZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0ZXh0ID0gbGlua09iai50ZXh0O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpbmtPYmouaW5uZXJUZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0ZXh0ID0gbGlua09iai5pbm5lclRleHQ7XG4gICAgfVxuICAgIHZhciBwcm9tb3RlZCA9IGxpbmtTZWN0aW9uc1swXTsgIC8vIGVnIC9zcG9ydC9ibGFoID0+ICdzcG9ydCdcbiAgICBwcm9tb3RlZCA9IChwcm9tb3RlZCA9PT0gJ3Vua25vd24nID8gJ2V4dGVybmFsJyA6IHByb21vdGVkKTtcbiAgICAvLyBFbnN1cmVzIHRoYXQgaWYgdGhlIG5hbWUgY29udGFpbnMgNHggaHlwaGVucywgdHJpbSB0aGUgcmVzdCBvZiB0aGUgdGl0bGVcbiAgICB2YXIgc2FuaXRpc2VMaW5rTmFtZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgc3RyID0gdXRpbHMudHJpbShzdHIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15hLXpBLVowLTldL2csICctJyk7XG4gICAgICAgIHJldHVybiAoc3RyLmluZGV4T2YoJy0tLS0nKSA9PT0gLTEgPyBzdHIgOiBzdHIuc3Vic3RyKDAsIHN0ci5pbmRleE9mKCctLS0tJykpKTtcbiAgICB9O1xuICAgIHZhciBnZXRMaW5rTmFtZUZyb21VcmxGb3JWZXJ0aWNhbHMgPSBmdW5jdGlvbiAoaHJlZikge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IGhyZWYubWF0Y2goLy4qXFwvWzAtOV0rXFwtKFteXFwvXSspLyk7XG4gICAgICAgIHJldHVybiAobWF0Y2hlZCAhPT0gbnVsbCA/IG1hdGNoZWRbMV0gOiBsaW5rU2VjdGlvbnMuam9pbignPicpKTtcbiAgICB9O1xuICAgIC8vIHJldiBvciBkYXRhLXRyYWNrXG4gICAgdmFyIGxpbmtPYmpUcmFjayA9ICcnO1xuICAgIGlmICh0eXBlb2YgbGlua09iai5kYXRhc2V0ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbGlua09iai5kYXRhc2V0LnRyYWNrICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAmJiBsaW5rT2JqLmRhdGFzZXQudHJhY2sgIT09ICcnICAvLyBOT1RFOiBVbml0IHRlc3RzIGFyZSBtb2NraW5nIGxpbmtPYmogdGhlcmVmb3JlIGxpbmtPYmouZGF0YXNldFsndHJhY2snXSBub3Qgd29ya1xuICAgICkge1xuICAgICAgICAvLyBVc2UgZGF0YS10cmFjayBhdHRyaWJ1dGVcbiAgICAgICAgbGlua09ialRyYWNrID0gbGlua09iai5kYXRhc2V0LnRyYWNrO1xuICAgIH0gZWxzZSBpZiAobGlua09iai5nZXRBdHRyaWJ1dGUoJ2RhdGEtdHJhY2snKSkge1xuICAgICAgICAvLyBJRTEwIGFuZCBsb3dlciBkb24ndCBzdXBwb3J0IGRhdGFzZXRcbiAgICAgICAgbGlua09ialRyYWNrID0gbGlua09iai5nZXRBdHRyaWJ1dGUoJ2RhdGEtdHJhY2snKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaW5rT2JqLnJldiAhPT0gJ3VuZGVmaW5lZCcgJiYgbGlua09iai5yZXYgIT09ICcnKSB7XG4gICAgICAgIC8vIFVzZSByZXYgYXR0cmlidXRlXG4gICAgICAgIGxpbmtPYmpUcmFjayA9IGxpbmtPYmoucmV2O1xuICAgIH1cbiAgICAvLyBDb25kaXRpb25hbHMgdG8gZGV0ZXJtaW5lIHdoYXQgaW5mb3JtYXRpb24gdG8gY29sbGVjdFxuICAgIGlmIChsaW5rT2JqLmNsYXNzTmFtZS5pbmRleE9mKCdleHRlcm5hbC1saW5rJykgIT09IC0xKSB7XG4gICAgICAgIC8vIEV4dGVybmFsIGxpbmtcbiAgICAgICAgLy8gZWcgPGEgY2xhc3M9XCJleHRlcm5hbC1saW5rXCIgcmV2PVwiXCI+XG4gICAgICAgIC8vIGVnIDxhIGNsYXNzPVwiZXh0ZXJuYWwtbGlua1wiPlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2V2ZW50cyc6IGZhbHNlLFxuICAgICAgICAgICAgJ3Byb21vdGVkJzogJ2V4dGVybmFsJyxcbiAgICAgICAgICAgICdsaW5rTmFtZSc6IHNhbml0aXNlTGlua05hbWUodGV4dCksXG4gICAgICAgICAgICAnbW9kdWxlTmFtZSc6IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICB9IGVsc2UgaWYgKChzZWN0aW9uU3RyaW5nc1swXSA9PT0gJ2hvbWVwYWdlJyB8fCBzZWN0aW9uU3RyaW5nc1swXSA9PT0gJ3d3c2NyaXB0cycpXG4gICAgICAgICYmIGxpbmtPYmpUcmFjay5pbmRleE9mKCd8JykgIT09IC0xXG4gICAgKSB7XG4gICAgICAgIC8vIEhvbWVwYWdlIExpbmsgVHJhY2tpbmdcbiAgICAgICAgLy8gZWcgPGEgcmV2PVwic3BvdGxpZ2h0fHZpZGVvXCI+XG4gICAgICAgIC8vIGVnIDxhIGRhdGEtdHJhY2s9XCJzcG90bGlnaHR8dmlkZW9cIj5cbiAgICAgICAgLy8gPG1vZHVsZU5hbWU+fDxsaW5rQXNzZXRUeXBlPlxuICAgICAgICB2YXIgaHRtbFJldkFyciA9IGxpbmtPYmpUcmFjay5zcGxpdCgnfCcpO1xuICAgICAgICB2YXIgbGlua05hbWUgPSAobGlua1NlY3Rpb25zWzBdLm1hdGNoKHZlcnRpY2Fsc1JlZ2V4cClcbiAgICAgICAgICAgID8gZ2V0TGlua05hbWVGcm9tVXJsRm9yVmVydGljYWxzKGxpbmtPYmouaHJlZikgOiBzYW5pdGlzZUxpbmtOYW1lKHRleHQpKTtcbiAgICAgICAgdmFyIHBhcmVudCA9IHV0aWxzLmdldFBhcmVudEVsZW1lbnRCeUNsYXNzKGxpbmtPYmosICdtb2R1bGUyJyk7ICAvLyBkZXNrdG9wIDxkaXYgY2xhc3M9XCJtb2R1bGUyXCI+XG4gICAgICAgIGlmIChwYXJlbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSB1dGlscy5nZXRDbG9zZXN0RWxlbWVudEJ5VGFnTmFtZShsaW5rT2JqLCAnc2VjdGlvbicpOyAgLy8gcmVzcG9uc2l2ZSA8c2VjdGlvbj5cbiAgICAgICAgfVxuICAgICAgICB2YXIgbGlua1Bvc2l0aW9uID0gdXRpbHMuZ2V0QW5jaG9yUG9zaXRpb25XaXRoaW5FbGVtZW50KHBhcmVudCwgbGlua09iai5ocmVmKTtcbiAgICAgICAgaWYgKGh0bWxSZXZBcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAnZXZlbnRzJzogZmFsc2UsXG4gICAgICAgICAgICAgICAgJ3Byb21vdGVkJzogcHJvbW90ZWQudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAnbGlua05hbWUnOiBsaW5rTmFtZSxcbiAgICAgICAgICAgICAgICAnbW9kdWxlTmFtZSc6IGh0bWxSZXZBcnJbMF0udG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAnbGlua1R5cGUnOiAodHlwZW9mIGh0bWxSZXZBcnJbMV0gPT09ICdzdHJpbmcnID8gaHRtbFJldkFyclsxXS50b0xvd2VyQ2FzZSgpIDogTlVMKSxcbiAgICAgICAgICAgICAgICAnbGlua1Bvc2l0aW9uJzogKGxpbmtQb3NpdGlvbiAhPT0gZmFsc2UgJiYgbGlua1Bvc2l0aW9uICE9PSAwID8gbGlua1Bvc2l0aW9uIDogTlVMKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIGlmICh1dGlscy5wYXJlbnRIYXNDbGFzcyhsaW5rT2JqLCAnYmJjY29tX2Fkc2Vuc2UnLCB1bmRlZmluZWQsIHRydWUpKSB7XG4gICAgICAgIC8vIEdvb2dsZSBBZHNlbnNlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnZXZlbnRzJzogZmFsc2UsXG4gICAgICAgICAgICAncHJvbW90ZWQnOiAnYWRzJyxcbiAgICAgICAgICAgICdsaW5rTmFtZSc6ICdhZHNlbnNlJyxcbiAgICAgICAgICAgICdtb2R1bGVOYW1lJzogJ2dvb2dsZS1hZHNlbnNlJ1xuICAgICAgICB9O1xuXG4gICAgfSBlbHNlIGlmICh1dGlscy5wYXJlbnRIYXNDbGFzcyhsaW5rT2JqLCAnYmJjY29tX2FkdmVydCcsIHVuZGVmaW5lZCwgdHJ1ZSkpIHtcbiAgICAgICAgLy8gQkJDQ09NLTYxNDc6IERvbid0IGludGVyZmVyZSB3aXRoIGFkdmVydCBsaW5rcyAoRG91YmxlY2xpY2sgZGlzcGxheSBhZHMpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIH0gZWxzZSBpZiAodXRpbHMucGFyZW50SGFzQ2xhc3MobGlua09iaiwgJ2JiYy1zdC1idXR0b25zJykgfHwgdXRpbHMucGFyZW50SGFzQ2xhc3MobGlua09iaiwgJ3NoYXJlX190b29sJykpIHtcbiAgICAgICAgLy8gU2hhcmUgVG9vbHNcbiAgICAgICAgLy8gLmJiYy1zdC1idXR0b25zIC0gTmV3cyAmIFNwb3J0IERlc2t0b3AgU2hhcmUgdG9wIGFuZCBib3R0b21cbiAgICAgICAgLy8gLnNoYXJlX190b29sIC0gTmV3cyBSZXNwb25zaXZlIFNoYXJlIGJvdHRvbVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2V2ZW50cyc6ICdldmVudDIzJyxcbiAgICAgICAgICAgICdwcm9tb3RlZCc6ICdzaGFyZS10b29scycsXG4gICAgICAgICAgICAnbGlua05hbWUnOiBzYW5pdGlzZUxpbmtOYW1lKHRleHQpLCAgLy8gZWcgRmFjZWJvb2ssIFR3aXR0ZXJcbiAgICAgICAgICAgICdtb2R1bGVOYW1lJzogJ3NoYXJlLXRvb2xzJyxcbiAgICAgICAgICAgICd2Jzoge1xuICAgICAgICAgICAgICAgICczNSc6IHNhbml0aXNlTGlua05hbWUodGV4dCkgKyAnLXNoYXJlJywgIC8vIHYzNVxuICAgICAgICAgICAgICAgICczOSc6IHNlY3Rpb25TdHJpbmdzWzFdICsgJy0nICsgZ2V0UGFnZU5hbWUoKSAgLy8gdjM5XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICB9IGVsc2UgaWYgKChzZWN0aW9uU3RyaW5nc1swXSA9PT0gJ25ld3MnIHx8IHNlY3Rpb25TdHJpbmdzWzBdID09PSAnd3dzY3JpcHRzJylcbiAgICAgICAgJiYgdXRpbHMucGFyZW50SGFzQ2xhc3MobGlua09iaiwgJ2h5cGVyLXByb21vdGlvbmFsLWNvbnRlbnQnLCA1KVxuICAgICkge1xuICAgICAgICAvLyBFbHNld2hlcmUgb24gdGhlIEJCQyBtb2R1bGUgKE5ld3MgZGVza3RvcClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdldmVudHMnOiBmYWxzZSxcbiAgICAgICAgICAgICdwcm9tb3RlZCc6ICdlbHNld2hlcmUnLFxuICAgICAgICAgICAgJ2xpbmtOYW1lJzogc2FuaXRpc2VMaW5rTmFtZSh0ZXh0KSwgIC8vIFN0b3J5IGxpbmtcbiAgICAgICAgICAgICdtb2R1bGVOYW1lJzogJ2Vsc2V3aGVyZSdcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGxpbmtPYmouaHJlZi5pbmRleE9mKCdvdXRicmFpbi5jb20nKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gT3V0YnJhaW4gdHJhY2tpbmcgQkJDQ09NLTU1NDMsIEJCQ0NPTS02MTMzXG4gICAgICAgIHByb21vdGVkID0gJ291dGJyYWluLW1vZHVsZSc7XG4gICAgICAgIHZhciBwYXJlbnRFbCA9IHV0aWxzLmdldFBhcmVudEVsZW1lbnRCeUNsYXNzKGxpbmtPYmosICdPVVRCUkFJTicsIDUpO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmVudEVsLmRhdGFzZXQud2lkZ2V0SWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2YXIgd2lkZ2V0SWQgPSBwYXJzZUludChwYXJlbnRFbC5kYXRhc2V0LndpZGdldElkLnN1YnN0cigzLCAxKSwgMTApO1xuICAgICAgICAgICAgdmFyIG1hcHBpbmcgPSB7XG4gICAgICAgICAgICAgICAgJ3ZpZGVvcy1vbi1uZXdzJzogWzEsIDUsIDZdLCAvLyBBUl8xLCBBUl81LCBBUl82XG4gICAgICAgICAgICAgICAgJ2Vsc2V3aGVyZS1vbi1uZXdzJzogWzIsIDMsIDddLCAvLyBBUl8yLCBBUl8zLCBBUl83XG4gICAgICAgICAgICAgICAgJ290aGVycy1zaXRlcyc6IFs0LCA5XSwgICAgLy8gQVJfNCwgQVJfOVxuICAgICAgICAgICAgICAgICdlbHNld2hlcmUtb24tZmVhdHVyZXMnOiBbOF0gICAgICAgIC8vIEFSXzhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbTtcbiAgICAgICAgICAgIGZvciAobSBpbiBtYXBwaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hcHBpbmdbbV0uaW5kZXhPZih3aWRnZXRJZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21vdGVkID0gbTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnZXZlbnRzJzogZmFsc2UsXG4gICAgICAgICAgICAncHJvbW90ZWQnOiBwcm9tb3RlZCxcbiAgICAgICAgICAgICdsaW5rTmFtZSc6IHNhbml0aXNlTGlua05hbWUodGV4dCksICAvLyBTdG9yeSBsaW5rXG4gICAgICAgICAgICAnbW9kdWxlTmFtZSc6ICdvdXRicmFpbi1yZWNvbW1lbmRzJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTsgIC8vIG5vdCBhIGxpbmsgdG8gYmUgdHJhY2tlZFxufTtcblxudmFyIGdldEFuYWx5dGljc1VyaSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYmJjZG90Y29tLmFuYWx5dGljcy5zc2NIZWxwZXIuZ2V0QW5hbHl0aWNzTG9jYXRpb24oKTtcbn07XG5cbi8qKlxuICogTG9hZCBhbiBpbWFnZSBlbGVtZW50IHRvIHRyYWNrIHRoZSBldmVudFxuICpcbiAqIEBwYXJhbSBzdHJpbmcgdXJsXG4gKiBAcGFyYW0gZnVuY3Rpb24gY2FsbGJhY2sgVXNlZCB0byBkZWxheSBwYWdlIHVudGlsIGltYWdlIHdyaXR0ZW4gaW50byBwYWdlIChibG9ja2luZylcbiAqL1xudmFyIGxvYWRUcmFja2luZ0ltYWdlID0gZnVuY3Rpb24gKHVybCwgY2FsbGJhY2spIHtcbiAgICB1cmwgPSBnZXRBbmFseXRpY3NVcmkoKSArIHVybDtcbiAgICBsb2coJ1RyYWNraW5nIFVSTDogJywgdXJsKTtcbiAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbWcub25sb2FkID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93LklTX0dOTF9KU19VTklUX1RFU1QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIERvIG5vdCBtYWtlIGNvbVNjb3JlIHJlcXVlc3Qgd2hlbiBydW5uaW5nIHVuaXQgdGVzdHNcbiAgICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICB9XG59O1xuXG52YXIgcHJvY2Vzc0RlbGF5VHJhY2tpbmdDb29raWUgPSBmdW5jdGlvbiAoZGVsYXlUcmFja2luZ0Nvb2tpZU5hbWUsIHRyYWNraW5nUmVxdWVzdHMpIHtcbiAgICB2YXIgY29va2llVmFsdWUgPSB1dGlscy5nZXRDb29raWUoZGVsYXlUcmFja2luZ0Nvb2tpZU5hbWUpO1xuICAgIGlmICh0eXBlb2YgY29va2llVmFsdWUgIT09ICd1bmRlZmluZWQnICYmIGNvb2tpZVZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbG9nKCdEZWxheWVkIGxpbmsgdHJhY2tpbmcgZ2V0ICcgKyBkZWxheVRyYWNraW5nQ29va2llTmFtZSArICcgY29va2llOicgKyBjb29raWVWYWx1ZSk7XG4gICAgICAgIC8vIGVnIC9iL3NzL2JiY3dnbG9iYWxkZXYvMS9ILjIyLjEvczQ3NTcwNDMyMzAzNDc/QVFCPTEmYnc9MTkyMCZiaD03MDUmYz0yNCZjYz1VU0QmY2RwPTImY2U9VVRGLTgmbmRoPTEuLi5cbiAgICAgICAgbG9hZFRyYWNraW5nSW1hZ2UoY29va2llVmFsdWUpO1xuICAgICAgICB0cmFja2luZ1JlcXVlc3RzWydodHRwJ10ucHVzaChjb29raWVWYWx1ZSk7XG4gICAgICAgIHV0aWxzLmRlbGV0ZUNvb2tpZShkZWxheVRyYWNraW5nQ29va2llTmFtZSk7XG4gICAgfVxufTtcblxudmFyIHRyYWNrTGlua0J5RHJvcHBpbmdDb29raWUgPSBmdW5jdGlvbiAoZG9UcmFja0NhbGxiYWNrLCBkZWxheVRyYWNraW5nQ29va2llTmFtZSwgY3VzdG9tVHJhY2tpbmdLZXlWYWx1ZXMpIHtcbiAgICAvLyBkb1RyYWNrKCkgZG9lcyBub3QgbWFrZSByZXF1ZXN0LiBJbnN0ZWFkLCB0aGUgcmVxdWVzdCBpcyBwaXBlZCBpbnRvIGEgY29va2llXG4gICAgdmFyIGNvb2tpZVZhbCA9IGRvVHJhY2tDYWxsYmFjayhjdXN0b21UcmFja2luZ0tleVZhbHVlcywgJ2xpbmsnLCB1bmRlZmluZWQsIGZhbHNlKTtcbiAgICB1dGlscy5zZXRDb29raWUoZGVsYXlUcmFja2luZ0Nvb2tpZU5hbWUsIGNvb2tpZVZhbCwgNjApO1xuICAgIGxvZygnbGluayB0cmFja2luZyBzZXQgJyArIGRlbGF5VHJhY2tpbmdDb29raWVOYW1lICsgJyBjb29raWU6JyArIGNvb2tpZVZhbCk7XG59O1xuXG4vKipcbiAqIFByb2JsZW0gd2l0aCB0aGlzIGFwcHJvYWNoOiBjYW5ub3QgQ1RSTC1jbGljayB0byBvcGVuIGxpbmsgaW4gbmV3IHdpbmRvd1xuICovXG52YXIgdHJhY2tMaW5rQW5kUmVzdW1lTmF2aWdhdGlvbiA9IGZ1bmN0aW9uIChkb1RyYWNrQ2FsbGJhY2ssIHVyaSwgZXZlbnQsIGN1c3RvbVRyYWNraW5nS2V5VmFsdWVzKSB7XG4gICAgdmFyIGV2ZW50SGFuZGxlZCA9IGZhbHNlLFxuICAgICAgICB0aW1lb3V0SWQgPSBudWxsLFxuICAgICAgICByZXN1bWUgPSAhdXRpbHMuaXNFdmVudERlZmF1bHRQcmV2ZW50ZWQoZXZlbnQpLFxuICAgICAgICByZXN1bWVOYXZpZ2F0aW9uID0gZnVuY3Rpb24gKHVyaSwgZXZlbnQsIHRpbWVvdXQsIHJlc3VtZSkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgaWYgKGV2ZW50ICYmICFldmVudEhhbmRsZWQgJiYgcmVzdW1lICYmIHVyaSkge1xuICAgICAgICAgICAgICAgIHV0aWxzLm5hdmlnYXRlVG8odXJpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50SGFuZGxlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgdXRpbHMuY2FuY2VsRXZlbnQoZXZlbnQpO1xuICAgIGRvVHJhY2tDYWxsYmFjayhjdXN0b21UcmFja2luZ0tleVZhbHVlcywgJ2xpbmsnLCBmdW5jdGlvbiAodHJhY2tlZCkge1xuICAgICAgICByZXN1bWVOYXZpZ2F0aW9uKHVyaSwgZXZlbnQsIHRpbWVvdXRJZCwgcmVzdW1lKTtcbiAgICB9KTtcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzdW1lTmF2aWdhdGlvbih1cmksIGV2ZW50LCB0aW1lb3V0SWQsIHJlc3VtZSk7XG4gICAgfSwgVFJBQ0tJTkdfVElNRU9VVCk7XG59O1xuXG52YXIgdHJhY2tMaW5rID0gZnVuY3Rpb24gKGRvVHJhY2tDYWxsYmFjaywgZGVsYXlUcmFja2luZ0Nvb2tpZU5hbWUsIHVyaSwgZXZlbnQsIGtleVZhbHVlcykge1xuICAgIGlmIChpc0JCQ1VyaSh1cmkpIHx8IGlzRXh0ZXJuYWxSZWRpcmVjdFRvQkJDVXJpKHVyaSkpIHtcbiAgICAgICAgLy8gRHJvcCBjb29raWUgYW5kIGNvbGxlY3Qgb24gb3RoZXIgQkJDIHBhZ2VcbiAgICAgICAgdHJhY2tMaW5rQnlEcm9wcGluZ0Nvb2tpZShkb1RyYWNrQ2FsbGJhY2ssIGRlbGF5VHJhY2tpbmdDb29raWVOYW1lLCBrZXlWYWx1ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFN0YW5kYXJkXG4gICAgICAgIHRyYWNrTGlua0FuZFJlc3VtZU5hdmlnYXRpb24oZG9UcmFja0NhbGxiYWNrLCB1cmksIGV2ZW50LCBrZXlWYWx1ZXMpO1xuICAgIH1cbn07XG5cbi8qKlxuICogVXNlZCB0byBhdHRhY2ggZXZlbnRzIHRvIHBhZ2UuXG4gKiBUaGlzIG11c3QgYmUgY2FsbGVkIGZyb20gd2l0aGluIDxib2R5Piwgbm90IDxoZWFkPlxuICovXG52YXIgYXBwbHlMaW5rVHJhY2tpbmdUb1BhZ2VFbGVtZW50cyA9IGZ1bmN0aW9uIChwcm9jZXNzTGlua0NhbGxiYWNrKSB7XG4gICAgdmFyIHJvb3RTZWN0aW9uID0gc2VjdGlvbnMuZ2V0U2VjdGlvbigwLCAnYW5hbHl0aWNzJywgdHJ1ZSk7XG4gICAgaWYgKHJvb3RTZWN0aW9uICYmIExJTktfVFJBQ0tJTkdfU0VDVElPTlMuaW5kZXhPZihyb290U2VjdGlvbikgPT09IC0xKSB7XG4gICAgICAgIC8vIExpbmsgdHJhY2tpbmcgaXMgbm90IHJlcXVpcmVkIG9uIHRoaXMgcGFnZVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhbHJlYWR5TGlua2VkID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xpY2tMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkgeyAgLy8gV2hhdGV2ZXIgeW91J3JlIHRoaW5raW5nLCBkb24ndCBkbyBpdC4gIERvIG5vdCBwdXQgXCJ2YXIgY2xpY2tMaXN0ZW5lclwiLi4uXG4gICAgICAgIHZhciBsaW5rT2JqID0gdXRpbHMuZ2V0Q2xvc2VzdEVsZW1lbnRCeVRhZ05hbWUoZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQsICdhJywgdHJ1ZSk7XG4gICAgICAgIGlmIChsaW5rT2JqICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgcHJvY2Vzc0xpbmtDYWxsYmFjayhsaW5rT2JqLCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEV2ZW50IGZvciBib2R5IGNsaWNrLiAgVXNpbmcgSmF2YVNjcmlwdCBFdmVudCBCdWJibGluZyB0byBpZGVudGlmeSB3aGF0IHdhcyBjbGlja2VkIG9uXG4gICAgLy8gd2l0aGluIHRoZSBwYWdlIChiZXNpZGVzIDxib2R5PikuXG4gICAgdXRpbHMuYWRkRXZlbnQoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSwgJ2NsaWNrJywgY2xpY2tMaXN0ZW5lcik7XG4gICAgYWxyZWFkeUxpbmtlZCA9IHRydWVcbn07XG5cblxuLyoqXG4gKiBSZXR1cm4gdGhlIFVSSSB1c2VkIHRvIGJ1aWxkIHRoZSBzZWN0aW9ucyBhcnJheVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciBnZXRVcmlGb3JTZWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbG9jYXRpb24gPSBjb25maWcuZ2V0V2luZG93TG9jYXRpb24oKSxcbiAgICAgICAgdXJpID0gbG9jYXRpb24uaHJlZixcbiAgICAgICAgYXNzZXRVcmkgPSBvYmplY3RzKCdjb25maWcuYXNzZXQuYXNzZXRfdXJpJyk7XG5cbiAgICBpZiAoY29uZmlnLmdldFR5cGUoKSA9PT0gJ1ZJREVPLUVNQkVEJyAmJiBhc3NldFVyaSkge1xuICAgICAgICB1cmkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIGFzc2V0VXJpO1xuICAgIH1cblxuICAgIHJldHVybiB1cmk7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBhdiBmb3JtYXQgKGF1ZGlvfHZpZGVvKSBmb3IgYSBnaXZlbiBwbGF5bGlzdCBpdGVtLiBGb3Igbm93IHdlIGFzc3VtZSBldmVyeXRoaW5nIHRoYXQgaXNuJ3QgYVxuICogcmFkaW9Qcm9ncmFtbWUgaXMgdmlkZW8uIExpc3Qgb2YgYXZhaWxhYmxlIGtpbmRzIGNhbiBiZSBmb3VuZCBiZWxvdy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vY29uZmx1ZW5jZS5kZXYuYmJjLmNvLnVrL2Rpc3BsYXkvbXAvTG9hZGluZythK1BsYXlsaXN0K3dpdGgrYW4rb2JqZWN0I0xvYWRpbmdhUGxheWxpc3R3aXRoYW5vYmplY3Qta2luZHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBraW5kXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG52YXIgZ2V0QXZGb3JtYXRGcm9tS2luZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgcmV0dXJuIGtpbmQgPT09ICdyYWRpb1Byb2dyYW1tZScgPyAnYXVkaW8nIDogJ3ZpZGVvJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzQkJDVXJpOiBpc0JCQ1VyaSxcbiAgICBkZXRlcm1pbmVTZWN0aW9uczogZGV0ZXJtaW5lU2VjdGlvbnMsXG4gICAgZ2V0U3RvcnlIZWFkbGluZTogZ2V0U3RvcnlIZWFkbGluZSxcbiAgICBnZXRQYWdlRWRpdGlvbjogZ2V0UGFnZUVkaXRpb24sXG4gICAgZ2V0VmVydGljYWw6IGdldFZlcnRpY2FsLFxuICAgIGdldFBhZ2VUeXBlOiBnZXRQYWdlVHlwZSxcbiAgICBzYW5pdGlzZVBhZ2VOYW1lOiBzYW5pdGlzZVBhZ2VOYW1lLFxuICAgIGdldEFuYWx5dGljc1VyaTogZ2V0QW5hbHl0aWNzVXJpLFxuICAgIGdldFBhZ2VOYW1lOiBnZXRQYWdlTmFtZSxcbiAgICBnZXRQYWdlTmFtZUNvbVNjb3JlOiBnZXRQYWdlTmFtZUNvbVNjb3JlLFxuICAgIGVuY29kZVZhbHVlOiBlbmNvZGVWYWx1ZSxcbiAgICBnZXRMaW5rVHJhY2tpbmdQcm9wZXJ0aWVzOiBnZXRMaW5rVHJhY2tpbmdQcm9wZXJ0aWVzLFxuICAgIGxvYWRUcmFja2luZ0ltYWdlOiBsb2FkVHJhY2tpbmdJbWFnZSxcbiAgICBwcm9jZXNzRGVsYXlUcmFja2luZ0Nvb2tpZTogcHJvY2Vzc0RlbGF5VHJhY2tpbmdDb29raWUsXG4gICAgdHJhY2tMaW5rOiB0cmFja0xpbmssXG4gICAgYXBwbHlMaW5rVHJhY2tpbmdUb1BhZ2VFbGVtZW50czogYXBwbHlMaW5rVHJhY2tpbmdUb1BhZ2VFbGVtZW50cyxcbiAgICBnZXRVcmlGb3JTZWN0aW9uczogZ2V0VXJpRm9yU2VjdGlvbnMsXG4gICAgZ2V0QXZGb3JtYXRGcm9tS2luZDogZ2V0QXZGb3JtYXRGcm9tS2luZCxcbiAgICByOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHV0aWxzLnJlbW92ZUV2ZW50KGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0sICdjbGljaycsIGNsaWNrTGlzdGVuZXIpO1xuICAgICAgICBhbHJlYWR5TGlua2VkID0gZmFsc2U7XG4gICAgfVxufTtcblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9oZWxwZXIuanNcbiAqKi8iLCJpbXBvcnQgdXRpbHMgZnJvbSAndXRpbHMnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuaW1wb3J0IGFkdmVydHMgZnJvbSAnYWR2ZXJ0cyc7XG5pbXBvcnQgTWV0cmljc0J1aWxkZXIgZnJvbSAnYW5hbHl0aWNzL21ldHJpY3MvbWV0cmljc0J1aWxkZXInO1xuaW1wb3J0IGdldFVzZXJUcmFja2luZ0Nvb2tpZSBmcm9tICdhbmFseXRpY3MvdXRpbHMvZ2V0VXNlclRyYWNraW5nQ29va2llJztcbmltcG9ydCBnZXRTZWN0aW9uU3RyaW5ncyBmcm9tICdhbmFseXRpY3MvdXRpbHMvZ2V0U2VjdGlvblN0cmluZ3MnO1xuaW1wb3J0IGdldFBhZ2VUeXBlIGZyb20gJ2FuYWx5dGljcy91dGlscy9nZXRQYWdlVHlwZSc7XG5pbXBvcnQgZ2V0U3luZGljYXRlZFZpZGVvU291cmNlIGZyb20gJ2FuYWx5dGljcy91dGlscy9nZXRTeW5kaWNhdGVkVmlkZW9Tb3VyY2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29yZUtleVZhbHVlcyhrZXlWYWx1ZXMgPSB7fSkge1xuICAgIGNvbnN0IG1ldHJpY3NCdWlsZGVyID0gbmV3IE1ldHJpY3NCdWlsZGVyO1xuXG4gICAgLy8gU3RhdGljcyAoc2V0IHZhbHVlcylcbiAgICBtZXRyaWNzQnVpbGRlclxuICAgICAgICAud2l0aCgnYl9pbXBfc3JjJywge3ZhbHVlOiAnZ25sJ30pXG4gICAgICAgIC53aXRoKCdiX3ZzX3VuJywge3ZhbHVlOiAnYmMnfSlcbiAgICAgICAgLndpdGgoJ25zX2MnLCB7dmFsdWU6ICdVVEYtOCd9KTtcblxuICAgIC8vIFVzZSBIZWxwZXJzXG4gICAgbWV0cmljc0J1aWxkZXJcbiAgICAgICAgLndpdGgoJ2RheENvcnAnLCB7bWFwTmFtZTogJ2JfZGF4Y29ycCd9KVxuICAgICAgICAud2l0aCgnYWRzRW5hYmxlZCcsIHttYXBOYW1lOiAnYl9hZF9lbmFibGVkJ30pXG4gICAgICAgIC53aXRoKCdhcHBUeXBlJywge21hcE5hbWU6IFsnYl9hcHBfdHlwZScsICdhcHBfdHlwZSddfSlcbiAgICAgICAgLndpdGgoJ2lzQXBwJywge21hcE5hbWU6ICdiX2lzX2FwcCd9KVxuICAgICAgICAud2l0aCgncmVmZXJyZXInLCB7bWFwTmFtZTogJ2JfYzknfSlcbiAgICAgICAgLndpdGgoJ2NvbGxlY3Rpb24nLCB7bWFwTmFtZTogJ2JfY29sbGVjdGlvbid9KVxuICAgICAgICAud2l0aCgnZWRpdGlvbicsIHttYXBOYW1lOiAnYl9lZGl0aW9uJ30pXG4gICAgICAgIC53aXRoKCd2ZXJzaW9uJywge21hcE5hbWU6ICdiX2ltcF92ZXInfSlcbiAgICAgICAgLndpdGgoJ3NpdGVDYXRhbHlzdENvb2tpZVZhbHVlJywge21hcE5hbWU6ICdiX3NfdmknfSlcbiAgICAgICAgLndpdGgoJ3BhZ2VOYW1lJywge21hcE5hbWU6ICduYW1lJ30pXG4gICAgICAgIC53aXRoKCdhbmFseXRpY3NBY2NvdW50SUQnLCB7bWFwTmFtZTogJ2MyJ30pXG4gICAgICAgIC53aXRoKCdhbmFseXRpY3NTdWl0ZScsIHttYXBOYW1lOiBbJ25zX3NpdGUnLCAnYmJjX3NpdGUnLCAncHJvZF9uYW1lJ119KVxuICAgICAgICAud2l0aCgndGVzdEdyb3VwJywge21hcE5hbWU6ICd0ZXN0X2dyb3VwJ30pXG4gICAgICAgIC53aXRoKCdhcHBOYW1lJywge21hcE5hbWU6IFsnbnNfYXBfYW4nLCAnYXBwX25hbWUnXX0pO1xuXG4gICAgLy8gVXNlIEhlbHBlcnMgJiBwYXNzIGFyZ3NcbiAgICBjb25zdCBzZWN0aW9uU3RyaW5ncyA9IGdldFNlY3Rpb25TdHJpbmdzKCk7XG4gICAgbWV0cmljc0J1aWxkZXJcbiAgICAgICAgLndpdGgoJ2JfYXBwX25hbWUnLCB7dmFsdWU6IGAke3NlY3Rpb25TdHJpbmdzWzBdfXx3ZWJgfSlcbiAgICAgICAgLndpdGgoJ3NpdGVDaGFubmVsJywge21hcE5hbWU6ICdiX3NpdGVfY2hhbm5lbCcsIGFyZ3M6IFtzZWN0aW9uU3RyaW5nc119KVxuICAgICAgICAud2l0aCgnc2l0ZVNlY3Rpb24nLCB7bWFwTmFtZTogJ2Jfc2l0ZV9zZWN0aW9uJywgYXJnczogW3NlY3Rpb25TdHJpbmdzXX0pXG4gICAgICAgIC53aXRoKCdzaXRlU3Vic2VjdGlvbjEnLCB7bWFwTmFtZTogJ2Jfc2l0ZV9zdWJzZWMxJywgYXJnczogW3NlY3Rpb25TdHJpbmdzXX0pXG4gICAgICAgIC53aXRoKCdzaXRlU3Vic2VjdGlvbjInLCB7bWFwTmFtZTogJ2Jfc2l0ZV9zdWJzZWMyJywgYXJnczogW3NlY3Rpb25TdHJpbmdzXX0pO1xuXG4gICAgLy8gQ29uZGl0aW9uYWwgbWV0cmljc1xuICAgIGNvbnN0IHVzZXJUcmFja2luZ0Nvb2tpZSA9IGdldFVzZXJUcmFja2luZ0Nvb2tpZSgpO1xuICAgIG1ldHJpY3NCdWlsZGVyXG4gICAgICAgIC53aXRoKCduc19hbGlhcycsIHtcbiAgICAgICAgICAgIHByZVJlcXVpc2l0ZTogKCkgPT4gdXNlclRyYWNraW5nQ29va2llICE9PSBmYWxzZSAmJiBjb29raWVzRW5hYmxlZElFRml4KCksXG4gICAgICAgICAgICB2YWx1ZTogdXNlclRyYWNraW5nQ29va2llXG4gICAgICAgIH0pXG5cbiAgICBjb25zdCBzeW5kaWNhdGVkVmlkZW9Tb3VyY2UgPSBnZXRTeW5kaWNhdGVkVmlkZW9Tb3VyY2UoKTtcbiAgICBtZXRyaWNzQnVpbGRlclxuICAgICAgICAud2l0aCgndjM3Jywge1xuICAgICAgICAgICAgcHJlUmVxdWlzaXRlOiAoKSA9PiBzeW5kaWNhdGVkVmlkZW9Tb3VyY2UsXG4gICAgICAgICAgICB2YWx1ZTogc3luZGljYXRlZFZpZGVvU291cmNlXG4gICAgICAgIH0pXG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwga2V5VmFsdWVzLCBtZXRyaWNzQnVpbGRlci5idWlsZCgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZFBhZ2VDb3JlS2V5VmFsdWVzKGtleVZhbHVlcyA9IHt9KSB7XG4gICAgY29uc3QgbWV0cmljc0J1aWxkZXIgPSBuZXcgTWV0cmljc0J1aWxkZXI7XG4gICAgY29uc3QgcGFnZVR5cGUgPSBnZXRQYWdlVHlwZSgpO1xuICAgIGNvbnN0IGlzSW5kZXggPSBwYWdlVHlwZS5pbmNsdWRlcygnaWR4Jyk7XG5cbiAgICBtZXRyaWNzQnVpbGRlclxuICAgICAgICAud2l0aCgncGFnZVR5cGUnLCB7bWFwTmFtZTogJ2JfcGFnZV90eXBlJywgdmFsdWU6IHBhZ2VUeXBlfSk7XG5cbiAgICAvLyBDb25kaXRpb25hbFxuICAgIG1ldHJpY3NCdWlsZGVyXG4gICAgICAgIC53aXRoKCdhcnRpY2xlSUQnLCB7bWFwTmFtZTogJ2JfYXJ0aWNsZV9pZCcsIHByZVJlcXVpc2l0ZTogKCkgPT4gIWlzSW5kZXh9KVxuICAgICAgICAud2l0aCgnYXJ0aWNsZVRpdGxlJywge21hcE5hbWU6ICdiX2FydGljbGVfdGl0bGUnLCBwcmVSZXF1aXNpdGU6ICgpID0+ICFpc0luZGV4fSlcbiAgICAgICAgLndpdGgoJ2FydGljbGVVcGRhdGVkRGF0ZScsIHttYXBOYW1lOiAnYl9hcnRpY2xlX3VwZGF0ZScsIHByZVJlcXVpc2l0ZTogKCkgPT4gIWlzSW5kZXgsIGFyZ3M6IFt0cnVlXX0pXG4gICAgICAgIC53aXRoKCdhcnRpY2xlUHVibGlzaGVkRGF0ZScsIHttYXBOYW1lOiAnYl9hcnRpY2xlX2RhdGUnLCBwcmVSZXF1aXNpdGU6ICgpID0+ICFpc0luZGV4LCBhcmdzOiBbdHJ1ZV19KVxuICAgICAgICAud2l0aCgnYXJ0aWNsZUxlbmd0aCcsIHttYXBOYW1lOiAnYl9hcnRpY2xlX2xlbmd0aCcsIHByZVJlcXVpc2l0ZTogKCkgPT4gIWlzSW5kZXh9KTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBrZXlWYWx1ZXMsIG1ldHJpY3NCdWlsZGVyLmJ1aWxkKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kTm9uUGFnZUNvcmVLZXlWYWx1ZXMoa2V5VmFsdWVzID0ge30pIHtcbiAgICBjb25zdCBtZXRyaWNzQnVpbGRlciA9IG5ldyBNZXRyaWNzQnVpbGRlcjtcblxuICAgIG1ldHJpY3NCdWlsZGVyXG4gICAgICAgIC53aXRoKCd0aW1lc3RhbXAnLCB7bWFwTmFtZTogJ25zX190J30pXG4gICAgICAgIC53aXRoKCduc190eXBlJywge3ZhbHVlOiAnaGlkZGVuJ30pO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGtleVZhbHVlcywgbWV0cmljc0J1aWxkZXIuYnVpbGQoKSk7XG59O1xuXG5cbi8qKlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFBSSVZBVEUgTUVUSE9EU1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5mdW5jdGlvbiBjb29raWVzRW5hYmxlZElFRml4KCkge1xuICAgIHZhciBuQ0UgPSBuYXZpZ2F0b3IuY29va2llRW5hYmxlZCwgdGVzdENvb2tpZTtcbiAgICBpZiAobkNFID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbkNFO1xuICAgIH1cblxuICAgIC8vIHN0b2xlbiBmcm9tIG1vZGVybml6clxuICAgIGRvY3VtZW50LmNvb2tpZSA9IFwiY29va2lldGVzdD0xXCI7IC8vIHNldCBleHBlcmltZW50YWwgY29va2llXG4gICAgdGVzdENvb2tpZSA9IGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKFwiY29va2lldGVzdD1cIikgIT09IC0xO1xuICAgIGRvY3VtZW50LmNvb2tpZSA9IFwiY29va2lldGVzdD0xOyBleHBpcmVzPVRodSwgMDEtSmFuLTE5NzAgMDA6MDA6MDEgR01UXCI7IC8vIC4uLmFuZCBkZWxldGUgaXQgYWdhaW5cbiAgICByZXR1cm4gdGVzdENvb2tpZTtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL2NvbVNjb3JlSGVscGVycy5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGFkOiByZXF1aXJlKCdhZHZlcnRzL2FkJyksXG4gICAgYWRBc3luY1JlbmRlcmVyOiByZXF1aXJlKCdhZHZlcnRzL2FkQXN5bmNSZW5kZXJlcicpLFxuICAgIGFkRmFjdG9yeTogcmVxdWlyZSgnYWR2ZXJ0cy9hZEZhY3RvcnknKSxcbiAgICBhZFJlZ2lzdGVyOiByZXF1aXJlKCdhZHZlcnRzL2FkUmVnaXN0ZXInKSxcbiAgICBhZFJlbmRlcmVyOiByZXF1aXJlKCdhZHZlcnRzL2FkUmVuZGVyZXInKSxcbiAgICBhZHNlbnNlUmVuZGVyZXI6IHJlcXVpcmUoJ2FkdmVydHMvYWRzZW5zZVJlbmRlcmVyJyksXG4gICAgYWRTdWl0ZXM6IHJlcXVpcmUoJ2FkdmVydHMvYWRTdWl0ZXMnKSxcbiAgICBhZFRleHQ6IHJlcXVpcmUoJ2FkdmVydHMvYWRUZXh0JyksXG4gICAgYWRVbml0OiByZXF1aXJlKCdhZHZlcnRzL2FkVW5pdCcpLFxuICAgIGFkVW5pdFdlYlNlcnZpY2U6IHJlcXVpcmUoJ2FkdmVydHMvYWRVbml0V2ViU2VydmljZScpLFxuICAgIGJyYW5kaW5nOiByZXF1aXJlKCdhZHZlcnRzL2JyYW5kaW5nJyksXG4gICAgYnJlYWtwb2ludHM6IHJlcXVpcmUoJ2FkdmVydHMvYnJlYWtwb2ludHMnKSxcbiAgICBkZnBwUmVxdWVzdDogcmVxdWlyZSgnYWR2ZXJ0cy9kZnBwUmVxdWVzdCcpLFxuICAgIGtleVZhbHVlczogcmVxdWlyZSgnYWR2ZXJ0cy9rZXlWYWx1ZXMnKSxcbiAgICBsYXlvdXQ6IHJlcXVpcmUoJ2FkdmVydHMvbGF5b3V0JyksXG4gICAgb3V0YnJhaW5SZW5kZXJlcjogcmVxdWlyZSgnYWR2ZXJ0cy9vdXRicmFpblJlbmRlcmVyJyksXG4gICAgc2xvdDogcmVxdWlyZSgnYWR2ZXJ0cy9zbG90JyksXG4gICAgc2xvdEFzeW5jOiByZXF1aXJlKCdhZHZlcnRzL3Nsb3RBc3luYycpLFxuICAgIHNsb3REZWZlcnJlZDogcmVxdWlyZSgnYWR2ZXJ0cy9zbG90RGVmZXJyZWQnKSxcbiAgICBzbG90SW5maW5pdGU6IHJlcXVpcmUoJ2FkdmVydHMvc2xvdEluZmluaXRlJylcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9pbmRleC5qc1xuICoqLyIsInZhciBCcmFuZGluZyA9IHJlcXVpcmUoJ2FkdmVydHMvYnJhbmRpbmcnKTtcblxudmFyIHV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcbnZhciBwdWJzdWIgPSByZXF1aXJlKCdwdWJzdWInKTtcbnZhciBsYXlvdXQgPSByZXF1aXJlKCdhZHZlcnRzL2xheW91dCcpO1xuXG52YXIgbG9nID0gcmVxdWlyZSgnbG9nZ2VyJykoJ2FkdmVydHM6YWQnKTtcblxudmFyIEFEX0hFSUdIVF9BREpVU1RNRU5UID0gMzAsXG4gICAgU0xPVF9QUkVGSVggPSAnYmJjY29tXycsXG4gICAgQURfSVNfVklTSUJMRSA9IFNMT1RfUFJFRklYICsgJ3Zpc2libGUnLFxuICAgIEFEX0lTX1NIVVRfQ0xBU1MgPSBTTE9UX1BSRUZJWCArICdzaHV0JyxcbiAgICBESVNQTEFZX05PTkVfQ0xBU1MgPSBTTE9UX1BSRUZJWCArICdkaXNwbGF5X25vbmUnLFxuICAgIGFkVGV4dEtleSA9IHtcbiAgICAgICAgXCJkZWZhdWx0XCI6ICdhZHZlcnRpc2VtZW50VGV4dCcsXG4gICAgICAgIFwic3BvbnNvcl9zZWN0aW9uXCI6ICdzcG9uc29yZWRCeVRleHQnLFxuICAgICAgICBcInNwb25zb3JcIjogJ2luQXNzb2NpYXRpb25XaXRoVGV4dCcsXG4gICAgICAgIFwibW9kdWxlXCI6ICdpbkFzc29jaWF0aW9uV2l0aFRleHQnLFxuICAgICAgICBcInBhcnRuZXJcIjogJ2FkdmVydGlzaW5nUGFydG5lcnNUZXh0JyxcbiAgICAgICAgXCJhZHNlbnNlXCI6ICdhZHNCeUdvb2dsZVRleHQnXG4gICAgfTtcblxudmFyIGdldENvbnRlbnRzID0gZnVuY3Rpb24gKGRvbUlkKSB7XG4gICAgdmFyIGRvbUFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZG9tSWQpO1xuICAgIGlmICh0eXBlb2YgZG9tQWQgIT09ICd1bmRlZmluZWQnICYmIGRvbUFkICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkb21BZC5pbm5lckhUTUwucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbnZhciBBZCA9IGZ1bmN0aW9uIChhZElEKSB7XG4gICAgdGhpcy5hZElEID0gYWRJRDtcbiAgICB0aGlzLmRvbUlkID0gU0xPVF9QUkVGSVggKyBhZElEO1xuICAgIHRoaXMud2lkdGggPSBudWxsO1xuICAgIHRoaXMuaGVpZ2h0ID0gbnVsbDtcbiAgICB0aGlzLmJyYW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5wcmVsb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyZWQgPSBmYWxzZTtcbiAgICB0aGlzLmV2ZW50U2l6ZSA9IG51bGw7XG4gICAgdGhpcy5jb250ZW50cyA9IHtcbiAgICAgICAgYmFzZTogZmFsc2VcbiAgICB9O1xuICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG5cbiAgICB0aGlzLmFkVHlwZSA9ICdzdGFuZGFyZCc7XG4gICAgdGhpcy5zaXplU2V0ID0gZmFsc2U7XG4gICAgdGhpcy5pc1Jlc3BvbnNpdmUgPSBmYWxzZTtcbiAgICB0aGlzLmFsbG93U2NyZWVuUmVhZGVyID0gZmFsc2U7XG4gICAgdGhpcy5jdXJyZW50U2xvdEdyb3VwcyA9IFtdO1xuICAgIHRoaXMucmVnaXN0ZXJlZFNsb3RHcm91cHMgPSBbXTtcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRDbG9zZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmNsb3NlZCA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzLmNsb3NlZDtcbn07XG5cbkFkLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNldENsb3NlZCh0cnVlKTtcbiAgICB0aGlzLnNodXQoKTtcbn07XG5cbkFkLnByb3RvdHlwZS5pc0Nsb3NlQWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvc2VkO1xufTtcblxuQWQucHJvdG90eXBlLnNldFJlbmRlcmVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5yZW5kZXJlZCA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmVkO1xufTtcblxuQWQucHJvdG90eXBlLmlzUmVuZGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZWQ7XG59O1xuXG5BZC5wcm90b3R5cGUuc2V0Q29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHZhciBpO1xuICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgdGhpc1tpXSA9IGNvbmZpZ1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRCYXNlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNvbnRlbnRzLmJhc2UgPSBnZXRDb250ZW50cyh0aGlzLmRvbUlkKTtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cy5iYXNlO1xufTtcblxuQWQucHJvdG90eXBlLmdldEJhc2VDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmJhc2U7XG59O1xuXG5BZC5wcm90b3R5cGUuc2V0Q3VycmVudFNsb3RHcm91cHMgPSBmdW5jdGlvbiAoY3VycmVudFNsb3QpIHtcbiAgICBsb2coJ3NldHRpbmdzIHNsb3QgZ3JvdXBzIGZvciAnICsgdGhpcy5hZElEICsgJyB0byAnICsgY3VycmVudFNsb3QpO1xuICAgIHRoaXMuY3VycmVudFNsb3RHcm91cHMgPSBjdXJyZW50U2xvdDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbkFkLnByb3RvdHlwZS5nZXRDdXJyZW50U2xvdEdyb3VwcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U2xvdEdyb3Vwcztcbn07XG5cbkFkLnByb3RvdHlwZS5yZWdpc3RlclNsb3RHcm91cHMgPSBmdW5jdGlvbiAoZ3JvdXBzKSB7XG4gICAgdGhpcy5yZWdpc3RlcmVkU2xvdEdyb3Vwcy5wdXNoKGdyb3Vwcyk7XG59O1xuXG5BZC5wcm90b3R5cGUuZ2V0UmVnaXN0ZXJlZFNsb3RHcm91cHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJlZFNsb3RHcm91cHM7XG59O1xuXG5BZC5wcm90b3R5cGUuc2V0UHJlbG9hZGVkID0gZnVuY3Rpb24gKHByZWxvYWQpIHtcbiAgICB0aGlzLnByZWxvYWRlZCA9IHByZWxvYWQ7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5BZC5wcm90b3R5cGUuaXNQcmVsb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJlbG9hZGVkO1xufTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ2V0RG9tRWxlbWVudCgpXG4gKiBAcmV0dXJucyB7bnVsbHxFbGVtZW50fCp9XG4gKi9cbkFkLnByb3RvdHlwZS5kb21FbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldERvbUVsZW1lbnQoKTtcbn07XG5cbkFkLnByb3RvdHlwZS5nZXREb21FbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5lbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZG9tSWQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lbGVtZW50O1xufTtcblxuQWQucHJvdG90eXBlLmdldEFkdmVydERpbWVuc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gVXNlIGZvcmNlZCBzZXQgd2lkdGggJiBoZWlnaHQgaWYgc2V0XG4gICAgdmFyIGFkdmVydCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZG9tSWQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiB0aGlzLndpZHRoIHx8IChhZHZlcnQgPyBhZHZlcnQuY2xpZW50V2lkdGggOiAwKSxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCB8fCAoYWR2ZXJ0ID8gYWR2ZXJ0LmNsaWVudEhlaWdodCA6IDApXG4gICAgfTtcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRXaWR0aCA9IGZ1bmN0aW9uIChjbGllbnRXaWR0aCkge1xuICAgIHRoaXMud2lkdGggPSBjbGllbnRXaWR0aDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbkFkLnByb3RvdHlwZS5nZXRXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5nZXRBZHZlcnREaW1lbnNpb25zKCkud2lkdGgsIDEwKTtcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoY2xpZW50SGVpZ2h0KSB7XG4gICAgdGhpcy5oZWlnaHQgPSBjbGllbnRIZWlnaHQ7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5BZC5wcm90b3R5cGUuZ2V0SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmdldEFkdmVydERpbWVuc2lvbnMoKS5oZWlnaHQsIDEwKTtcbn07XG5cbkFkLnByb3RvdHlwZS5nZXRDcmVhdGl2ZUhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKGJiY2RvdGNvbS5vYmplY3RzKCdiYmNkb3Rjb20uY29uZmlnLmlzQXN5bmMnKSkgPyB0aGlzLmdldEhlaWdodCgpIDogdGhpcy5nZXRIZWlnaHQoKSAtIEFEX0hFSUdIVF9BREpVU1RNRU5UO1xufTtcblxuQWQucHJvdG90eXBlLnNldEFkRG9tSGVpZ2h0V2lkdGggPSBmdW5jdGlvbiAoaGVpZ2h0LCB3aWR0aCwgaXNJZnJhbWVTZXR0aW5nU2l6ZSkge1xuICAgIHZhciBlbGVtZW50ID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG4gICAgaWYgKGVsZW1lbnQgIT09IG51bGwgJiYgKCF0aGlzLnNpemVTZXQgfHwgaXNJZnJhbWVTZXR0aW5nU2l6ZSkpIHtcbiAgICAgICAgdmFyIGFkUGFkSGVpZ2h0ID0gMzU7XG4gICAgICAgIGlmICh0eXBlb2Ygd2lkdGggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gKGhlaWdodCArIGFkUGFkSGVpZ2h0KSArICdweCc7XG4gICAgICAgIHRoaXMuc2l6ZVNldCA9IHRydWU7XG4gICAgfVxufTtcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHVzZWQgYnkgdGhpcmQgcGFydHkgYWRzIHRvIGNoYW5nZSB0aGUgc2l6ZSBvZiB0aGUgaUZyYW1lIGFuZCBpdCdzIG90aGVyIGRpdidzXG4gKiBAcGFyYW0gaGVpZ2h0XG4gKiBAcGFyYW0gd2lkdGhcbiAqIEByZXR1cm5zIEFkXG4gKi9cbkFkLnByb3RvdHlwZS5zZXRJZnJhbWVTaXplID0gZnVuY3Rpb24gKGhlaWdodCwgd2lkdGgpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xuICAgIHZhciB4LFxuICAgICAgICBhZElmcmFtZXMgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaWZyYW1lXCIpLFxuICAgICAgICBpbnNFbGVtZW50cyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnNcIik7XG4gICAgdGhpcy5zZXRBZERvbUhlaWdodFdpZHRoKGhlaWdodCwgd2lkdGgsIHRydWUpO1xuICAgIGlmIChhZElmcmFtZXMubGVuZ3RoID49IDEgJiYgdHlwZW9mIGFkSWZyYW1lc1swXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGFkSWZyYW1lc1swXS53aWR0aCA9IHdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGFkSWZyYW1lc1swXS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfVxuICAgIGZvciAoeCBpbiBpbnNFbGVtZW50cykge1xuICAgICAgICBpZiAodHlwZW9mIGluc0VsZW1lbnRzW3hdLnN0eWxlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpZHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGluc0VsZW1lbnRzW3hdLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zRWxlbWVudHNbeF0uc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpyZXNpemUnLCB0aGlzLmFkSUQsIHdpZHRoLCBoZWlnaHQpO1xuICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpyZXNpemU6JyArIHRoaXMuYWRJRCwgdGhpcy5hZElELCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuQWQucHJvdG90eXBlLnNldFJlc3BvbnNpdmUgPSBmdW5jdGlvbiAocmVzcG9uc2l2ZSkge1xuICAgIHRoaXMuaXNSZXNwb25zaXZlID0gcmVzcG9uc2l2ZTtcbiAgICB1dGlscy5hZGRUYWdDbGFzcyh0aGlzLmdldERvbUVsZW1lbnQoKSwgJ2JiY2NvbV9yZXNwb25zaXZlJyk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5BZC5wcm90b3R5cGUuZ2V0QWRUZXh0S2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB4O1xuICAgIGZvciAoeCBpbiBhZFRleHRLZXkpIHtcbiAgICAgICAgaWYgKHRoaXMuYWRJRCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB0aGlzLmFkSUQuaW5kZXhPZiAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5hZElELmluZGV4T2YoeCkgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gYWRUZXh0S2V5W3hdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhZFRleHRLZXlbJ2RlZmF1bHQnXTtcbn07XG5cbkFkLnByb3RvdHlwZS5nZXRBZFRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdGhpcy5oYXNBZFRleHQgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuaGFzQWRUZXh0ID09PSBmYWxzZSkgP1xuICAgICAgICBmYWxzZSA6IGJiY2RvdGNvbS5hZHZlcnRzLmFkVGV4dC5nZXRUZXh0KHRoaXMuZ2V0QWRUZXh0S2V5KCkpO1xufTtcblxuQWQucHJvdG90eXBlLmdldEFkSW5mb1VybCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYmJjZG90Y29tLmFkdmVydHMuYWRUZXh0LmdldEluZm9VcmwodGhpcy5nZXRBZFRleHRLZXkoKSk7XG59O1xuXG5BZC5wcm90b3R5cGUuZ2V0QWRJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hZElEO1xufTtcblxuQWQucHJvdG90eXBlLmdldEFkTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBZElkKCk7XG59O1xuXG4vKipcbiAqIFVTRUQgaW4gU3luY2hyb25vdXMgc2xvdCByZXF1ZXN0c1xuICovXG5BZC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudCA9IGdldENvbnRlbnRzKHRoaXMuZG9tSWQpO1xuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZG9tSWQpO1xuICAgIGlmIChjdXJyZW50ICYmICF0aGlzLmlzQ2xvc2VBZCgpICYmICFiYmNkb3Rjb20ub2JqZWN0cygnYmJjZG90Y29tLmNvbmZpZy5pc0FzeW5jJykpIHtcbiAgICAgICAgdGhpcy5zZXRDbG9zZWQodGhpcy5jb250ZW50cy5iYXNlID09PSBjdXJyZW50ICYmIC0xID09PSBjdXJyZW50LmluZGV4T2YoJ2lmcmFtZScpKTtcbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIHRoaXMuZGlzYWJsZVNjcmVlblJlYWRlckZvckFkQ29udGVudCgpO1xufTtcblxuLyoqXG4gKiBXZSBuZWVkIHRvIGRpc2FibGUgdGFiYmluZyB0aHJvdWdoIGFkcyBhcyBub3QgYWxsIGFkcyBhcmUgYnVpbHQgZm9yIHNjcmVlbiByZWFkZXJzXG4gKi9cbkFkLnByb3RvdHlwZS5kaXNhYmxlU2NyZWVuUmVhZGVyRm9yQWRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpLCBsaW5rcywgaWZyYW1lcztcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xuICAgIGlmICghdGhpcy5hbGxvd1NjcmVlblJlYWRlciAmJiBlbGVtZW50ICE9PSBudWxsICYmIGVsZW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsaW5rcyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaW5rc1tpXS50YWJJbmRleCA9IFwiLTFcIjtcbiAgICAgICAgfVxuICAgICAgICBpZnJhbWVzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaWZyYW1lJyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpZnJhbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZnJhbWVzW2ldLnRhYkluZGV4ID0gXCItMVwiO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBUT0RPIC0gVGhlIGNsb3Npbmcgb2Ygc2xvdHMgYW5kIHJlc2l6aW5nIGRvZXMgbm90IHdvcmsgZm9yIElFNywgYXdhaXRpbmcgZ29vZ2xlIHRvIHNlbmQgc2l6ZVxuICovXG5BZC5wcm90b3R5cGUuc2h1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xuICAgIGlmIChcbiAgICAgICAgZWxlbWVudCAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2YgZWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZihBRF9JU19TSFVUX0NMQVNTKSA9PT0gLTEgJiZcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZihESVNQTEFZX05PTkVfQ0xBU1MpID09PSAtMVxuICAgICkge1xuICAgICAgICAvLyBUT0RPIC0gQXMgd2Ugbm93IHNodXQgdGhlIHNsb3QgYXMgb3Bwb3NlZCB0byB0aGUgYWQsIGZvbGxvd2luZyBsaW5lIGNvdWxkIGJlIHJlbW92ZWRcbiAgICAgICAgdXRpbHMuYWRkVGFnQ2xhc3MoZWxlbWVudCwgQURfSVNfU0hVVF9DTEFTUyk7XG4gICAgICAgIHV0aWxzLmFkZFRhZ0NsYXNzKGVsZW1lbnQucGFyZW50RWxlbWVudCwgQURfSVNfU0hVVF9DTEFTUyk7XG4gICAgICAgIHV0aWxzLnJlbW92ZVRhZ0NsYXNzKGVsZW1lbnQucGFyZW50RWxlbWVudCwgQURfSVNfVklTSUJMRSk7XG4gICAgICAgIHV0aWxzLnJlbW92ZUJvZHlUYWdDbGFzcyhTTE9UX1BSRUZJWCArIHRoaXMuYWRJRCk7XG4gICAgICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpjbG9zZScsIHRoaXMuYWRJRCk7XG4gICAgICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpjbG9zZTonICsgdGhpcy5hZElELCB0aGlzLmFkSUQpO1xuICAgIH1cbn07XG5cbkFkLnByb3RvdHlwZS5pc1NodXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKTtcbiAgICByZXR1cm4gKGVsZW1lbnQuY2xhc3NOYW1lLmluZGV4T2YoQURfSVNfU0hVVF9DTEFTUykgIT09IC0xKTtcbn07XG5cbi8qKlxuICogVE9ETyAtIE1vdmUgdGhpcyBpbnRvIGEgc2VwYXJhdGUgc3BvbnNvciBjbGFzc1xuICovXG5BZC5wcm90b3R5cGUuc2V0VGl0bGVGb3JTcG9uc29yQWRzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5icmFuZGluZyAmJiB0aGlzLmFkSUQgPT09ICdzcG9uc29yX3NlY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuYnJhbmRpbmcgPSBuZXcgQnJhbmRpbmcoYmJjZG90Y29tLmFkdmVydHMua2V5VmFsdWVzLmdldCgna2V5d29yZCcpKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFVTRUQgaW4gU3luY2hyb25vdXMgc2xvdCByZXF1ZXN0c1xuICovXG5BZC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xuICAgIHRoaXMuc2V0VGl0bGVGb3JTcG9uc29yQWRzKCk7XG4gICAgaWYgKHRoaXMuaXNSZXNwb25zaXZlKSB7XG4gICAgICAgIHV0aWxzLmFkZFRhZ0NsYXNzKGVsZW1lbnQsICdiYmNjb21fcmVzcG9uc2l2ZScpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaXNDbG9zZUFkKCkpIHtcbiAgICAgICAgdXRpbHMucmVtb3ZlVGFnQ2xhc3MoZWxlbWVudCwgRElTUExBWV9OT05FX0NMQVNTKTtcbiAgICAgICAgLy8gVE9ETyAtIEFzIHdlIG5vdyBzaHV0IHRoZSBzbG90IGFzIG9wcG9zZWQgdG8gdGhlIGFkLCBmb2xsb3dpbmcgbGluZSBjb3VsZCBiZSByZW1vdmVkXG4gICAgICAgIHV0aWxzLnJlbW92ZVRhZ0NsYXNzKGVsZW1lbnQsIEFEX0lTX1NIVVRfQ0xBU1MpO1xuICAgICAgICB1dGlscy5yZW1vdmVUYWdDbGFzcyhlbGVtZW50LnBhcmVudEVsZW1lbnQsIEFEX0lTX1NIVVRfQ0xBU1MpO1xuICAgICAgICB1dGlscy5hZGRCb2R5VGFnQ2xhc3MoU0xPVF9QUkVGSVggKyB0aGlzLmFkSUQpO1xuICAgICAgICB1dGlscy5hZGRUYWdDbGFzcyhlbGVtZW50LnBhcmVudEVsZW1lbnQsIEFEX0lTX1ZJU0lCTEUpO1xuICAgIH1cbn07XG5cbi8qKlxuICogVVNFRCBpbiBBc3luY2hyb25vdXMgc2xvdCByZXF1ZXN0c1xuICovXG5BZC5wcm90b3R5cGUub3BlbkFzeW5jID0gZnVuY3Rpb24gKGhlaWdodCwgd2lkdGgpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xuICAgIC8qKlxuICAgICAqIFNldHRpbmcgYWQgc2l6ZSBzbyB3ZSBrbm93IGlmIHdlIG5lZWQgdG8gY2xvc2UgaXQgb24gcmVzaXplL3JvdGF0aW9uXG4gICAgICovXG4gICAgdGhpcy5zZXRXaWR0aCh3aWR0aCk7XG4gICAgdGhpcy5zZXRIZWlnaHQoaGVpZ2h0KTtcblxuICAgIC8qKlxuICAgICAqIEFkZCBib2R5IGNsYXNzIGZvciBhIHJlc3BvbnNpdmUgYWRcbiAgICAgKi9cbiAgICBpZiAodGhpcy5pc1Jlc3BvbnNpdmUpIHtcbiAgICAgICAgdXRpbHMuYWRkVGFnQ2xhc3MoZWxlbWVudCwgJ2JiY2NvbV9yZXNwb25zaXZlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIGVsZW1lbnRcbiAgICAgKi9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc0Nsb3NlQWQgPSBzZWxmLmlzQ2xvc2VBZCgpO1xuICAgICAgICBsb2coYE9wZW5Bc3luYyBUaW1lciBhZDoke3NlbGYuZ2V0QWRJZCgpfSwgaXNDbG9zZUFkOiAke2lzQ2xvc2VBZH1gKTtcbiAgICAgICAgaWYgKCFpc0Nsb3NlQWQpIHtcbiAgICAgICAgICAgIHV0aWxzLnJlbW92ZVRhZ0NsYXNzKHNlbGYuZWxlbWVudCwgQURfSVNfU0hVVF9DTEFTUyk7XG4gICAgICAgICAgICB1dGlscy5yZW1vdmVUYWdDbGFzcyhzZWxmLmVsZW1lbnQucGFyZW50RWxlbWVudCwgQURfSVNfU0hVVF9DTEFTUyk7XG4gICAgICAgICAgICB1dGlscy5hZGRUYWdDbGFzcyhzZWxmLmVsZW1lbnQucGFyZW50RWxlbWVudCwgQURfSVNfVklTSUJMRSk7XG4gICAgICAgIH1cbiAgICB9LCAzMDApO1xuICAgIHV0aWxzLnJlbW92ZVRhZ0NsYXNzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYmNjb21fJyArIHRoaXMuYWRJRCArICdfdGV4dCcpLCBESVNQTEFZX05PTkVfQ0xBU1MpO1xuICAgIC8qKlxuICAgICAqIEFkZCBhIGJvZHkgY2xhc3MgdG8gc2hvdyB0aGF0IHRoZSBhZCBpcyBpbiB0aGUgcGFnZS5cbiAgICAgKi9cbiAgICB1dGlscy5hZGRCb2R5VGFnQ2xhc3ModGhpcy5kb21JZCk7XG4gICAgaWYobGF5b3V0LmdldEN1cnJlbnRHcm91cElkKCkgPiAyICYmIHRoaXMuZG9tSWQuaW5kZXhPZignbXB1JykgPiAwKXtcbiAgICAgICAgdXRpbHMuYWRkQm9keVRhZ0NsYXNzKHRoaXMuZG9tSWQrXCJfXCIrKGhlaWdodCA+IDI1MSA/XCJiaWdcIjpcInNtYWxsXCIpKTtcbiAgICB9XG4gICAgcHVic3ViLnRyaWdnZXIoJ2FkOm9wZW4nLCB0aGlzLmFkSUQsIHdpZHRoLCBoZWlnaHQpO1xuICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpvcGVuOicgKyB0aGlzLmFkSUQsIHRoaXMuYWRJRCwgd2lkdGgsIGhlaWdodCk7XG59O1xuXG4vKipcbiAqIEBUb2RvIHRlbXAgZml4IGZvciBCQkNDT00tNzc4NCAtIHdlIG5lZWQgdG8gbWFrZSB0aGlzIGJldHRlci5cbiAqIEBwYXJhbSBldmVudFNpemVcbiAqL1xuQWQucHJvdG90eXBlLnNldEV2ZW50U2l6ZSA9IGZ1bmN0aW9uIChldmVudFNpemUpIHtcbiAgICB0aGlzLmV2ZW50U2l6ZSA9IGV2ZW50U2l6ZTtcbn07XG5cbkFkLnByb3RvdHlwZS5yZW5kZXJJZlJlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLmdldERvbUVsZW1lbnQoKSAhPT0gbnVsbCAmJiB0aGlzLmlzUmVuZGVyZWQoKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ2xvc2VBZCgpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudFNpemUgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5ldmVudFNpemVbMF0gIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuZXZlbnRTaXplWzFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEJCQ0NPTS01NTg5IC0gVmlldyBub3RlcyBhYm91dCBpc3N1ZXMgd2l0aCBHUFQgc2xvdFJlbmRlckVuZGVkIGV2ZW50IGluIElFIGJyb3dzZXJzXG4gICAgICAgICAgICAgICAgICogV291bGQgYmUgbG92ZWx5IHRvIHVzZSBwcm9taXNlcyBoZXJlXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ2xvc2VBZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdWJzdWIudHJpZ2dlcignYWQ6cmVuZGVyOmNsb3NlJywgdGhpcy5kb21JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5Bc3luYyh0aGlzLmV2ZW50U2l6ZVsxXSwgdGhpcy5ldmVudFNpemVbMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCAyMDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwdWJzdWIudHJpZ2dlcignYWQ6cmVuZGVyOmNsb3NlJywgdGhpcy5kb21JZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoJ0ZhaWxlZCBkdXJpbmcgcmVuZGVyRW5kZWRDYWxsYmFjaycsIGUpO1xuICAgIH1cbn07XG5cblxuLyoqXG4gKiBUaGlzIHdhcyBhIG5ld3MgcmVxdWlyZW1lbnQgaW4gb3JkZXIgdG8gYmUgYWJsZSB0byBwb3NpdGlvbiBvdGhlciBlbGVtZW50cyBvbiBhIHBhZ2UgYXJvdW5kIHdoZXRoZXIgYW5cbiAqIGFkIGlzIHZpc2libGUgb3Igbm90LCB0aGUgYmJjY29tX3Zpc2libGUgY2xhc3MgaXMgdXNlZCB3aXRoaW4gdGhlIHRhYmxvaWQgbmV3cyBhcHBsaWNhdGlvblxuICovXG5BZC5wcm90b3R5cGUuc2V0Q3VycmVudFNsb3RWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzbG90RWxlbWVudCxcbiAgICAgICAgc2xvdCxcbiAgICAgICAgc2xvdHMgPSB0aGlzLmdldFJlZ2lzdGVyZWRTbG90R3JvdXBzKCk7XG4gICAgZm9yIChzbG90IGluIHNsb3RzKSB7XG4gICAgICAgIGlmIChzbG90cy5oYXNPd25Qcm9wZXJ0eShzbG90KSkge1xuICAgICAgICAgICAgc2xvdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChTTE9UX1BSRUZJWCArIHRoaXMuYWRJRCArICdfJyArIHNsb3RzW3Nsb3RdLmpvaW4oJ18nKSk7XG4gICAgICAgICAgICB1dGlscy5yZW1vdmVUYWdDbGFzcyhzbG90RWxlbWVudCwgQURfSVNfVklTSUJMRSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuY3VycmVudFNsb3RHcm91cHMgJiYgdGhpcy5jdXJyZW50U2xvdEdyb3Vwcy5sZW5ndGggPiAwICYmICF0aGlzLmNsb3NlZCkge1xuICAgICAgICBzbG90RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFNMT1RfUFJFRklYICsgdGhpcy5hZElEICsgJ18nICsgdGhpcy5jdXJyZW50U2xvdEdyb3Vwcy5qb2luKCdfJykpO1xuICAgICAgICB1dGlscy5hZGRUYWdDbGFzcyhzbG90RWxlbWVudCwgQURfSVNfVklTSUJMRSk7XG4gICAgfVxuICAgIHNsb3RFbGVtZW50ID0gbnVsbDtcbn07XG5cblxuQWQucHJvdG90eXBlLmhhc0FueUdyb3VwQWxyZWFkeUJlZW5SZWdpc3RlcmVkID0gZnVuY3Rpb24gKGdyb3Vwcykge1xuICAgIHZhciBpLFxuICAgICAgICBsZW4sXG4gICAgICAgIGdyb3Vwc1JlZ2lzdGVyZWQ7XG4gICAgZ3JvdXBzUmVnaXN0ZXJlZCA9IFtdLmNvbmNhdC5hcHBseShbXSwgdGhpcy5yZWdpc3RlcmVkU2xvdEdyb3Vwcykuam9pbigpO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoZ3JvdXBzUmVnaXN0ZXJlZC5pbmRleE9mKGdyb3Vwc1tpXSkgIT09IC0xKSB7XG4gICAgICAgICAgICBsb2cud2Fybihncm91cHNbaV0gKyAnIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBmb3IgJyArIHRoaXMuYWRJRCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5BZC5wcm90b3R5cGUuaW5qZWN0QWR2ZXJ0aXNlbWVudFRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGFkVGV4dEludGVydmFsO1xuICAgIGxldCBhZFRleHQ7XG4gICAgbGV0IGFkSW5mb1VybDtcbiAgICBsZXQgaW5qZWN0VHJ5ID0gMDtcblxuICAgIGZ1bmN0aW9uIHRyeUluamVjdEFkVGV4dCgpIHtcbiAgICAgICAgaW5qZWN0VHJ5Kys7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgYVRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgIGFUYWcuaW5uZXJIVE1MID0gYWRUZXh0O1xuICAgICAgICAgICAgYVRhZy5ocmVmID0gYWRJbmZvVXJsO1xuICAgICAgICAgICAgYVRhZy5jbGFzc05hbWUgPSAnYmJjY29tX3RleHQnO1xuXG4gICAgICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShhVGFnLCBlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChhZFRleHRJbnRlcnZhbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5qZWN0VHJ5ID49IDEwKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGFkVGV4dEludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBhZFRleHQgPSB0aGlzLmdldEFkVGV4dCgpO1xuICAgIGlmIChhZFRleHQpIHtcbiAgICAgICAgYWRJbmZvVXJsID0gdGhpcy5nZXRBZEluZm9VcmwoKTtcbiAgICAgICAgYWRUZXh0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzOjp0cnlJbmplY3RBZFRleHQsIDUwKTtcbiAgICB9XG59O1xuXG5BZC5wcm90b3R5cGUuaGlkZUFkQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkb21BZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZG9tSWQpO1xuXG4gICAgaWYgKGRvbUFkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkb21BZC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgIGRvbUFkLnN0eWxlLmhlaWdodCA9ICcwcHgnO1xuICAgICAgICAgICAgZG9tQWQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIGRvbUFkLnN0eWxlLnBhZGRpbmcgPSAnMCc7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkFkLnByb3RvdHlwZS5jdXJyZW50U2xvdEhhc0dyb3VwID0gZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFNsb3RHcm91cHMoKS5pbmRleE9mKGdyb3VwKSA+PSAwO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBZDtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkLmpzXG4gKiovIiwidmFyIHNlY3Rpb25zID0gcmVxdWlyZSgnc2VjdGlvbnMnKTtcbnZhciBBZFRleHQgPSByZXF1aXJlKCdhZHZlcnRzL2FkVGV4dCcpO1xudmFyIGtleVZhbHVlcyA9IHJlcXVpcmUoJ2FkdmVydHMva2V5VmFsdWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQnJhbmRpbmcgKGtleXdvcmQpIHtcbiAgICB2YXIgaHJlZiA9IGZhbHNlLFxuICAgICAgICB0aXRsZSA9IGZhbHNlLFxuICAgICAgICBrZXl3b3JkUGFydHMsXG4gICAgICAgIGtleXdvcmRzID0ge1xuICAgICAgICAnZmlyc3RwZXJzb24nOiB7XG4gICAgICAgICAgICB0aXRsZTonRmlyc3QgUGVyc29uJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL21hZ2F6aW5lLTE0NjMzMDk5J1xuICAgICAgICB9LFxuICAgICAgICAnZmlyc3RwZXJzb25iaWdkcmVhbXMnOiB7XG4gICAgICAgICAgICB0aXRsZTonRmlyc3QgUGVyc29uIEJpZyBEcmVhbXMnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvbWFnYXppbmUtMTQ2MzMwOTknXG4gICAgICAgIH0sXG4gICAgICAgICdwaWN0dXJldGhpcyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidQaWN0dXJlIFRoaXMnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvbWFnYXppbmUtMTQ3NjA2MjgnXG4gICAgICAgIH0sXG4gICAgICAgICdsaXZpbmdvbmxpbmUnOiB7XG4gICAgICAgICAgICB0aXRsZTonTGl2aW5nIE9ubGluZScsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9tYWdhemluZS0xNDc2MDYyNidcbiAgICAgICAgfSxcbiAgICAgICAgJ3JhYic6IHtcbiAgICAgICAgICAgIHRpdGxlOidSdW5uaW5nIGEgQnVzaW5lc3MnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMTY2MTE5NzMnXG4gICAgICAgIH0sXG4gICAgICAgICdwb3dlcm9mYXJ0Jzoge1xuICAgICAgICAgICAgdGl0bGU6J1Bvd2VyIG9mIEFydCcsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9tYWdhemluZS0yMTQ1OTIyNSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FsdGVyZWRzdGF0ZXMnOiB7XG4gICAgICAgICAgICB0aXRsZTonQWx0ZXJlZCBTdGF0ZXMnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvbWFnYXppbmUtMTQ3NjA2MjcnXG4gICAgICAgIH0sXG4gICAgICAgICd1c2VsZWN0aW9uJzoge1xuICAgICAgICAgICAgdGl0bGU6J1VTIEVsZWN0aW9uJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL3dvcmxkLXVzLWNhbmFkYS0xNTk0OTU2OSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2p1YmlsZWUnOiB7XG4gICAgICAgICAgICB0aXRsZTonVGhlIERpYW1vbmQgSnViaWxlZScsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy91ay0xNzUwMDAwMCcsXG4gICAgICAgICAgICBhbHRUaXRsZSA6IFwiQmFjayB0byBRdWVlbidzIERpYW1vbmQgSnViaWxlZVwiXG4gICAgICAgIH0sXG4gICAgICAgICdlbnRyZXByZW5ldXJzaGlwJzoge1xuICAgICAgICAgICAgdGl0bGU6J0VudHJlcHJlbmV1cnNoaXAnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMjI0MzQxNDEnXG4gICAgICAgIH0sXG4gICAgICAgICdlbmVyZ3knOiB7XG4gICAgICAgICAgICB0aXRsZTonRW5lcmd5JyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL2J1c2luZXNzLTE1NTIxODI0J1xuICAgICAgICB9LFxuICAgICAgICAna25vd2xlZGdlZWNvbm9teSc6IHtcbiAgICAgICAgICAgIHRpdGxlOidLbm93bGVkZ2UgZWNvbm9teScsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9idXNpbmVzcy0xMjY4NjU3MCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2Nlb2d1cnUnOiB7XG4gICAgICAgICAgICB0aXRsZTonQ0VPIEd1cnUnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMjAwNzEyMjYnXG4gICAgICAgIH0sXG4gICAgICAgICd0aGVib3NzJzoge1xuICAgICAgICAgICAgdGl0bGU6J1RoZSBCb3NzJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL2J1c2luZXNzLTIyNDQ5ODg2J1xuICAgICAgICB9LFxuICAgICAgICAnbWFraW5ndGltZSc6IHtcbiAgICAgICAgICAgIHRpdGxlOidNYWtpbmcgVGltZScsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9tYWdhemluZS0yNDExNzIxOSdcbiAgICAgICAgfSxcbiAgICAgICAgJ3RoaW5raW5nYnVzaW5lc3MnOiB7XG4gICAgICAgICAgICB0aXRsZTonVGhpbmtpbmcgQnVzaW5lc3MnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMjI0NDk4ODcnXG4gICAgICAgIH0sXG4gICAgICAgICd0ZWNoYml6Jzoge1xuICAgICAgICAgICAgdGl0bGU6J1RlY2hub2xvZ3kgb2YgQnVzaW5lc3MnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMTE0Mjg4ODknXG4gICAgICAgIH0sXG4gICAgICAgICdtZWV0dGhldGVhbSc6IHtcbiAgICAgICAgICAgIHRpdGxlOidNZWV0IHRoZSB0ZWFtJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL3dvcmxkLXJhZGlvLWFuZC10di0yMzQyNjIzOSdcbiAgICAgICAgfSxcbiAgICAgICAgJzEwMHdvbWVuJzoge1xuICAgICAgICAgICAgdGl0bGU6JzEwMCBXb21lbicsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy93b3JsZC0yNDM3MTQzMydcbiAgICAgICAgfSxcbiAgICAgICAgJ2J1c2luZXNzb2Z0ZW5uaXMnOiB7XG4gICAgICAgICAgICB0aXRsZTonQnVzaW5lc3Mgb2YgVGVubmlzJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL2J1c2luZXNzLTI1MzE5MTc1J1xuICAgICAgICB9LFxuICAgICAgICAnbmV4dHNpbGljb252YWxsZXlzJzoge1xuICAgICAgICAgICAgdGl0bGU6J1RoZSBOZXh0IFNpbGljb24gVmFsbGV5cycsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy90ZWNobm9sb2d5LTI1ODUyMTUwJ1xuICAgICAgICB9LFxuICAgICAgICAnYnVzaW5lc3NvZmdpdmluZyc6IHsgLy8gQkJDQ09NLTU2NjlcbiAgICAgICAgICAgIHRpdGxlOidUaGUgQnVzaW5lc3Mgb2YgR2l2aW5nJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL2J1c2luZXNzLTE5MTgyNDYzJ1xuICAgICAgICB9LFxuICAgICAgICAnaG93dG9zdWNjZWVkaW4nOiB7IC8vIEJCQ0NPTS01NzMwXG4gICAgICAgICAgICB0aXRsZTonSG93IHRvIFN1Y2NlZWQgSW4nLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMjk2MTc5MDInXG4gICAgICAgIH0sXG4gICAgICAgICdrb21sYWR1bW9yJzogeyAvLyBCQkNDT00tNTk4MVxuICAgICAgICAgICAgdGl0bGU6J0tvbWxhIER1bW9yIEF3YXJkJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL3dvcmxkLXJhZGlvLWFuZC10di0zMDcyNTc3MidcbiAgICAgICAgfSxcbiAgICAgICAgJ2xpZmVvZmx1eHVyeSc6IHsgLy9CQkNDT00tNjY2NCBTVEFSVFxuICAgICAgICAgICAgdGl0bGU6J0xpZmUgb2YgTHV4dXJ5JyxcbiAgICAgICAgICAgIHVybDonL25ld3MvYnVzaW5lc3MtMzExNTc4NjEnXG4gICAgICAgIH0sXG4gICAgICAgICd0aGVtYWtpbmdvZm1lJzoge1xuICAgICAgICAgICAgdGl0bGU6J1RoZSBNYWtpbmcgb2YgTWUnLFxuICAgICAgICAgICAgdXJsOicvbmV3cy9idXNpbmVzcy0zMjY2MDIzNidcbiAgICAgICAgfSxcbiAgICAgICAgJ3NpbmdhcG9yZWF0NTAnOiB7XG4gICAgICAgICAgICB0aXRsZTonU2luZ2Fwb3JlIGF0IDUwJyxcbiAgICAgICAgICAgIHVybDonL25ld3Mvd29ybGQtYXNpYS0zMTUyMjQ5OSdcbiAgICAgICAgfSxcbiAgICAgICAgJ21hZGVpbmFtZXJpY2EnOiB7XG4gICAgICAgICAgICB0aXRsZTonTWFkZSBpbiBBbWVyaWNhJyxcbiAgICAgICAgICAgIHVybDonL25ld3MvYnVzaW5lc3MtMzA1MzMyOTInXG4gICAgICAgIH0sXG4gICAgICAgICd0b21vcnJvd3NjaXRpZXMnOiB7XG4gICAgICAgICAgICB0aXRsZTonVG9tb3Jyb3dcXCdzIENpdGllcycsXG4gICAgICAgICAgICAgICAgdXJsOicvbmV3cy90ZWNobm9sb2d5LTIzNTE3NjcwJ1xuICAgICAgICB9LFxuICAgICAgICAnbXlidXNpbmVzcyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidNeSBCdXNpbmVzcycsXG4gICAgICAgICAgICB1cmw6Jy9uZXdzL2J1c2luZXNzLTE1ODcwNDM1J1xuICAgICAgICB9LFxuICAgICAgICAnbmV3ZW50cmVwcmVuZXVycyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidUaGUgTmV3IEVudHJlcHJlbmV1cnMnLFxuICAgICAgICAgICAgdXJsOicvbmV3cy9idXNpbmVzcy0yNzYxNDkzMCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FmcmljYWJlYXRzJzoge1xuICAgICAgICAgICAgdGl0bGU6J0FmcmljYSBCZWF0cycsXG4gICAgICAgICAgICB1cmw6Jy9uZXdzL2VudGVydGFpbm1lbnQtYXJ0cy0xNzY3OTQ5MCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2FzaWFiZWF0cyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidBc2lhIEJlYXRzJyxcbiAgICAgICAgICAgIHVybDonL25ld3MvZW50ZXJ0YWlubWVudC1hcnRzLTI2MDQwMTQ2J1xuICAgICAgICB9LFxuICAgICAgICAnbGF0YW1iZWF0cyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidMYXRBbSBCZWF0cycsXG4gICAgICAgICAgICB1cmw6Jy9uZXdzL3dvcmxkLWxhdGluLWFtZXJpY2EtMTk1MjM3NzAnXG4gICAgICAgIH0sXG4gICAgICAgICdtaWRkbGVlYXN0YmVhdHMnOiB7IC8vQkJDQ09NLTY2NjQgTEFTVFxuICAgICAgICAgICAgdGl0bGU6J01pZGRsZSBFYXN0IEJlYXRzJyxcbiAgICAgICAgICAgIHVybDonL25ld3Mvd29ybGQtbWlkZGxlLWVhc3QtMzA1NTUxNTQnXG4gICAgICAgIH0sXG4gICAgICAgICdidXNpbmVzc2JyYWluJzogeyAvL0JCQ0NPTS02NzkzXG4gICAgICAgICAgICB0aXRsZTonQnVzaW5lc3MgQnJhaW4nLFxuICAgICAgICAgICAgdXJsOicvbmV3cy9idXNpbmVzcy0zMjMzOTU3NidcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAga2V5d29yZFBhcnRzID0ga2V5VmFsdWVzLmdldEtleXdvcmRQYXJ0cygpO1xuICAgICAgICBpZiAodHlwZW9mIGtleXdvcmRzW2tleXdvcmRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaHJlZiA9IGtleXdvcmRzW2tleXdvcmRdLnVybDtcbiAgICAgICAgICAgIHRpdGxlID0ga2V5d29yZHNba2V5d29yZF0udGl0bGU7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5d29yZFBhcnRzKSB7XG4gICAgICAgICAgICBocmVmID0ga2V5d29yZFBhcnRzLmhyZWY7XG4gICAgICAgICAgICB0aXRsZSA9IGtleXdvcmRQYXJ0cy50aXRsZTtcbiAgICAgICAgfVxuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBCcmFuZGluZyBpcyBvbmx5IHJlcXVpcmVkIG9uIHRoZSBOZXdzIGFuZCBXb3JsZCBTZXJ2aWNlIHNpdGVzXG4gICAgICovXG4gICAgaWYgKChzZWN0aW9ucy5nZXRTZWN0aW9ucygpWzBdID09PSAnbmV3cycgfHwgc2VjdGlvbnMuZ2V0U2VjdGlvbnMoKVswXSA9PT0gJ3dvcmxkc2VydmljZScpICYmXG4gICAgICAgIHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXF1aXJlanMoWydtb2R1bGUvYm9vdHN0cmFwJywgJ21vZHVsZS9pbmRleFRpdGxlJ10sIGZ1bmN0aW9uKG5ld3MsIGluZGV4VGl0bGUpIHtcbiAgICAgICAgICAgIHZhciBpbmRleFRpdGxlU3RyaW5nLFxuICAgICAgICAgICAgICAgIGFkVGV4dEtleSA9ICdzcG9uc29yZWRCeVRleHQnLFxuICAgICAgICAgICAgICAgIGFkVGV4dCA9IEFkVGV4dC5nZXRUZXh0KGFkVGV4dEtleSksXG4gICAgICAgICAgICAgICAgYWRJbmZvTGluayA9IEFkVGV4dC5nZXRJbmZvVXJsKGFkVGV4dEtleSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGluZGV4VGl0bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbmRleFRpdGxlLnNldFRpdGxlSHRtbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5kZXhUaXRsZS5nZXRJbmRleFRpdGxlKCkuZWxlbWVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4VGl0bGVTdHJpbmcgPSAoaHJlZiAmJiBpbmRleFRpdGxlLmdldEluZGV4VGl0bGUoKS5lbGVtZW50LmZpbmQoJ2EnKS5sZW5ndGggPj0gMSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCInICsgaHJlZiArICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9hPicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhUaXRsZS5nZXRJbmRleFRpdGxlKCkuZWxlbWVudFswXS50ZXh0Q29udGVudDtcblxuICAgICAgICAgICAgICAgICAgICBpbmRleFRpdGxlLnNldFRpdGxlSHRtbChcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImJiY2NvbV9pbmRleF90aXRsZVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4VGl0bGVTdHJpbmcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8YSBjbGFzcz1cImJiY2NvbV90ZXh0XCIgaHJlZj1cIicgKyBhZEluZm9MaW5rICsgJ1wiICcgKyAndGFiaW5kZXg9XCItMVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkVGV4dCArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9hPidcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldFVybDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaHJlZjtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VGl0bGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpdGxlO1xuICAgICAgICB9XG4gICAgfTtcblxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2JyYW5kaW5nLmpzXG4gKiovIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBpcyByZXNwb25zaWJsZSBmb3IgcmVzb2x2aW5nIHRoZSBhZHZlcnQgdGV4dCBhbmQgY29ycmVzcG9uZGluZyBpbmZvIFVSTCBmb3IgZWFjaCB0ZXh0IHZhbHVlLlxuICogVGhlIGFjdHVhbCBzdHJpbmdzIGFyZSByZXRyaWV2ZWQgZnJvbSB0aGUgbG9jYWxlIHdoaWNoIGlzIGNvbmZpZ3VyZWQgb24gYSBwYWdlIGJ5IHBhZ2VcbiAqIGJhc2lzIGJ5IGNvbnN1bWVycyBvZiBiYmNkb3Rjb20uXG4gKlxuICogSWYgd2UgYXJlIGFkZGluZyBhIG5ldyB0ZXh0IHN0cmluZyBvciBpbmZvIFVSTCBpbiB0aGUgZnV0dXJlLCB3ZSBzaG91bGQgYWRkIGFuIGVudHJ5IHRvIHRoZVxuICogQURfVEVYVF9LRVlfVE9fVVJMX0xPQ0FMRV9LRVlfTUFQIHRvIG1hcCB0aGUgYWQgdGV4dCBhbmQgVVJMIGNvcnJlY3RseVxuICpcbiAqIFdlIGNhbiBhZGQgb3ZlcnJpZGVzIHRvIHRoZSBhZCB0ZXh0IGJhc2VkIG9uIHRoZSBwYWdlIHNlY3Rpb25zIC0gc2VlIFNFQ1RJT05fT1ZFUlJJREVTIGJlbG93XG4gKlxuICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgc2VjdGlvbnMgPSByZXF1aXJlKCcuLi9zZWN0aW9ucycpO1xudmFyIGxvY2FsZSA9IHJlcXVpcmUoJy4uL2xvY2FsZScpO1xuXG4vKipcbiAqIE92ZXJyaWRlcyBmb3IgdGhlIGFkdmVydCB0ZXh0IGJhc2VkIG9uIHNlY3Rpb25zICYgYWQgdGV4dCBrZXkuXG4gKlxuICogRWcgb24gYmJjLmNvbS9zcG9ydC91bHRpbWF0ZS1wZXJmb3JtZXJzLzIzMDAzMjc5P2Fkcy1kZWJ1Z1xuICogc2VjdGlvbnMuZ2V0U2VjdGlvbnMoKSA9IFsnc3BvcnQnLCAndWxpdGFtYXRlLXBlcmZvcm1lcnMnXTtcbiAqXG4gKiBvdmVycmlkZXMgPSB7XG4gICAgICogICAnc3BvcnQnOiB7XG4gICAgICogICAgICd1bHRpbWF0ZS1wZXJmb3JtZXJzJzoge1xuICAgICAqICAgICAgIGluQXNzb2NpYXRpb25XaXRoVGV4dDogJ2ZvbydcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqIH1cbiAqXG4gKiBXaWxkY2FyZHMgKCopIGNhbiBiZSB1c2VkIHRvIG1lYW4gdGhpcyBzZWN0aW9uIG9yIGFueSBjaGlsZHJlbiB0aGVyZW9mLiBVc2luZyB0aGVcbiAqIGV4YW1wbGUgZGF0YSBiZWxvdywgdGhhdCB3b3VsZCBhbHNvIG1hdGNoIGh0dHA6Ly93d3cuYmJjLmNvbS9zcG9ydC91bHRpbWF0ZS1wZXJmb3JtZXJzL3J1Z2J5ZmFjdHNcbiAqIHdoZXJlIHNlY3Rpb25zLmdldFNlY3Rpb25zKCkgPSBbJ3Nwb3J0JywgJ3VsaXRhbWF0ZS1wZXJmb3JtZXJzJywgJ3J1Z2J5ZmFjdHMnXTtcbiAqXG4gKiBvdmVycmlkZXNXaXRoV2lsZGNhcmQgPSB7XG4gICAgICogICAnc3BvcnQnOiB7XG4gICAgICogICAgICd1bHRpbWF0ZS1wZXJmb3JtZXJzJzoge1xuICAgICAqICAgICAgICcqJzoge1xuICAgICAqICAgICAgICAgaW5Bc3NvY2lhdGlvbldpdGhUZXh0OiAnZm9vJ1xuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqIH1cbiAqXG4gKi9cbnZhciBTRUNUSU9OX09WRVJSSURFUyA9IHtcbiAgICAnc3BvcnQnOiB7XG4gICAgICAgICd1bHRpbWF0ZS1wZXJmb3JtZXJzJzoge1xuICAgICAgICAgICAgJyonOiB7XG4gICAgICAgICAgICAgICAgaW5Bc3NvY2lhdGlvbldpdGhUZXh0OiAnUGFydG5lcmVkIENvbnRlbnQgUHJlc2VudGVkIGJ5J1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnbW92ZS1saWtlLW5ldmVyLWJlZm9yZSc6IHtcbiAgICAgICAgICAgICcqJzoge1xuICAgICAgICAgICAgICAgIGluQXNzb2NpYXRpb25XaXRoVGV4dDogJ1BhcnRuZXJlZCBDb250ZW50IFByZXNlbnRlZCBieSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2hvbWUtb2YtdGhlLWVuZ2xpc2gtcHJlbWllci1sZWFndWUnOiB7XG4gICAgICAgICAgICAnKic6IHtcbiAgICAgICAgICAgICAgICBpbkFzc29jaWF0aW9uV2l0aFRleHQ6ICdQYXJ0bmVyZWQgQ29udGVudCBQcmVzZW50ZWQgYnknXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKipcbiAqIE1hcCBvZiBhZFRleHRLZXlzIHRvIGluZm8gVVJMIGxvY2FsZSBrZXlzLiBUaGlzIGFsbG93cyB1cyB0byBoYXZlIGRpZmZlcmVudFxuICogaW5mbyBVUkxzIGZvciBkaWZmZXJlbnQgYWQgdGV4dHMuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIEFEX1RFWFRfS0VZX1RPX1VSTF9MT0NBTEVfS0VZX01BUCA9IHtcbiAgICBhZHZlcnRpc2VtZW50VGV4dDogJ2FkdmVydEluZm9QYWdlVXJsJyxcbiAgICBpbkFzc29jaWF0aW9uV2l0aFRleHQ6ICdhc3NvY2lhdGlvbkluZm9QYWdlVXJsJyxcbiAgICBzcG9uc29yZWRCeVRleHQ6ICdhc3NvY2lhdGlvbkluZm9QYWdlVXJsJyxcbiAgICBhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dDogJ2Fzc29jaWF0aW9uSW5mb1BhZ2VVcmwnLFxuICAgIGFkc0J5R29vZ2xlVGV4dDogJ2dvb2dsZUFkc1BhZ2VVcmwnXG59O1xuXG4vKipcbiAqIFdoZW4gdGhlcmUgaXMgbm8gbWF0Y2ggaW4gdGhlIG1hcCBhYm92ZSBmb3IgYSBnaXZlbiBhZCB0ZXh0IGtleSwgdXNlIHRoZSBiZWxvd1xuICoga2V5IHdoZW4gbG9va2luZyB1cCB0aGUgYWQgaW5mbyBVUkwgaW4gdGhlIGxvY2FsZS5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG52YXIgREVGQVVMVF9JTkZPX1VSTF9MT0NBTEVfS0VZID0gJ2FkdmVydEluZm9QYWdlVXJsJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFkIHRleHQgZm9yIHRoZSBnaXZlbiBhZFRleHRLZXkuIElmIHRoZSBhZFRleHRLZXkgaXMgaW52YWxpZCBpdCB3aWxsIHJldHVybiB1bmRlZmluZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWRUZXh0S2V5XG4gICAgICogQHJldHVybnMge1N0cmluZ3x1bmRlZmluZWR9XG4gICAgICovXG4gICAgZ2V0VGV4dDogZnVuY3Rpb24gKGFkVGV4dEtleSkge1xuICAgICAgICB2YXIgcyA9IHV0aWxzLmNsZWFuQXJyYXkoc2VjdGlvbnMuZ2V0U2VjdGlvbnMoKSk7XG4gICAgICAgIHZhciBvdmVycmlkZXMgPSBTRUNUSU9OX09WRVJSSURFUztcbiAgICAgICAgdmFyIG92ZXJyaWRlO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgbWF0Y2hpbmcgb2JqZWN0IGZyb20gdGhlIGRhdGEgY29uZmlnIGFib3ZlLlxuICAgICAgICB2YXIgaSwgbjtcbiAgICAgICAgZm9yIChpID0gMCwgbiA9IHMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICB2YXIgayA9IHNbaV07XG4gICAgICAgICAgICBpZiAob3ZlcnJpZGVzLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzID0gb3ZlcnJpZGVzW2tdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghb3ZlcnJpZGVzLmhhc093blByb3BlcnR5KCcqJykpIHtcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGZvdW5kIGEgbWF0Y2hpbmcgb2JqZWN0LCBleHRyYWN0IHRoZSBvdmVycmlkZSBpZiBwcmVzZW50XG4gICAgICAgIGlmIChvdmVycmlkZXMgJiYgb3ZlcnJpZGVzLmhhc093blByb3BlcnR5KGFkVGV4dEtleSkpIHtcbiAgICAgICAgICAgIG92ZXJyaWRlID0gb3ZlcnJpZGVzW2FkVGV4dEtleV07XG4gICAgICAgIH0gZWxzZSBpZiAob3ZlcnJpZGVzICYmIG92ZXJyaWRlcy5oYXNPd25Qcm9wZXJ0eSgnKicpICYmIG92ZXJyaWRlc1snKiddLmhhc093blByb3BlcnR5KGFkVGV4dEtleSkpIHtcbiAgICAgICAgICAgIG92ZXJyaWRlID0gb3ZlcnJpZGVzWycqJ11bYWRUZXh0S2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdmVycmlkZSB8fCBsb2NhbGUuZ2V0KGFkVGV4dEtleSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgaW5mbyBpbmZvIFVSTCBmb3IgdGhlIGdpdmVuIGFkVGV4dEtleS4gSWYgdGhlIGFkVGV4dEtleSBpcyBpbnZhbGlkIGl0IHdpbGwgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAqXG4gICAgICogQHBhcmFtIGFkVGV4dEtleVxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGdldEluZm9Vcmw6IGZ1bmN0aW9uIChhZFRleHRLZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZUtleSA9IEFEX1RFWFRfS0VZX1RPX1VSTF9MT0NBTEVfS0VZX01BUFthZFRleHRLZXldIHx8IERFRkFVTFRfSU5GT19VUkxfTE9DQUxFX0tFWTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5nZXQobG9jYWxlS2V5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzZWN0aW9uIG92ZXJyaWRlcywgdXNlZCBmb3IgdW5pdCB0ZXN0aW5nXG4gICAgICogQHBhcmFtIG92ZXJyaWRlc1xuICAgICAqL1xuICAgIHNldFNlY3Rpb25PdmVycmlkZXM6IGZ1bmN0aW9uIChvdmVycmlkZXMpIHtcbiAgICAgICAgU0VDVElPTl9PVkVSUklERVMgPSBvdmVycmlkZXM7XG4gICAgfVxufTtcblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRUZXh0LmpzXG4gKiovIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWInO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcmVuZGVyQWQ6IGZ1bmN0aW9uIChhZCwgYWR2ZXJ0VGV4dCkge1xuICAgICAgICB2YXIgYWRUZXh0LFxuICAgICAgICAgICAgYWRJbmZvO1xuXG4gICAgICAgIFB1YlN1Yi50cmlnZ2VyKCdhZDpyZW5kZXInLCBhZC5nZXRBZElkKCkpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHNob3VsZCBoYXBwZW4gaGVyZSBzbyB0aGF0IFNhZmVGcmFtZSBrbm93cyBob3cgbXVjaCByb29tIGl0IGhhcyB0byBleHBhbmRcbiAgICAgICAgICovXG4gICAgICAgIGFkVGV4dCA9IGFkdmVydFRleHQgfHwgYWQuZ2V0QWRUZXh0KCk7XG4gICAgICAgIGlmIChhZFRleHQpIHtcbiAgICAgICAgICAgIGFkSW5mbyA9IGFkLmdldEFkSW5mb1VybCgpO1xuICAgICAgICAgICAgZG9jdW1lbnQud3JpdGUoYDxhIGNsYXNzPVwiYmJjY29tX3RleHRcIiBocmVmPVwiJHthZEluZm99XCI+JHthZFRleHR9PC9hPmApO1xuICAgICAgICB9XG4gICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnb29nbGV0YWcuZGlzcGxheShgYmJjY29tXyR7YWQuZ2V0QWRJZCgpfWApO1xuICAgICAgICAgICAgUHViU3ViLnRyaWdnZXIoJ2FkOnJlbmRlcjpjb21wbGV0ZScsIGFkLmdldEFkSWQoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZEFzeW5jUmVuZGVyZXIuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYWRJZCBlZyBtcHUsIGxlYWRlcmJvYXJkXG4gICAgICovXG4gICAgY3JlYXRlQWQ6IGZ1bmN0aW9uIChhZElkKSB7XG4gICAgICAgIHJldHVybiBuZXcgYmJjZG90Y29tLmFkdmVydHMuYWQoYWRJZCk7XG4gICAgfVxufTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZEZhY3RvcnkuanNcbiAqKi8iLCJ2YXIgcHVic3ViID0gcmVxdWlyZSgncHVic3ViJyk7XG5cbnZhciBhZFRleHQgPVxuICAgICAgICAnPGEgY2xhc3M9XCJiYmNjb21fdGV4dFwiIGhyZWY9XCJ7YWRJbmZvfVwiPnthZFRleHR9PC9hPicsXG4gICAgYWRUZW1wbGF0ZSA9XG4gICAgICAgICc8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj4nICtcbiAgICAgICAgJ2JiY2RvdGNvbS5hZChcInthZElkfVwiKS5zZXRCYXNlQ29udGVudCgpOycgK1xuICAgICAgICAnZ29vZ2xldGFnLmRpc3BsYXkoXCJ7YWRJZH1cIik7JyArXG4gICAgICAgICc8L3NjcmlwdD4nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICByZW5kZXJBZDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIG91dCA9ICcnO1xuXG4gICAgICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpyZW5kZXInLCBkYXRhLmFkSWQpO1xuXG4gICAgICAgIGlmIChkYXRhLmFkVGV4dCkge1xuICAgICAgICAgICAgb3V0ID0gdGhpcy5zdWJzdGl0dXRlRGF0YShhZFRleHQsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSB0aGlzLnN1YnN0aXR1dGVEYXRhKGFkVGVtcGxhdGUsIGRhdGEpO1xuICAgICAgICBkb2N1bWVudC53cml0ZShvdXQpO1xuXG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfSxcbiAgICBzdWJzdGl0dXRlRGF0YTogZnVuY3Rpb24gKHRlbXBsYXRlLCBkYXRhKSB7XG4gICAgICAgIHZhciBhZEh0bWwgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtbXnt9XStcXH0vZywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5LnJlcGxhY2UoL1t7fV0rL2csIFwiXCIpXSB8fCBrZXk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWRIdG1sO1xuICAgIH1cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFJlbmRlcmVyLmpzXG4gKiovIiwidmFyIHNlY3Rpb25zID0gcmVxdWlyZSgnc2VjdGlvbnMnKTtcbnZhciBhZFRleHQgPSByZXF1aXJlKCdhZHZlcnRzL2FkVGV4dCcpO1xudmFyIGFkUmVnaXN0ZXIgPSByZXF1aXJlKCdhZHZlcnRzL2FkUmVnaXN0ZXInKTtcblxudmFyIGFkc2Vuc2VSYW5kb20gPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDMpO1xuXG4vKipcbiAqIFBvaW50IEdvb2dsZSBBZHNlbnNlIGF0IGEgZGlmZmVyZW50IFVybCB0byBnZXQga2V5d29yZHMgdXNlZCB0byBkZXRlcm1pbmUgYWR2ZXJ0cyB0byBkaXNwbGF5XG4gKi9cbnZhciBhcHBseVBhZ2VVcmxPdmVycmlkZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWN0aW9ucy5nZXRTZWN0aW9uKDApID09PSAnbmV3cycgJiYgc2VjdGlvbnMuZ2V0U2VjdGlvbigxKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgLy8gTmV3cyBIb21lcGFnZSBvdmVycmlkZVxuICAgICAgICB3aW5kb3cuZ29vZ2xlX3BhZ2VfdXJsID0gKGFkc2Vuc2VSYW5kb20gPT09IDFcbiAgICAgICAgICAgID8gXCJodHRwOi8vd3d3LmJiYy5jby51ay9uZXdzL2J1c2luZXNzL1wiXG4gICAgICAgICAgICA6IChhZHNlbnNlUmFuZG9tID09PSAyID8gXCJodHRwOi8vd3d3LmJiYy5jby51ay9uZXdzL3NjaWVuY2VfYW5kX2Vudmlyb25tZW50L1wiXG4gICAgICAgICAgICAgICAgOiBcImh0dHA6Ly93d3cuYmJjLmNvLnVrL25ld3MvdGVjaG5vbG9neS9cIikpO1xuICAgIH0gZWxzZSBpZiAoc2VjdGlvbnMuZ2V0U2VjdGlvbigwKSA9PT0gJ25ld3MnICYmIHNlY3Rpb25zLmdldFNlY3Rpb24oMSkgPT09ICdidXNpbmVzcydcbiAgICAgICAgJiYgc2VjdGlvbnMuZ2V0U2VjdGlvbigyKSA9PT0gJ21hcmtldC1kYXRhJ1xuICAgICl7XG4gICAgICAgIC8vIE1hcmtldCBEYXRhIG92ZXJyaWRlXG4gICAgICAgIHdpbmRvdy5nb29nbGVfcGFnZV91cmwgPSBcImh0dHA6Ly93d3cuYmJjLmNvLnVrL25ld3MvYnVzaW5lc3MvXCI7XG4gICAgfVxufTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdobyBnZXRzIHRoZSByZXZlbnVlXG4gKi9cbnZhciBnZXRBZHNlbnNlQ2hhbm5lbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWN0aW9uID0gc2VjdGlvbnMuZ2V0U2VjdGlvbigwKTtcbiAgICBpZihzZWN0aW9uID09PSAnd29ybGRzZXJ2aWNlJykge1xuICAgICAgICByZXR1cm4gJ3dvcmxkc2VydmljZSc7XG4gICAgfSBlbHNlIGlmKC9eKGF1dG9zfGNhcGl0YWx8Y3VsdHVyZXxmdXR1cmV8dHJhdmVsKSQvLnRlc3Qoc2VjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuICd3b3JsZHdpZGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnZ2xvYmFsbmV3cyc7XG4gICAgfVxufTtcblxuLyoqXG4gKiBHb29nbGUgQWRzZW5zZSBHbG9iYWwgQ2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gZ29vZ2xlX2FkX3JlcXVlc3RfZG9uZShnb29nbGVBZHMpIHtcbiAgICB2YXIgbG9nID0gcmVxdWlyZSgnbG9nZ2VyJykoJ2FkdmVydHM6YWRzZW5zZVJlbmRlcmVyJyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgaTtcbiAgICB2YXIgYWRUZXh0S2V5ID0gJ2Fkc0J5R29vZ2xlVGV4dCcsXG4gICAgICAgIGFkVGV4dFZhbHVlID0gYWRUZXh0LmdldFRleHQoYWRUZXh0S2V5KSxcbiAgICAgICAgYWRJbmZvVXJsID0gYWRUZXh0LmdldEluZm9VcmwoYWRUZXh0S2V5KTtcblxuICAgIGlmIChnb29nbGVBZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGxvZygnbm8gYWRzIHJldHVybmVkIGZyb20gR29vZ2xlIEFkc2Vuc2UgcmVxdWVzdCcpO1xuICAgICAgICBhZFJlZ2lzdGVyLmdldEN1cnJlbnRBZCgpLmNsb3NlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZ29vZ2xlQWRzWzBdLnR5cGUgPT09IFwidGV4dFwiKSB7XG5cbiAgICAgICAgcyArPSc8aDM+JyArXG4gICAgICAgICAgICAgICAgJzxhIGhyZWY9XCInICsgYWRJbmZvVXJsICsgJ1wiIHRhYmluZGV4PVwiLTFcIj4nICsgYWRUZXh0VmFsdWUgKyAnPC9hPicgK1xuICAgICAgICAgICAgJzwvaDM+JyArXG4gICAgICAgICAgICAnPHVsPic7XG5cbiAgICAgICAgaWYgKGdvb2dsZUFkcy5sZW5ndGggPT09IDEpIHtcblxuICAgICAgICAgICAgcyArPSc8bGk+JyArXG4gICAgICAgICAgICAgICAgICAgICc8aDQ+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIicgKyBnb29nbGVBZHNbMF0udXJsICsgJ1wiICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbm1vdXNlb3V0PVwid2luZG93LnN0YXR1cz1cXCdcXCdcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25tb3VzZW92ZXI9XCJ3aW5kb3cuc3RhdHVzPVxcJ2dvIHRvICcgKyBnb29nbGVBZHNbMF0udmlzaWJsZV91cmwgKyAnXFwnO3JldHVybiB0cnVlO1wiICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQ9XCJfYmxhbmtcIiB0YWJpbmRleD1cIi0xXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBnb29nbGVBZHNbMF0ubGluZTEgKyAnPC9hPicgK1xuICAgICAgICAgICAgICAgICAgICAnPGg0PicgK1xuICAgICAgICAgICAgICAgICAgICAnPHA+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBnb29nbGVBZHNbMF0ubGluZTIgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAnPC9wPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHA+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIicgKyBnb29nbGVBZHNbMF0udXJsICsgJ1wiICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbm1vdXNlb3V0PVwid2luZG93LnN0YXR1cz1cXCdcXCdcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25tb3VzZW92ZXI9XCJ3aW5kb3cuc3RhdHVzPVxcJ2dvIHRvICcgKyBnb29nbGVBZHNbMF0udmlzaWJsZV91cmwgKyAnXFwnO3JldHVybiB0cnVlO1wiICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQ9XCJfYmxhbmtcIiB0YWJpbmRleD1cIi0xXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBnb29nbGVBZHNbMF0ubGluZTMgKyAnPC9hPicgK1xuICAgICAgICAgICAgICAgICAgICAnPC9wPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHA+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIicgKyBnb29nbGVBZHNbMF0udXJsICsgJ1wiICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbm1vdXNlb3V0PVwid2luZG93LnN0YXR1cz1cXCdcXCdcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25tb3VzZW92ZXI9XCJ3aW5kb3cuc3RhdHVzPVxcJ2dvIHRvICcgKyBnb29nbGVBZHNbMF0udmlzaWJsZV91cmwgKyAnXFwnO3JldHVybiB0cnVlO1wiICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQ9XCJfYmxhbmtcIiB0YWJpbmRleD1cIi0xXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBnb29nbGVBZHNbMF0udmlzaWJsZV91cmwgKyAnPC9hPicgK1xuICAgICAgICAgICAgICAgICAgICAnPC9wPicgK1xuICAgICAgICAgICAgICAgICc8L2xpPic7XG5cbiAgICAgICAgfSBlbHNlIGlmIChnb29nbGVBZHMubGVuZ3RoID4gMSkge1xuXG4gICAgICAgICAgICBmb3IoaT0wOyBpIDwgZ29vZ2xlQWRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgcyArPSc8bGk+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGg0PicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YSBocmVmPVwiJyArIGdvb2dsZUFkc1tpXS51cmwgKyAnXCIgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbm1vdXNlb3V0PVwid2luZG93LnN0YXR1cz1cXCdcXCdcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubW91c2VvdmVyPVwid2luZG93LnN0YXR1cz1cXCdnbyB0byAnICsgZ29vZ2xlQWRzW2ldLnZpc2libGVfdXJsICsgJ1xcJztyZXR1cm4gdHJ1ZTtcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldD1cIl9ibGFua1wiIHRhYmluZGV4PVwiLTFcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGVBZHNbaV0ubGluZTEgKyAnPC9hPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzwvaDQ+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHA+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xlQWRzW2ldLmxpbmUyICsgJyAnICsgZ29vZ2xlQWRzW2ldLmxpbmUzICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L3A+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHA+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxhIGhyZWY9XCInICsgZ29vZ2xlQWRzW2ldLnVybCArICdcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubW91c2VvdXQ9XCJ3aW5kb3cuc3RhdHVzPVxcJ1xcJ1wiICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25tb3VzZW92ZXI9XCJ3aW5kb3cuc3RhdHVzPVxcJ2dvIHRvICcgK1x0Z29vZ2xlQWRzW2ldLnZpc2libGVfdXJsICsgJ1xcJztyZXR1cm4gdHJ1ZTtcIiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldD1cIl9ibGFua1wiIHRhYmluZGV4PVwiLTFcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGVBZHNbaV0udmlzaWJsZV91cmwgKyAnPC9hPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzwvcD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvbGk+JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHMgKz0nPC91bD4nO1xuICAgIH1cbiAgICBkb2N1bWVudC53cml0ZSgnPGRpdiBjbGFzcz1cImJiY2NvbV9hZHNlbnNlX2NvbnRhaW5lclwiPicrcysnPC9kaXY+Jyk7XG4gICAgcmV0dXJuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBnb29nbGVfYWRfcmVxdWVzdF9kb25lOiBnb29nbGVfYWRfcmVxdWVzdF9kb25lLFxuICAgIHJlbmRlckFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgd2luZG93Lmdvb2dsZV9hZF9jbGllbnQgICA9ICdjYS1iYmNjb20nO1xuICAgICAgICB3aW5kb3cuZ29vZ2xlX2FkX291dHB1dCAgID0gJ2pzJztcbiAgICAgICAgd2luZG93Lmdvb2dsZV9tYXhfbnVtX2FkcyA9ICczJztcbiAgICAgICAgd2luZG93Lmdvb2dsZV9hZF90eXBlICAgICA9ICd0ZXh0JztcbiAgICAgICAgd2luZG93Lmdvb2dsZV9hZF9jaGFubmVsICA9IGdldEFkc2Vuc2VDaGFubmVsKCk7XG4gICAgICAgIGFwcGx5UGFnZVVybE92ZXJyaWRlKCk7XG5cbiAgICAgICAgZG9jdW1lbnQud3JpdGUoJzxzY3JpcHQgJyArXG4gICAgICAgICd0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIgJyArXG4gICAgICAgICdzcmM9XCJodHRwOi8vcGFnZWFkMi5nb29nbGVzeW5kaWNhdGlvbi5jb20vcGFnZWFkL3Nob3dfYWRzLmpzXCI+JyArXG4gICAgICAgIGRlY29kZVVSSUNvbXBvbmVudCgnJTNDJykgKyAnL3NjcmlwdD4nKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBzZXRSYW5kb206IGZ1bmN0aW9uKHJhbmRvbSkge1xuICAgICAgICBhZHNlbnNlUmFuZG9tID0gcmFuZG9tO1xuICAgIH1cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZHNlbnNlUmVuZGVyZXIuanNcbiAqKi8iLCJ2YXIgYWRVbml0ID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFVuaXQnKTtcbnZhciBsYXlvdXQgPSByZXF1aXJlKCdhZHZlcnRzL2xheW91dCcpO1xuXG52YXIgc3VpdGVzID0ge1xuICAgICc5NzB4MjUwJzoge1xuICAgICAgICBkZnBwSWQ6IDE4NTAzNjA1OCxcbiAgICAgICAgYWRVbml0OiAncHJldmlldycsXG4gICAgICAgIHVpZDogJzVkNDUzZjJkNjU1MTQ4NGI3ODIwNjQzNTdhJyxcbiAgICAgICAgc2xvdHM6IHtcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbWzk3MCwgMjUwXV0sXG4gICAgICAgICAgICBtcHU6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGxhcmdlOiB7XG4gICAgICAgIGRmcHBJZDogMTE0MTgwMjU4LFxuICAgICAgICBhZFVuaXQ6ICdwcmV2aWV3JyxcbiAgICAgICAgdWlkOiAnMjI0ZjUxNDA3OTY5NGIzZDU2N2E3NDdhMjInLFxuICAgICAgICBzbG90czoge1xuICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IFtbOTcwLCAyNTBdXVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiaWc6IHtcbiAgICAgICAgZGZwcElkOiAxODUwMzYwNTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICc1ZDQ1M2YyZDY1NTE0ODRiNzgyMDY0MzU3YScsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW1s5NzAsIDI1MF1dLFxuICAgICAgICAgICAgbXB1OiBbWzMwMCwgNjAwXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgc3RhbmRhcmQ6IHtcbiAgICAgICAgZGZwcElkOiAxOTM2Njk0NTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICczMTcxNjc2ZjQ0NTA0NjRlM2Q1YTNiNDc0NicsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW1s3MjgsIDkwXV0sXG4gICAgICAgICAgICBtcHU6IFtbMzAwLCAyNTBdXVxuICAgICAgICB9XG4gICAgfSxcbiAgICBvcGFxdWU6IHtcbiAgICAgICAgZGZwcElkOiAxOTM2Njk0NTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICczMTcxNjc2ZjQ0NTA0NjRlM2Q1YTNiNDc0NicsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW1s3MjgsIDkwXV0sXG4gICAgICAgICAgICBtcHU6IFtbMzAwLCAyNTBdXVxuICAgICAgICB9XG4gICAgfSxcbiAgICBpbnRlcnN0aXRpYWw6IHtcbiAgICAgICAgZGZwcElkOiAxOTM2NzQ4NTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICczZjc4NDU2NjQxMmU1ODQwNDc2MjUyNDAyOCcsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICBpbnRlcnN0aXRpYWw6IFtbMSwgMV1dLFxuICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IFtbNzI4LCA5MF1dLFxuICAgICAgICAgICAgbXB1OiBbWzMwMCwgMjUwXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJpbnQtdW5pLWlmcmFtZVwiOiB7XG4gICAgICAgIGRmcHBJZDogMjAwMTQ1Mzc4LFxuICAgICAgICBhZFVuaXQ6ICdwcmV2aWV3JyxcbiAgICAgICAgdWlkOiAnMmI2MTRhNjQyNjU4NGQyZTc2N2U3YTI5NjcnLFxuICAgICAgICBzbG90czoge1xuICAgICAgICAgICAgaW50ZXJzdGl0aWFsOiBbWzEsIDFdXSxcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbWzcyOCwgOTBdXSxcbiAgICAgICAgICAgIG1wdTogW1szMDAsIDI1MF1dXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiaW50LXVuaS1pbWFnZVwiOiB7XG4gICAgICAgIGRmcHBJZDogMjAwMTQ3MTc4LFxuICAgICAgICBhZFVuaXQ6ICdwcmV2aWV3JyxcbiAgICAgICAgdWlkOiAnMmI1ZTI5Mjc1ODMzNmI3YjY2MmIzNDYxMjInLFxuICAgICAgICBzbG90czoge1xuICAgICAgICAgICAgaW50ZXJzdGl0aWFsOiBbWzEsIDFdXSxcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbWzcyOCwgOTBdXSxcbiAgICAgICAgICAgIG1wdTogW1szMDAsIDI1MF1dXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGVtcHR5OiB7XG4gICAgICAgIGRmcHBJZDogMTE0MTgwMjU4LFxuICAgICAgICBhZFVuaXQ6ICdwcmV2aWV3JyxcbiAgICAgICAgdWlkOiAnNTM3MDM0Mjg3YTdhczcwNGI1MTY1NWUzMjI3J1xuICAgIH0sXG4gICAgbm9uZToge1xuICAgICAgICBkZnBwSWQ6IDExNDE4MDI1OCxcbiAgICAgICAgYWRVbml0OiAncHJldmlldycsXG4gICAgICAgIHVpZDogJzUzNzAzNDI4N2E3YXM3MDRiNTE2NTVlMzIyNydcbiAgICB9LFxuICAgIG5vYWQ6IHtcbiAgICAgICAgZGZwcElkOiAxMTQxODAyNTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICc1MzcwMzQyODdhN2FzNzA0YjUxNjU1ZTMyMjcnXG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24gKHdpbmRvd0xvY2F0aW9uSHJlZikge1xuICAgICAgICB2YXIgc3VpdGU7XG4gICAgICAgIGlmICgvW1xcXFw/Jl1hZHM9KFteJiNdKikvLnRlc3Qod2luZG93TG9jYXRpb25IcmVmKSkge1xuICAgICAgICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2Yoc3VpdGVzW1JlZ0V4cC4kMV0pKSB7XG4gICAgICAgICAgICAgICAgc3VpdGUgPSBzdWl0ZXNbUmVnRXhwLiQxXTtcbiAgICAgICAgICAgICAgICBpZiAoc3VpdGUudWlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkVW5pdC5zZXRVaWQoc3VpdGUudWlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN1aXRlLmFkVW5pdCkge1xuICAgICAgICAgICAgICAgICAgICBhZFVuaXQuc2V0QWRVbml0KHN1aXRlLmFkVW5pdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdWl0ZS5zbG90cykge1xuICAgICAgICAgICAgICAgICAgICBsYXlvdXQub3ZlcnJpZGVHcm91cFNpemVzKHN1aXRlLnNsb3RzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRTdWl0ZXMuanNcbiAqKi8iLCIvKipcbiAqIDEuIFRoZSBmaXJzdCBsZWFkZXJib2FyZCBzbG90IHNpemUgaXMgZGlyZWN0bHkgYWxpZ25lZCB0byBzdHlsZS9vcmIvY3NzL2JiY2NvbS1hc3luYy5jc3NcbiAqIElmIHlvdSBhcmUgY2hhbmdpbmcgdGhlIGZpcnN0IHNpemUgaW4gYW4gYWRzIGJyZWFrcG9pbnQgcGxlYXNlIGNoZWNrIGl0IGlzIGFsaWduZWQgd2l0aCB0aGUgc3R5bGVzIGZvciB0aGUgZ3JvdXBcbiAqL1xudmFyIGdyb3VwcyA9IHtcbiAgICAwOiB7XG4gICAgICAgIHM6IDAsXG4gICAgICAgIGY6IDMxOSxcbiAgICAgICAgc2xvdHM6IHtcbiAgICAgICAgICAgIHdhbGxwYXBlcjogW10sXG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW10sXG4gICAgICAgICAgICBtcHU6IFtdLFxuICAgICAgICAgICAgbXB1X21pZGRsZTogW10sXG4gICAgICAgICAgICBtcHVfYm90dG9tOiBbXSxcbiAgICAgICAgICAgIHNwb25zb3I6IFtdLFxuICAgICAgICAgICAgbW9kdWxlOiBbXSxcbiAgICAgICAgICAgIG1vZHVsZV93b3JsZGlucGljdHVyZXM6IFtdLFxuICAgICAgICAgICAgcHJvbW86IFtdLFxuICAgICAgICAgICAgYWRfZmVhdHVyZV9yYzogW10sXG4gICAgICAgICAgICBcIm5hdGl2ZVwiOiBbWzEwLCAxMF1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfc2lkZV8yXCI6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9zbWFsbFwiOiBbXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fbWVkaXVtXCI6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9sYXJnZVwiOiBbXSxcbiAgICAgICAgICAgIGFkc2Vuc2U6IFtdLFxuICAgICAgICAgICAgYWRzZW5zZV9tcHU6IFtdLFxuICAgICAgICAgICAgcGFyYWxsYXg6IFtdLFxuICAgICAgICAgICAgcHJvbW9fZmVhdHVyZV9yZXNwb25zaXZlOiBbWzQ3MiwgNzkxXV0sXG4gICAgICAgICAgICBcInJlc3BvbnNpdmVfYm94XzFcIjogW1s4LDFdXSxcbiAgICAgICAgICAgIFwicmVzcG9uc2l2ZV9ib3hfMlwiOiBbWzgsMV1dLFxuICAgICAgICAgICAgXCJ2ZXJ0aWNhbG5hdmJhclwiOiBbWzIwLDIwXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgMToge1xuICAgICAgICBzOiAzMjAsXG4gICAgICAgIGY6IDM5OSxcbiAgICAgICAgc2xvdHM6IHtcbiAgICAgICAgICAgIHdhbGxwYXBlcjogW10sXG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW1szMjAsIDUwXSwgWzMwMCwgNTBdXSxcbiAgICAgICAgICAgIG1wdTogW1szMDAsIDUwXSwgWzMyMCwgNTBdLCBbMzAwLCAyNTBdXSxcbiAgICAgICAgICAgIG1wdV9taWRkbGU6IFtbMzAwLCAyNTFdXSxcbiAgICAgICAgICAgIG1wdV9ib3R0b206IFtbMzAwLCAyNTFdXSxcbiAgICAgICAgICAgIHNwb25zb3I6IFtbODgsIDMxXV0sXG4gICAgICAgICAgICBtb2R1bGU6IFtbODgsIDMxXV0sXG4gICAgICAgICAgICBtb2R1bGVfd29ybGRpbnBpY3R1cmVzOiBbWzMyMCwgNTBdLCBbMzAwLCA1MF1dLFxuICAgICAgICAgICAgaW5yZWFkOiBbWzYsIDZdXSxcbiAgICAgICAgICAgIHByb21vOiBbXSxcbiAgICAgICAgICAgIGFkX2ZlYXR1cmVfcmM6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVcIjogW1sxMCwgMTBdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX3NpZGVfMlwiOiBbXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fc21hbGxcIjogW10sXG4gICAgICAgICAgICBcIm5hdGl2ZV9tYWluX21lZGl1bVwiOiBbXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fbGFyZ2VcIjogW10sXG4gICAgICAgICAgICBhZHNlbnNlOiBbWzMsIDNdXSxcbiAgICAgICAgICAgIGFkc2Vuc2VfbXB1OiBbXSxcbiAgICAgICAgICAgIHBhcmFsbGF4OiBbXSxcbiAgICAgICAgICAgIHByb21vX2ZlYXR1cmVfcmVzcG9uc2l2ZTogW1s0NzIsIDc5MV1dLFxuICAgICAgICAgICAgXCJyZXNwb25zaXZlX2JveF8xXCI6IFtbOCwxXV0sXG4gICAgICAgICAgICBcInJlc3BvbnNpdmVfYm94XzJcIjogW1s4LDFdXSxcbiAgICAgICAgICAgIFwidmVydGljYWxuYXZiYXJcIjogW1syMCwyMF1dXG4gICAgICAgIH1cbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgczogNDAwLFxuICAgICAgICBmOiA1OTksXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICB3YWxscGFwZXI6IFtdLFxuICAgICAgICAgICAgLyoqIE5PVEUgLSBQbGVhc2UgcmVhZCBwb2ludCAxIGFib3ZlIGJlZm9yZSBjaGFuZ2luZyAqL1xuICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IFtbNTE2LCA2MF0sIFszMjAsIDUwXSwgWzMwMCwgNTBdXSxcbiAgICAgICAgICAgIG1wdTogW1s1MTYsIDYwXSwgWzMwMCwgNTBdLCBbMzIwLCA1MF0sIFszMDAsIDI1MF1dLFxuICAgICAgICAgICAgbXB1X21pZGRsZTogW1szMDAsIDI1MV1dLFxuICAgICAgICAgICAgbXB1X2JvdHRvbTogW1szMDAsIDI1MV1dLFxuICAgICAgICAgICAgc3BvbnNvcjogW1s4OCwgMzFdXSxcbiAgICAgICAgICAgIG1vZHVsZTogW1s4OCwgMzFdXSxcbiAgICAgICAgICAgIG1vZHVsZV93b3JsZGlucGljdHVyZXM6IFtbMzIwLCA1MF0sIFszMDAsIDUwXV0sXG4gICAgICAgICAgICBpbnJlYWQ6IFtbNiwgNl1dLFxuICAgICAgICAgICAgcHJvbW86IFtdLFxuICAgICAgICAgICAgYWRfZmVhdHVyZV9yYzogW10sXG4gICAgICAgICAgICBcIm5hdGl2ZVwiOiBbWzEwLCAxMF1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfc2lkZV8yXCI6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9zbWFsbFwiOiBbXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fbWVkaXVtXCI6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9sYXJnZVwiOiBbXSxcbiAgICAgICAgICAgIGFkc2Vuc2U6IFtbMywgM11dLFxuICAgICAgICAgICAgYWRzZW5zZV9tcHU6IFtdLFxuICAgICAgICAgICAgcGFyYWxsYXg6IFtdLFxuICAgICAgICAgICAgcHJvbW9fZmVhdHVyZV9yZXNwb25zaXZlOiBbWzQ3MiwgNzkxXV0sXG4gICAgICAgICAgICBcInJlc3BvbnNpdmVfYm94XzFcIjogW1s4LDFdXSxcbiAgICAgICAgICAgIFwicmVzcG9uc2l2ZV9ib3hfMlwiOiBbWzgsMV1dLFxuICAgICAgICAgICAgXCJ2ZXJ0aWNhbG5hdmJhclwiOiBbWzIwLDIwXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgMzoge1xuICAgICAgICBzOiA2MDAsXG4gICAgICAgIGY6IDEwMDcsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICB3YWxscGFwZXI6IFtdLFxuICAgICAgICAgICAgLyoqIE5PVEUgLSBQbGVhc2UgcmVhZCBwb2ludCAxIGFib3ZlIGJlZm9yZSBjaGFuZ2luZyAqL1xuICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IFtbNTE2LCA2MF0sIFs3MjgsIDkwXSwgWzk3MCwgMzAwXSwgWzk3MCwgMjUwXSwgWzk3MCwgOTBdLCBbOTcwLCA2Nl1dLFxuICAgICAgICAgICAgbXB1OiBbWzMwMCwgMjUwXSwgWzMwMCwgNjAwXV0sXG4gICAgICAgICAgICBtcHVfbWlkZGxlOiBbWzMwMCwgMjUxXV0sXG4gICAgICAgICAgICBtcHVfYm90dG9tOiBbWzMwMCwgMjUxXV0sXG4gICAgICAgICAgICBzcG9uc29yOiBbWzg4LCAzMV1dLFxuICAgICAgICAgICAgbW9kdWxlOiBbWzg4LCAzMV1dLFxuICAgICAgICAgICAgbW9kdWxlX3dvcmxkaW5waWN0dXJlczogW1szMjAsIDUwXSwgWzMwMCwgNTBdXSxcbiAgICAgICAgICAgIGlucmVhZDogW1s2LCA2XV0sXG4gICAgICAgICAgICBwcm9tbzogW1szMzYsIDIyNF1dLFxuICAgICAgICAgICAgYWRfZmVhdHVyZV9yYzogW1szMzYsIDEzNl1dLFxuICAgICAgICAgICAgXCJuYXRpdmVcIjogW1sxMCwgMTBdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX3NpZGVfMlwiOiBbWzMzNiwgMjA5XV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9tYWluX3NtYWxsXCI6IFtbMzg0LCAyNThdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fbWVkaXVtXCI6IFtbNDY0LCAyNThdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fbGFyZ2VcIjogW1s2MjQsIDI1OF1dLFxuICAgICAgICAgICAgYWRzZW5zZTogW1szLCAzXV0sXG4gICAgICAgICAgICBhZHNlbnNlX21wdTogW1szLCAzXV0sXG4gICAgICAgICAgICBwYXJhbGxheDogW10sXG4gICAgICAgICAgICBwcm9tb19mZWF0dXJlX3Jlc3BvbnNpdmU6IFtbNDcyLCA3OTFdXSxcbiAgICAgICAgICAgIFwicmVzcG9uc2l2ZV9ib3hfMVwiOiBbWzgsMV1dLFxuICAgICAgICAgICAgXCJyZXNwb25zaXZlX2JveF8yXCI6IFtbOCwxXV0sXG4gICAgICAgICAgICBcInZlcnRpY2FsbmF2YmFyXCI6IFtbMjAsMjBdXVxuICAgICAgICB9XG4gICAgfSxcbiAgICA0OiB7XG4gICAgICAgIHM6IDEwMDgsXG4gICAgICAgIGY6IDEwMDAwLFxuICAgICAgICBzbG90czoge1xuICAgICAgICAgICAgd2FsbHBhcGVyOiBbWzEsIDFdXSxcbiAgICAgICAgICAgIC8qKiBOT1RFIC0gUGxlYXNlIHJlYWQgcG9pbnQgMSBhYm92ZSBiZWZvcmUgY2hhbmdpbmcgKi9cbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbWzcyOCwgOTBdLCBbOTcwLCAzMDBdLCBbOTcwLCAyNTBdLCBbOTcwLCA5MF0sIFs5NzAsIDY2XSwgWzk0MCwgMjMwXV0sXG4gICAgICAgICAgICBtcHU6IFtbMzAwLCAyNTBdLCBbMzAwLCA2MDBdXSxcbiAgICAgICAgICAgIG1wdV9taWRkbGU6IFtbMzAwLCAyNTFdXSxcbiAgICAgICAgICAgIG1wdV9ib3R0b206IFtbMzAwLCAyNTFdXSxcbiAgICAgICAgICAgIHNwb25zb3I6IFtbODgsIDMxXV0sIC8qIGNhdGNoIGFsbCAqL1xuICAgICAgICAgICAgbW9kdWxlOiBbWzg4LCAzMV1dLCAvKiBjYXRjaCBhbGwgKi9cbiAgICAgICAgICAgIG1vZHVsZV93b3JsZGlucGljdHVyZXM6IFtbMzIwLCA1MF0sIFszMDAsIDUwXV0sXG4gICAgICAgICAgICBpbnJlYWQ6IFtbNiwgNl1dLFxuICAgICAgICAgICAgcHJvbW86IFtbMzM2LCAyMjRdXSxcbiAgICAgICAgICAgIGFkX2ZlYXR1cmVfcmM6IFtbMzM2LCAxMzZdXSxcbiAgICAgICAgICAgIFwibmF0aXZlXCI6IFtbMTAsIDEwXV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9zaWRlXzJcIjogW1szMzYsIDIwOV1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9zbWFsbFwiOiBbWzM4NCwgMjU4XV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9tYWluX21lZGl1bVwiOiBbWzQ2NCwgMjU4XV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9tYWluX2xhcmdlXCI6IFtbNjI0LCAyNThdXSxcbiAgICAgICAgICAgIGFkc2Vuc2U6IFtbMywgM11dLFxuICAgICAgICAgICAgYWRzZW5zZV9tcHU6IFtbMywgM11dLFxuICAgICAgICAgICAgcGFyYWxsYXg6IFtbOTc2LCA0MDBdXSxcbiAgICAgICAgICAgIHByb21vX2ZlYXR1cmVfcmVzcG9uc2l2ZTogW1s0NzIsIDc5MV1dLFxuICAgICAgICAgICAgXCJyZXNwb25zaXZlX2JveF8xXCI6IFtbOCwxXV0sXG4gICAgICAgICAgICBcInJlc3BvbnNpdmVfYm94XzJcIjogW1s4LDFdXSxcbiAgICAgICAgICAgIFwidmVydGljYWxuYXZiYXJcIjogW1syMCwyMF1dXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0pTT059IGN1c3RvbUdyb3VwcyBUaGUgbmV3IGdyb3VwcyB0byByZXBsYWNlIHRoZSBjdXJyZW50IGdyb3VwcyBvYmplY3QuXG4gICAgICoqL1xuICAgIHNldEdyb3VwczogZnVuY3Rpb24gKGN1c3RvbUdyb3Vwcykge1xuICAgICAgICBncm91cHMgPSBjdXN0b21Hcm91cHM7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZ3JvdXAgVGhlIGdyb3VwIGlkIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtKU09OfSBjdXN0b21Hcm91cCBUaGUgbmV3IGdyb3VwIGRhdGEuXG4gICAgICoqL1xuICAgIHNldEdyb3VwOiBmdW5jdGlvbiAoZ3JvdXAsIGN1c3RvbUdyb3VwKSB7XG4gICAgICAgIGlmIChjdXN0b21Hcm91cC5zICYmIGN1c3RvbUdyb3VwLmYgJiYgY3VzdG9tR3JvdXAuc2xvdHMpIHtcbiAgICAgICAgICAgIGdyb3Vwc1tncm91cF0gPSBjdXN0b21Hcm91cDtcbiAgICAgICAgICAgIHRoaXMuc2V0R3JvdXBTdGFydChncm91cCwgY3VzdG9tR3JvdXAucyk7XG4gICAgICAgICAgICB0aGlzLnNldEdyb3VwRmluaXNoKGdyb3VwLCBjdXN0b21Hcm91cC5mKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGdyb3VwIFRoZSBncm91cCBpZCB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCBUaGUgbmV3IHN0YXJ0IHdpZHRoIG9mIHRoZSBncm91cC5cbiAgICAgKiovXG4gICAgc2V0R3JvdXBTdGFydDogZnVuY3Rpb24gKGdyb3VwLCB3aWR0aCkge1xuICAgICAgICBpZiAodHlwZW9mIGdyb3Vwc1tncm91cF0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBncm91cHNbZ3JvdXBdLnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBncm91cHNbZ3JvdXBdLnMgPSB3aWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGdyb3Vwc1tncm91cCAtIDFdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZ3JvdXBzW2dyb3VwIC0gMV0uZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGdyb3Vwc1tncm91cCAtIDFdLmYgPSB3aWR0aCAtIDE7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBncm91cCBUaGUgZ3JvdXAgaWQgdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggVGhlIG5ldyBmaW5pc2ggd2lkdGggb2YgdGhlIGdyb3VwLlxuICAgICAqKi9cbiAgICBzZXRHcm91cEZpbmlzaDogZnVuY3Rpb24gKGdyb3VwLCB3aWR0aCkge1xuICAgICAgICBpZiAodHlwZW9mIGdyb3Vwc1tncm91cF0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBncm91cHNbZ3JvdXBdLmYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBncm91cHNbZ3JvdXBdLmYgPSB3aWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGdyb3Vwc1tncm91cCArIDFdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZ3JvdXBzW2dyb3VwICsgMV0uZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGdyb3Vwc1tncm91cCArIDFdLnMgPSB3aWR0aCArIDE7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdldEdyb3VwczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ3JvdXBzO1xuICAgIH0sXG4gICAgZ2V0R3JvdXA6IGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICByZXR1cm4gZ3JvdXBzW2dyb3VwXTtcbiAgICB9XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYnJlYWtwb2ludHMuanNcbiAqKi8iLCIvKipcbiAqXG4gKiBOb3RlOiBUaGlzIGlzIGNhbGxlZCBpbiBzbG90LmpzIEFORCBjdXJyZW5jeVByb3ZpZGVycy5qc1xuICpcbiAqL1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIHNlY3Rpb25zID0gcmVxdWlyZSgnc2VjdGlvbnMnKTtcblxuLyoqXG4gKiBNYXAgb2YgdGVtcGxhdGVzIHVzZWQgZm9yIHJlbmRlcmluZyB0aGUgb3V0YnJhaW4gd2lkZ2V0LiBUaGUga2V5IGlzIHRoZSBmaXJzdCBzZWN0aW9uXG4gKiBmcm9tIGJiY2RvdGNvbS5zZWN0aW9ucy4gSWYgd2UgYWRkIG91dGJyYWluIHRvIGEgbmV3IHByb2R1Y3QsIHdlIHdpbGwgbmVlZCB0byBhZGQgYVxuICogdGVtcGxhdGUgdG8gdGhpcyBtYXAgb3RoZXJ3aXNlIHRoZSBOZXdzIHRlbXBsYXRlIHdpbGwgYmUgdXNlZCBhcyBhIGRlZmF1bHQuXG4gKi9cbnZhciBwcm9kdWN0VGVtcGxhdGVzID0ge1xuICAgIG5ld3M6ICdiYmMuY29tL05ld3MnLFxuICAgIHNwb3J0OiAnYmJjLmNvbS9TcG9ydCcsXG4gICAgZmFsbGJhY2s6ICdiYmMuY29tL05ld3MnXG59XG5cbmZ1bmN0aW9uIHNhbml0aXNlRGF0YVNyYyAoaHJlZikge1xuICAgIGlmIChocmVmLm1hdGNoKC9eKGh0dHBzfGh0dHApOlxcL1xcLyhwYWx8bXx3d3cpLiouYmJjLihjb218Y28udWspLykpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgIGhyZWYucmVwbGFjZSgvKFxcP3wjKS4rJC8sICcnKSAvLyBSZW1vdmUgZXZlcnl0aGluZyBhZnRlciA/IG9yICNcbiAgICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KCdodHRwOi8vd3d3LmJiYy5jb20vbmV3cycpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVIdG1sIChpZCwgdGVtcGxhdGUpIHtcbiAgICB2YXIgd2luZG93TG9jYXRpb24gPSBjb25maWcuZ2V0V2luZG93TG9jYXRpb24oKTtcbiAgICB2YXIgdXJsID0gc2FuaXRpc2VEYXRhU3JjKHdpbmRvd0xvY2F0aW9uLmhyZWYucmVwbGFjZSgvKHBhbHxtKS5zYW5kYm94LmRldi8sICd3d3cnKSk7XG5cbiAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJiYmNjb21fb3V0YnJhaW5fY29udGFpbmVyIGJiY2NvbV8nICsgaWQgKyAnXCI+J1xuICAgICAgICArICc8ZGl2IGNsYXNzPVwiT1VUQlJBSU5cIiBkYXRhLXNyYz1cIicgKyB1cmwgKyAnXCIgZGF0YS13aWRnZXQtaWQ9XCInXG4gICAgICAgICsgaWQucmVwbGFjZSgvb3V0YnJhaW5fLywgJycpLnRvVXBwZXJDYXNlKClcbiAgICAgICAgKyAnXCIgZGF0YS1vYi10ZW1wbGF0ZT1cIicgKyB0ZW1wbGF0ZSArICdcIj48L2Rpdj4nXG4gICAgICAgICsgJzxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPidcbiAgICAgICAgKyAnICAgIGRvY3VtZW50LndyaXRlKGRlY29kZVVSSShcXCclM0NzY3JpcHQgc3JjPVwiLy93aWRnZXRzLm91dGJyYWluLmNvbS9vdXRicmFpbi5qc1wiIHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiUzRSUzQy9zY3JpcHQlM0VcXCcpKTsnXG4gICAgICAgICsgJzwvc2NyaXB0PidcbiAgICAgICAgKyAnPC9kaXY+Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc2FuaXRpc2VEYXRhU3JjOiBzYW5pdGlzZURhdGFTcmMsXG4gICAgcmVuZGVyQWQ6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgcHJvZHVjdCA9IHNlY3Rpb25zLmdldFNlY3Rpb24oMCk7XG5cbiAgICAgICAgdmFyIHRlbXBsYXRlID0gcHJvZHVjdFRlbXBsYXRlc1twcm9kdWN0XSB8fCBwcm9kdWN0VGVtcGxhdGVzLmZhbGxiYWNrO1xuXG4gICAgICAgIGlmICghY29uZmlnLmlzSUU3KCkgJiYgY29uZmlnLmlzT3V0YnJhaW5FbmFibGVkKCkpIHtcbiAgICAgICAgICAgIC8vIElFNyBjYW5ub3QgZG9jdW1lbnQud3JpdGUoKSB3aXRoaW4gYSBkb2N1bWVudC53cml0ZSgpIGFuZCBwbGFjZSBjb250ZW50cyBpbnRvIHRoZSA8ZGl2PlxuICAgICAgICAgICAgdmFyIGh0bWwgPSBnZW5lcmF0ZUh0bWwoaWQsIHRlbXBsYXRlKTtcbiAgICAgICAgICAgIGRvY3VtZW50LndyaXRlKGh0bWwpO1xuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9vdXRicmFpblJlbmRlcmVyLmpzXG4gKiovIiwidmFyIHV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcbnZhciBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcbnZhciBhZFJlZ2lzdGVyID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFJlZ2lzdGVyJyk7XG52YXIgbGF5b3V0ID0gcmVxdWlyZSgnYWR2ZXJ0cy9sYXlvdXQnKTtcbnZhciBhZFJlbmRlcmVyID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFJlbmRlcmVyJyk7XG52YXIgb3V0YnJhaW5SZW5kZXJlciA9IHJlcXVpcmUoJ2FkdmVydHMvb3V0YnJhaW5SZW5kZXJlcicpO1xudmFyIGFkc2Vuc2VSZW5kZXJlciA9IHJlcXVpcmUoJ2FkdmVydHMvYWRzZW5zZVJlbmRlcmVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2xvdCAoYWRJZCwgZ3JvdXBzLCBwcmVsb2FkLCBhZHZlcnRUZXh0LCBjdXJyZW50U2NyaXB0VGFnKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2dlcicpKCdhZHZlcnRzOnNsb3QnKTtcblxuICAgIHRyeSB7XG4gICAgICAgIGlmIChjb25maWcuaXNBY3RpdmUoJ2FkcycpICYmIHR5cGVvZiBhZElkID09PSAnc3RyaW5nJyAmJiBhZElkLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGdyb3VwcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHZhciBzbG90Q29uZmlnLFxuICAgICAgICAgICAgICAgIHNjcmlwdFRhZ3MsXG4gICAgICAgICAgICAgICAgYWQgPSBhZFJlZ2lzdGVyLmdldEFkKGFkSWQpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cElkID0gbGF5b3V0LmdldEN1cnJlbnRHcm91cElkKCksXG4gICAgICAgICAgICAgICAgc2xvdERvbUlkID0gKHByZWxvYWQpID9cbiAgICAgICAgICAgICAgICAgICAgJ2JiY2NvbV8nICsgYWRJZCArICdfJyArIGdyb3Vwcy5qb2luKCdfJykgKyAnX3ByZWxvYWQnIDpcbiAgICAgICAgICAgICAgICAgICAgJ2JiY2NvbV8nICsgYWRJZCArICdfJyArIGdyb3Vwcy5qb2luKCdfJyksXG4gICAgICAgICAgICAgICAgc2xvdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzbG90RG9tSWQpLFxuICAgICAgICAgICAgICAgIGFkRG9tSWQgPSAnYmJjY29tXycgKyBhZElkO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhZCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGFkLmdldEFkSWQoKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBzbG90Q29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICBhZEluZm86IGFkLmdldEFkSW5mb1VybCgpLFxuICAgICAgICAgICAgICAgICAgICBhZFRleHQ6IGFkdmVydFRleHQgfHwgYWQuZ2V0QWRUZXh0KCksXG4gICAgICAgICAgICAgICAgICAgIGFkRG9tSWQ6IGFkRG9tSWQsXG4gICAgICAgICAgICAgICAgICAgIGFkSWQ6IGFkSWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICghYWQuaGFzQW55R3JvdXBBbHJlYWR5QmVlblJlZ2lzdGVyZWQoZ3JvdXBzKSkge1xuICAgICAgICAgICAgICAgICAgICBhZC5yZWdpc3RlclNsb3RHcm91cHMoZ3JvdXBzKTtcbiAgICAgICAgICAgICAgICAgICAgLyoqIExlZ2FjeSBhZCBzbG90cyB3aWxsIG5vdCBoYXZlIHRoZSBJRCBkZWZpbmVkIGluIHRoZSBtYXJrdXAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsb3RFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHRUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NyaXB0VGFnID0gKHR5cGVvZiBjdXJyZW50U2NyaXB0VGFnID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHNjcmlwdFRhZ3Nbc2NyaXB0VGFncy5sZW5ndGggLSAxXS5pbm5lckhUTUwuaW5kZXhPZignYmJjZG90Y29tJykgPT09IC0xKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdFRhZ3Nbc2NyaXB0VGFncy5sZW5ndGggLSAyXSA6IHNjcmlwdFRhZ3Nbc2NyaXB0VGFncy5sZW5ndGggLSAxXSA6IGN1cnJlbnRTY3JpcHRUYWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdEVsZW1lbnQgPSB1dGlscy5nZXRQYXJlbnRFbGVtZW50QnlDbGFzcyhjdXJyZW50U2NyaXB0VGFnLCAnYmJjY29tX3Nsb3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2xvdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cud2FybignXCJiYmNjb21fc2xvdFwiIGNsYXNzIG5vdCBmb3VuZCBmb3IgdGhpcyBzbG90IFwiJytzbG90RG9tSWQrJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRSZWdpc3Rlci5zZXRDdXJyZW50QWRJZCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RFbGVtZW50LmlkID0gc2xvdERvbUlkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKiBFTkQgTGVnYWN5IGFkIHNsb3RzIHdpbGwgbm90IGhhdmUgdGhlIElEIGRlZmluZWQgaW4gdGhlIG1hcmt1cCAqL1xuXG4gICAgICAgICAgICAgICAgICAgIHNsb3RFbGVtZW50LmNsYXNzTmFtZSArPSAnIGJiY2NvbV8nICsgYWQuYWRUeXBlICsgJ19zbG90JztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBzLmluZGV4T2YoY3VycmVudEdyb3VwSWQpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkIGNhbiBiZSByZW5kZXJlZCBiZWNhdXNlIHNsb3QgbWF0Y2hlcyBjdXJyZW50IGdyb3VwIGlkICh3aWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkLnNldEN1cnJlbnRTbG90R3JvdXBzKGdyb3Vwcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJlbG9hZCAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJlbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkLnNldFByZWxvYWRlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVsbCB0aGUgcmVnaXN0ZXIgdGhhdCB0aGlzIGFkIGlzIGN1cnJlbnRseSBiZWluZyBwcm9jZXNzZWQgKGZvciAuc2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkUmVnaXN0ZXIuc2V0Q3VycmVudEFkSWQoYWRJZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzc2lnbiBhZERvbUlkIHRvIGVuYWJsZSBjb3B5aW5nIGFkIGFuZCBtb3ZpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RFbGVtZW50LmNoaWxkcmVuWzBdLmlkID0gYWREb21JZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYWQuc2V0Q3VycmVudFNsb3RWaXNpYmxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbmRlciBhZCBpbiBIdG1sXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRJZC5pbmRleE9mKCdhZHNlbnNlJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgQWRzZW5zZSBhZHZlcnQgKGVnIGFkc2Vuc2UsIGFkc2Vuc2VfbXB1KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhZHNlbnNlUmVuZGVyZXIucmVuZGVyQWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRJZC5pbmRleE9mKCdvdXRicmFpbicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3V0YnJhaW4gLSBub3RlLCBUUl8xIGlzIGluamVjdGVkIGluIGN1cnJlbmN5UHJvdmlkZXJzLmpzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dGJyYWluUmVuZGVyZXIucmVuZGVyQWQoYWRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0YW5kYXJkIGFkdmVydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhZFJlbmRlcmVyLnJlbmRlckFkKHNsb3RDb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRSZWdpc3Rlci5zZXRDdXJyZW50QWRJZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICB9XG59O1xuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9zbG90LmpzXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWRJZCwgZ3JvdXBzLCBhZHZlcnRUZXh0KSB7XG4gICAgdmFyIGFkLFxuICAgICAgICBzbG90LFxuICAgICAgICBzbG90RG9tQ2hpbGRFbGVtZW50LFxuICAgICAgICBjdXJyZW50R3JvdXBJZCA9IGJiY2RvdGNvbS5hZHZlcnRzLmxheW91dC5nZXRDdXJyZW50R3JvdXBJZCgpO1xuXG4gICAgaWYgKHdpbmRvdy5iYmNkb3Rjb20gJiYgYmJjZG90Y29tLmFkKSB7XG4gICAgICAgIGFkID0gYmJjZG90Y29tLmFkKGFkSWQpO1xuICAgICAgICBpZiAodHlwZW9mIGFkICE9PSAndW5kZWZpbmVkJyAmJiAhYWQuaGFzQW55R3JvdXBBbHJlYWR5QmVlblJlZ2lzdGVyZWQoW2dyb3Vwc10pKSB7XG4gICAgICAgICAgICBhZC5yZWdpc3RlclNsb3RHcm91cHMoZ3JvdXBzKTtcbiAgICAgICAgICAgIGlmIChncm91cHMuaW5kZXhPZihjdXJyZW50R3JvdXBJZCkgPj0gMCkge1xuXG4gICAgICAgICAgICAgICAgYWQuc2V0Q3VycmVudFNsb3RHcm91cHMoZ3JvdXBzKTtcblxuICAgICAgICAgICAgICAgIHNsb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmJjY29tXycgKyBhZC5nZXRBZElkKCkgKyAnXycgKyBncm91cHMuam9pbignXycpKTtcbiAgICAgICAgICAgICAgICBzbG90RG9tQ2hpbGRFbGVtZW50ID0gKHNsb3QuZmlyc3RFbGVtZW50Q2hpbGQgfHwgc2xvdC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICBpZiAoc2xvdERvbUNoaWxkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBzbG90RG9tQ2hpbGRFbGVtZW50LmlkID0gJ2JiY2NvbV8nICsgYWQuZ2V0QWRJZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiYmNkb3Rjb20udXRpbHMuYWRkVGFnQ2xhc3Moc2xvdCwgJ2JiY2NvbV8nICsgYWQuYWRUeXBlICsgJ19zbG90Jyk7XG5cbiAgICAgICAgICAgICAgICBhZC5yZW5kZXJJZlJlYWR5KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW5kZXIgYWQgaW4gSHRtbFxuICAgICAgICAgICAgICAgIGlmIChhZElkLmluZGV4T2YoJ2Fkc2Vuc2UnKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgQWRzZW5zZSBhZHZlcnQgKGVnIGFkc2Vuc2UsIGFkc2Vuc2VfbXB1KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmJjZG90Y29tLmFkdmVydHMuYWRzZW5zZVJlbmRlcmVyLnJlbmRlckFkKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhZElkLmluZGV4T2YoJ291dGJyYWluJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3V0YnJhaW4gLSBub3RlLCBUUl8xIGlzIGluamVjdGVkIGluIGN1cnJlbmN5UHJvdmlkZXJzLmpzXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdCBBc3luYywgd2UgbmVlZCB0byBjYWxsIG9wZW4gdG8gbWFrZSB0aGVtIHZpc2libGVcbiAgICAgICAgICAgICAgICAgICAgYWQub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmJjZG90Y29tLmFkdmVydHMub3V0YnJhaW5SZW5kZXJlci5yZW5kZXJBZChhZElkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdGFuZGFyZCBhZHZlcnRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJiY2RvdGNvbS5hZHZlcnRzLmFkQXN5bmNSZW5kZXJlci5yZW5kZXJBZChhZCwgYWR2ZXJ0VGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9zbG90QXN5bmMuanNcbiAqKi8iLCJ2YXIgTG9nID0gcmVxdWlyZSgnbG9nZ2VyJykoJ2FkdmVydHM6c2xvdEluZmluaXRlJyk7XG52YXIgVGVtcGxhdGVGYWN0b3J5ID0gcmVxdWlyZSgndGVtcGxhdGVzL3RlbXBsYXRlRmFjdG9yeScpO1xuXG4vKipcbiAqIFJlbmRlcnMgYW4gYW4gdGVtcGxhdGUgYW5kIG9wdGlvbmFsbHkgd3JpdGVzIGl0IHRvIHRoZSBkb20gd2l0aGluICdlbGVtZW50J1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZElkXG4gKiBAcGFyYW0ge251bWJlcltdfSBncm91cHNcbiAqIEBwYXJhbSB7RWxlbWVudH0gW2VsZW1lbnQ9XVxuICogQHBhcmFtIHtib29sfSBbcmVnaXN0ZXI9ZmFsc2VdXG4gKi9cbnZhciBTbG90SW5maW5pdGUgPSBmdW5jdGlvbiAoYWRJZCwgZ3JvdXBzLCBlbGVtZW50LCByZWdpc3Rlcikge1xuICAgIExvZygnUmVuZGVyaW5nIEluZmluaXRlIFNsb3Q6ICcsIHtcbiAgICAgICAgYWRJZDogYWRJZCxcbiAgICAgICAgZ3JvdXBzOiBncm91cHMsXG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlclxuICAgIH0pO1xuXG4gICAgLy8gQ29tcG9zZSB0aGUgZ3JvdXAgY2xhc3MgbmFtZVxuICAgIHZhciBncm91cHNDbGFzcyA9IGdyb3Vwcy5qb2luKCdfJyksXG4gICAgICAgIHJlbmRlcmVkVGVtcGxhdGU7XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBSZW5kZXIgdGhlIHRlbXBsYXRlXG4gICAgICAgIHJlbmRlcmVkVGVtcGxhdGUgPSBUZW1wbGF0ZUZhY3RvcnkuZ2V0VGVtcGxhdGUoJ2FkVGVtcGxhdGVzL2luZmluaXRlLXNsb3QnKS5yZW5kZXIoe1xuICAgICAgICAgICAgXCJhZElkXCI6IGFkSWQsXG4gICAgICAgICAgICBcImdyb3Vwc1wiOiBncm91cHMsXG4gICAgICAgICAgICBcImdyb3Vwc0NsYXNzXCI6IGdyb3Vwc0NsYXNzLFxuICAgICAgICAgICAgXCJyZWdpc3RlclwiOiByZWdpc3RlclxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIExvZy5lcnJvcignRXJyb3IgcmVuZGVyaW5nIHRoZSB0ZW1wbGF0ZSEnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgdGVtcGxhdGUgaWYgbm90IHJlbmRlcmluZyBpbnRvIERPTVxuICAgICAgICBMb2coJ1JldHVybmVkIHJlbmRlcmVkIHRlbXBsYXRlIGZvcjogJyArIGFkSWQpO1xuICAgICAgICByZXR1cm4gcmVuZGVyZWRUZW1wbGF0ZTtcbiAgICB9XG5cbiAgICBMb2coJ0luc2VydGluZyByZW5kZXJlZCB0ZW1wbGF0ZSBpbnRvIERPTSBlbGVtZW50OiAnLCB7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIHJlbmRlcmVkVGVtcGxhdGU6IHJlbmRlcmVkVGVtcGxhdGVcbiAgICB9KTtcbiAgICBUZW1wbGF0ZUZhY3RvcnkucmVuZGVySW50b0VsZW1lbnQoZWxlbWVudCwgcmVuZGVyZWRUZW1wbGF0ZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsb3RJbmZpbml0ZTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL3Nsb3RJbmZpbml0ZS5qc1xuICoqLyIsInZhciBMb2cgPSByZXF1aXJlKCdsb2dnZXInKSgndGVtcGxhdGVzOnRlbXBsYXRlRmFjdG9yeScpO1xuXG4vKipcbiAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQWRkIHlvdSB0ZW1wbGF0ZSBuYW1lcyBoZXJlXG4gKiBAdHlwZSB7c3RyaW5nW119XG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqL1xuY29uc3QgQVZBSUxBQkxFX1RFTVBMQVRFUyA9IFtcbiAgICAnYWRUZW1wbGF0ZXMvaW5maW5pdGUtc2xvdCdcbl07XG5cbmZ1bmN0aW9uIFRlbXBsYXRlRmFjdG9yeSgpIHtcbiAgICB0aGlzLnRlbXBsYXRlcyA9IEFWQUlMQUJMRV9URU1QTEFURVMucmVkdWNlKChvYmplY3RNYXAsIHZhbHVlKSA9PiB7XG4gICAgICAgIG9iamVjdE1hcFt2YWx1ZV0gPSByZXF1aXJlKGAuLyR7dmFsdWV9Lm11c3RhY2hlYCk7XG4gICAgICAgIHJldHVybiBvYmplY3RNYXBcbiAgICB9LCB7fSlcbn1cblxuLyoqXG4gKiBHZXQgYSB0ZW1wbGF0ZVxuICpcbiAqIEBtZXRob2QgZ2V0VGVtcGxhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZU5hbWUgLSBUaGUgVGVtcGxhdGUgdG8gcmV0cmlldmVcbiAqIEB0aHJvd3Mge0Vycm9yfSAtIFdoZW4gdGVtcGxhdGUgY2Fubm90IGJlIGZvdW5kLlxuICovXG5UZW1wbGF0ZUZhY3RvcnkucHJvdG90eXBlLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gKHRlbXBsYXRlTmFtZSkge1xuICAgIGlmICghdGhpcy50ZW1wbGF0ZXMuaGFzT3duUHJvcGVydHkodGVtcGxhdGVOYW1lKSkge1xuICAgICAgICBMb2cuZXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHRlbXBsYXRlOiAnICsgdGVtcGxhdGVOYW1lKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCB0ZW1wbGF0ZTogJyArIHRlbXBsYXRlTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzW3RlbXBsYXRlTmFtZV07XG59O1xuXG5UZW1wbGF0ZUZhY3RvcnkucHJvdG90eXBlLnJlbmRlckludG9FbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGh0bWwpIHtcbiAgICBpZiAoIWVsZW1lbnQgfHwgIWh0bWwpIHtcbiAgICAgICAgTG9nLmVycm9yKCdSZXF1aXJlIHBhcmFtZXRlciBub3Qgc3VwcGxpZWQnLCB7XG4gICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgaHRtbDogaHRtbFxuICAgICAgICB9KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbSBub3Qgc3VwcGxpZWQnKTtcbiAgICB9XG5cbiAgICBlbGVtZW50LmlubmVySFRNTCA9IGh0bWw7XG4gICAgdHJ5IHtcbiAgICAgICAgbm9kZVNjcmlwdFJlcGxhY2UoZWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBMb2cuZXJyb3IoJ0Vycm9yIHJlbmRlcmluZyB0ZW1wbGF0ZSBpbnRvIERPTTogJywgZSk7XG4gICAgfVxufTtcblxuLy8gQWRkIHNjcmlwdCBlbGVtZW50cyB0byBET01cbmZ1bmN0aW9uIG5vZGVTY3JpcHRSZXBsYWNlKG5vZGUpIHtcbiAgICBpZiAobm9kZVNjcmlwdElzKG5vZGUpID09PSB0cnVlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobm9kZVNjcmlwdENsb25lKG5vZGUpLCBub2RlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzO1xuICAgICAgICB3aGlsZSAoaSA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgbm9kZVNjcmlwdFJlcGxhY2UoY2hpbGRyZW5baSsrXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gbm9kZVNjcmlwdElzKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50YWdOYW1lID09PSAnU0NSSVBUJztcbn1cblxuZnVuY3Rpb24gbm9kZVNjcmlwdENsb25lKG5vZGUpIHtcbiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBzY3JpcHQudGV4dCA9IG5vZGUuaW5uZXJIVE1MO1xuICAgIGZvciAodmFyIGkgPSBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZShub2RlLmF0dHJpYnV0ZXNbaV0ubmFtZSwgbm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjcmlwdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVGVtcGxhdGVGYWN0b3J5O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL3RlbXBsYXRlcy90ZW1wbGF0ZUZhY3RvcnkuanNcbiAqKi8iLCJ2YXIgbWFwID0ge1xuXHRcIi4vYWRUZW1wbGF0ZXMvaW5maW5pdGUtc2xvdC5tdXN0YWNoZVwiOiAyMzNcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0cmV0dXJuIG1hcFtyZXFdIHx8IChmdW5jdGlvbigpIHsgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJy5cIikgfSgpKTtcbn07XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMjMyO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvdGVtcGxhdGVzIF5cXC5cXC8uKlxcLm11c3RhY2hlJFxuICoqIG1vZHVsZSBpZCA9IDIzMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIEggPSByZXF1aXJlKFwiaG9nYW4uanMvbGliL3RlbXBsYXRlXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHsgdmFyIFQgPSBuZXcgSC5UZW1wbGF0ZSh7Y29kZTogZnVuY3Rpb24gKGMscCxpKSB7IHZhciB0PXRoaXM7dC5iKGk9aXx8XCJcIik7dC5iKFwiPGRpdiBpZD1cXFwiYmJjY29tX1wiKTt0LmIodC52KHQuZihcImFkSWRcIixjLHAsMCkpKTt0LmIoXCJfXCIpO3QuYih0LnYodC5mKFwiZ3JvdXBzQ2xhc3NcIixjLHAsMCkpKTt0LmIoXCJcXFwiIGNsYXNzPVxcXCJiYmNjb21fc2xvdFxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxkaXYgaWQ9XFxcImJiY2NvbV9cIik7dC5iKHQudih0LmYoXCJhZElkXCIsYyxwLDApKSk7dC5iKFwiXFxcIiBjbGFzcz1cXFwiYmJjY29tX2FkdmVydFxcXCI+XCIpO2lmKHQucyh0LmYoXCJyZWdpc3RlclwiLGMscCwxKSxjLHAsMCwxNDIsMzUzLFwie3sgfX1cIikpe3QucnMoYyxwLGZ1bmN0aW9uKGMscCx0KXt0LmIoXCI8c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+Lyo8IVtDREFUQVsqL1wiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgICAgICAgICAgIGlmICh3aW5kb3cuYmJjZG90Y29tICYmIGJiY2RvdGNvbS5yZWdpc3RlckFkKSB7XCIpO3QuYihcIlxcblwiICsgaSk7dC5iKFwiICAgICAgICAgICAgICAgIGJiY2RvdGNvbS5yZWdpc3RlckFkKCdcIik7dC5iKHQudih0LmYoXCJhZElkXCIsYyxwLDApKSk7dC5iKFwiJywgW1wiKTt0LmIodC52KHQuZihcImdyb3Vwc1wiLGMscCwwKSkpO3QuYihcIl0pO1wiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgICAgICAgICAgIH1cIik7dC5iKFwiXFxuXCIgKyBpKTt0LmIoXCIgICAgICAgICAgICAvKl1dPiovPC9zY3JpcHQ+XCIpO30pO2MucG9wKCk7fXQuYihcIjwvZGl2PjwvZGl2PlwiKTtyZXR1cm4gdC5mbCgpOyB9LHBhcnRpYWxzOiB7fSwgc3ViczogeyAgfX0sIFwiPGRpdiBpZD1cXFwiYmJjY29tX3t7YWRJZH19X3t7Z3JvdXBzQ2xhc3N9fVxcXCIgY2xhc3M9XFxcImJiY2NvbV9zbG90XFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PGRpdiBpZD1cXFwiYmJjY29tX3t7YWRJZH19XFxcIiBjbGFzcz1cXFwiYmJjY29tX2FkdmVydFxcXCI+e3sjcmVnaXN0ZXJ9fTxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIj4vKjwhW0NEQVRBWyovXFxuICAgICAgICAgICAgaWYgKHdpbmRvdy5iYmNkb3Rjb20gJiYgYmJjZG90Y29tLnJlZ2lzdGVyQWQpIHtcXG4gICAgICAgICAgICAgICAgYmJjZG90Y29tLnJlZ2lzdGVyQWQoJ3t7YWRJZH19JywgW3t7Z3JvdXBzfX1dKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgLypdXT4qLzwvc2NyaXB0Pnt7L3JlZ2lzdGVyfX08L2Rpdj48L2Rpdj5cIiwgSCk7cmV0dXJuIFQ7IH0oKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy90ZW1wbGF0ZXMvYWRUZW1wbGF0ZXMvaW5maW5pdGUtc2xvdC5tdXN0YWNoZVxuICoqIG1vZHVsZSBpZCA9IDIzM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLypcbiAqICBDb3B5cmlnaHQgMjAxMSBUd2l0dGVyLCBJbmMuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgSG9nYW4gPSB7fTtcblxuKGZ1bmN0aW9uIChIb2dhbikge1xuICBIb2dhbi5UZW1wbGF0ZSA9IGZ1bmN0aW9uIChjb2RlT2JqLCB0ZXh0LCBjb21waWxlciwgb3B0aW9ucykge1xuICAgIGNvZGVPYmogPSBjb2RlT2JqIHx8IHt9O1xuICAgIHRoaXMuciA9IGNvZGVPYmouY29kZSB8fCB0aGlzLnI7XG4gICAgdGhpcy5jID0gY29tcGlsZXI7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLnRleHQgPSB0ZXh0IHx8ICcnO1xuICAgIHRoaXMucGFydGlhbHMgPSBjb2RlT2JqLnBhcnRpYWxzIHx8IHt9O1xuICAgIHRoaXMuc3VicyA9IGNvZGVPYmouc3VicyB8fCB7fTtcbiAgICB0aGlzLmJ1ZiA9ICcnO1xuICB9XG5cbiAgSG9nYW4uVGVtcGxhdGUucHJvdG90eXBlID0ge1xuICAgIC8vIHJlbmRlcjogcmVwbGFjZWQgYnkgZ2VuZXJhdGVkIGNvZGUuXG4gICAgcjogZnVuY3Rpb24gKGNvbnRleHQsIHBhcnRpYWxzLCBpbmRlbnQpIHsgcmV0dXJuICcnOyB9LFxuXG4gICAgLy8gdmFyaWFibGUgZXNjYXBpbmdcbiAgICB2OiBob2dhbkVzY2FwZSxcblxuICAgIC8vIHRyaXBsZSBzdGFjaGVcbiAgICB0OiBjb2VyY2VUb1N0cmluZyxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGNvbnRleHQsIHBhcnRpYWxzLCBpbmRlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJpKFtjb250ZXh0XSwgcGFydGlhbHMgfHwge30sIGluZGVudCk7XG4gICAgfSxcblxuICAgIC8vIHJlbmRlciBpbnRlcm5hbCAtLSBhIGhvb2sgZm9yIG92ZXJyaWRlcyB0aGF0IGNhdGNoZXMgcGFydGlhbHMgdG9vXG4gICAgcmk6IGZ1bmN0aW9uIChjb250ZXh0LCBwYXJ0aWFscywgaW5kZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5yKGNvbnRleHQsIHBhcnRpYWxzLCBpbmRlbnQpO1xuICAgIH0sXG5cbiAgICAvLyBlbnN1cmVQYXJ0aWFsXG4gICAgZXA6IGZ1bmN0aW9uKHN5bWJvbCwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBwYXJ0aWFsID0gdGhpcy5wYXJ0aWFsc1tzeW1ib2xdO1xuXG4gICAgICAvLyBjaGVjayB0byBzZWUgdGhhdCBpZiB3ZSd2ZSBpbnN0YW50aWF0ZWQgdGhpcyBwYXJ0aWFsIGJlZm9yZVxuICAgICAgdmFyIHRlbXBsYXRlID0gcGFydGlhbHNbcGFydGlhbC5uYW1lXTtcbiAgICAgIGlmIChwYXJ0aWFsLmluc3RhbmNlICYmIHBhcnRpYWwuYmFzZSA9PSB0ZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gcGFydGlhbC5pbnN0YW5jZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoIXRoaXMuYykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGNvbXBpbGVyIGF2YWlsYWJsZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGUgPSB0aGlzLmMuY29tcGlsZSh0ZW1wbGF0ZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgdXNlIHRoaXMgdG8gY2hlY2sgd2hldGhlciB0aGUgcGFydGlhbHMgZGljdGlvbmFyeSBoYXMgY2hhbmdlZFxuICAgICAgdGhpcy5wYXJ0aWFsc1tzeW1ib2xdLmJhc2UgPSB0ZW1wbGF0ZTtcblxuICAgICAgaWYgKHBhcnRpYWwuc3Vicykge1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgY29uc2lkZXIgcGFyZW50IHRlbXBsYXRlIG5vd1xuICAgICAgICBpZiAoIXBhcnRpYWxzLnN0YWNrVGV4dCkgcGFydGlhbHMuc3RhY2tUZXh0ID0ge307XG4gICAgICAgIGZvciAoa2V5IGluIHBhcnRpYWwuc3Vicykge1xuICAgICAgICAgIGlmICghcGFydGlhbHMuc3RhY2tUZXh0W2tleV0pIHtcbiAgICAgICAgICAgIHBhcnRpYWxzLnN0YWNrVGV4dFtrZXldID0gKHRoaXMuYWN0aXZlU3ViICE9PSB1bmRlZmluZWQgJiYgcGFydGlhbHMuc3RhY2tUZXh0W3RoaXMuYWN0aXZlU3ViXSkgPyBwYXJ0aWFscy5zdGFja1RleHRbdGhpcy5hY3RpdmVTdWJdIDogdGhpcy50ZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZSA9IGNyZWF0ZVNwZWNpYWxpemVkUGFydGlhbCh0ZW1wbGF0ZSwgcGFydGlhbC5zdWJzLCBwYXJ0aWFsLnBhcnRpYWxzLFxuICAgICAgICAgIHRoaXMuc3RhY2tTdWJzLCB0aGlzLnN0YWNrUGFydGlhbHMsIHBhcnRpYWxzLnN0YWNrVGV4dCk7XG4gICAgICB9XG4gICAgICB0aGlzLnBhcnRpYWxzW3N5bWJvbF0uaW5zdGFuY2UgPSB0ZW1wbGF0ZTtcblxuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH0sXG5cbiAgICAvLyB0cmllcyB0byBmaW5kIGEgcGFydGlhbCBpbiB0aGUgY3VycmVudCBzY29wZSBhbmQgcmVuZGVyIGl0XG4gICAgcnA6IGZ1bmN0aW9uKHN5bWJvbCwgY29udGV4dCwgcGFydGlhbHMsIGluZGVudCkge1xuICAgICAgdmFyIHBhcnRpYWwgPSB0aGlzLmVwKHN5bWJvbCwgcGFydGlhbHMpO1xuICAgICAgaWYgKCFwYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcnRpYWwucmkoY29udGV4dCwgcGFydGlhbHMsIGluZGVudCk7XG4gICAgfSxcblxuICAgIC8vIHJlbmRlciBhIHNlY3Rpb25cbiAgICByczogZnVuY3Rpb24oY29udGV4dCwgcGFydGlhbHMsIHNlY3Rpb24pIHtcbiAgICAgIHZhciB0YWlsID0gY29udGV4dFtjb250ZXh0Lmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAoIWlzQXJyYXkodGFpbCkpIHtcbiAgICAgICAgc2VjdGlvbihjb250ZXh0LCBwYXJ0aWFscywgdGhpcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWlsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnRleHQucHVzaCh0YWlsW2ldKTtcbiAgICAgICAgc2VjdGlvbihjb250ZXh0LCBwYXJ0aWFscywgdGhpcyk7XG4gICAgICAgIGNvbnRleHQucG9wKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIG1heWJlIHN0YXJ0IGEgc2VjdGlvblxuICAgIHM6IGZ1bmN0aW9uKHZhbCwgY3R4LCBwYXJ0aWFscywgaW52ZXJ0ZWQsIHN0YXJ0LCBlbmQsIHRhZ3MpIHtcbiAgICAgIHZhciBwYXNzO1xuXG4gICAgICBpZiAoaXNBcnJheSh2YWwpICYmIHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbCA9IHRoaXMubXModmFsLCBjdHgsIHBhcnRpYWxzLCBpbnZlcnRlZCwgc3RhcnQsIGVuZCwgdGFncyk7XG4gICAgICB9XG5cbiAgICAgIHBhc3MgPSAhIXZhbDtcblxuICAgICAgaWYgKCFpbnZlcnRlZCAmJiBwYXNzICYmIGN0eCkge1xuICAgICAgICBjdHgucHVzaCgodHlwZW9mIHZhbCA9PSAnb2JqZWN0JykgPyB2YWwgOiBjdHhbY3R4Lmxlbmd0aCAtIDFdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhc3M7XG4gICAgfSxcblxuICAgIC8vIGZpbmQgdmFsdWVzIHdpdGggZG90dGVkIG5hbWVzXG4gICAgZDogZnVuY3Rpb24oa2V5LCBjdHgsIHBhcnRpYWxzLCByZXR1cm5Gb3VuZCkge1xuICAgICAgdmFyIGZvdW5kLFxuICAgICAgICAgIG5hbWVzID0ga2V5LnNwbGl0KCcuJyksXG4gICAgICAgICAgdmFsID0gdGhpcy5mKG5hbWVzWzBdLCBjdHgsIHBhcnRpYWxzLCByZXR1cm5Gb3VuZCksXG4gICAgICAgICAgZG9Nb2RlbEdldCA9IHRoaXMub3B0aW9ucy5tb2RlbEdldCxcbiAgICAgICAgICBjeCA9IG51bGw7XG5cbiAgICAgIGlmIChrZXkgPT09ICcuJyAmJiBpc0FycmF5KGN0eFtjdHgubGVuZ3RoIC0gMl0pKSB7XG4gICAgICAgIHZhbCA9IGN0eFtjdHgubGVuZ3RoIC0gMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZm91bmQgPSBmaW5kSW5TY29wZShuYW1lc1tpXSwgdmFsLCBkb01vZGVsR2V0KTtcbiAgICAgICAgICBpZiAoZm91bmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY3ggPSB2YWw7XG4gICAgICAgICAgICB2YWwgPSBmb3VuZDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXR1cm5Gb3VuZCAmJiAhdmFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZXR1cm5Gb3VuZCAmJiB0eXBlb2YgdmFsID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY3R4LnB1c2goY3gpO1xuICAgICAgICB2YWwgPSB0aGlzLm12KHZhbCwgY3R4LCBwYXJ0aWFscyk7XG4gICAgICAgIGN0eC5wb3AoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuXG4gICAgLy8gZmluZCB2YWx1ZXMgd2l0aCBub3JtYWwgbmFtZXNcbiAgICBmOiBmdW5jdGlvbihrZXksIGN0eCwgcGFydGlhbHMsIHJldHVybkZvdW5kKSB7XG4gICAgICB2YXIgdmFsID0gZmFsc2UsXG4gICAgICAgICAgdiA9IG51bGwsXG4gICAgICAgICAgZm91bmQgPSBmYWxzZSxcbiAgICAgICAgICBkb01vZGVsR2V0ID0gdGhpcy5vcHRpb25zLm1vZGVsR2V0O1xuXG4gICAgICBmb3IgKHZhciBpID0gY3R4Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHYgPSBjdHhbaV07XG4gICAgICAgIHZhbCA9IGZpbmRJblNjb3BlKGtleSwgdiwgZG9Nb2RlbEdldCk7XG4gICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgIHJldHVybiAocmV0dXJuRm91bmQpID8gZmFsc2UgOiBcIlwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJldHVybkZvdW5kICYmIHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWwgPSB0aGlzLm12KHZhbCwgY3R4LCBwYXJ0aWFscyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcblxuICAgIC8vIGhpZ2hlciBvcmRlciB0ZW1wbGF0ZXNcbiAgICBsczogZnVuY3Rpb24oZnVuYywgY3gsIHBhcnRpYWxzLCB0ZXh0LCB0YWdzKSB7XG4gICAgICB2YXIgb2xkVGFncyA9IHRoaXMub3B0aW9ucy5kZWxpbWl0ZXJzO1xuXG4gICAgICB0aGlzLm9wdGlvbnMuZGVsaW1pdGVycyA9IHRhZ3M7XG4gICAgICB0aGlzLmIodGhpcy5jdChjb2VyY2VUb1N0cmluZyhmdW5jLmNhbGwoY3gsIHRleHQpKSwgY3gsIHBhcnRpYWxzKSk7XG4gICAgICB0aGlzLm9wdGlvbnMuZGVsaW1pdGVycyA9IG9sZFRhZ3M7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gY29tcGlsZSB0ZXh0XG4gICAgY3Q6IGZ1bmN0aW9uKHRleHQsIGN4LCBwYXJ0aWFscykge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlTGFtYmRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTGFtYmRhIGZlYXR1cmVzIGRpc2FibGVkLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYy5jb21waWxlKHRleHQsIHRoaXMub3B0aW9ucykucmVuZGVyKGN4LCBwYXJ0aWFscyk7XG4gICAgfSxcblxuICAgIC8vIHRlbXBsYXRlIHJlc3VsdCBidWZmZXJpbmdcbiAgICBiOiBmdW5jdGlvbihzKSB7IHRoaXMuYnVmICs9IHM7IH0sXG5cbiAgICBmbDogZnVuY3Rpb24oKSB7IHZhciByID0gdGhpcy5idWY7IHRoaXMuYnVmID0gJyc7IHJldHVybiByOyB9LFxuXG4gICAgLy8gbWV0aG9kIHJlcGxhY2Ugc2VjdGlvblxuICAgIG1zOiBmdW5jdGlvbihmdW5jLCBjdHgsIHBhcnRpYWxzLCBpbnZlcnRlZCwgc3RhcnQsIGVuZCwgdGFncykge1xuICAgICAgdmFyIHRleHRTb3VyY2UsXG4gICAgICAgICAgY3ggPSBjdHhbY3R4Lmxlbmd0aCAtIDFdLFxuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuY2FsbChjeCk7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKGludmVydGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dFNvdXJjZSA9ICh0aGlzLmFjdGl2ZVN1YiAmJiB0aGlzLnN1YnNUZXh0ICYmIHRoaXMuc3Vic1RleHRbdGhpcy5hY3RpdmVTdWJdKSA/IHRoaXMuc3Vic1RleHRbdGhpcy5hY3RpdmVTdWJdIDogdGhpcy50ZXh0O1xuICAgICAgICAgIHJldHVybiB0aGlzLmxzKHJlc3VsdCwgY3gsIHBhcnRpYWxzLCB0ZXh0U291cmNlLnN1YnN0cmluZyhzdGFydCwgZW5kKSwgdGFncyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgLy8gbWV0aG9kIHJlcGxhY2UgdmFyaWFibGVcbiAgICBtdjogZnVuY3Rpb24oZnVuYywgY3R4LCBwYXJ0aWFscykge1xuICAgICAgdmFyIGN4ID0gY3R4W2N0eC5sZW5ndGggLSAxXTtcbiAgICAgIHZhciByZXN1bHQgPSBmdW5jLmNhbGwoY3gpO1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN0KGNvZXJjZVRvU3RyaW5nKHJlc3VsdC5jYWxsKGN4KSksIGN4LCBwYXJ0aWFscyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIHN1YjogZnVuY3Rpb24obmFtZSwgY29udGV4dCwgcGFydGlhbHMsIGluZGVudCkge1xuICAgICAgdmFyIGYgPSB0aGlzLnN1YnNbbmFtZV07XG4gICAgICBpZiAoZikge1xuICAgICAgICB0aGlzLmFjdGl2ZVN1YiA9IG5hbWU7XG4gICAgICAgIGYoY29udGV4dCwgcGFydGlhbHMsIHRoaXMsIGluZGVudCk7XG4gICAgICAgIHRoaXMuYWN0aXZlU3ViID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gIH07XG5cbiAgLy9GaW5kIGEga2V5IGluIGFuIG9iamVjdFxuICBmdW5jdGlvbiBmaW5kSW5TY29wZShrZXksIHNjb3BlLCBkb01vZGVsR2V0KSB7XG4gICAgdmFyIHZhbDtcblxuICAgIGlmIChzY29wZSAmJiB0eXBlb2Ygc2NvcGUgPT0gJ29iamVjdCcpIHtcblxuICAgICAgaWYgKHNjb3BlW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWwgPSBzY29wZVtrZXldO1xuXG4gICAgICAvLyB0cnkgbG9va3VwIHdpdGggZ2V0IGZvciBiYWNrYm9uZSBvciBzaW1pbGFyIG1vZGVsIGRhdGFcbiAgICAgIH0gZWxzZSBpZiAoZG9Nb2RlbEdldCAmJiBzY29wZS5nZXQgJiYgdHlwZW9mIHNjb3BlLmdldCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbCA9IHNjb3BlLmdldChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVTcGVjaWFsaXplZFBhcnRpYWwoaW5zdGFuY2UsIHN1YnMsIHBhcnRpYWxzLCBzdGFja1N1YnMsIHN0YWNrUGFydGlhbHMsIHN0YWNrVGV4dCkge1xuICAgIGZ1bmN0aW9uIFBhcnRpYWxUZW1wbGF0ZSgpIHt9O1xuICAgIFBhcnRpYWxUZW1wbGF0ZS5wcm90b3R5cGUgPSBpbnN0YW5jZTtcbiAgICBmdW5jdGlvbiBTdWJzdGl0dXRpb25zKCkge307XG4gICAgU3Vic3RpdHV0aW9ucy5wcm90b3R5cGUgPSBpbnN0YW5jZS5zdWJzO1xuICAgIHZhciBrZXk7XG4gICAgdmFyIHBhcnRpYWwgPSBuZXcgUGFydGlhbFRlbXBsYXRlKCk7XG4gICAgcGFydGlhbC5zdWJzID0gbmV3IFN1YnN0aXR1dGlvbnMoKTtcbiAgICBwYXJ0aWFsLnN1YnNUZXh0ID0ge307ICAvL2hlaGUuIHN1YnN0ZXh0LlxuICAgIHBhcnRpYWwuYnVmID0gJyc7XG5cbiAgICBzdGFja1N1YnMgPSBzdGFja1N1YnMgfHwge307XG4gICAgcGFydGlhbC5zdGFja1N1YnMgPSBzdGFja1N1YnM7XG4gICAgcGFydGlhbC5zdWJzVGV4dCA9IHN0YWNrVGV4dDtcbiAgICBmb3IgKGtleSBpbiBzdWJzKSB7XG4gICAgICBpZiAoIXN0YWNrU3Vic1trZXldKSBzdGFja1N1YnNba2V5XSA9IHN1YnNba2V5XTtcbiAgICB9XG4gICAgZm9yIChrZXkgaW4gc3RhY2tTdWJzKSB7XG4gICAgICBwYXJ0aWFsLnN1YnNba2V5XSA9IHN0YWNrU3Vic1trZXldO1xuICAgIH1cblxuICAgIHN0YWNrUGFydGlhbHMgPSBzdGFja1BhcnRpYWxzIHx8IHt9O1xuICAgIHBhcnRpYWwuc3RhY2tQYXJ0aWFscyA9IHN0YWNrUGFydGlhbHM7XG4gICAgZm9yIChrZXkgaW4gcGFydGlhbHMpIHtcbiAgICAgIGlmICghc3RhY2tQYXJ0aWFsc1trZXldKSBzdGFja1BhcnRpYWxzW2tleV0gPSBwYXJ0aWFsc1trZXldO1xuICAgIH1cbiAgICBmb3IgKGtleSBpbiBzdGFja1BhcnRpYWxzKSB7XG4gICAgICBwYXJ0aWFsLnBhcnRpYWxzW2tleV0gPSBzdGFja1BhcnRpYWxzW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnRpYWw7XG4gIH1cblxuICB2YXIgckFtcCA9IC8mL2csXG4gICAgICByTHQgPSAvPC9nLFxuICAgICAgckd0ID0gLz4vZyxcbiAgICAgIHJBcG9zID0gL1xcJy9nLFxuICAgICAgclF1b3QgPSAvXFxcIi9nLFxuICAgICAgaENoYXJzID0gL1smPD5cXFwiXFwnXS87XG5cbiAgZnVuY3Rpb24gY29lcmNlVG9TdHJpbmcodmFsKSB7XG4gICAgcmV0dXJuIFN0cmluZygodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSA/ICcnIDogdmFsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhvZ2FuRXNjYXBlKHN0cikge1xuICAgIHN0ciA9IGNvZXJjZVRvU3RyaW5nKHN0cik7XG4gICAgcmV0dXJuIGhDaGFycy50ZXN0KHN0cikgP1xuICAgICAgc3RyXG4gICAgICAgIC5yZXBsYWNlKHJBbXAsICcmYW1wOycpXG4gICAgICAgIC5yZXBsYWNlKHJMdCwgJyZsdDsnKVxuICAgICAgICAucmVwbGFjZShyR3QsICcmZ3Q7JylcbiAgICAgICAgLnJlcGxhY2UockFwb3MsICcmIzM5OycpXG4gICAgICAgIC5yZXBsYWNlKHJRdW90LCAnJnF1b3Q7JykgOlxuICAgICAgc3RyO1xuICB9XG5cbiAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKGEpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogSG9nYW4pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vfi9ob2dhbi5qcy9saWIvdGVtcGxhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImltcG9ydCBhdmFpbGFibGVNZXRyaWNzIGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IExvZ2dlciBmcm9tICdsb2dnZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgbG9nID0gTG9nZ2VyKCdhbmFseXRpY3M6bWV0cmljczptZXRyaWNzQnVpbGRlcicpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXRyaWNzQnVpbGRlciB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tZXRyaWNzID0gbmV3IE1hcDtcbiAgICB9XG5cbiAgICB3aXRoKG1ldHJpYyA9IG51bGwsXG4gICAgICAgIHtcbiAgICAgICAgICAgIG1hcE5hbWUgPSBudWxsLFxuICAgICAgICAgICAgcG9zdFByb2Nlc3MgPSBudWxsLFxuICAgICAgICAgICAgcHJlUmVxdWlzaXRlID0gbnVsbCxcbiAgICAgICAgICAgIGFyZ3MgPSBbXSxcbiAgICAgICAgICAgIHZhbHVlID0gdW5kZWZpbmVkXG4gICAgICAgIH0gPSB7fSkge1xuICAgICAgICBpZiAobWV0cmljKSB7XG4gICAgICAgICAgICB0aGlzLm1ldHJpY3Muc2V0KG1ldHJpYywge21hcE5hbWUsIHBvc3RQcm9jZXNzLCBhcmdzLCBwcmVSZXF1aXNpdGUsIHZhbHVlfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRNZXRyaWMobWV0cmljLCBhcmdzID0gW10pIHtcbiAgICAgICAgY29uc3QgZ2V0TWV0cmljSGVscGVyID0gYGdldCR7bWV0cmljLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbWV0cmljLnNsaWNlKDEpfWA7XG4gICAgICAgIGlmIChhdmFpbGFibGVNZXRyaWNzLmhhc093blByb3BlcnR5KGdldE1ldHJpY0hlbHBlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBhdmFpbGFibGVNZXRyaWNzW2dldE1ldHJpY0hlbHBlcl0oLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBtZXRyaWMgaGVscGVyIGZvciAke21ldHJpY30gKCR7Z2V0TWV0cmljSGVscGVyfSlgKTtcbiAgICB9XG5cbiAgICBidWlsZCgpIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0ge307XG5cbiAgICAgICAgdGhpcy5tZXRyaWNzLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbnMsIG1ldHJpYykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5wcmVSZXF1aXNpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnByZVJlcXVpc2l0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gb3B0aW9ucy52YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmdldE1ldHJpYyhtZXRyaWMsIG9wdGlvbnMuYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucG9zdFByb2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gb3B0aW9ucy5wb3N0UHJvY2VzcyhyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1hcE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcE5hbWVzID0gb3B0aW9ucy5tYXBOYW1lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNBcnJheShtYXBOYW1lcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcE5hbWVzID0gW21hcE5hbWVzXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG1hcE5hbWVzLmZvckVhY2gobWFwTmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbbWFwTmFtZV0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFttZXRyaWNdID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oYFVuYWJsZSB0byBidWlsZCBtZXRyaWMgJHttZXRyaWN9YCwgZXJyKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL21ldHJpY3MvbWV0cmljc0J1aWxkZXIuanNcbiAqKi8iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuXG5sZXQge1xuICAgIGdldEFkc0VuYWJsZWQsXG4gICAgZ2V0QW5hbHl0aWNzQWNjb3VudElELFxuICAgIGdldEFuYWx5dGljc1N1aXRlLFxuICAgIGdldEFwcE5hbWUsXG4gICAgZ2V0QXBwVHlwZSxcbiAgICBnZXRBcnRpY2xlSUQsXG4gICAgZ2V0QXJ0aWNsZUxlbmd0aCxcbiAgICBnZXRBcnRpY2xlUHVibGlzaGVkRGF0ZSxcbiAgICBnZXRBcnRpY2xlVGl0bGUsXG4gICAgZ2V0QXJ0aWNsZVVwZGF0ZWREYXRlLFxuICAgIGdldENvbGxlY3Rpb24sXG4gICAgZ2V0RGF4Q29ycCxcbiAgICBnZXREb21haW5Gcm9tVXJsLFxuICAgIGdldEVkaXRpb24sXG4gICAgZ2V0SXNBcHAsXG4gICAgZ2V0UGFnZU5hbWUsXG4gICAgZ2V0UGFnZVR5cGUsXG4gICAgZ2V0UmVmZXJyZXIsXG4gICAgZ2V0U2l0ZUNhdGFseXN0Q29va2llVmFsdWUsXG4gICAgZ2V0U2l0ZUNoYW5uZWwsXG4gICAgZ2V0U2l0ZVNlY3Rpb24sXG4gICAgZ2V0U2l0ZVN1YnNlY3Rpb24xLFxuICAgIGdldFNpdGVTdWJzZWN0aW9uMixcbiAgICBnZXRUZXN0R3JvdXAsXG4gICAgZ2V0VGltZXN0YW1wLFxuICAgIGdldFZlcnNpb25cbn0gPSB1dGlscztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldEFkc0VuYWJsZWQsXG4gICAgZ2V0QW5hbHl0aWNzQWNjb3VudElELFxuICAgIGdldEFuYWx5dGljc1N1aXRlLFxuICAgIGdldEFwcE5hbWUsXG4gICAgZ2V0QXBwVHlwZSxcbiAgICBnZXRBcnRpY2xlSUQsXG4gICAgZ2V0QXJ0aWNsZUxlbmd0aCxcbiAgICBnZXRBcnRpY2xlUHVibGlzaGVkRGF0ZSxcbiAgICBnZXRBcnRpY2xlVGl0bGUsXG4gICAgZ2V0QXJ0aWNsZVVwZGF0ZWREYXRlLFxuICAgIGdldENvbGxlY3Rpb24sXG4gICAgZ2V0RGF4Q29ycCxcbiAgICBnZXREb21haW5Gcm9tVXJsLFxuICAgIGdldEVkaXRpb24sXG4gICAgZ2V0SXNBcHAsXG4gICAgZ2V0UGFnZU5hbWUsXG4gICAgZ2V0UGFnZVR5cGUsXG4gICAgZ2V0UmVmZXJyZXIsXG4gICAgZ2V0U2l0ZUNhdGFseXN0Q29va2llVmFsdWUsXG4gICAgZ2V0U2l0ZUNoYW5uZWwsXG4gICAgZ2V0U2l0ZVNlY3Rpb24sXG4gICAgZ2V0U2l0ZVN1YnNlY3Rpb24xLFxuICAgIGdldFNpdGVTdWJzZWN0aW9uMixcbiAgICBnZXRUZXN0R3JvdXAsXG4gICAgZ2V0VGltZXN0YW1wLFxuICAgIGdldFZlcnNpb25cbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL21ldHJpY3MvaW5kZXguanNcbiAqKi8iLCJpbXBvcnQgZ2V0QWRzRW5hYmxlZCBmcm9tICcuL2dldEFkc0VuYWJsZWQnO1xuaW1wb3J0IGdldEFuYWx5dGljc0FjY291bnRJRCBmcm9tICcuL2dldEFuYWx5dGljc0FjY291bnRJRCc7XG5pbXBvcnQgZ2V0QW5hbHl0aWNzU3VpdGUgZnJvbSAnLi9nZXRBbmFseXRpY3NTdWl0ZSc7XG5pbXBvcnQgZ2V0QXBwTmFtZSBmcm9tICcuL2dldEFwcE5hbWUnO1xuaW1wb3J0IGdldEFwcFR5cGUgZnJvbSAnLi9nZXRBcHBUeXBlJztcbmltcG9ydCBnZXRBcnRpY2xlSUQgZnJvbSAnLi9nZXRBcnRpY2xlSUQnO1xuaW1wb3J0IGdldEFydGljbGVMZW5ndGggZnJvbSAnLi9nZXRBcnRpY2xlTGVuZ3RoJztcbmltcG9ydCBnZXRBcnRpY2xlUHVibGlzaGVkRGF0ZSBmcm9tICcuL2dldEFydGljbGVQdWJsaXNoZWREYXRlJztcbmltcG9ydCBnZXRBcnRpY2xlVGl0bGUgZnJvbSAnLi9nZXRBcnRpY2xlVGl0bGUnO1xuaW1wb3J0IGdldEFydGljbGVVcGRhdGVkRGF0ZSBmcm9tICcuL2dldEFydGljbGVVcGRhdGVkRGF0ZSc7XG5pbXBvcnQgZ2V0Q29sbGVjdGlvbiBmcm9tICcuL2dldENvbGxlY3Rpb24nO1xuaW1wb3J0IGdldERheENvcnAgZnJvbSAnLi9nZXREYXhDb3JwJztcbmltcG9ydCBnZXREb21haW5Gcm9tVXJsIGZyb20gJy4vZ2V0RG9tYWluRnJvbVVybCc7XG5pbXBvcnQgZ2V0RWRpdGlvbiBmcm9tICcuL2dldEVkaXRpb24nO1xuaW1wb3J0IGdldElzQXBwIGZyb20gJy4vZ2V0SXNBcHAnO1xuaW1wb3J0IGdldFBhZ2VOYW1lIGZyb20gJy4vZ2V0UGFnZU5hbWUnO1xuaW1wb3J0IGdldFBhZ2VUeXBlIGZyb20gJy4vZ2V0UGFnZVR5cGUnO1xuaW1wb3J0IGdldFJlZmVycmVyIGZyb20gJy4vZ2V0UmVmZXJyZXInO1xuaW1wb3J0IGdldFNlY3Rpb25TdHJpbmdzIGZyb20gJy4vZ2V0U2VjdGlvblN0cmluZ3MnO1xuaW1wb3J0IGdldFNpdGVDYXRhbHlzdENvb2tpZVZhbHVlIGZyb20gJy4vZ2V0U2l0ZUNhdGFseXN0Q29va2llVmFsdWUnO1xuaW1wb3J0IGdldFNpdGVDaGFubmVsIGZyb20gJy4vZ2V0U2l0ZUNoYW5uZWwnO1xuaW1wb3J0IGdldFNpdGVTZWN0aW9uIGZyb20gJy4vZ2V0U2l0ZVNlY3Rpb24nO1xuaW1wb3J0IGdldFNpdGVTdWJzZWN0aW9uMSBmcm9tICcuL2dldFNpdGVTdWJzZWN0aW9uMSc7XG5pbXBvcnQgZ2V0U2l0ZVN1YnNlY3Rpb24yIGZyb20gJy4vZ2V0U2l0ZVN1YnNlY3Rpb24yJztcbmltcG9ydCBnZXRTeW5kaWNhdGVkVmlkZW9Tb3VyY2UgZnJvbSAnLi9nZXRTeW5kaWNhdGVkVmlkZW9Tb3VyY2UnO1xuaW1wb3J0IGdldFRlc3RHcm91cCBmcm9tICcuL2dldFRlc3RHcm91cCc7XG5pbXBvcnQgZ2V0VGltZXN0YW1wIGZyb20gJy4vZ2V0VGltZXN0YW1wJztcbmltcG9ydCBnZXRWZXJzaW9uIGZyb20gJy4vZ2V0VmVyc2lvbic7XG5cbmltcG9ydCB7XG4gICAgc2FuaXRpc2VLZXlWYWx1ZXMsXG4gICAgc2FuaXRpc2VMYWJlbFZhbHVlLFxuICAgIHNhbml0aXNlUGFnZU5hbWVcbn0gZnJvbSAnLi9zYW5pdGlzZVZhbHVlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBnZXRBZHNFbmFibGVkLFxuICAgIGdldEFuYWx5dGljc0FjY291bnRJRCxcbiAgICBnZXRBbmFseXRpY3NTdWl0ZSxcbiAgICBnZXRBcHBOYW1lLFxuICAgIGdldEFwcFR5cGUsXG4gICAgZ2V0QXJ0aWNsZUlELFxuICAgIGdldEFydGljbGVMZW5ndGgsXG4gICAgZ2V0QXJ0aWNsZVB1Ymxpc2hlZERhdGUsXG4gICAgZ2V0QXJ0aWNsZVRpdGxlLFxuICAgIGdldEFydGljbGVVcGRhdGVkRGF0ZSxcbiAgICBnZXRDb2xsZWN0aW9uLFxuICAgIGdldERheENvcnAsXG4gICAgZ2V0RG9tYWluRnJvbVVybCxcbiAgICBnZXRFZGl0aW9uLFxuICAgIGdldElzQXBwLFxuICAgIGdldFBhZ2VOYW1lLFxuICAgIGdldFBhZ2VUeXBlLFxuICAgIGdldFJlZmVycmVyLFxuICAgIGdldFNlY3Rpb25TdHJpbmdzLFxuICAgIGdldFNpdGVDYXRhbHlzdENvb2tpZVZhbHVlLFxuICAgIGdldFNpdGVDaGFubmVsLFxuICAgIGdldFNpdGVTZWN0aW9uLFxuICAgIGdldFNpdGVTdWJzZWN0aW9uMSxcbiAgICBnZXRTaXRlU3Vic2VjdGlvbjIsXG4gICAgZ2V0U3luZGljYXRlZFZpZGVvU291cmNlLFxuICAgIGdldFRlc3RHcm91cCxcbiAgICBnZXRUaW1lc3RhbXAsXG4gICAgZ2V0VmVyc2lvbixcbiAgICBzYW5pdGlzZUtleVZhbHVlcyxcbiAgICBzYW5pdGlzZUxhYmVsVmFsdWUsXG4gICAgc2FuaXRpc2VQYWdlTmFtZVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9pbmRleC5qc1xuICoqLyIsImltcG9ydCBjb25maWcgZnJvbSAnY29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWRzRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gY29uZmlnLmlzQWRzRW5hYmxlZCgpID8gMSA6IDA7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFkc0VuYWJsZWQuanNcbiAqKi8iLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFuYWx5dGljc0FjY291bnRJRCgpIHtcbiAgICByZXR1cm4gY29uZmlnLmdldEFuYWx5dGljc0FjY3RJZCgpO1xufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBbmFseXRpY3NBY2NvdW50SUQuanNcbiAqKi8iLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFuYWx5dGljc1N1aXRlKCkge1xuICAgIHJldHVybiBjb25maWcuZ2V0QW5hbHl0aWNzU3VpdGUoKTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QW5hbHl0aWNzU3VpdGUuanNcbiAqKi8iLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFwcE5hbWUoKSB7XG4gICAgcmV0dXJuIGNvbmZpZy5nZXRBcHBOYW1lKCk7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFwcE5hbWUuanNcbiAqKi8iLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFwcFR5cGUoKSB7XG4gICAgaWYgKGNvbmZpZy5pc1Nwb3J0QXBwKCkgfHwgYmJjZG90Y29tLmFuYWx5dGljcy5pc1Njd0hhbmRsZXJVc2VkKSB7XG4gICAgICAgIHJldHVybiAnbW9iaWxlLWFwcCc7XG4gICAgfSBlbHNlIGlmICgodHlwZW9mIG9yYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9yYi5maWcgPT09ICdmdW5jdGlvbicgJiYgb3JiLmZpZygnbWInKSA9PT0gMSlcbiAgICAgICAgfHwgY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCkuaG9zdG5hbWUuc2VhcmNoKC9tLiouYmJjLmNvLykgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdtb2JpbGUtd2ViJztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3dlYic7XG4gICAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBcHBUeXBlLmpzXG4gKiovIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuXG5jb25zdCBOVUwgPSAnbmEnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBcnRpY2xlSUQoaHJlZikge1xuICAgIGlmICh0eXBlb2YgaHJlZiA9PT0gJ3VuZGVmaW5lZCcgfHwgaHJlZiA9PT0gJycpIHtcbiAgICAgICAgaHJlZiA9IGNvbmZpZy5nZXRXaW5kb3dMb2NhdGlvbigpLmhyZWY7XG4gICAgfVxuICAgIGlmICgvLipbXFwtXFwvXShcXGR7Nyw5fSkkLy50ZXN0KGhyZWYpKSB7XG4gICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgfVxuICAgIHJldHVybiBOVUw7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVJRC5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFydGljbGVMZW5ndGgoKSB7XG5cbiAgICAvKiogUmVzcG9uc2l2ZSBOZXdzICovXG4gICAgaWYgKFxuICAgICAgICB0eXBlb2Ygd2luZG93LmNvbmZpZyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdy5jb25maWcuYXNzZXQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cuY29uZmlnLmFzc2V0Lmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LmNvbmZpZy5hc3NldC5sZW5ndGggIT09IG51bGxcbiAgICApIHtcbiAgICAgICAgLy8gUmVzcG9uc2l2ZSBOZXdzXG4gICAgICAgIHJldHVybiB3aW5kb3cuY29uZmlnLmFzc2V0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKiogT25lU3BvcnQgKi9cbiAgICB2YXIgc3RvcnlCb2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3J5LWJvZHknKTtcbiAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBzdG9yeUJvZHkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHN0b3J5Qm9keSAhPT0gbnVsbFxuICAgICkge1xuICAgICAgICByZXR1cm4gZ2V0RWxlbWVudFRleHRMZW5ndGgoc3RvcnlCb2R5KTtcbiAgICB9XG5cbiAgICAvKiogT2xkIFNwb3J0ICovXG4gICAgdmFyIGFydGljbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcnRpY2xlJyk7XG4gICAgaWYgKFxuICAgICAgICB0eXBlb2YgYXJ0aWNsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgYXJ0aWNsZSAhPT0gbnVsbCAmJlxuICAgICAgICBhcnRpY2xlLmxlbmd0aCA9PT0gMVxuICAgICkge1xuICAgICAgICB2YXIgYXJ0aWNsZUVsZW1lbnQgPSBhcnRpY2xlWzBdO1xuICAgICAgICByZXR1cm4gZ2V0RWxlbWVudFRleHRMZW5ndGgoYXJ0aWNsZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8qKiBPbGQgU3BvcnQgTWFwICovXG4gICAgdmFyIGVtcENvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1wLWNvbnRlbnQnKTtcbiAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBlbXBDb250ZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBlbXBDb250ZW50ICE9PSBudWxsXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBnZXRFbGVtZW50VGV4dExlbmd0aChlbXBDb250ZW50KTtcbiAgICB9XG5cbiAgICAvKiogT2xkIFdlYXRoZXIgKi9cbiAgICB2YXIgbGF5b3V0QSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2xheW91dC1ibG9jay1hJyk7XG4gICAgaWYgKFxuICAgICAgICB0eXBlb2YgbGF5b3V0QSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgbGF5b3V0QSAhPT0gbnVsbCAmJlxuICAgICAgICBsYXlvdXRBLmxlbmd0aCA9PT0gMVxuICAgICkge1xuICAgICAgICB2YXIgbGF5b3V0QUVsZW1lbnQgPSBsYXlvdXRBWzBdO1xuICAgICAgICByZXR1cm4gZ2V0RWxlbWVudFRleHRMZW5ndGgobGF5b3V0QUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufTtcblxuZnVuY3Rpb24gZ2V0RWxlbWVudFRleHRMZW5ndGgoZWxlbWVudCkge1xuXG4gICAgLy8gQ2hlY2sgdGhlIGVsZW1lbnRcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8IGVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgZWxlbWVudC5pbm5lclRleHQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBlbGVtZW50LmlubmVyVGV4dCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGVsZW1lbnQuaW5uZXJUZXh0Lmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJUZXh0Lmxlbmd0aCAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIFVzZSBpbm5lclRleHQgYXMgd2UgbmVlZCB0byB0YWtlIGludG8gY29uc2lkZXJhdGlvbiBsYXlvdXQsIGRpc2NvdW50aW5nIGhpZGRlbiBlbGVtZW50cyBldGNcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmlubmVyVGV4dC5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgZWxlbWVudC50ZXh0Q29udGVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBlbGVtZW50LnRleHRDb250ZW50Lmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQubGVuZ3RoICE9PSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgICAgLy8gaW5uZXJUZXh0IGlzIG5vdCBzdXBwb3J0ZWQgaW4gRmlyZWZveCwgc28gdXNlIHRleHRDb250ZW50XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC50ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBcnRpY2xlTGVuZ3RoLmpzXG4gKiovIiwiaW1wb3J0IHV0aWxzIGZyb20gJ3V0aWxzJztcblxuLyoqXG4gKiBAcmV0dXJucyB7Kn0gSHVtYW4tcmVhZGFibGUgKGVnIFwiMjAxMS8xMi8xMiAxMTo1NjoxMFwiKSBPUiBzZWNvbmQgdGltZXN0YW1wXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFydGljbGVQdWJsaXNoZWREYXRlKGFzVGltZXN0YW1wKSB7XG4gICAgdmFyIGRhdGUgPSBudWxsLFxuICAgICAgICBzcG9ydERlc2t0b3BEYXRlID0gdXRpbHMuZ2V0TWV0YU5hbWVDb250ZW50KCdEQ1RFUk1TLmNyZWF0ZWQnKSxcbiAgICAgICAgc3BvcnRSZXNwb25zaXZlRGF0ZSA9IHV0aWxzLmdldE1ldGFQcm9wZXJ0eUNvbnRlbnQoJ3JuZXdzOmRhdGVQdWJsaXNoZWQnKTtcblxuICAgIGlmICh3aW5kb3cuY29uZmlnICYmIHdpbmRvdy5jb25maWcuYXNzZXQgJiYgd2luZG93LmNvbmZpZy5hc3NldC5maXJzdF9jcmVhdGVkICYmIHdpbmRvdy5jb25maWcuYXNzZXQuZmlyc3RfY3JlYXRlZC5kYXRlKSB7XG4gICAgICAgIC8vIFJlc3BvbnNpdmUgTmV3c1xuICAgICAgICAvLyBlZyAyMDE1LTAxLTA4IDAzOjQ0OjMxXG4gICAgICAgIGRhdGUgPSB3aW5kb3cuY29uZmlnLmFzc2V0LmZpcnN0X2NyZWF0ZWQuZGF0ZTtcbiAgICB9IGVsc2UgaWYgKHNwb3J0RGVza3RvcERhdGUgIT09ICcnKSB7XG4gICAgICAgIC8vIFNwb3J0IERlc2t0b3BcbiAgICAgICAgLy8gZWcgMjAxMS8xMi8xMlQxMTo1NjoxMCswMDowMFxuICAgICAgICBkYXRlID0gc3BvcnREZXNrdG9wRGF0ZS5yZXBsYWNlKCdUJywgJyAnKS5yZXBsYWNlKCcrMDA6MDAnLCAnJyk7XG4gICAgfSBlbHNlIGlmIChzcG9ydFJlc3BvbnNpdmVEYXRlICE9PSAnJykge1xuICAgICAgICAvLyBTcG9ydCBSZXNwb25zaXZlXG4gICAgICAgIC8vIGVnIDIwMTUvMDkvMjMgOTo0NTozNlxuICAgICAgICBkYXRlID0gc3BvcnRSZXNwb25zaXZlRGF0ZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0ZSA9PT0gbnVsbCB8fCBkYXRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBkYXRlID0gZGF0ZS5yZXBsYWNlKC8tL2csICcvJyk7XG5cbiAgICBpZiAodHlwZW9mIGFzVGltZXN0YW1wICE9PSAndW5kZWZpbmVkJyAmJiBhc1RpbWVzdGFtcCA9PT0gdHJ1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIChEYXRlLnBhcnNlKGRhdGUpKSAvIDEwMDA7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QXJ0aWNsZVB1Ymxpc2hlZERhdGUuanNcbiAqKi8iLCJpbXBvcnQgYW5hbHl0aWNzSGVscGVyIGZyb20gJ2FuYWx5dGljcy9oZWxwZXInO1xuaW1wb3J0IHtzYW5pdGlzZUxhYmVsVmFsdWV9IGZyb20gJ2FuYWx5dGljcy91dGlscy9zYW5pdGlzZVZhbHVlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFydGljbGVUaXRsZSgpIHtcbiAgICByZXR1cm4gc2FuaXRpc2VMYWJlbFZhbHVlKGFuYWx5dGljc0hlbHBlci5nZXRQYWdlTmFtZSgpKS5yZXBsYWNlKC9bXFxzXS9nLCAnXycpLnJlcGxhY2UoL197Mix9L2csICdfJyk7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVUaXRsZS5qc1xuICoqLyIsImV4cG9ydCBmdW5jdGlvbiBzYW5pdGlzZUxhYmVsVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1smPVxcLzw+XS9nLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGlzZUtleVZhbHVlcyhrZXlWYWx1ZXMpIHtcbiAgICB2YXIgY2xlYW5LdnMgPSB7fTtcbiAgICBmb3IgKGxldCBrZXkgaW4ga2V5VmFsdWVzKSB7XG4gICAgICAgIGlmIChrZXlWYWx1ZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgaWYgKGtleVZhbHVlc1trZXldICE9PSAnJyAmJiBrZXlWYWx1ZXNba2V5XSAhPT0gbnVsbCAmJiBrZXlWYWx1ZXNba2V5XSAhPT0gJ25hJykge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdCBpbmNsdWRlIGxhYmVsIChrZXktdmFsdWUpIGlmIGVtcHR5LlxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB3ZSBkbyBub3Qgc2VuZCBpbnRlZ2Vycy9udW1iZXJzL2Zsb2F0cyBidXQgc3RyaW5ncyBCQkNDT00tNjI4OFxuICAgICAgICAgICAgICAgIGNsZWFuS3ZzW2tleV0gPSAoaXNOYU4oa2V5VmFsdWVzW2tleV0pID8ga2V5VmFsdWVzW2tleV0gOiBTdHJpbmcoa2V5VmFsdWVzW2tleV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xlYW5LdnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGlzZVBhZ2VOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1tcXHNdL2csICdfJykucmVwbGFjZSgvWyY9XFwvPD4rP10vZywgJycpLnJlcGxhY2UoL197Mix9L2csICdfJyk7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL3Nhbml0aXNlVmFsdWVzLmpzXG4gKiovIiwiaW1wb3J0IHV0aWxzIGZyb20gJ3V0aWxzJztcblxudmFyIGdldFNwb3J0UmVzcG9uc2l2ZVVwZGF0ZWRUaW1lc3RhbXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRpbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGltZVtkYXRhLXRpbWVzdGFtcF0nKTtcblxuICAgIGlmICh0eXBlb2YgdGltZUVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICF0aW1lRWxlbWVudCB8fCB0aW1lRWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdGltZXN0YW1wID0gdGltZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRpbWVzdGFtcCcpO1xuXG4gICAgaWYgKHR5cGVvZiB0aW1lc3RhbXAgPT09ICd1bmRlZmluZWQnIHx8ICF0aW1lc3RhbXAgfHwgdGltZXN0YW1wID09PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aW1lc3RhbXA7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBcnRpY2xlVXBkYXRlZERhdGUoYXNUaW1lc3RhbXAgPSBmYWxzZSkge1xuICAgIHZhciBkYXRlID0gbnVsbCxcbiAgICAgICAgc3BvcnREZXNrdG9wRGF0ZSA9IHV0aWxzLmdldE1ldGFOYW1lQ29udGVudCgnRENURVJNUy5tb2RpZmllZCcpLFxuICAgICAgICBzcG9ydFJlc3BvbnNpdmVEYXRlID0gZ2V0U3BvcnRSZXNwb25zaXZlVXBkYXRlZFRpbWVzdGFtcCgpO1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuY29uZmlnICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmNvbmZpZy5hc3NldCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgJiYgdHlwZW9mIHdpbmRvdy5jb25maWcuYXNzZXQubGFzdF91cGRhdGVkICE9PSBudWxsXG4gICAgICAgICYmIHR5cGVvZiB3aW5kb3cuY29uZmlnLmFzc2V0Lmxhc3RfdXBkYXRlZCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgJiYgdHlwZW9mIHdpbmRvdy5jb25maWcuYXNzZXQubGFzdF91cGRhdGVkLmRhdGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICAgIC8vIFJlc3BvbnNpdmUgTmV3c1xuICAgICAgICAvLyBlZyAyMDE1LTAxLTA4IDAzOjQ0OjMxXG4gICAgICAgIGRhdGUgPSB3aW5kb3cuY29uZmlnLmFzc2V0Lmxhc3RfdXBkYXRlZC5kYXRlO1xuICAgIH0gZWxzZSBpZiAoc3BvcnREZXNrdG9wRGF0ZSAhPT0gJycpIHtcbiAgICAgICAgLy8gU3BvcnQgRGVza3RvcFxuICAgICAgICAvLyBlZyAyMDExLzEyLzEyVDExOjU2OjEwKzAwOjAwXG4gICAgICAgIGRhdGUgPSBzcG9ydERlc2t0b3BEYXRlLnJlcGxhY2UoJ1QnLCAnICcpLnJlcGxhY2UoJyswMDowMCcsICcnKTtcbiAgICB9IGVsc2UgaWYgKHNwb3J0UmVzcG9uc2l2ZURhdGUpIHtcbiAgICAgICAgcmV0dXJuIHNwb3J0UmVzcG9uc2l2ZURhdGU7IC8vIEFscmVhZHkgYSB0aW1lc3RhbXBcbiAgICB9XG5cbiAgICBpZiAoZGF0ZSA9PT0gbnVsbCB8fCBkYXRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFzVGltZXN0YW1wICE9PSAndW5kZWZpbmVkJyAmJiBhc1RpbWVzdGFtcCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gKG5ldyBEYXRlKGRhdGUucmVwbGFjZSgvXFwvL2csICctJykucmVwbGFjZSgnICcsICdUJykpLmdldFRpbWUoKSkgLyAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZS5yZXBsYWNlKC8tL2csICcvJyk7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVVcGRhdGVkRGF0ZS5qc1xuICoqLyIsImltcG9ydCBrZXlWYWx1ZXMgZnJvbSAnYWR2ZXJ0cy9rZXlWYWx1ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb2xsZWN0aW9uKCkge1xuICAgIHJldHVybiAgKFxuICAgICAgICBrZXlWYWx1ZXMuZ2V0KCdrZXl3b3JkJykgIT09IGZhbHNlID9cbiAgICAgICAgICAgIGtleVZhbHVlcy5nZXQoJ2tleXdvcmQnKS50b0xvd2VyQ2FzZSgpIDpcbiAgICAgICAgICAgICcnXG4gICAgKTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0Q29sbGVjdGlvbi5qc1xuICoqLyIsImltcG9ydCBjb25maWcgZnJvbSAnY29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RGF4Q29ycCgpIHtcbiAgICByZXR1cm4gY29uZmlnLmdldERheEVudmlyb25tZW50cygpLmpvaW4oJ18nKTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0RGF4Q29ycC5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvbWFpbih1cmkpIHtcbiAgICBjb25zdCByZSA9IC9odHRwKHxzKTpcXC9cXC8oW15cXC9dKykoLiopPy87XG4gICAgY29uc3QgbWF0Y2ggPSByZS5leGVjKHVyaSk7XG4gICAgcmV0dXJuIGBodHRwJHttYXRjaFsxXX06Ly8ke21hdGNoWzJdfWA7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldERvbWFpbkZyb21VcmwuanNcbiAqKi8iLCJpbXBvcnQgYW5hbHl0aWNzSGVscGVyIGZyb20gJ2FuYWx5dGljcy9oZWxwZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRFZGl0aW9uKCkge1xuICAgIHJldHVybiBhbmFseXRpY3NIZWxwZXIuZ2V0UGFnZUVkaXRpb24oKS50b0xvd2VyQ2FzZSgpXG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEVkaXRpb24uanNcbiAqKi8iLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldElzQXBwKCkge1xuICAgIHJldHVybiAoY29uZmlnLmlzU3BvcnRBcHAoKSB8fCBiYmNkb3Rjb20uYW5hbHl0aWNzLmlzU2N3SGFuZGxlclVzZWQpID8gMSA6IDA7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldElzQXBwLmpzXG4gKiovIiwiaW1wb3J0IGFuYWx5dGljc0hlbHBlciBmcm9tICdhbmFseXRpY3MvaGVscGVyJztcbmltcG9ydCB7c2FuaXRpc2VQYWdlTmFtZX0gZnJvbSAnYW5hbHl0aWNzL3V0aWxzL3Nhbml0aXNlVmFsdWVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFnZU5hbWUoKSB7XG4gICAgcmV0dXJuIHNhbml0aXNlUGFnZU5hbWUoYW5hbHl0aWNzSGVscGVyLmdldFBhZ2VOYW1lQ29tU2NvcmUoKSk7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFBhZ2VOYW1lLmpzXG4gKiovIiwiaW1wb3J0IGFuYWx5dGljc0hlbHBlciBmcm9tICdhbmFseXRpY3MvaGVscGVyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFnZVR5cGUodXJpKSB7XG4gICAgdmFyIHNpdGVDYXRhbHlzdFBhZ2VUeXBlID0gYW5hbHl0aWNzSGVscGVyLmdldFBhZ2VUeXBlKHVyaSkudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBtYXBwaW5nVGFibGUgPSB7XG4gICAgICAgICdpbmRleCc6ICdpZHh8bmEnLFxuICAgICAgICAnc3RvcnknOiAnc3R5fG5hJyxcbiAgICAgICAgJ3N0b3J5LXZpZGVvJzogJ3N0eXx2aWQnLFxuICAgICAgICAnbGl2ZS1ldmVudCc6ICdsaXZ8bmEnLFxuICAgICAgICAndmlkZW8nOiAnbWFwfG1wcycsXG4gICAgICAgICd2aWRlby1zdGlja3knOiAndmlkfHN0aScsXG4gICAgICAgICd2aWRlby1lbWJlZCc6ICd2aWR8ZW1iJ1xuICAgIH07XG4gICAgcmV0dXJuICh0eXBlb2YgbWFwcGluZ1RhYmxlW3NpdGVDYXRhbHlzdFBhZ2VUeXBlXSAhPT0gJ3VuZGVmaW5lZCcgPyBtYXBwaW5nVGFibGVbc2l0ZUNhdGFseXN0UGFnZVR5cGVdIDogJ25hfG5hJyk7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFBhZ2VUeXBlLmpzXG4gKiovIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSZWZlcnJlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBkb2N1bWVudC5yZWZlcnJlciAhPT0gY29uZmlnLmdldFJlZmVycmVyKCkgP1xuICAgICAgICAgICAgY29uZmlnLmdldFJlZmVycmVyKCkuc3Vic3RyKDAsIDI1NSkgOlxuICAgICAgICAgICAgJydcbiAgICApXG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFJlZmVycmVyLmpzXG4gKiovIiwiaW1wb3J0IGFuYWx5dGljc0hlbHBlciBmcm9tICdhbmFseXRpY3MvaGVscGVyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2VjdGlvblN0cmluZ3MoKSB7XG4gICAgcmV0dXJuIGFuYWx5dGljc0hlbHBlci5kZXRlcm1pbmVTZWN0aW9ucygnLicpO1xufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRTZWN0aW9uU3RyaW5ncy5qc1xuICoqLyIsImltcG9ydCB1dGlscyBmcm9tICd1dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNpdGVDYXRhbHlzdENvb2tpZVZhbHVlKCkge1xuICAgIGNvbnN0IHNpdGVDYXRhbHlzdENvb2tpZVZhbHVlID0gdXRpbHMuZ2V0Q29va2llKCdzX3ZpJyk7ICAvLyBXaWxsIGJlIFwidW5kZWZpbmVkXCIgd2hlbiBvbiBcInd3dy5iYmMuY28udWtcIiBiZWNhdXNlIGl0J3MgYSBcIi5jb21cIiBjb29raWVcbiAgICByZXR1cm4gKHR5cGVvZiBzaXRlQ2F0YWx5c3RDb29raWVWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyBzaXRlQ2F0YWx5c3RDb29raWVWYWx1ZSA6ICcnKTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0U2l0ZUNhdGFseXN0Q29va2llVmFsdWUuanNcbiAqKi8iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTaXRlQ2hhbm5lbChzZWN0aW9ucykge1xuICAgIHJldHVybiBzZWN0aW9uc1swXTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0U2l0ZUNoYW5uZWwuanNcbiAqKi8iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTaXRlU2VjdGlvbihzZWN0aW9ucykge1xuICAgIHJldHVybiAoc2VjdGlvbnNbMV0gPT09IHNlY3Rpb25zWzBdID8gJycgOiBzZWN0aW9uc1sxXSk7ICAvLyBCQkNDT00tNjQzMVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRTaXRlU2VjdGlvbi5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNpdGVTdWJzZWN0aW9uMShzZWN0aW9ucykge1xuICAgIHJldHVybiAoc2VjdGlvbnNbMl0gPT09IHNlY3Rpb25zWzFdID8gJycgOiBzZWN0aW9uc1syXSk7ICAvLyBCQkNDT00tNjQzMVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRTaXRlU3Vic2VjdGlvbjEuanNcbiAqKi8iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTaXRlU3Vic2VjdGlvbjIoc2VjdGlvbnMpIHtcbiAgICByZXR1cm4gKHNlY3Rpb25zWzNdID09PSBzZWN0aW9uc1syXSA/ICcnIDogc2VjdGlvbnNbM10pOyAgLy8gQkJDQ09NLTY0MzFcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0U2l0ZVN1YnNlY3Rpb24yLmpzXG4gKiovIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuXG4vKipcbiAqIEN1cnJlbnRseSB3ZSBvbmx5IHN5bmRpY2F0ZSB2aWRlbyB0byB0d2l0dGVyIHNvIGlmIHRoZSBwYWdlIGlzIG9mIHR5cGUgVklERU8tRU1CRUQgdGhlbiB3ZSBjYW4gYXNzdW1lXG4gKiB3ZSBhcmUgZW1iZWRkZWQgaW4gdHdpdHRlci4gV2UgY2FuIGxvb2sgaW50byBjaGFuZ2luZyB0aGlzIGRvd24gdGhlIGxpbmUgYXMgYW5kIHdoZW4gcmVxdWlyZWQuXG4gKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3luZGljYXRlZFZpZGVvU291cmNlKCkge1xuICAgIHJldHVybiBjb25maWcuZ2V0VHlwZSgpID09PSAnVklERU8tRU1CRUQnID8gJ3R3aXR0ZXInIDogbnVsbDtcbn07XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFN5bmRpY2F0ZWRWaWRlb1NvdXJjZS5qc1xuICoqLyIsImltcG9ydCB1dGlscyBmcm9tICd1dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRlc3RHcm91cCgpIHtcbiAgICByZXR1cm4gdXRpbHMuZ2V0Q29va2llKCd0ZXN0X2dyb3VwJykgfHwgJ3VuZGVmaW5lZCc7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFRlc3RHcm91cC5qc1xuICoqLyIsIi8qKlxuICogQ3JlYXRlIFRpbWVzdGFtcCAtIEphdmFTY3JpcHQgdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kc1xuICogZWcgMTQyNDQ1MjU5OTAwMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lc3RhbXAoKSB7XG4gICAgaWYgKCFEYXRlLm5vdykge1xuICAgICAgICAvLyBJRTggJiBiZWxvd1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGUubm93KCk7XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFRpbWVzdGFtcC5qc1xuICoqLyIsImltcG9ydCBjb25maWcgZnJvbSAnY29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHtcbiAgICByZXR1cm4gY29uZmlnLmdldFZlcnNpb24oKTtcbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0VmVyc2lvbi5qc1xuICoqLyIsImltcG9ydCB1dGlscyBmcm9tICd1dGlscyc7XG5cbmNvbnN0IE9MRF9VU0VSX1RSQUNLSU5HX0NPT0tJRSA9ICdja3BmX3VpZCc7XG5jb25zdCBVU0VSX1RSQUNLSU5HX0NPT0tJRSA9ICdja3BmX3NzY2lkJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VXNlclRyYWNraW5nQ29va2llKCkge1xuICAgIGxldCBvbGRWYWx1ZSA9IHV0aWxzLmdldENvb2tpZShPTERfVVNFUl9UUkFDS0lOR19DT09LSUUpO1xuICAgIGxldCBuZXdWYWx1ZSA9IHV0aWxzLmdldENvb2tpZShVU0VSX1RSQUNLSU5HX0NPT0tJRSk7XG5cbiAgICBpZiAodHlwZW9mIG5ld1ZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiBuZXdWYWx1ZSAhPT0gMCkge1xuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2xkVmFsdWUgIT09ICd1bmRlZmluZWQnICYmIG9sZFZhbHVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXR1cm4gb2xkVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRVc2VyVHJhY2tpbmdDb29raWUuanNcbiAqKi8iLCJ2YXIgbG9nID0gcmVxdWlyZSgnbG9nZ2VyJykoJ2FuYWx5dGljczpjb21TY29yZTpzdHJlYW1TZW5zZScpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xuaW1wb3J0IHtnZXRDb3JlS2V5VmFsdWVzLCBhcHBlbmRQYWdlQ29yZUtleVZhbHVlc30gZnJvbSAnYW5hbHl0aWNzL2NvbVNjb3JlSGVscGVycyc7XG52YXIgYW5hbHl0aWNzSGVscGVyID0gcmVxdWlyZSgnYW5hbHl0aWNzL2hlbHBlcicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcbmltcG9ydCB7c2FuaXRpc2VLZXlWYWx1ZXMsIHNhbml0aXNlUGFnZU5hbWV9IGZyb20gJ2FuYWx5dGljcy91dGlscy9zYW5pdGlzZVZhbHVlcyc7XG5cbnZhciBVTktOT1dOID0gJyc7XG5cbmNsYXNzIFN0cmVhbVNlbnNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN0cmVhbVNlbnNlID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWRlb0V2ZW50cyA9IFtdO1xuICAgICAgICB0aGlzLnZpZGVvUHJlcm9sbFdhc1BsYXllZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBsYXlsaXN0Q291bnQgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2UgdGhlIHN0cmVhbXNlbnNlIG1vZHVsZVxuICAgICAqL1xuICAgIGluaXQoKSB7XG4gICAgICAgIC8vIENvbnN0cnVjdCBzdHJlYW1TZW5zZSAoL3NjcmlwdC92ZW5kb3IvY29tc2NvcmUvc3RyZWFtc2Vuc2UuanMpXG4gICAgICAgIHRoaXMuc3RyZWFtU2Vuc2UgPSBuZXcgbnNfLlN0cmVhbVNlbnNlKFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICBhbmFseXRpY3NIZWxwZXIuZ2V0QW5hbHl0aWNzVXJpKClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgZnJvbSAvYXYvZW1wL2FuYWx5dGljcy5qcyBhbmQgc2hvdWxkIG9ubHkgYmUgZXhlY3V0ZWQgb25jZSBwZXIgdmlkZW8gdmlld2luZy5cbiAgICAgKiBJdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UgdGhlIHZpZGVvIHN0YXJ0cyBwbGF5aW5nIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICAgKlxuICAgICAqIFRyaWdnZXJlZCB3aGVuIHBsYXlsaXN0IGlzIGxvYWRlZCBhbmQgdmlkZW8gc3RhcnRzIHRvIHBsYXkgKGVpdGhlciAnYWQnIG9yICdwcm9ncmFtbWUnKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgZGF0YSBlZ1xuICAgICAqICAgICBhZElkOiBudWxsXG4gICAgICogICAgIG1lZGlhSWQ6IGZhbHNlXG4gICAgICogICAgIG1lZGlhTGVuZ3RoOiAzNC4zNjZcbiAgICAgKiAgICAgbWVkaWFOYW1lOiBcIkZpZmEncyBKZXJvbWUgVmFsY2tlXCJcbiAgICAgKiAgICAgbWVkaWFPZmZzZXQ6IDM0LjExMlxuICAgICAqICAgICBtZWRpYVBsYXllck5hbWU6IFwic21wLWZsYXNoXCJcbiAgICAgKiAgICAgbWVkaWFUeXBlOiBcInByb2dyYW1tZVwiXG4gICAgICogICAgIG1pbGVzdG9uZXM6IEFycmF5WzBdXG4gICAgICogICAgIHBsYXlUeXBlOiBcIkFQXCJcbiAgICAgKi9cbiAgICBzdGFydFBsYXlsaXN0KGRhdGEpIHtcbiAgICAgICAgbG9nKCdjb21zY29yZSBzdGFydFBsYXlsaXN0Jyk7XG4gICAgICAgIHRoaXMuaXNQbGF5bGlzdFN0YXJ0ZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMudmlkZW9QcmVyb2xsV2FzUGxheWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGxheWxpc3RDb3VudCsrO1xuXG4gICAgICAgIHRoaXMuX3NldFBlcnNpc3RlbnRMYWJlbHMoZGF0YSk7XG4gICAgICAgIHRoaXMuX3NldFBsYXlsaXN0TGFiZWxzKGRhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkdmVydCBpcyByZXF1ZXN0ZWRcbiAgICAgKi9cbiAgICBhZFJlcXVlc3QoZGF0YSkge1xuICAgICAgICB0aGlzLl9zdHJlYW1TZW5zZU5vdGlmeSgnY3VzdG9tJywgMCwge25zX3N0X2V2OiAnYWRfcmVxdWVzdCd9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZCBNYW5hZ2VyIExvYWRlZFxuICAgICAqL1xuICAgIGFkTWFuYWdlckxvYWRlZChkYXRhKSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbVNlbnNlTm90aWZ5KCdjdXN0b20nLCAwLCB7bnNfc3RfZXY6ICdhZF9sb2FkZWQnfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWR2ZXJ0IGhhcyBzdGFydGVkL2JlZ3VuL2NvbW1lbmNlZFxuICAgICAqL1xuICAgIHN0YXJ0QWR2ZXJ0KGRhdGEpIHtcbiAgICAgICAgLy8gTGVuZ3RoIGlzIHByb2dyYW1tZSBsZW5ndGgsIG5vdCBhZHZlcnQgbGVuZ3RoXG4gICAgICAgIGRhdGEubWVkaWFMZW5ndGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBrZXlWYWx1ZXMgPSB0aGlzLl9nZXRDbGlwS2V5VmFsdWVzKGRhdGEsICdhZHZlcnQnKSxcbiAgICAgICAgICAgIHBvc2l0aW9uSGVhZCA9IDA7ICAvLyBwcmUtcm9sbCB3aWxsIGFsd2F5cyBzdGFydCBhdCAwXG4gICAgICAgIHRoaXMuX3N0cmVhbVNlbnNlU2V0dGVyKCdjbGlwJywga2V5VmFsdWVzKTtcbiAgICAgICAgdGhpcy5fc3RyZWFtU2Vuc2VOb3RpZnkoJ3BsYXknLCBwb3NpdGlvbkhlYWQpO1xuICAgICAgICB0aGlzLnZpZGVvUHJlcm9sbFdhc1BsYXllZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWR2ZXJ0IGhhcyBlbmRlZC9maW5pc2hlZC9jb21wbGV0ZWRcbiAgICAgKi9cbiAgICBlbmRBZHZlcnQoZGF0YSkge1xuICAgICAgICAvLyBFbmQgYWR2ZXJ0IGNsaXAgYmVjYXVzZSBwcm9ncmFtbWUgaGFzIHN0YXJ0ZWRcbiAgICAgICAgdmFyIGNsaXAgPSB0aGlzLnN0cmVhbVNlbnNlLmdldENsaXAoKSxcbiAgICAgICAgICAgIHBvc2l0aW9uSGVhZCA9ICh0eXBlb2YgY2xpcCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNsaXAuZ2V0UGxheWJhY2tUaW1lID09PSAnZnVuY3Rpb24nID8gY2xpcC5nZXRQbGF5YmFja1RpbWUoKSA6IDApO1xuICAgICAgICBjbGlwLnNldExhYmVsKCduc19zdF9jbCcsIFN0cmluZyhwb3NpdGlvbkhlYWQpKTsgIC8vIGNhbm5vdCBydW4gc2V0Q2xpcCgpIHdoaWxzdCBpbiAncGxheScgbW9kZSwgaW5zdGVhZCB1c2UgZ2V0Q2xpcCgpLnNldExhYmVsKClcbiAgICAgICAgY2xpcC5zZXRMYWJlbCgnbnNfc3RfZWwnLCBTdHJpbmcocG9zaXRpb25IZWFkKSk7ICAvLyBjYW5ub3QgcnVuIHNldENsaXAoKSB3aGlsc3QgaW4gJ3BsYXknIG1vZGUsIGluc3RlYWQgdXNlIGdldENsaXAoKS5zZXRMYWJlbCgpXG4gICAgICAgIHRoaXMuX3N0cmVhbVNlbnNlTm90aWZ5KCdlbmQnLCAocG9zaXRpb25IZWFkIC8gMTAwMCkpOyAgLy8gc2Vjb25kcy4gQ29udmVydCBwb3NpdGlvbkhlYWQgZnJvbSBtaWxsaXNlY29uZHMgdG8gc2Vjb25kcy5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgZnJvbSAvYXYvZW1wL2FuYWx5dGljcy5qcyB3aGVuIHRoZSBwcm9ncmFtbWUvY29udGVudCBzdGFydHMgdG8gcGxheVxuICAgICAqIGFuZCBpcyBvbmx5IHRyaWdnZXJlZCBvbmNlIHN0YXJ0UGxheWxpc3QoKSBoYXMgYmVlbiB0cmlnZ2VyZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHRyaWdnZXJlZCBvbmNlIHByb2dyYW1tZSBoYXMgc3RhcnRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgZGF0YSBlZ1xuICAgICAqICAgICB7IGFkSWQ6ICAgMTIzNDUsIG1lZGlhSWQ6IGZhbHNlLCBtZWRpYUxlbmd0aDogODgsIG1lZGlhTmFtZTogXCJTdG9yeSBOYW1lXCIsXG4gICAgICogICAgICAgbWVkaWFPZmZzZXQ6IDAsIG1lZGlhUGxheWVyTmFtZTogXCJzbXAtZmxhc2hcIiwgbWVkaWFUeXBlOiBcInByb2dyYW1tZVwiIH1cbiAgICAgKi9cbiAgICBzdGFydFByb2dyYW1tZShkYXRhKSB7XG4gICAgICAgIHZhciBrZXlWYWx1ZXMgPSB0aGlzLl9nZXRDbGlwS2V5VmFsdWVzKGRhdGEsICdwbGF5Jyk7XG4gICAgICAgIHRoaXMuX3N0cmVhbVNlbnNlU2V0dGVyKCdjbGlwJywga2V5VmFsdWVzKTtcbiAgICAgICAgdGhpcy5fc3RyZWFtU2Vuc2VOb3RpZnkoJ3BsYXknLCBkYXRhLm1lZGlhT2Zmc2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgZnJvbSAvYXYvZW1wL2FuYWx5dGljcy5qcyB3aGVuIHByb2dyYW1tZS9jb250ZW50cyBmaW5pc2hlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgZGF0YSBlZ1xuICAgICAqICAgICB7IGFkSWQ6ICAgMTIzNDUsIG1lZGlhSWQ6IGZhbHNlLCBtZWRpYUxlbmd0aDogODgsIG1lZGlhTmFtZTogXCJTdG9yeSBOYW1lXCIsXG4gICAgICogICAgICAgbWVkaWFPZmZzZXQ6IDAsIG1lZGlhUGxheWVyTmFtZTogXCJzbXAtZmxhc2hcIiwgbWVkaWFUeXBlOiBcInByb2dyYW1tZVwiIH1cbiAgICAgKi9cbiAgICBlbmRQcm9ncmFtbWUoZGF0YSkge1xuICAgICAgICB0aGlzLl9zdHJlYW1TZW5zZU5vdGlmeSgnZW5kJywgKHBhcnNlSW50KGRhdGEubWVkaWFPZmZzZXQsIDEwKSA9PT0gMCA/IGRhdGEubWVkaWFMZW5ndGggOiBkYXRhLm1lZGlhT2Zmc2V0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGZyb20gL2F2L2VtcC9hbmFseXRpY3MuanMgYW5kIHNob3VsZCBvbmx5IGJlIGV4ZWN1dGVkIG9uY2UgcGVyIHZpZGVvIHZpZXdpbmcuXG4gICAgICogSXQgaXMgZXhlY3V0ZWQgb25seSBvbmNlIHRoZSBwbGF5bGlzdCBoYXMgZmluaXNoZWQgZ29pbmcgdGhyb3VnaCBlYWNoIGl0ZW0uXG4gICAgICpcbiAgICAgKiBUcmlnZ2VyZWQgd2hlbiBwbGF5bGlzdCBpcyB1bmxvYWRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgZGF0YSBlZ1xuICAgICAqICAgICB7IGFkSWQ6ICAgMTIzNDUsIG1lZGlhSWQ6IGZhbHNlLCBtZWRpYUxlbmd0aDogODgsIG1lZGlhTmFtZTogXCJTdG9yeSBOYW1lXCIsXG4gICAgICAqICAgICAgIG1lZGlhT2Zmc2V0OiAwLCBtZWRpYVBsYXllck5hbWU6IFwic21wLWZsYXNoXCIsIG1lZGlhVHlwZTogXCJwcm9ncmFtbWVcIiB9XG4gICAgICovXG4gICAgZW5kUGxheWxpc3QoZGF0YSkge1xuICAgICAgICAvLyBOb3QgbmVlZGVkIHlldFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhdXNlIHN0YXJ0ZWQgKHBhdXNlIGJ1dHRvbiBwcmVzc2VkKVxuICAgICAqL1xuICAgIHN0YXJ0UGF1c2UoZGF0YSkge1xuICAgICAgICB0aGlzLl9zdHJlYW1TZW5zZU5vdGlmeSgncGF1c2UnLCBkYXRhLm1lZGlhT2Zmc2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXVzZSBmaW5pc2hlZCAocGxheSBidXR0b24gcHJlc3NlZClcbiAgICAgKi9cbiAgICBlbmRQYXVzZShkYXRhKSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbVNlbnNlTm90aWZ5KCdwbGF5JywgZGF0YS5tZWRpYU9mZnNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnRlZCBzZWVraW5nL3NjcnViYmluZ1xuICAgICAqL1xuICAgIHN0YXJ0U2VlayhkYXRhKSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbVNlbnNlTm90aWZ5KCdzZWVrJywgZGF0YS5tZWRpYU9mZnNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluaXNoZWQgc2Vla2luZy9zY3J1YmJpbmdcbiAgICAgKi9cbiAgICBlbmRTZWVrKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fc3RyZWFtU2Vuc2VOb3RpZnkoJ3BsYXknLCBkYXRhLm1lZGlhT2Zmc2V0KTtcbiAgICB9XG5cbiAgICBpc1BsYXlsaXN0U3RhcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNQbGF5bGlzdFN0YXJ0ZWQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAqIFBSSVZBVEUgTUVUSE9EU1xuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwZXJzaXN0ZW50IGxhYmVscyBvbiBTdHJlYW1TZW5zZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0UGVyc2lzdGVudExhYmVscyhkYXRhKSB7XG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbGFiZWxzIGFyZSBpbnRlbmRlZCB0byBiZSBzZXQgYXMgcGVyc2lzdGVudCBsYWJlbHMgYmVjYXVzZSB0aGV5IGNhcHR1cmUgZGV0YWlsIGFib3V0IHRoZSBwbGF5YmFja1xuICAgICAgICAvLyBlbnZpcm9ubWVudCAodGhlIHBsYXllcikgd2hpY2ggYXJlIG5vdCBtZXRhZGF0YSBvZiB0aGUgbWVkaWEgdGhhdCBpcyBiZWluZyBwbGF5ZWQuXG5cbiAgICAgICAgdmFyIGMxID0gYmJjZG90Y29tLnV0aWxzLmlzU3RyaW5nKGRhdGEubWVkaWFQbGF5ZXJOYW1lKSAmJiBkYXRhLm1lZGlhUGxheWVyTmFtZS5pbmNsdWRlcygnZmxhc2gnKSA/ICcxOScgOiAnMic7XG5cbiAgICAgICAgdmFyIGtleVZhbHVlcyA9IGdldENvcmVLZXlWYWx1ZXMoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYzE6IGMxLFxuICAgICAgICAgICAgICAgIGMyOiBjb25maWcuZ2V0QW5hbHl0aWNzQWNjdElkKCksXG4gICAgICAgICAgICAgICAgYzM6ICcqbnVsbCcsICAgICAgICAvLyBObyBsb2dpY2FsIHZhbHVlIGJ1dCBzdGlsbCBuZWVkcyB0byBiZSBzZXQgQEJCQ0NPTS03NzQ2XG4gICAgICAgICAgICAgICAgYzQ6ICcqbnVsbCcsICAgICAgICAvLyBObyBsb2dpY2FsIHZhbHVlIGJ1dCBzdGlsbCBuZWVkcyB0byBiZSBzZXQgQEJCQ0NPTS03NzQ2XG4gICAgICAgICAgICAgICAgYzU6ICcqbnVsbCcsICAgICAgICAvLyBObyBsb2dpY2FsIHZhbHVlIGJ1dCBzdGlsbCBuZWVkcyB0byBiZSBzZXQgQEJCQ0NPTS03NzQ2XG4gICAgICAgICAgICAgICAgYl9hdl9hY3Rpb246IHRoaXMuX2dldEFWQWN0aW9uKGRhdGEudmlkZW9QbGF5c0F1dG9tYXRpY2FsbHkpLFxuICAgICAgICAgICAgICAgIG5zX3N0X2JyOiBVTktOT1dOLCAgICAgICAgLy8gUGxheWJhY2sgQml0IFJhdGUgQHRvZG8gcmVxdWlyZSBhZGRpdGlvbmFsIGluZm8gZnJvbSBwbGF5ZXJcbiAgICAgICAgICAgICAgICBuc19zdF9jczogVU5LTk9XTiwgICAgICAgIC8vIFZpZGVvIERpbWVuc2lvbnMgQHRvZG8gcmVxdWlyZSBhZGRpdGlvbmFsIGluZm8gZnJvbSBwbGF5ZXJcbiAgICAgICAgICAgICAgICBuc19zdF9pdDogJ2MnLCAgICAgICAgICAgIC8vID8/XG4gICAgICAgICAgICAgICAgbnNfc3RfbXA6IGRhdGEubWVkaWFQbGF5ZXJOYW1lIHx8IFVOS05PV04sIC8vIE1lZGlhIFBsYXllciBOYW1lXG4gICAgICAgICAgICAgICAgbnNfc3RfbXY6IFVOS05PV04sICAgICAgICAvLyBNZWRpYSBQbGF5ZXIgVmVyc2lvblxuICAgICAgICAgICAgICAgIG5zX3N0X3ZvOiBVTktOT1dOLCAgICAgICAgLy8gUGxheWVyIFZvbHVtZSBMZXZlbCBAdG9kbyByZXF1aXJlIGFkZGl0aW9uYWwgaW5mbyBmcm9tIHBsYXllclxuICAgICAgICAgICAgICAgIG5zX3N0X3dzOiAnbm9ybScsICAgICAgICAgLy8gUGxheWVyIFdpbmRvdyBTdGF0ZSBAdG9kbyB3aGVuIGZ1bGwgc2NyZWVuLCBjaGFuZ2UgdG8gXCJmdWxsXCJcbiAgICAgICAgICAgICAgICBuc19zdF9lcDogJypudWxsJywgICAgICAgICAvLyBObyBsb2dpY2FsIHZhbHVlIGJ1dCBzdGlsbCBuZWVkcyB0byBiZSBzZXQgQEJCQ0NPTS03NzQ2XG4gICAgICAgICAgICAgICAgbnNfc3Rfc246ICcqbnVsbCcgICAgICAgICAvLyBObyBsb2dpY2FsIHZhbHVlIGJ1dCBzdGlsbCBuZWVkcyB0byBiZSBzZXQgQEJCQ0NPTS03NzQ2XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGtleVZhbHVlcyA9IGFwcGVuZFBhZ2VDb3JlS2V5VmFsdWVzKGtleVZhbHVlcyk7XG4gICAgICAgIHRoaXMuX3N0cmVhbVNlbnNlU2V0dGVyKCdsYWJlbHMnLCBrZXlWYWx1ZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgcGxheWxpc3QtbGV2ZWwgbGF2ZWxzIG9uIFN0cmVhbVNlbnNlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRQbGF5bGlzdExhYmVscyhkYXRhKSB7XG4gICAgICAgIHZhciBwbGF5bGlzdEtleVZhbHVlcyA9IHtcbiAgICAgICAgICAgIGJfYXZfYWQ6IChjb25maWcuaXNBZHNFbmFibGVkKCkgPyAxIDogMCksXG4gICAgICAgICAgICBiX2F2X2Zvcm1hdDogYW5hbHl0aWNzSGVscGVyLmdldEF2Rm9ybWF0RnJvbUtpbmQoZGF0YS5raW5kKSxcbiAgICAgICAgICAgIGJfYXZfcGxpc3Q6ICdtdWx0aScsXG4gICAgICAgICAgICBiX2F2X21ldGhvZDogJ3N0cmVhbScsXG4gICAgICAgICAgICBiX2F2X3NvdXJjZTogJ2JiYycsXG4gICAgICAgICAgICBjMjogYmJjZG90Y29tLmNvbmZpZy5nZXRBbmFseXRpY3NBY2N0SWQoKSxcbiAgICAgICAgICAgIG5zX3N0X3BsOiAodHlwZW9mIGRhdGEubWVkaWFOYW1lICE9PSAndW5kZWZpbmVkJyA/IHNhbml0aXNlUGFnZU5hbWUoZGF0YS5tZWRpYU5hbWUpIDogVU5LTk9XTilcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc3RyZWFtU2Vuc2VTZXR0ZXIoJ3BsYXlsaXN0JywgcGxheWxpc3RLZXlWYWx1ZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgYWN0aW9ucyB0aGF0IGluaXRpYXRlZCB2aWRlbyBwbGF5OlxuICAgICAqIGNwZm0gOiBDb250aW51b3VzIFBsYXksIGZpcnN0IHZpZGVvLCB1c2VyIGluaXRpYXRlZFxuICAgICAqIGNwZiAgOiBDb250aW51b3VzIFBsYXksIGZpcnN0IHZpZGVvLCBhdXRvIHN0YXJ0ZWRcbiAgICAgKiBjcCAgIDogQ29udGludW91cyBQbGF5LCBub3QgZmlyc3QgdmlkZW9cbiAgICAgKiBhcCAgIDogTm90IENvbnRpbnVvdXMgUGxheSwgYXV0byBzdGFydGVkXG4gICAgICogbXAgICA6IE5vdCBDb250aW51b3VzIFBsYXksIHVzZXIgaW5pdGlhdGVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IHZpZGVvUGxheXNBdXRvbWF0aWNhbGx5IC0gV2hldGhlciB0aGUgdmlkZW8gcGxheXMgYXV0b21hdGljYWxseS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBjcCB8IGNwZiB8IGNwZm0gfCBhcCB8IG1wXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0QVZBY3Rpb24odmlkZW9QbGF5c0F1dG9tYXRpY2FsbHkpIHtcbiAgICAgICAgdmFyIGF2X2FjdGlvbjtcbiAgICAgICAgaWYgKGNvbmZpZy5pc0NvbnRpbnVvdXNQbGF5UGFnZSgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wbGF5bGlzdENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgYXZfYWN0aW9uID0gdmlkZW9QbGF5c0F1dG9tYXRpY2FsbHkgPyAnY3BmJyA6ICdjcGZtJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXZfYWN0aW9uID0gJ2NwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF2X2FjdGlvbiA9IHZpZGVvUGxheXNBdXRvbWF0aWNhbGx5ID8gJ2FwJyA6ICdtcCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXZfYWN0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcXVlc3Q6XG4gICAgICogc3RyZWFtU2Vuc2Uubm90aWZ5KCdwbGF5Jywge30sIGJ1LnNlY29uZHNUb01pbGxpU2Vjb25kcyhkYXRhLm1lZGlhT2Zmc2V0KSk7XG4gICAgICovXG4gICAgX3N0cmVhbVNlbnNlTm90aWZ5KGV2ZW50LCBoZWFkUG9zaXRpb25TZWNvbmRzLCBldmVudFByb3BzKSB7XG4gICAgICAgIGlmICghY29uZmlnLmlzQ29tU2NvcmVFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIGxvZygnYmJjZG90Y29tLmFuYWx5dGljcyBkaWQgbm90IGRvIHRyYWNraW5nIGJlY2F1c2UgaXNDb21TY29yZUVuYWJsZWQ9ZmFsc2UnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5zdHJlYW1TZW5zZSkge1xuICAgICAgICAgICAgbG9nLmVycm9yKCdiYmNkb3Rjb20uYW5hbHl0aWNzIGRpZCBub3QgZG8gdHJhY2tpbmcgYmVjYXVzZSBzdHJlYW1TZW5zZSBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnRQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50UHJvcHMpO1xuXG4gICAgICAgIGlmIChldmVudCA9PT0gJ3NlZWsnKSB7XG4gICAgICAgICAgICAvLyBTZWVrIGV2ZW50IGlzIGFjdHVhbGx5IGEgXCJwYXVzZVwiIGV2ZW50IHdpdGggdGhlIFwibnNfc3RfdWk9c2Vla1wiIHByb3BlcnR5XG4gICAgICAgICAgICBldmVudCA9ICdwYXVzZSc7XG4gICAgICAgICAgICBldmVudFByb3BzLm5zX3N0X3VpID0gJ3NlZWsnO1xuICAgICAgICAgICAgbG9nKCdjb21TY29yZSBzdHJlYW1TZW5zZU5vdGlmeSBcInNlZWtcIicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuc18uU3RyZWFtU2Vuc2UuUGxheWVyRXZlbnRzW2V2ZW50LnRvVXBwZXJDYXNlKCldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbG9nLndhcm4oJ0ludmFsaWQgc3RyZWFtU2Vuc2Uubm90aWZ5KCkgZXZlbnQgXCInICsgZXZlbnQgKyAnXCInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuc0V2ZW50ID0gbnNfLlN0cmVhbVNlbnNlLlBsYXllckV2ZW50c1tldmVudC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgdGhpcy5zdHJlYW1TZW5zZS5ub3RpZnkobnNFdmVudCwgZXZlbnRQcm9wcywgdXRpbHMuc2Vjb25kc1RvTWlsbGlTZWNvbmRzKGhlYWRQb3NpdGlvblNlY29uZHMpKTtcbiAgICAgICAgdGhpcy52aWRlb0V2ZW50cy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdub3RpZnknLFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgcHJvcHM6IGV2ZW50UHJvcHMsXG4gICAgICAgICAgICBuc0V2ZW50OiBuc0V2ZW50LFxuICAgICAgICAgICAgaGVhZFBvc2l0aW9uU2Vjb25kczogaGVhZFBvc2l0aW9uU2Vjb25kc1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfc3RyZWFtU2Vuc2VTZXR0ZXIobWV0aG9kLCBrZXlWYWx1ZXMpIHtcbiAgICAgICAgaWYgKCFjb25maWcuaXNDb21TY29yZUVuYWJsZWQoKSkge1xuICAgICAgICAgICAgbG9nKCdiYmNkb3Rjb20uYW5hbHl0aWNzIGRpZCBub3QgZG8gdHJhY2tpbmcgYmVjYXVzZSBpc0NvbVNjb3JlRW5hYmxlZD1mYWxzZScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLnN0cmVhbVNlbnNlKSB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoJ2JiY2RvdGNvbS5hbmFseXRpY3MgZGlkIG5vdCBkbyB0cmFja2luZyBiZWNhdXNlIHN0cmVhbVNlbnNlIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAga2V5VmFsdWVzID0gc2FuaXRpc2VLZXlWYWx1ZXMoa2V5VmFsdWVzKTtcbiAgICAgICAgbG9nKCdjb21TY29yZSBzdHJlYW1TZW5zZVNldHRlciBtZXRob2QgXCInICsgbWV0aG9kICsgJ1wiIGtleVZhbHVlczogJywga2V5VmFsdWVzKTtcblxuICAgICAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgICAgICAgY2FzZSAnbGFiZWxzJzpcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbVNlbnNlLnNldExhYmVscyhrZXlWYWx1ZXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncGxheWxpc3QnOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtU2Vuc2Uuc2V0UGxheWxpc3Qoa2V5VmFsdWVzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NsaXAnOlxuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtU2Vuc2Uuc2V0Q2xpcChrZXlWYWx1ZXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBsb2cud2FybignVW5rbm93biBtZXRob2QgXCInICsgbWV0aG9kICsgJ1wiIGZvciBzdHJlYW1TZW5zZVNldHRlcigpJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZpZGVvRXZlbnRzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3NldCcsXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIGtleVZhbHVlczoga2V5VmFsdWVzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9nZXRDbGlwS2V5VmFsdWVzKGRhdGEsIHBsYXllckV2ZW50VHlwZSkge1xuICAgICAgICBpZiAoIWNvbmZpZy5pc0NvbVNjb3JlRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICBsb2coJ2JiY2RvdGNvbS5hbmFseXRpY3MgZGlkIG5vdCBkbyB0cmFja2luZyBiZWNhdXNlIGlzQ29tU2NvcmVFbmFibGVkPWZhbHNlJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc3RyZWFtU2Vuc2UpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcignYmJjZG90Y29tLmFuYWx5dGljcyBkaWQgbm90IGRvIHRyYWNraW5nIGJlY2F1c2Ugc3RyZWFtU2Vuc2UgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtZWRpYUxlbmd0aCA9IHR5cGVvZiBkYXRhLm1lZGlhTGVuZ3RoICE9PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgICB1dGlscy5zZWNvbmRzVG9NaWxsaVNlY29uZHMoZGF0YS5tZWRpYUxlbmd0aCkgOiAwO1xuICAgICAgICB2YXIgbWVkaWFOYW1lID0gJyc7XG4gICAgICAgIHZhciBhZElkID0gKHR5cGVvZiBkYXRhLmFkSWQgIT09ICd1bmRlZmluZWQnID8gZGF0YS5hZElkIDogJycpXG5cbiAgICAgICAgaWYgKG1lZGlhTGVuZ3RoID09PSAwIHx8IGlzTmFOKG1lZGlhTGVuZ3RoKSkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIG1lZGlhLWxlbmd0aCBsYWJlbHMgZnJvbSByZXF1ZXN0IHdoZW4gemVyb1xuICAgICAgICAgICAgbWVkaWFMZW5ndGggPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwbGF5ZXJFdmVudFR5cGUgPT09ICdhZHZlcnQnKSB7XG4gICAgICAgICAgICBtZWRpYU5hbWUgPSAncHJlLXJvbGx8JyArIGFkSWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5tZWRpYU5hbWUpIHtcbiAgICAgICAgICAgIG1lZGlhTmFtZSA9IHNhbml0aXNlUGFnZU5hbWUoZGF0YS5tZWRpYU5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleVZhbHVlcyA9IHtcbiAgICAgICAgICAgICdiX2F2X2FkaWQnOiBhZElkLFxuICAgICAgICAgICAgJ2JfYXZfZGF0ZSc6IFVOS05PV04sICAgICAvLyBAdG9kbyByZXF1aXJlIGFkZGl0aW9uYWwgaW5mbyBmcm9tIHBsYXllclxuICAgICAgICAgICAgJ25zX3N0X2FkJzogKHBsYXllckV2ZW50VHlwZSA9PT0gJ2FkdmVydCcgPyAncHJlLXJvbGwnIDogJycpLCAvLyBBZHZlcnRpc2VtZW50IEZsYWdcbiAgICAgICAgICAgICduc19zdF9hZGlkJzogYWRJZCwgLy8gQWQgSUQgLSBOb3QgaW4gQ29tU2NvcmUgRG9jcz9cbiAgICAgICAgICAgICduc19zdF9jaSc6IG1lZGlhTmFtZSwgLy8gQ29udGVudCBJRFxuICAgICAgICAgICAgJ25zX3N0X2NsJzogbWVkaWFMZW5ndGgsIC8vIENsaXAgTGVuZ3RoXG4gICAgICAgICAgICAnbnNfc3RfY24nOiAodGhpcy52aWRlb1ByZXJvbGxXYXNQbGF5ZWQgPyAyIDogMSksIC8vIENsaXAgTnVtYmVyXG4gICAgICAgICAgICAnbnNfc3RfY3QnOiAocGxheWVyRXZlbnRUeXBlID09PSAnYWR2ZXJ0JyA/ICd2YTExJyA6IChkYXRhLmlzTGl2ZSA/ICd2YzEzJyA6ICd2YzExJykpLCAvLyBDbGFzc2lmaWNhdGlvbiBUeXBlXG4gICAgICAgICAgICAnbnNfc3RfZWwnOiBtZWRpYUxlbmd0aCwgLy8gRXBpc29kZSBMZW5ndGhcbiAgICAgICAgICAgICduc19zdF9saSc6IChwbGF5ZXJFdmVudFR5cGUgIT09ICdhZHZlcnQnICYmIGRhdGEuaXNMaXZlID8gMSA6ICcnKSwgLy8gTGl2ZSBGbGFnXG4gICAgICAgICAgICAnbnNfc3RfcG4nOiAxLCAvLyBQYXJ0IE51bWJlclxuICAgICAgICAgICAgJ25zX3N0X3ByJzogbWVkaWFOYW1lLCAvLyBQcm9ncmFtIFRpdGxlXG4gICAgICAgICAgICAnbnNfc3RfcHUnOiAnYmJjJywgLy8gUHVibGlzaGVyIEJyYW5kIE5hbWVcbiAgICAgICAgICAgICduc19zdF90cCc6IDEsIC8vIFRvdGFsIFBhcnRzXG4gICAgICAgICAgICAnbnNfc3RfdHknOiAocGxheWVyRXZlbnRUeXBlID09PSAnYWR2ZXJ0JyA/ICdhZCcgOiAoZGF0YS5pc0xpdmUgPyAnbGl2ZScgOiAndm9kJykpIC8vIFN0cmVhbSBUeXBlXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGtleVZhbHVlcztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBTdHJlYW1TZW5zZSgpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9zdHJlYW1TZW5zZS5qc1xuICoqLyIsImNvbnN0IG92ZXJyaWRlcyA9IG5ldyBNYXA7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRPdmVycmlkZShrZXksIHZhbHVlKSB7XG4gICAgb3ZlcnJpZGVzLnNldChrZXksIHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE92ZXJyaWRlcygpIHtcbiAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICBvdmVycmlkZXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHZhbHVlO1xuICAgIH0pXG5cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvbWV0cmljcy9vdmVycmlkZXMuanNcbiAqKi8iLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5pbXBvcnQgZ2V0VXNlclRyYWNraW5nQ29va2llIGZyb20gJ2FuYWx5dGljcy91dGlscy9nZXRVc2VyVHJhY2tpbmdDb29raWUnO1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTU0NIZWxwZXIoKSB7XG4gICAgdmFyIGFuYWx5dGljc0NvbmZpZyA9IGNvbmZpZy5nZXRBbmFseXRpY3NDb25maWcoKTtcblxuICAgIHRoaXMuc3NjSG9zdCA9IHtcbiAgICAgICAgaHR0cDogYW5hbHl0aWNzQ29uZmlnLlNTQy5IVFRQLFxuICAgICAgICBodHRwczogYW5hbHl0aWNzQ29uZmlnLlNTQy5IVFRQU1xuICAgIH07XG5cbiAgICB0aGlzLmNvbVNjb3JlSG9zdCA9IHtcbiAgICAgICAgaHR0cDogYW5hbHl0aWNzQ29uZmlnLkNPTVNDT1JFLkhUVFAsXG4gICAgICAgIGh0dHBzOiBhbmFseXRpY3NDb25maWcuQ09NU0NPUkUuSFRUUFNcbiAgICB9O1xufVxuXG5TU0NIZWxwZXIucHJvdG90eXBlLmdldEFuYWx5dGljc0xvY2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmhhc1VzZXJUcmFja2luZ0Nvb2tpZSgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbVNjb3JlQmFzZVVybCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNzY0Jhc2VVcmwoKTtcbiAgICB9XG59O1xuXG5TU0NIZWxwZXIucHJvdG90eXBlLmlzU2VjdXJlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjb25maWcuZ2V0V2luZG93TG9jYXRpb24oKS5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG59O1xuXG5TU0NIZWxwZXIucHJvdG90eXBlLmhhc1VzZXJUcmFja2luZ0Nvb2tpZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0VXNlclRyYWNraW5nQ29va2llKCkgIT09IGZhbHNlO1xufTtcblxuU1NDSGVscGVyLnByb3RvdHlwZS5nZXRDb21TY29yZUJhc2VVcmwgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNTZWN1cmUoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21TY29yZUhvc3QuaHR0cHM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tU2NvcmVIb3N0Lmh0dHA7XG4gICAgfVxufTtcblxuU1NDSGVscGVyLnByb3RvdHlwZS5nZXRTc2NCYXNlVXJsID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzU2VjdXJlKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3NjSG9zdC5odHRwcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5zc2NIb3N0Lmh0dHA7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU1NDSGVscGVyO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9zc2NIZWxwZXIuanNcbiAqKi8iLCIvKipcbiAqIEBtb2R1bGUgc3RhdHNcbiAqXG4gKiBMaXN0ZW5zIHRvIGV2ZW50cyByYWlzZWQgYnkgYmJjZG90Y29tIGFuZCBtYWludGFpbnMgYW4gaW1tdXRhYmxlIGJiY2RvdGNvbS5zdGF0cy5kYXRhIG9iamVjdFxuICogd2l0aCB1c2VmdWwgaW5mb3JtYXRpb24gb24gZm9yIHRyYWNraW5nLlxuICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgbWFpbiBzdGF0cyBtb2R1bGUgb2JqZWN0LiBUaGlzIGlzIHdoYXQgaXMgcmV0dXJuZWQgb3IgZXhwb3J0ZWQgYnkgdGhpcyBtb2R1bGUuXG4gKiBUaGUgaW5pdCBmdW5jdGlvbiBhbmQgZGF0YSBwcm9wZXJ0eSBhcmUgYm90aCBleHBvc2VkIHB1YmxpY2x5IGFsdGhvdWdoIHRoZSBkYXRhIHByb3BlcnR5XG4gKiBpcyBmcm96ZW4gc28gY2Fubm90IGJlIGRpcmVjdGx5IG1hbmlwdWxhdGVkLlxuICpcbiAqIEB0eXBlIHt7ZGF0YToge30sIGluaXQ6IEZ1bmN0aW9ufX1cbiAqL1xudmFyIHN0YXRzID0ge1xuICAgIGRhdGE6IHt9XG59O1xuXG4vKipcbiAqIEluaXRpYWwgdmFsdWVzIHdoaWNoIGFyZSBleHBvc2VkIG9uIHRoZSBiYmNkb3Rjb20uc3RhdHMuZGF0YSBwcm9wZXJ0eVxuICpcbiAqIEB0eXBlIHt7YWRzUmVxdWVzdGVkOiBBcnJheSwgYWRzUmVuZGVyZWQ6IEFycmF5fX1cbiAqL1xudmFyIGluaXRpYWxEYXRhID0ge1xuICAgIGFkc1JlcXVlc3RlZDogW10sXG4gICAgYWRzUmVuZGVyZWQ6IFtdLFxuICAgIGFkc0VtcHR5OiBbXSxcbiAgICBhZHNTbG90czogW10sXG4gICAgYWRzU2h1dDogW11cbn07XG5cbi8qKlxuICogTWFwIG9mIGhhbmRsZXJzIHdoaWNoIGlzIHVwZGF0ZWQgZXZlcnkgdGltZSBiaW5kKCkgaXMgY2FsbGVkLiBXZSBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZXNlIHNvIHdlXG4gKiBjYW4gY2xlYW4gdXAgYWZ0ZXIgb3Vyc2VsdmVzIGFuZCB1bmJpbmQgYWxsIG9mIG91ciBsaXN0ZW5lcnNcbiAqXG4gKiBAdHlwZSB7e319XG4gKi9cbnZhciBoYW5kbGVycyA9IHt9O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBtYXAgb2YgZXZlbnQgbmFtZXMgdG8gYXJyYXkgb2YgaGFuZGxlcnMgYW5kIHVuYmluZHMgdGhlbSBhbGwuXG4gKlxuICogQHBhcmFtIGV2ZW50SGFuZGxlcnNcbiAqL1xuZnVuY3Rpb24gdW5iaW5kKGV2ZW50SGFuZGxlcnMpIHtcbiAgICBPYmplY3Qua2V5cyhldmVudEhhbmRsZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudEhhbmRsZXJzW2V2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICBiYmNkb3Rjb20ucHVic3ViLm9mZihldmVudCwgaGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gZXZlbnQgbmFtZSBvciBhcnJheSBvZiBldmVudCBuYW1lcyBhbmQgYSByZWR1Y2VyIGZ1bmN0aW9uLiBJdCBzZXRzIHVwIGEgYmluZGluZyB0b1xuICogdGhlIGV2ZW50KHMpIGdpdmVuIGFuZCBjYWxscyB0aGUgcmVkdWNlciBmdW5jdGlvbiBmb3IgZWFjaCBldmVudCBwYXNzaW5nIGluIHRoZSBjdXJyZW50IGJiY2RvdGNvbS5zdGF0cy5kYXRhXG4gKiBvYmplY3QgYW5kIHRoZSBhcmd1bWVudHMgZ2l2ZW4gdGhlbiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZC5cbiAqXG4gKiBFYWNoIGJvdW5kIGV2ZW50L3JlZHVjZXIgY29tYm8gaXMgc3RvcmVkIGludG8gdGhlIGhhbmRsZXJzIG1hcCBhbmQgdGhlbiB1bmJvdW5kIGlmIGluaXQgaXMgY2FsbGVkIGFnYWluLlxuICpcbiAqIEBwYXJhbSBldmVudHNcbiAqIEBwYXJhbSByZWR1Y2VyXG4gKi9cbmZ1bmN0aW9uIGJpbmQoZXZlbnRzLCByZWR1Y2VyKSB7XG4gICAgdmFyIG5vcm1hbGlzZWRFdmVudHMgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBbZXZlbnRzXTtcblxuICAgIG5vcm1hbGlzZWRFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV4dCA9IE9iamVjdC5mcmVlemUocmVkdWNlci5hcHBseShudWxsLCBbc3RhdHMuZGF0YV0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKSk7XG4gICAgICAgICAgICBzdGF0cy5kYXRhID0gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICBiYmNkb3Rjb20ucHVic3ViLm9uKGV2ZW50LCBoYW5kbGVyKTtcbiAgICAgICAgaGFuZGxlcnNbZXZlbnRdID0gKGhhbmRsZXJzW2V2ZW50XSB8fCBbXSkuY29uY2F0KGhhbmRsZXIpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEluaXRpYWxpc2UgdGhlIHN0YXRzIG1vZHVsZSBhbmQgKHJlKWJpbmQgdGhlIGV2ZW50IGxpc3RlbmVycy4gV2hlbiBjYWxsZWQgdGhpcyBtZXRob2Qgd2lsbCByZXN0b3JlXG4gKiBiYmNkb3Rjb20uc3RhdHMuZGF0YSB0byBpdCdzIGluaXRpYWxEYXRhLCB1bmJpbmQgYW55IGJvdW5kIGV2ZW50IGxpc3RlbmVycyBhbmQgdGhlbiBiaW5kIGFsbFxuICogb2YgdGhlIGFwcHJvcHJpYXRlIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBUaGUgaGFuZGxlciBmdW5jdGlvbnMgd2hpY2ggYXJlIHNldCB1cCB1c2luZyBiaW5kKCkgdGFrZSB0d28gKG9yIG1vcmUpXG4gKiBhcmd1bWVudHMsIHRoZSBjdXJyZW50IGRhdGEgb2JqZWN0LCBhbmQgYW55IGFyZ3VtZW50cyBwYXNzZWQgaW4gYnkgdGhlIGV2ZW50IHRyaWdnZXIuIFRoZXNlIGZ1bmN0aW9uc1xuICogc2hvdWxkIHJldHVybiBhIG5ldyBkYXRhIG9iamVjdCBiYXNlZCBvbiB0aGUgY3VycmVudCBkYXRhIHN0YXRlIGFuZCB0aGUgZXZlbnQgYXJndW1lbnRzLiBUaGV5IHNob3VsZFxuICogbm90IG1vZGlmeSB0aGUgZGF0YSBvYmplY3QsIGJ1dCBpbnN0ZWFkIHJldHVybiBhIG5ldyBtb2RpZmllZCBvYmplY3QuXG4gKi9cbnN0YXRzLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuXG4gICAgc3RhdHMuZGF0YSA9IE9iamVjdC5mcmVlemUoaW5pdGlhbERhdGEpO1xuICAgIHVuYmluZChoYW5kbGVycyk7XG5cbiAgICBiaW5kKCdiYmNkb3Rjb206aW5pdDpjb21wbGV0ZScsIGZ1bmN0aW9uIChkYXRhLCBpbml0KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkYXRhLCBpbml0LnN0YXRzLCB7XG4gICAgICAgICAgICBpbXBsZW1lbnRhdGlvbjogaW5pdC5zdGF0cy5pc0FzeW5jID8gJ2dwdC1hc3luYycgOiAnZ3B0J1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGJpbmQoJ2FkczpyZXF1ZXN0ZWQnLCBmdW5jdGlvbiAoZGF0YSwgc2xvdHMpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgICAgICAgIGFkc1JlcXVlc3RlZDogc2xvdHNcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBiaW5kKCdhZDpyZW5kZXI6Y29tcGxldGUnLCBmdW5jdGlvbiAoZGF0YSwgYWRJZCwgaXNFbXB0eSkge1xuICAgICAgICBpZiAoZGF0YS5hZHNSZW5kZXJlZC5pbmRleE9mKGFkSWQpID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgICAgICAgIGFkc1JlbmRlcmVkOiBkYXRhLmFkc1JlbmRlcmVkLmNvbmNhdChhZElkKSxcbiAgICAgICAgICAgIGFkc0VtcHR5OiBpc0VtcHR5ID8gZGF0YS5hZHNFbXB0eS5jb25jYXQoYWRJZCkgOiBkYXRhLmFkc0VtcHR5XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgYmluZCgnYWQ6cmVuZGVyJywgZnVuY3Rpb24gKGRhdGEsIGFkSWQpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgICAgICAgIGFkc1Nsb3RzOiBkYXRhLmFkc1Nsb3RzLmNvbmNhdChhZElkKVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGJpbmQoJ2FkOnJlbmRlcjpjbG9zZScsIGZ1bmN0aW9uIChkYXRhLCBhZElkKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkYXRhLCB7XG4gICAgICAgICAgICBhZHNTaHV0OiBkYXRhLmFkc1NodXQuY29uY2F0KGFkSWQpXG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdGF0cztcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9zdGF0cy5qc1xuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWRkTG9hZEV2ZW50IChmdW5jKSB7XG4gICAgdmFyIHdpbmRvd09ubG9hZCA9IHdpbmRvdy5vbmxvYWQ7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cub25sb2FkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAod2luZG93T25sb2FkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93T25sb2FkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jKCk7XG4gICAgICAgIH07XG4gICAgfVxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9ldmVudHMuanNcbiAqKi8iLCJ2YXIgY29uZmlnID0gcmVxdWlyZSgnY29uZmlnJyk7XG52YXIgYWRSZWdpc3RlciA9IHJlcXVpcmUoJ2FkdmVydHMvYWRSZWdpc3RlcicpO1xudmFyIG91dGJyYWluUmVuZGVyZXIgPSByZXF1aXJlKCdhZHZlcnRzL291dGJyYWluUmVuZGVyZXInKTtcblxudmFyIGxvYWRlZCA9IFtdO1xudmFyIGlzTmllbHNlbkxvYWRlZEludGVydmFsO1xuXG52YXIgbG9hZE5pZWxzZW5BdSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIG5vbF90ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBub2xfdCh7Y2lkOiBcImF1LWJiY1wiLCBjb250ZW50OiBcIjBcIiwgc2VydmVyOiBcInNlY3VyZS1hdVwifSkucmVjb3JkKCkucG9zdCgpO1xuICAgICAgICBjbGVhckludGVydmFsKGlzTmllbHNlbkxvYWRlZEludGVydmFsKTtcbiAgICB9XG59O1xuXG52YXIgbG9hZE5pZWxzZW5OeiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIG5vbF90ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBub2xfdCh7Y2lkOiBcIm56LWJiY1wiLCBjb250ZW50OiBcIjBcIiwgc2VydmVyOiBcInNlY3VyZS1uelwifSkucmVjb3JkKCkucG9zdCgpO1xuICAgICAgICBjbGVhckludGVydmFsKGlzTmllbHNlbkxvYWRlZEludGVydmFsKTtcbiAgICB9XG59O1xuXG52YXIgbG9hZFNjcmlwdCA9IGZ1bmN0aW9uIChzcmMpIHtcbiAgICB2YXIgc2NyaXB0LCBib2R5O1xuICAgIC8qIExvYWQgdGhlIGxpYnJhcnksIGFzeW5jaHJvbm91c2x5LiAqL1xuICAgIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICBzY3JpcHQuc3JjID0gc3JjO1xuICAgIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgIGJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHdyaXRlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5pc0FjdGl2ZSgnYW5hbHl0aWNzJykpIHtcblxuICAgICAgICAgICAgLyogTmllbHNlbiAoQVUpIFNpdGVDZW5zdXMgVjYuMCAqL1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5pc0FjdGl2ZSgnbmllbHNlbi1hdScpKSB7XG4gICAgICAgICAgICAgICAgLyogQ09QWVJJR0hUIDIwMDkgTmllbHNlbiBPbmxpbmUgKi9cbiAgICAgICAgICAgICAgICBsb2FkU2NyaXB0KCgnaHR0cHM6JyA9PT0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgPyAnaHR0cHM6JyA6ICdodHRwOicpICtcbiAgICAgICAgICAgICAgICAgICAgJy8vc2VjdXJlLWF1Lmltcndvcmxkd2lkZS5jb20vdjYwLmpzJyk7XG4gICAgICAgICAgICAgICAgbG9hZGVkLnB1c2goJ25pZWxzZW5fYXUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogTmllbHNlbiAoTlopIFNpdGVDZW5zdXMgVjYuMCAqL1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5pc0FjdGl2ZSgnbmllbHNlbi1ueicpKSB7XG4gICAgICAgICAgICAgICAgLyogQ09QWVJJR0hUIDIwMDkgTmllbHNlbiBPbmxpbmUgKi9cbiAgICAgICAgICAgICAgICBsb2FkU2NyaXB0KCgnaHR0cHM6JyA9PT0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgPyAnaHR0cHM6JyA6ICdodHRwOicpICtcbiAgICAgICAgICAgICAgICAgICAgJy8vc2VjdXJlLW56Lmltcndvcmxkd2lkZS5jb20vdjYwLmpzJyk7XG4gICAgICAgICAgICAgICAgbG9hZGVkLnB1c2goJ25pZWxzZW5fbnonKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogTmllbHNlbiAoVVMpIFNpdGVDZW5zdXMgVjYuMCAqL1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5pc0FjdGl2ZSgnbmllbHNlbi11cycpKSB7XG4gICAgICAgICAgICAgICAgLyogQ09QWVJJR0hUIDIwMTAgTmllbHNlbiBPbmxpbmUgKi9cbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBJbWFnZSgxLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZC5vbmVycm9yID0gZC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLm9uZXJyb3IgPSBkLm9ubG9hZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGQuc3JjID0gWygnaHR0cHM6JyA9PT0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgPyAnaHR0cHM6JyA6ICdodHRwOicpICtcbiAgICAgICAgICAgICAgICAgICAgXCIvL3NlY3VyZS11cy5pbXJ3b3JsZHdpZGUuY29tL2NnaS1iaW4vbT9jaT11cy04MDQ3ODloJmFtcDtjZz0wJmFtcDtjYz0xJmFtcDtzaT1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSSh3aW5kb3cubG9jYXRpb24uaHJlZiksXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiZhbXA7cnA9XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUkkoZG9jdW1lbnQucmVmZXJyZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCImYW1wO3RzPWNvbXBhY3QmYW1wO3JuZD1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCldLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIH0oKSk7XG4gICAgICAgICAgICAgICAgbG9hZGVkLnB1c2goJ25pZWxzZW5fdXMnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogRWZmZWN0aXZlIE1lYXN1cmUgKi9cbiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICAgICAgZW0udHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICAgICAgICAgIGVtLmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbS5zcmMgPSAoJ2h0dHBzOicgPT09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID8gJ2h0dHBzOi8vbWUtc3NsJyA6ICdodHRwOi8vbWUtY2RuJykgKyAnLmVmZmVjdGl2ZW1lYXN1cmUubmV0L2VtLmpzJztcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgICAgICAgICAgICAgcy5hcHBlbmRDaGlsZChlbSk7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgbG9hZGVkLnB1c2goJ2VmZmVjdGl2ZV9tZWFzdXJlJyk7XG5cbiAgICAgICAgICAgIC8qIE91dGJyYWluIFRyYWNraW5nICovXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFkUmVnaXN0ZXIuZ2V0QWQoJ291dGJyYWluX3RyXzEnKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBvdXRicmFpblJlbmRlcmVyLnJlbmRlckFkKCdvdXRicmFpbl90cl8xJyk7XG4gICAgICAgICAgICAgICAgbG9hZGVkLnB1c2goJ291dGJyYWluJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHBvc3RXcml0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY29uZmlnLmlzQWN0aXZlKCdhbmFseXRpY3MnKSkge1xuXG4gICAgICAgICAgICAvKiBOaWVsc2VuIChBVSkgU2l0ZUNlbnN1cyBWNi4wICovXG4gICAgICAgICAgICBpZiAoY29uZmlnLmlzQWN0aXZlKCduaWVsc2VuLWF1JykpIHtcbiAgICAgICAgICAgICAgICBpc05pZWxzZW5Mb2FkZWRJbnRlcnZhbCA9IHNldEludGVydmFsKGxvYWROaWVsc2VuQXUsIDUwMCk7XG4gICAgICAgICAgICAgICAgbG9hZGVkLnB1c2goJ25pZWxzZW5fYXUtcG9zdFdyaXRlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIE5pZWxzZW4gKE5aKSBTaXRlQ2Vuc3VzIFY2LjAgKi9cbiAgICAgICAgICAgIGlmIChjb25maWcuaXNBY3RpdmUoJ25pZWxzZW4tbnonKSkge1xuICAgICAgICAgICAgICAgIGlzTmllbHNlbkxvYWRlZEludGVydmFsID0gc2V0SW50ZXJ2YWwobG9hZE5pZWxzZW5OeiwgNTAwKTtcbiAgICAgICAgICAgICAgICBsb2FkZWQucHVzaCgnbmllbHNlbl9uei1wb3N0V3JpdGUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZyBvbmx5LlxuICAgICAqL1xuICAgIGdldExvYWRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbG9hZGVkO1xuICAgIH0sXG4gICAgcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2FkZWQgPSBbXTtcbiAgICB9XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogL2RhdGEvaHVkc29uL3Rlc3QvcGFsL2pvYnMvYmJjZG90Y29tLWdpdC93b3Jrc3BhY2UvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2N1cnJlbmN5UHJvdmlkZXJzLmpzXG4gKiovIiwiLypcbiAqIFRoaXMgbWFwcyBhIHNpbXBsZXIgQVBJIGFuZCBjaGVja3MgdGhlIG5lZWRlZCBvYmplY3RzIGV4aXRzXG4gKi9cbnZhciBhZDtcblxuaW1wb3J0IENvbmZpZyBmcm9tICdjb25maWcnO1xuaW1wb3J0IHV0aWxzIGZyb20gJ3V0aWxzJztcbmltcG9ydCBsb2NhbGUgZnJvbSAnbG9jYWxlJztcbmltcG9ydCBTZWN0aW9ucyBmcm9tICdzZWN0aW9ucyc7XG5pbXBvcnQgUHJlZGljYXRlIGZyb20gJ3ByZWRpY2F0ZSc7XG5pbXBvcnQgc2xvdEFzeW5jIGZyb20gJ2FkdmVydHMvc2xvdEFzeW5jJztcbmltcG9ydCBzbG90SW5maW5pdGUgZnJvbSAnYWR2ZXJ0cy9zbG90SW5maW5pdGUnO1xuaW1wb3J0IGxheW91dCBmcm9tICdhZHZlcnRzL2xheW91dCc7XG5pbXBvcnQgc2xvdCBmcm9tICdhZHZlcnRzL3Nsb3QnO1xuaW1wb3J0IGFkUmVnaXN0ZXIgZnJvbSAnYWR2ZXJ0cy9hZFJlZ2lzdGVyJztcbmltcG9ydCBBZFVuaXQgZnJvbSAnYWR2ZXJ0cy9hZFVuaXQnO1xuaW1wb3J0IGtleVZhbHVlcyBmcm9tICdhZHZlcnRzL2tleVZhbHVlcyc7XG5pbXBvcnQgYnJlYWtwb2ludHMgZnJvbSAnYWR2ZXJ0cy9icmVha3BvaW50cyc7XG5pbXBvcnQgZGZwcFJlcXVlc3QgZnJvbSAnYWR2ZXJ0cy9kZnBwUmVxdWVzdCc7XG5pbXBvcnQge2dldEZlYXR1cmUsIGdldEZlYXR1cmVzfSBmcm9tICdjb21tb24vZmVhdHVyZVN3aXRjaCc7XG5cbnZhciBhbmFseXRpY3MgPSByZXF1aXJlKCdhbmFseXRpY3MnKTtcblxudmFyIGFwaSA9IHtcbiAgICBzbG90OiBmdW5jdGlvbiAoYWRJZCwgZ3JvdXBzLCBwcmVsb2FkLCBhZHZlcnRUZXh0LCBzdHViQ3VycmVudFNjcmlwdFRhZykge1xuICAgICAgICBpZiAoYWRJZCAmJiBncm91cHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzbG90KGFkSWQsIGdyb3VwcywgcHJlbG9hZCwgYWR2ZXJ0VGV4dCwgc3R1YkN1cnJlbnRTY3JpcHRUYWcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBzbG90QXN5bmMgKi9cbiAgICBhc3luY1Nsb3Q6IHNsb3RBc3luYyxcbiAgICBzbG90QXN5bmM6IGZ1bmN0aW9uIChhZElkLCBncm91cHMsIHByZWxvYWQsIGFkdmVydFRleHQpIHtcbiAgICAgICAgaWYgKGFkSWQgJiYgZ3JvdXBzKSB7XG4gICAgICAgICAgICByZXR1cm4gc2xvdEFzeW5jKGFkSWQsIGdyb3VwcywgYWR2ZXJ0VGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIGFuIGFuIHRlbXBsYXRlIGFuZCBvcHRpb25hbGx5IHdyaXRlcyBpdCB0byB0aGUgZG9tIHdpdGhpbiAnZWxlbWVudCdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZElkIC0gQWQgU2xvdCBlZyAnbXB1JywgJ25hdGl2ZSdcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBncm91cHMgLSBHcm91cHMgdGhhdCB0aGUgYWQgc2hvdWxkIGRpc3BsYXkgb25cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IFtlbGVtZW50PW51bGxdIC0gRE9NIEVsZW1lbnQgdG8gcmVuZGVyIHRlbXBsYXRlIGluc2lkZVxuICAgICAqIEBwYXJhbSB7Ym9vbH0gW3JlZ2lzdGVyPWZhbHNlXSAtIEluY2x1ZGUgSlMgdGhhdCByZWdpc3RlcnMgYWQgd2l0aCBiYmNkb3Rjb20gbW9kdWxlIChEaXNwbGF5IEFkKVxuICAgICAqL1xuICAgIHNsb3RJbmZpbml0ZTogZnVuY3Rpb24gKGFkSWQsIGdyb3VwcywgZWxlbWVudCwgcmVnaXN0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHNsb3RJbmZpbml0ZShhZElkLCBncm91cHMsIGVsZW1lbnQsIHJlZ2lzdGVyKTtcbiAgICB9LFxuXG4gICAgZ2V0Q3VycmVudEdyb3VwSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGxheW91dC5nZXRDdXJyZW50R3JvdXBJZCgpO1xuICAgIH0sXG5cbiAgICByZWNlaXZlTWVzc2FnZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEZpcnN0IHZhbGlkYXRlIHRoZSBvcmlnaW5cbiAgICAgICAgdmFyIHJlID0gLyh3d3d8bSlcXC57MCwxfSh0ZXN0fGludHxzdGFnZSl7MCwxfVxcLmJiY1xcLmNvbSQvO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICByZS5leGVjKGV2ZW50Lm9yaWdpbikgPT09IG51bGwgJiZcbiAgICAgICAgICAgIGV2ZW50Lm9yaWdpbiAhPT0gXCJodHRwOi8vcGFsLnNhbmRib3guZGV2LmJiYy5jb21cIiAmJlxuICAgICAgICAgICAgZXZlbnQub3JpZ2luICE9PSBcImh0dHA6Ly9tLnNhbmRib3guZGV2LmJiYy5jb21cIlxuICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIE5vdCBmcm9tIGEgdmFsaWQgb3JpZ2luIC0gZG8gbm90aW5nXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGVuIGNoZWNrIHRoYXQgdGhlIGRhdGEgaXMgdmFsaWQgSlNPTlxuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBOb3QgdmFsaWQgSlNPTiAtIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS5zbG90ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gQ2xvc2UgdGhlIHNsb3QgJiBwb3N0IGJhY2sgc3VjY2Vzc1xuICAgICAgICAgICAgYWRSZWdpc3Rlci5nZXRBZChkYXRhLnNsb3QpLmNsb3NlKCk7XG4gICAgICAgICAgICBldmVudC5zb3VyY2UucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe3N1Y2Nlc3M6IHRydWV9KSwgJyonKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWdpc3RlclNsb3Q6IGZ1bmN0aW9uIChpZCwgZ3JvdXBzKSB7XG4gICAgICAgIC8vIFRPRE8gLSBBZGQgYWJpbGl0eSB0byByZWdpc3RlciBzbG90IHdoZW4gYWQgaGFzIG5vdCBiZWVuIHByZSBsb2FkZWRcbiAgICAgICAgdmFyIGdyb3Vwc1N0cmluZyA9IGdyb3Vwcy5qb2luKCdfJyksXG4gICAgICAgICAgICBhZCA9IGFkUmVnaXN0ZXIucmVnaXN0ZXJBZChpZCk7XG4gICAgICAgIGlmIChhZC5pc1ByZWxvYWRlZCgpICYmIGlkICYmIGdyb3Vwcykge1xuICAgICAgICAgICAgbGF5b3V0Lm1vdmVBZCgnYmJjY29tXycgKyBpZCArICdfJyArIGdyb3Vwc1N0cmluZyArICdfcHJlbG9hZCcsICdiYmNjb21fJyArIGlkICsgJ18nICsgZ3JvdXBzU3RyaW5nKTtcbiAgICAgICAgICAgIGFkUmVnaXN0ZXIuZ2V0QWQoaWQpLnNob3coKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbGF5b3V0LnJlc2V0KCk7XG4gICAgfSxcblxuICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWQgPSBhZFJlZ2lzdGVyLmdldEN1cnJlbnRBZCgpO1xuICAgICAgICBpZiAodHlwZW9mIGFkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgYWQuc2hvdygpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGlzQWN0aXZlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBDb25maWcuaXNBY3RpdmUoa2V5KTtcbiAgICB9LFxuXG4gICAgc2V0QWRLZXlWYWx1ZTogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAga2V5VmFsdWVzLnNldChrZXksIHZhbHVlKTtcbiAgICB9LFxuXG4gICAgc2V0QWRVbml0OiBmdW5jdGlvbiAodW5pdCkge1xuICAgICAgICBBZFVuaXQuc2V0QWRVbml0KHVuaXQpO1xuICAgIH0sXG5cbiAgICBzZXRMb2NhbGU6IGZ1bmN0aW9uIChmaWVsZCwgdGV4dCkge1xuICAgICAgICBsb2NhbGUuc2V0KGZpZWxkLCB0ZXh0KTtcbiAgICB9LFxuXG4gICAgYWQ6IGZ1bmN0aW9uIChhZElkKSB7XG4gICAgICAgIHJldHVybiBhZFJlZ2lzdGVyLmdldEFkKGFkSWQpO1xuICAgIH0sXG5cbiAgICBzZXRHcm91cFN0YXJ0V2lkdGg6IGZ1bmN0aW9uIChncm91cCwgd2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIGJyZWFrcG9pbnRzLnNldEdyb3VwU3RhcnQoZ3JvdXAsIHdpZHRoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29uZmlnIHBhc3NlZCBmcm9tIHNlcnZlci1zaWRlIHRoZW4gY29uZmlnIGZyb20gY2xpZW50LXNpZGUgaXMgcGFzc2VkIGludG8gdGhpcyBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29uZiBhcnJheXxvYmplY3QgQ29uZmlndXJhdGlvbiBpdGVtc1xuICAgICAqL1xuICAgIHNldENvbmZpZzogQ29uZmlnLnJlaHlkcmF0ZS5iaW5kKENvbmZpZyksXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhZHMgaXMgdXNlZCBpbiBhc3luY2hyb25vdXMgbW9kZSB0byBhZCBhZGRpdGlvbmFsIGFkcyBhZnRlciBwYWdlIGxvYWRcbiAgICAgKiBUaGlzIGRpZmZlcnMgdG8gcmVmcmVzaGluZyBhIHNsb3Qgd2l0aCBhIG5ldyBhZFxuICAgICAqL1xuICAgIHJlZ2lzdGVyQWQ6IGZ1bmN0aW9uIChhZElkLCBncm91cHMpIHtcbiAgICAgICAgZGZwcFJlcXVlc3QucmVnaXN0ZXJBZChhZElkLCBncm91cHMpO1xuICAgIH0sXG5cbiAgICBnZXRGZWF0dXJlczogZ2V0RmVhdHVyZXMsXG4gICAgZ2V0RmVhdHVyZTogZ2V0RmVhdHVyZSxcblxuICAgIC8qKlxuICAgICAqIFJlZnJlc2ggYWRzIGluIHN5bmNocm9ub3VzIGxvYWRlZCBwYWdlc1xuICAgICAqIFRoZXJlIGlzIGFuIGFzeW5jIHZlcnNpb24gb2YgcmVmcmVzaGluZyBhZHMgaW4gZGZwcFJlcXVlc3QuanNcbiAgICAgKiBUT0RPIC0gUmVtb3ZlIG9uY2UgdXNpbmcgYXN5bmMgdmVyc2lvbiBvZiBHUFRcbiAgICAgKi9cbiAgICByZWZyZXNoQWQ6IGZ1bmN0aW9uIChhZElkLCBzaXplLCBhZHZlcnRUZXh0KSB7XG5cbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBhZFN0cmluZyxcbiAgICAgICAgICAgIGFkSWRQcmVmaXggPSAnYmJjY29tXycsXG4gICAgICAgICAgICBrZXlWYWx1ZVN0cmluZyA9ICcnLFxuICAgICAgICAgICAga2V5VmFsdWVzID0ga2V5VmFsdWVzLmdldEFsbCgpLFxuICAgICAgICAgICAgYWQgPSBhZFJlZ2lzdGVyLmdldEFkKGFkSWQpLFxuICAgICAgICAgICAgYWRTbG90ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWRJZFByZWZpeCArIGFkSWQpLFxuICAgICAgICAgICAgYVRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKSxcbiAgICAgICAgICAgIGlGcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpLFxuICAgICAgICAgICAgYWRJbmZvID0gYWQuZ2V0QWRJbmZvVXJsKCksXG4gICAgICAgICAgICBhZFRleHQgPSBhZC5nZXRBZFRleHQoKTtcblxuICAgICAgICBmb3IgKGkgaW4ga2V5VmFsdWVzKSB7XG4gICAgICAgICAgICBpZiAoa2V5VmFsdWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAga2V5VmFsdWVTdHJpbmcgKz0gJzsnICsgaSArICc9JyArIGtleVZhbHVlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFkU3RyaW5nID0gJ2h0dHA6Ly9hZC5kb3VibGVjbGljay5uZXQnICtcbiAgICAgICAgICAgIEFkVW5pdC5nZXQoKS5yZXBsYWNlKCcvNDgxNycsICcvTjQ4MTcvYWRpJykgK1xuICAgICAgICAgICAgJztzbG90PScgKyBhZElkICtcbiAgICAgICAgICAgICc7c3o9JyArIHNpemUgK1xuICAgICAgICAgICAga2V5VmFsdWVTdHJpbmcgK1xuICAgICAgICAgICAgJztvcmQ9JyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKS5zbGljZSgyLCAxNikgK1xuICAgICAgICAgICAgJzt0aWxlPTEnICtcbiAgICAgICAgICAgICc7aWZyYW1lPXllcz8nO1xuXG4gICAgICAgIGlGcmFtZS5zcmMgPSBhZFN0cmluZztcbiAgICAgICAgaUZyYW1lLndpZHRoID0gc2l6ZS5zcGxpdCgneCcpWzBdO1xuICAgICAgICBpRnJhbWUuaGVpZ2h0ID0gc2l6ZS5zcGxpdCgneCcpWzFdO1xuICAgICAgICBpRnJhbWUuc2Nyb2xsaW5nID0gJ25vJztcbiAgICAgICAgaUZyYW1lLnN0eWxlLmJvcmRlciA9ICdub25lJztcbiAgICAgICAgaUZyYW1lLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cbiAgICAgICAgYVRhZy5pbm5lckhUTUwgPSBhZFRleHQ7XG4gICAgICAgIGFUYWcuaHJlZiA9IGFkSW5mbztcbiAgICAgICAgYVRhZy5jbGFzc05hbWUgPSAnYmJjY29tX3RleHQnO1xuXG4gICAgICAgIGFkU2xvdC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgYWRTbG90LnN0eWxlLndpZHRoID0gc2l6ZS5zcGxpdCgneCcpWzBdICsgJ3B4JztcbiAgICAgICAgYWRTbG90LmNsYXNzTmFtZSA9IGFkU2xvdC5jbGFzc05hbWUucmVwbGFjZSgnYmJjY29tX2Rpc3BsYXlfbm9uZScsICcnKTtcbiAgICAgICAgYWRTbG90LmFwcGVuZENoaWxkKGFUYWcpO1xuICAgICAgICBhZFNsb3QuYXBwZW5kQ2hpbGQoaUZyYW1lKTtcblxuICAgICAgICBhZFJlZ2lzdGVyLmdldEFkKGFkSWQpLm9wZW4oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQW5hbHl0aWNzIHRyYWNraW5nIGJ5IHRoaXJkLXBhcnR5IGFwcHMgKGVnIFZpZGVvIEV4cGVyaWVuY2UpXG4gICAgICovXG4gICAgdHJhY2tFdmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBOb09wXG4gICAgfSxcblxuICAgIHJlSW5pdDogZnVuY3Rpb24gKHBhcmFtcykge1xuXG4gICAgICAgIHZhciB3aW5kb3dEb2N1bWVudCA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogcGFyYW1zLmhlYWRsaW5lLFxuICAgICAgICAgICAgICAgIHJlZmVycmVyOiBwYXJhbXMucmVmZXJyZXIgfHwgJydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cmwgPSBwYXJhbXMudXJsIHx8ICcnLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gbmV3IFByZWRpY2F0ZSgpO1xuXG4gICAgICAgIC8vIFRPRE8gLSBTaG91bGQgbmV3IHRoZXNlIHVwIGluc3RlYWQgb2YgaGF2aW5nIHRvIHJlc2V0IHRoZW1cbiAgICAgICAgU2VjdGlvbnMucigpO1xuICAgICAgICBrZXlWYWx1ZXMucigpO1xuXG4gICAgICAgIGFwaS5zZXRDb25maWcocGFyYW1zKTtcblxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5oZWFkbGluZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHBhcmFtcy5zdW1tYXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcHJlZGljYXRlLnNldChwYXJhbXMuaGVhZGxpbmUgKyAnICcgKyBwYXJhbXMuc3VtbWFyeSk7XG4gICAgICAgIH1cblxuICAgICAgICBTZWN0aW9ucy5idWlsZCh0cnVlLCB1cmwpO1xuXG4gICAgICAgIEFkVW5pdC5pbml0KGxheW91dC5nZXRDbGllbnRXaWR0aCgpLCB1bmRlZmluZWQsIFNlY3Rpb25zLmdldFNlY3Rpb25zKCdhZHZlcnQnKSwgU2VjdGlvbnMuZ2V0U2VjdGlvbnMoKSk7XG5cbiAgICAgICAga2V5VmFsdWVzLmluaXQoXG4gICAgICAgICAgICB1dGlscy5jcmVhdGVXaW5kb3dMb2NhdGlvbih1cmwpLFxuICAgICAgICAgICAgd2luZG93RG9jdW1lbnRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuYXNzZXRUeXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAga2V5VmFsdWVzLnNldCgnYXNzZXRfdHlwZScsIHBhcmFtcy5hc3NldFR5cGUpO1xuICAgICAgICB9XG5cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFwaTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC9kYXRhL2h1ZHNvbi90ZXN0L3BhbC9qb2JzL2JiY2RvdGNvbS1naXQvd29ya3NwYWNlL2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hcGkuanNcbiAqKi8iLCJpbXBvcnQgQ29uZmlnIGZyb20gJ2NvbmZpZyc7XG5pbXBvcnQgRmVhdHVyZSBmcm9tICcuL2ZlYXR1cmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmVhdHVyZShmZWF0dXJlTmFtZSA9IG51bGwpIHtcblxuICAgIGlmIChmZWF0dXJlTmFtZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbmV3IEZlYXR1cmUoe30sIHBhbEVudik7XG4gICAgfVxuICAgIGZlYXR1cmVOYW1lID0gZmVhdHVyZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIGNvbnN0IGZlYXR1cmVzQ29uZmlnID0gQ29uZmlnLmdldEZlYXR1cmVzKCk7XG4gICAgY29uc3QgcGFsRW52ID0gQ29uZmlnLmdldFBhbEVudigpO1xuXG4gICAgY29uc3QgZmVhdHVyZURhdGEgPSAoXG4gICAgICAgIGZlYXR1cmVzQ29uZmlnLmhhc093blByb3BlcnR5KGZlYXR1cmVOYW1lKVxuICAgICkgPyBPYmplY3QuYXNzaWduKHtuYW1lOiBmZWF0dXJlTmFtZX0sIGZlYXR1cmVzQ29uZmlnW2ZlYXR1cmVOYW1lXSkgOiB7bmFtZTogZmVhdHVyZU5hbWV9O1xuXG4gICAgcmV0dXJuIG5ldyBGZWF0dXJlKGZlYXR1cmVEYXRhLCBwYWxFbnYpO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGZWF0dXJlcygpIHtcblxuICAgIGNvbnN0IGZlYXR1cmVzQ29uZmlnID0gQ29uZmlnLmdldEZlYXR1cmVzKCk7XG4gICAgY29uc3QgcGFsRW52ID0gQ29uZmlnLmdldFBhbEVudigpO1xuICAgIGxldCBmZWF0dXJlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgZmVhdHVyZU5hbWUgaW4gZmVhdHVyZXNDb25maWcpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgICovXG4gICAgICAgIGlmIChmZWF0dXJlc0NvbmZpZy5oYXNPd25Qcm9wZXJ0eShmZWF0dXJlTmFtZSkpIHtcbiAgICAgICAgICAgIGZlYXR1cmVzW2ZlYXR1cmVOYW1lXSA9IGdldEZlYXR1cmUoZmVhdHVyZU5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZlYXR1cmVzO1xuXG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvY29tbW9uL2ZlYXR1cmVTd2l0Y2gvaW5kZXguanNcbiAqKi8iLCJpbXBvcnQge1xuICAgIFBBTF9FTlZfTElWRSxcbiAgICBQQUxfRU5WX1NUQUdFLFxuICAgIFBBTF9FTlZfVEVTVCxcbiAgICBQQUxfRU5WX0lOVCxcbiAgICBQQUxfRU5WX1NBTkRCT1hcbn0gZnJvbSAnLi9jb25zdHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGZWF0dXJlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lID0gJ3Vua25vd24tZmVhdHVyZScsXG4gICAgICAgICAgICBlbnZzID0gW10sXG4gICAgICAgICAgICBvbiA9IGZhbHNlLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9LFxuICAgICAgICAgICAgb3ZlcnJpZGUgPSBudWxsXG4gICAgICAgIH0gPSB7fSxcbiAgICAgICAgcGFsRW52ID0gUEFMX0VOVl9MSVZFXG4gICAgKSB7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5lbnZzID0gZW52cztcbiAgICAgICAgdGhpcy5vbiA9IG9uO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm92ZXJyaWRlID0gb3ZlcnJpZGU7XG4gICAgICAgIHRoaXMucGFsRW52ID0gcGFsRW52O1xuXG4gICAgfVxuXG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG5cbiAgICBpc0VuYWJsZWQoZW52aXJvbm1lbnQgPSB0aGlzLnBhbEVudikge1xuICAgICAgICBpZiAodGhpcy5vdmVycmlkZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3ZlcnJpZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM6OmlzRW52aXJvbm1lbnRFbmFibGVkKGVudmlyb25tZW50KSAmJiB0aGlzOjpnZXRPbigpXG4gICAgfVxuXG4gICAgZ2V0T3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucztcbiAgICB9XG5cbiAgICBnZXRPcHRpb24ob3B0aW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uKSA/IG9wdGlvbnNbb3B0aW9uXSA6IG51bGw7XG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIGlzRW52aXJvbm1lbnRFbmFibGVkKGVudmlyb25tZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuZW52cy5pbmNsdWRlcyhlbnZpcm9ubWVudCkgfHwgdGhpcy5lbnZzLmxlbmd0aCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZ2V0T24oKSB7XG4gICAgcmV0dXJuIHRoaXMub247XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAvZGF0YS9odWRzb24vdGVzdC9wYWwvam9icy9iYmNkb3Rjb20tZ2l0L3dvcmtzcGFjZS9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvY29tbW9uL2ZlYXR1cmVTd2l0Y2gvZmVhdHVyZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=